2025-07-04 08:10:05.308 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-07-04 08:10:05.321 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 21708 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 08:10:05.321 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 08:10:05.321 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 08:10:05.465 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-04 08:10:05.465 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-04 08:10:06.002 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 08:10:06.004 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 08:10:06.031 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16 ms. Found 0 Redis repository interfaces.
2025-07-04 08:10:06.207 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$81c5ec25] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 08:10:06.219 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 08:10:06.601 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 08:10:06.601 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 08:10:06.601 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 08:10:06.601 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 08:10:06.606 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 08:10:06.611 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 08:10:06.612 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 08:10:06.612 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 08:10:06.661 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 08:10:06.661 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1196 ms
2025-07-04 08:10:06.666 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 08:10:07.343 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-07-04 08:10:07.368 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-07-04 08:10:07.634 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 08:10:07.634 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 08:10:08.092 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 08:10:08.207 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@1754c215, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5a33cca1, org.springframework.security.web.context.SecurityContextPersistenceFilter@5e4aec1f, org.springframework.security.web.header.HeaderWriterFilter@3da127f5, org.springframework.web.filter.CorsFilter@6185241, org.springframework.security.web.authentication.logout.LogoutFilter@75f95621, com.huang.store.security.JwtAuthenticationTokenFilter@6a9b0b79, com.huang.store.security.CustomAuthenticationFilter@1e4a7cb9, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@1d21e41c, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4fb2f63b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@543c15d0, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@61b82b3a, org.springframework.security.web.session.SessionManagementFilter@378c0338, org.springframework.security.web.access.ExceptionTranslationFilter@1d07c6f7, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@43de1b79]
2025-07-04 08:10:08.456 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 08:10:08.471 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 08:10:08.483 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 08:10:08.489 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 08:10:08.492 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.5 seconds (JVM running for 4.023)
2025-07-04 08:10:08.512 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 08:10:08.522 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:08.523 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 08:10:08.561 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 08:10:08.578 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 08:10:08.581 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 08:10:08.585 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 08:10:08.585 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:08.585 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 08:10:08.588 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 08:10:08.592 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 08:10:08.592 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 08:10:53.841 [http-nio-8080-exec-7] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-04 08:10:53.842 [http-nio-8080-exec-7] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-04 08:10:53.843 [http-nio-8080-exec-7] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-07-04 08:10:53.913 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 08:10:53.913 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:53.913 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 08:10:53.914 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 08:10:53.920 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 08:10:53.922 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:10:53.924 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:53.924 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:10:53.924 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 08:10:53.928 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 08:10:53.929 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:10:53.929 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:53.929 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:10:53.929 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-07-04 08:10:53.929 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:53.929 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-07-04 08:10:53.929 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-07-04 08:10:53.930 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 08:10:53.930 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:53.930 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-07-04 08:10:53.931 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:10:53.932 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:10:53.932 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:53.932 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:10:53.934 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-07-04 08:10:53.934 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:53.935 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-07-04 08:10:53.937 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 08:10:53.942 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-07-04 08:10:53.943 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:10:53.943 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:53.943 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:10:53.949 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 08:10:53.957 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 4
2025-07-04 08:10:53.958 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:10:53.958 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:53.958 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:10:53.958 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 08:10:53.960 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:10:53.961 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:10:53.961 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:53.961 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:10:53.962 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 08:10:53.968 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 5
2025-07-04 08:10:53.968 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:10:53.968 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:53.969 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:10:53.970 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 08:10:53.970 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:10:53.975 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:10:53.975 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:10:53.975 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:10:53.975 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:53.975 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:10:53.976 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:10:53.976 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:53.976 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:10:53.975 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:10:53.976 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 08:10:53.977 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:10:53.978 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:10:53.978 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:10:53.978 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:10:53.978 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:10:53.979 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:10:53.980 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:53.980 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:10:53.980 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:10:53.980 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:10:53.980 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:53.980 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:10:53.980 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:10:53.981 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:10:53.981 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:53.981 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:10:53.981 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 08:10:53.983 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:10:53.983 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:10:53.985 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:10:53.986 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:10:53.986 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:53.986 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:10:53.986 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:10:53.986 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:53.986 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:10:53.986 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:10:53.988 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:10:53.988 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:10:53.988 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:10:53.988 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:53.988 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:10:53.989 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 08:10:53.989 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:10:53.989 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:10:53.989 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:53.989 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:10:53.990 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:10:53.992 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:10:53.992 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:10:53.992 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:10:53.992 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:53.992 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:10:53.993 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:10:53.993 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:10:53.993 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:10:53.994 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:10:53.994 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:10:53.994 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:10:53.994 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:10:53.995 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:14.520 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:11:14.520 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:14.520 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:11:14.521 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 08:11:14.523 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:11:14.529 [http-nio-8080-exec-1] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-07-04 08:11:14.605 [http-nio-8080-exec-1] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=56464ff@456.com, password=$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy, enabled=true, roles=[ROLE_USER]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=6E938B37B8A03C69FAE8A21BB507B3A7], Granted Authorities=[ROLE_USER]]
2025-07-04 08:11:14.619 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:11:14.619 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:14.619 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:11:14.619 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 08:11:14.620 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:11:20.663 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-07-04 08:11:20.663 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.663 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-07-04 08:11:20.664 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 08:11:20.663 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-07-04 08:11:20.668 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.668 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-07-04 08:11:20.668 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-07-04 08:11:20.668 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.669 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-07-04 08:11:20.669 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 08:11:20.669 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 08:11:20.674 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 4
2025-07-04 08:11:20.674 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-07-04 08:11:20.674 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:20.674 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.674 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:20.674 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:11:20.674 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:20.674 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.674 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:20.676 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 08:11:20.676 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 5
2025-07-04 08:11:20.676 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:20.676 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:20.676 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.676 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:20.677 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:20.677 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.677 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:20.678 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:11:20.681 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:20.676 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:20.678 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:11:20.682 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:20.682 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.682 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:20.683 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:20.683 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:11:20.683 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.683 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:20.684 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:11:20.684 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:20.685 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:20.685 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.685 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:20.685 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:11:20.683 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 08:11:20.686 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.686 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 08:11:20.683 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:20.685 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:20.687 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:20.688 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:20.688 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.688 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:20.688 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:20.688 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:20.688 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.688 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.688 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:20.688 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:20.689 [http-nio-8080-exec-10] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-07-04 08:11:20.689 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.689 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-07-04 08:11:20.689 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 08:11:20.689 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:11:20.690 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 08:11:20.691 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:20.691 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:20.692 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:20.692 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:20.692 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.692 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:20.692 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 08:11:20.692 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.692 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:20.693 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==>  Preparing: select `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt` from topic where `status`=1 order by `rank` asc limit ?,?
2025-07-04 08:11:20.693 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.693 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select  
        `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt`
      from topic where `status`=1 order by `rank` asc limit ?,? ::: DataSources: slave
2025-07-04 08:11:20.693 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 08:11:20.694 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:20.695 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:11:20.695 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:11:20.695 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.695 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:11:20.695 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:20.695 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.695 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:11:20.695 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:20.695 [http-nio-8080-exec-10] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-07-04 08:11:20.696 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:20.696 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:20.697 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:20.697 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.697 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:20.697 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 08:11:20.700 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 08:11:20.700 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:11:20.700 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:11:20.701 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.701 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:11:20.701 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-07-04 08:11:20.702 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:20.702 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:11:20.705 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:20.705 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - <==      Total: 1
2025-07-04 08:11:20.707 [http-nio-8080-exec-10] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 6
2025-07-04 08:11:20.707 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 08:11:20.708 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==>  Preparing: select count(*) from topic where `status`=1
2025-07-04 08:11:20.708 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.708 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from topic where `status`=1 ::: DataSources: slave
2025-07-04 08:11:20.709 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:11:20.710 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:11:20.709 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 08:11:20.710 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.710 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.710 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:11:20.710 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 08:11:20.710 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 08:11:20.710 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==> Parameters: 
2025-07-04 08:11:20.710 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:11:20.710 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:11:20.711 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.711 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - <==      Total: 1
2025-07-04 08:11:20.711 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:11:20.711 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 08:11:20.712 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:11:20.714 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 6(Long)
2025-07-04 08:11:20.722 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 08:11:20.723 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 08:11:20.723 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.723 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 08:11:20.724 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 2(Integer)
2025-07-04 08:11:20.726 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 08:11:20.727 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:20.727 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.727 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:20.728 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:11:20.729 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:20.733 [http-nio-8080-exec-6] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==>  Preparing: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC
2025-07-04 08:11:20.733 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.733 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC ::: DataSources: slave
2025-07-04 08:11:20.734 [http-nio-8080-exec-6] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==> Parameters: 
2025-07-04 08:11:20.737 [http-nio-8080-exec-6] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - <==      Total: 1
2025-07-04 08:11:20.747 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 08:11:20.747 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.747 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 08:11:20.747 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 5(Long)
2025-07-04 08:11:20.748 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 0
2025-07-04 08:11:20.749 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 08:11:20.749 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.749 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 08:11:20.749 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 4(Long)
2025-07-04 08:11:20.751 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 08:11:20.752 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 08:11:20.752 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.752 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 08:11:20.752 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-07-04 08:11:20.753 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 08:11:20.754 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:20.754 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:20.754 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:20.754 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:11:20.756 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:38.092 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-07-04 08:11:38.092 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:38.092 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-07-04 08:11:38.092 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-07-04 08:11:38.092 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:38.092 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-07-04 08:11:38.093 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 08:11:38.093 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-07-04 08:11:38.093 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:38.093 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-07-04 08:11:38.093 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 08:11:38.095 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 5
2025-07-04 08:11:38.096 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 4
2025-07-04 08:11:38.096 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:38.096 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:38.096 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:38.096 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:38.096 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:38.096 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:38.096 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:11:38.096 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:11:38.097 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 08:11:38.098 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:38.098 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:38.098 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:38.098 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:38.098 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:38.098 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:38.098 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:38.098 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:38.098 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:11:38.098 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:11:38.099 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:38.099 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:38.100 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-07-04 08:11:38.100 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:38.100 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:38.100 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:38.100 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:38.100 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:38.100 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:38.100 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:11:38.100 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:38.101 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 08:11:38.101 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:38.101 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:38.101 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 08:11:38.102 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:38.102 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:38.102 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 08:11:38.102 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:38.103 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:38.102 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:38.103 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:38.103 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 08:11:38.103 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:38.103 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:38.103 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:38.103 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:38.103 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:11:38.103 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 08:11:38.103 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:38.104 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:38.104 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:38.105 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:38.105 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:38.106 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:11:38.106 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:38.106 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:38.106 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:38.105 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 08:11:38.107 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:11:38.108 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:38.109 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:38.109 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:38.109 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:38.109 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 08:11:38.109 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:11:38.109 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:11:38.109 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:38.109 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:11:38.109 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:38.109 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 08:11:38.110 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:38.111 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:38.111 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:38.111 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:38.111 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:11:38.112 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 08:11:38.112 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:11:38.112 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:38.112 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:11:38.113 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 08:11:38.113 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:38.114 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:11:38.115 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:11:38.115 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:38.115 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:11:38.115 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:11:38.116 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:11:38.116 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:38.116 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:11:38.116 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 08:11:38.117 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:11:38.118 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:11:38.118 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:11:38.118 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:38.118 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:11:38.119 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 08:11:38.121 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:11:40.451 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:11:40.452 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:40.452 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:11:40.452 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:11:40.454 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:11:40.455 [http-nio-8080-exec-8] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:2545059634@qq.com    数据库密码:$2a$10$w8zNNUSDq3MCiLDDuAhYXedA0QGva1Z4.6UxO61Njhsrlo8voc01G
2025-07-04 08:11:40.574 [http-nio-8080-exec-8] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=2545059634@qq.com, password=$2a$10$w8zNNUSDq3MCiLDDuAhYXedA0QGva1Z4.6UxO61Njhsrlo8voc01G, enabled=true, roles=[ROLE_ADMIN]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=6D2B2F944D01A03B35D79B58E61B6F06], Granted Authorities=[ROLE_ADMIN]]
2025-07-04 08:11:40.576 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:11:40.577 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:40.577 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:11:40.577 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:11:40.580 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:11:41.703 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getLowStockBooks - ==>  Preparing: SELECT * FROM book WHERE stock <= ? ORDER BY stock ASC, id DESC LIMIT ?, ?
2025-07-04 08:11:41.703 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:41.703 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT * FROM book
        WHERE stock <= ?
        ORDER BY stock ASC, id DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:11:41.704 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getTotalStock - ==>  Preparing: SELECT COALESCE(SUM(stock), 0) FROM book
2025-07-04 08:11:41.704 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getLowStockBooks - ==> Parameters: 10(Integer), 0(Integer), 10(Integer)
2025-07-04 08:11:41.705 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:41.705 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT COALESCE(SUM(stock), 0) FROM book ::: DataSources: slave
2025-07-04 08:11:41.706 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getTotalStock - ==> Parameters: 
2025-07-04 08:11:41.706 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getLowStockBooks - <==      Total: 0
2025-07-04 08:11:41.707 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getTotalStock - <==      Total: 1
2025-07-04 08:11:41.709 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - ==>  Preparing: SELECT COUNT(*) FROM book WHERE stock <= ?
2025-07-04 08:11:41.709 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:41.709 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book
        WHERE stock <= ? ::: DataSources: slave
2025-07-04 08:11:41.710 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - ==> Parameters: 0(Integer)
2025-07-04 08:11:41.710 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==>  Preparing: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount FROM ( SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice FROM bookorder join expense on bookorder.orderId = expense.orderId WHERE orderTime >= ? and orderTime <= ? ) AS dateOrder GROUP BY orderTime
2025-07-04 08:11:41.710 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:41.710 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount
            FROM (
                SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice
                FROM bookorder join expense on bookorder.orderId = expense.orderId
                WHERE orderTime >= ? and  orderTime <= ?
            ) AS dateOrder
        GROUP BY orderTime ::: DataSources: slave
2025-07-04 08:11:41.711 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==>  Preparing: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount FROM ( SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice FROM bookorder join expense on bookorder.orderId = expense.orderId WHERE orderTime >= ? and orderTime <= ? ) AS dateOrder GROUP BY orderTime
2025-07-04 08:11:41.711 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:41.711 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount
            FROM (
                SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice
                FROM bookorder join expense on bookorder.orderId = expense.orderId
                WHERE orderTime >= ? and  orderTime <= ?
            ) AS dateOrder
        GROUP BY orderTime ::: DataSources: slave
2025-07-04 08:11:41.712 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - <==      Total: 1
2025-07-04 08:11:41.713 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - ==>  Preparing: SELECT COUNT(*) FROM book WHERE stock <= ?
2025-07-04 08:11:41.713 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:41.713 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book
        WHERE stock <= ? ::: DataSources: slave
2025-07-04 08:11:41.713 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - ==> Parameters: 20(Integer)
2025-07-04 08:11:41.716 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - <==      Total: 1
2025-07-04 08:11:41.717 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==>  Preparing: select count(*) from book
2025-07-04 08:11:41.717 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:41.717 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from book ::: DataSources: slave
2025-07-04 08:11:41.718 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==> Parameters: 
2025-07-04 08:11:41.722 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCount - <==      Total: 1
2025-07-04 08:11:41.723 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - ==>  Preparing: SELECT COUNT(*) FROM book WHERE stock <= ?
2025-07-04 08:11:41.723 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:41.723 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book
        WHERE stock <= ? ::: DataSources: slave
2025-07-04 08:11:41.723 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - ==> Parameters: 20(Integer)
2025-07-04 08:11:41.727 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - <==      Total: 1
2025-07-04 08:11:41.764 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==> Parameters: 2025-07-04 00:00:00.0(Timestamp), 2025-07-04 23:59:59.0(Timestamp)
2025-07-04 08:11:41.764 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==> Parameters: 2025-06-28 00:00:00.0(Timestamp), 2025-07-04 00:00:00.0(Timestamp)
2025-07-04 08:11:41.776 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - <==      Total: 0
2025-07-04 08:11:41.779 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==>  Preparing: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount FROM ( SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice FROM bookorder join expense on bookorder.orderId = expense.orderId WHERE orderTime >= ? and orderTime <= ? ) AS dateOrder GROUP BY orderTime
2025-07-04 08:11:41.779 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:41.779 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount
            FROM (
                SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice
                FROM bookorder join expense on bookorder.orderId = expense.orderId
                WHERE orderTime >= ? and  orderTime <= ?
            ) AS dateOrder
        GROUP BY orderTime ::: DataSources: slave
2025-07-04 08:11:41.779 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==> Parameters: 2025-07-04 00:00:00.0(Timestamp), 2025-07-04 23:59:59.0(Timestamp)
2025-07-04 08:11:41.781 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - <==      Total: 0
2025-07-04 08:11:41.781 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - <==      Total: 4
2025-07-04 08:11:41.789 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE beUserDelete = ?
2025-07-04 08:11:41.789 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:11:41.789 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:41.789 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  beUserDelete = ? ::: DataSources: slave
2025-07-04 08:11:41.789 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:41.790 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:11:41.797 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: false(Boolean)
2025-07-04 08:11:41.800 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: false(Boolean), 0(Integer), 5(Integer)
2025-07-04 08:11:41.804 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:11:41.805 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.count - ==>  Preparing: select count(*) from user where manage = false
2025-07-04 08:11:41.806 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:41.806 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from user where manage = false ::: DataSources: slave
2025-07-04 08:11:41.807 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.count - ==> Parameters: 
2025-07-04 08:11:41.808 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.count - <==      Total: 1
2025-07-04 08:11:41.809 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==>  Preparing: select count(*) from book
2025-07-04 08:11:41.809 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:41.809 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book ::: DataSources: slave
2025-07-04 08:11:41.810 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==> Parameters: 
2025-07-04 08:11:41.811 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCount - <==      Total: 1
2025-07-04 08:11:41.813 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==>  Preparing: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount FROM ( SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice FROM bookorder join expense on bookorder.orderId = expense.orderId WHERE orderTime >= ? and orderTime <= ? ) AS dateOrder GROUP BY orderTime
2025-07-04 08:11:41.813 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:41.813 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount
            FROM (
                SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice
                FROM bookorder join expense on bookorder.orderId = expense.orderId
                WHERE orderTime >= ? and  orderTime <= ?
            ) AS dateOrder
        GROUP BY orderTime ::: DataSources: slave
2025-07-04 08:11:41.813 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==> Parameters: 2025-07-04 00:00:00.0(Timestamp), 2025-07-04 23:59:59.0(Timestamp)
2025-07-04 08:11:41.815 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - <==      Total: 0
2025-07-04 08:11:41.816 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==>  Preparing: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount FROM ( SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice FROM bookorder join expense on bookorder.orderId = expense.orderId WHERE orderTime >= ? and orderTime <= ? ) AS dateOrder GROUP BY orderTime
2025-07-04 08:11:41.816 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:41.816 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount
            FROM (
                SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice
                FROM bookorder join expense on bookorder.orderId = expense.orderId
                WHERE orderTime >= ? and  orderTime <= ?
            ) AS dateOrder
        GROUP BY orderTime ::: DataSources: slave
2025-07-04 08:11:41.816 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==> Parameters: 2025-07-04 00:00:00.0(Timestamp), 2025-07-04 23:59:59.0(Timestamp)
2025-07-04 08:11:41.819 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - <==      Total: 0
2025-07-04 08:11:41.819 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 08:11:41.819 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==>  Preparing: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount FROM ( SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice FROM bookorder join expense on bookorder.orderId = expense.orderId WHERE orderTime >= ? and orderTime <= ? ) AS dateOrder GROUP BY orderTime
2025-07-04 08:11:41.819 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:41.819 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount
            FROM (
                SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice
                FROM bookorder join expense on bookorder.orderId = expense.orderId
                WHERE orderTime >= ? and  orderTime <= ?
            ) AS dateOrder
        GROUP BY orderTime ::: DataSources: slave
2025-07-04 08:11:41.820 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==> Parameters: 2025-07-03 00:00:00.0(Timestamp), 2025-07-03 23:59:59.0(Timestamp)
2025-07-04 08:11:41.822 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - <==      Total: 1
2025-07-04 08:11:41.823 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE orderStatus = ? AND beUserDelete = ?
2025-07-04 08:11:41.830 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:41.831 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:11:41.838 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 待发货(String), false(Boolean)
2025-07-04 08:11:41.840 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:11:48.228 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:11:48.228 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:48.228 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:11:48.229 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:11:48.230 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:11:48.231 [http-nio-8080-exec-10] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=10
2025-07-04 08:11:48.231 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:11:48.231 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:48.231 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:11:48.235 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 08:11:48.237 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - <==      Total: 8
2025-07-04 08:11:48.238 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL
2025-07-04 08:11:48.238 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:11:48.238 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL ::: DataSources: slave
2025-07-04 08:11:48.239 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==> Parameters: 
2025-07-04 08:11:48.240 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - <==      Total: 1
2025-07-04 08:12:12.304 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 08:12:12.304 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.304 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 08:12:12.304 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 08:12:12.305 [http-nio-8080-exec-8] INFO  com.huang.store.controller.CommentController - 获取图书评论: bookId=2, page=1, pageSize=10
2025-07-04 08:12:12.305 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:12:12.305 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.306 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:12:12.306 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 08:12:12.306 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 08:12:12.306 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:12:12.306 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.307 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:12:12.307 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:12:12.307 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 08:12:12.307 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.CommentMapper.getCommentDetailsByBook - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.bookId = ? AND c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:12:12.307 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.307 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.bookId = ? AND c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:12:12.308 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 08:12:12.309 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:12:12.309 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.309 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:12:12.309 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.CommentMapper.getCommentDetailsByBook - ==> Parameters: 2(Integer), 0(Integer), 10(Integer)
2025-07-04 08:12:12.309 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 08:12:12.310 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:12:12.311 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:12:12.311 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.311 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:12:12.311 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 08:12:12.312 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.CommentMapper.getCommentDetailsByBook - <==      Total: 2
2025-07-04 08:12:12.312 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==>  Preparing: select * from user where id = ?
2025-07-04 08:12:12.312 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.312 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where id = ? ::: DataSources: slave
2025-07-04 08:12:12.312 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:12:12.313 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==> Parameters: 3(Integer)
2025-07-04 08:12:12.313 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:12:12.313 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.313 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:12:12.313 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 08:12:12.314 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUserById - <==      Total: 1
2025-07-04 08:12:12.314 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:12:12.315 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==>  Preparing: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ?
2025-07-04 08:12:12.315 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.315 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ? ::: DataSources: slave
2025-07-04 08:12:12.316 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==> Parameters: 4(Integer), 5(Integer)
2025-07-04 08:12:12.317 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - <==      Total: 1
2025-07-04 08:12:12.318 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==>  Preparing: SELECT * FROM book_comment WHERE parentId = ? ORDER BY createTime ASC
2025-07-04 08:12:12.318 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.318 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT * FROM book_comment 
        WHERE parentId = ?
        ORDER BY createTime ASC ::: DataSources: slave
2025-07-04 08:12:12.319 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==> Parameters: 4(Integer)
2025-07-04 08:12:12.321 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - <==      Total: 1
2025-07-04 08:12:12.322 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==>  Preparing: select * from user where id = ?
2025-07-04 08:12:12.322 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.322 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where id = ? ::: DataSources: slave
2025-07-04 08:12:12.322 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==> Parameters: 2(Integer)
2025-07-04 08:12:12.324 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUserById - <==      Total: 1
2025-07-04 08:12:12.326 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==>  Preparing: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ?
2025-07-04 08:12:12.326 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.326 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ? ::: DataSources: slave
2025-07-04 08:12:12.326 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==> Parameters: 13(Integer), 5(Integer)
2025-07-04 08:12:12.328 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - <==      Total: 1
2025-07-04 08:12:12.328 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==>  Preparing: select * from user where id = ?
2025-07-04 08:12:12.328 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.328 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where id = ? ::: DataSources: slave
2025-07-04 08:12:12.329 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==> Parameters: 2(Integer)
2025-07-04 08:12:12.331 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUserById - <==      Total: 1
2025-07-04 08:12:12.331 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==>  Preparing: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ?
2025-07-04 08:12:12.331 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.331 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ? ::: DataSources: slave
2025-07-04 08:12:12.331 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==> Parameters: 3(Integer), 5(Integer)
2025-07-04 08:12:12.333 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - <==      Total: 1
2025-07-04 08:12:12.333 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==>  Preparing: SELECT * FROM book_comment WHERE parentId = ? ORDER BY createTime ASC
2025-07-04 08:12:12.333 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.333 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT * FROM book_comment 
        WHERE parentId = ?
        ORDER BY createTime ASC ::: DataSources: slave
2025-07-04 08:12:12.333 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==> Parameters: 3(Integer)
2025-07-04 08:12:12.334 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - <==      Total: 1
2025-07-04 08:12:12.334 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==>  Preparing: select * from user where id = ?
2025-07-04 08:12:12.334 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.334 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where id = ? ::: DataSources: slave
2025-07-04 08:12:12.336 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==> Parameters: 3(Integer)
2025-07-04 08:12:12.337 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUserById - <==      Total: 1
2025-07-04 08:12:12.337 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==>  Preparing: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ?
2025-07-04 08:12:12.337 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.337 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ? ::: DataSources: slave
2025-07-04 08:12:12.337 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==> Parameters: 12(Integer), 5(Integer)
2025-07-04 08:12:12.338 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - <==      Total: 1
2025-07-04 08:12:12.338 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByBook - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE bookId = ? AND parentId IS NULL
2025-07-04 08:12:12.338 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.338 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE bookId = ? AND parentId IS NULL ::: DataSources: slave
2025-07-04 08:12:12.339 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByBook - ==> Parameters: 2(Integer)
2025-07-04 08:12:12.340 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByBook - <==      Total: 1
2025-07-04 08:12:12.894 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 08:12:12.895 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.895 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 08:12:12.895 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 2(Integer)
2025-07-04 08:12:12.898 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 08:12:12.899 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=?
2025-07-04 08:12:12.899 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.899 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-07-04 08:12:12.900 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787111213826(String)
2025-07-04 08:12:12.901 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-07-04 08:12:12.901 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:12:12.901 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.901 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:12:12.901 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:12:12.903 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:12:12.904 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?)
2025-07-04 08:12:12.904 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.904 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-07-04 08:12:12.906 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 2(Integer)
2025-07-04 08:12:12.908 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-07-04 08:12:12.909 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=?
2025-07-04 08:12:12.910 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:12:12.910 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-07-04 08:12:12.912 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 科技(String)
2025-07-04 08:12:12.914 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-07-04 08:13:56.686 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:13:56.686 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:13:56.686 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:13:56.691 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 08:13:56.692 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:14:03.286 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:14:03.286 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:03.286 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:14:03.292 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 133@qq.com(String), 已收货(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 08:14:03.300 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 08:14:03.303 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:14:03.304 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:03.304 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:14:03.309 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 133@qq.com(String), 已收货(String), false(Boolean)
2025-07-04 08:14:03.314 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:14:07.780 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:14:07.780 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.780 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:14:07.780 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:14:07.781 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.782 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:14:07.784 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:14:07.784 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 08:14:07.787 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:14:07.788 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:14:07.788 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.788 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:14:07.788 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 08:14:07.789 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:14:07.789 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.789 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:14:07.790 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:14:07.790 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:14:07.795 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:14:07.795 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:14:07.813 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:14:07.813 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:14:07.813 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.813 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.813 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:14:07.813 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:14:07.813 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:14:07.813 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:14:07.814 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:14:07.814 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:14:07.815 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:14:07.815 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.815 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 08:14:07.815 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:14:07.815 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.815 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:14:07.815 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181520552434(String)
2025-07-04 08:14:07.816 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 08:14:07.817 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:14:07.818 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:14:07.818 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:14:07.818 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.819 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:14:07.819 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:14:07.821 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:14:07.821 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:14:07.821 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.821 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:14:07.822 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181355860200(String)
2025-07-04 08:14:07.824 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:14:07.825 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:14:07.825 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.825 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:14:07.825 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:14:07.827 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:14:07.827 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:14:07.827 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.827 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:14:07.827 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181206573250(String)
2025-07-04 08:14:07.829 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:14:07.829 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:14:07.829 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.829 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:14:07.830 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:14:07.832 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:14:07.832 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:14:07.832 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.832 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:14:07.833 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703175346171678(String)
2025-07-04 08:14:07.835 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:14:07.835 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:14:07.835 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.835 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:14:07.835 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:14:07.837 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:14:07.838 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 08:14:07.838 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.838 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:14:07.838 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 08:14:07.839 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:14:07.840 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:14:07.840 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.841 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:14:07.841 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:14:07.843 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 08:14:07.844 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:14:07.844 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.844 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:14:07.844 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 08:14:07.846 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:14:07.874 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:14:07.874 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.874 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:14:07.875 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:14:07.877 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:14:07.878 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:14:07.878 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.878 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:14:07.878 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:14:07.880 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:14:07.880 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:14:07.880 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.880 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:14:07.881 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:14:07.882 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:14:07.882 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.882 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:14:07.882 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:14:07.883 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 08:14:07.883 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.883 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:14:07.884 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 08:14:07.885 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:14:07.886 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:14:07.888 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:14:07.888 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:14:07.888 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.888 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:14:07.888 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:14:07.890 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:14:07.891 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:14:07.891 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.891 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:14:07.892 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:14:07.893 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:14:07.894 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:14:07.894 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.894 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:14:07.895 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 08:14:07.897 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:14:07.953 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:14:07.953 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.953 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:14:07.954 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:14:07.956 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 08:14:07.957 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:14:07.957 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.957 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:14:07.957 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 08:14:07.959 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:14:07.964 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:14:07.964 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.964 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:14:07.964 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:14:07.966 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:14:07.967 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:14:07.967 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.967 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:14:07.967 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 08:14:07.969 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:14:07.970 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:14:07.970 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.970 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:14:07.970 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:14:07.971 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:14:07.971 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.971 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:14:07.971 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:14:07.971 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:14:07.972 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:14:07.972 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.972 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:14:07.972 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 08:14:07.973 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:14:07.973 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:14:07.973 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:14:07.973 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.973 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:14:07.973 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:14:07.975 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:14:07.976 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:14:07.976 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.976 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:14:07.977 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:14:07.978 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:14:07.979 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:14:07.979 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:07.979 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:14:07.979 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 08:14:07.980 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:14:08.000 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:14:08.000 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:14:08.000 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:08.000 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:14:08.000 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:08.000 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:14:08.000 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:14:08.000 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:14:08.004 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:14:08.005 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:14:08.005 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:14:08.005 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:14:08.005 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:08.005 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:08.005 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:14:08.005 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:14:08.005 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 08:14:08.005 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 08:14:08.007 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:14:08.007 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:14:08.008 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:14:08.008 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:14:08.008 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:08.008 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:08.008 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:14:08.008 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:14:08.008 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:14:08.008 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:14:08.009 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:14:08.009 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:14:08.010 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:14:08.010 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:14:08.010 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:08.010 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:08.010 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:14:08.010 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:14:08.010 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 08:14:08.010 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 08:14:08.011 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:14:08.011 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:14:08.043 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:14:08.043 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:08.043 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:14:08.044 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:14:08.044 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:08.044 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:14:08.044 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:14:08.046 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:14:08.046 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:14:08.046 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:08.046 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:14:08.047 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 08:14:08.049 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:14:08.050 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:14:08.050 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:14:08.050 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:08.050 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:14:08.050 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:14:08.051 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:14:08.052 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:14:08.052 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:14:08.052 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:08.052 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:14:08.052 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:14:08.052 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 08:14:08.052 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:08.052 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:14:08.053 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 08:14:08.053 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:14:08.055 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:14:08.055 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:14:08.056 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:08.056 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:14:08.056 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:14:08.057 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:14:08.058 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:14:08.058 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:08.058 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:14:08.058 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 08:14:08.059 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:14:08.080 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:14:08.080 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:08.080 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:14:08.080 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:14:08.082 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:14:08.083 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:14:08.083 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:08.083 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:14:08.083 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 08:14:08.084 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:14:08.085 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:14:08.085 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:08.085 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:14:08.085 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:14:08.086 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:14:08.087 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:14:08.087 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:14:08.087 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:14:08.087 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 08:14:08.088 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:15:08.491 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 08:15:08.491 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 08:15:08.491 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:15:08.491 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 08:15:08.494 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 08:15:08.496 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 08:15:08.497 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 08:15:08.497 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 08:15:08.497 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:15:08.497 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 08:15:08.497 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 08:15:08.500 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 08:15:08.500 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 08:19:37.474 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:19:37.474 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:19:37.474 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:19:37.477 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:19:37.478 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:19:37.479 [http-nio-8080-exec-3] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=10
2025-07-04 08:19:37.479 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:19:37.479 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:19:37.479 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:19:37.480 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 08:19:37.487 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - <==      Total: 8
2025-07-04 08:19:37.488 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL
2025-07-04 08:19:37.488 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:19:37.488 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL ::: DataSources: slave
2025-07-04 08:19:37.489 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==> Parameters: 
2025-07-04 08:19:37.491 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - <==      Total: 1
2025-07-04 08:20:01.139 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:20:01.139 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:20:01.139 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:20:01.140 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:20:01.141 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:20:01.142 [http-nio-8080-exec-8] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=5
2025-07-04 08:20:01.142 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:20:01.142 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:20:01.142 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:20:01.142 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==> Parameters: 0(Integer), 5(Integer)
2025-07-04 08:20:01.144 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - <==      Total: 5
2025-07-04 08:20:01.145 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL
2025-07-04 08:20:01.145 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:20:01.145 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL ::: DataSources: slave
2025-07-04 08:20:01.145 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==> Parameters: 
2025-07-04 08:20:01.147 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - <==      Total: 1
2025-07-04 08:20:08.491 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 08:20:08.492 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 08:20:08.492 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:20:08.492 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 08:20:08.493 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 08:20:08.497 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 08:20:08.498 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 08:20:08.498 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 08:20:08.498 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:20:08.498 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 08:20:08.498 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 08:20:08.499 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 08:20:08.500 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 08:23:16.897 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:23:16.897 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:23:16.897 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:23:16.899 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:23:16.901 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:23:16.901 [http-nio-8080-exec-5] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=10
2025-07-04 08:23:16.902 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:23:16.902 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:23:16.902 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:23:16.902 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 08:23:16.904 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - <==      Total: 8
2025-07-04 08:23:16.905 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL
2025-07-04 08:23:16.905 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:23:16.905 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL ::: DataSources: slave
2025-07-04 08:23:16.905 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==> Parameters: 
2025-07-04 08:23:16.906 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - <==      Total: 1
2025-07-04 08:23:21.742 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:23:21.742 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:23:21.742 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:23:21.742 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:23:21.743 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:23:21.744 [http-nio-8080-exec-2] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=10
2025-07-04 08:23:21.744 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:23:21.744 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:23:21.744 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:23:21.744 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 08:23:21.746 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - <==      Total: 8
2025-07-04 08:23:21.747 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL
2025-07-04 08:23:21.747 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:23:21.747 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL ::: DataSources: slave
2025-07-04 08:23:21.747 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==> Parameters: 
2025-07-04 08:23:21.748 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - <==      Total: 1
2025-07-04 08:23:39.873 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:23:39.873 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:23:39.874 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:23:39.874 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:23:39.878 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:23:39.878 [http-nio-8080-exec-9] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=10
2025-07-04 08:23:39.878 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:23:39.878 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:23:39.878 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:23:39.878 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 08:23:39.881 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - <==      Total: 8
2025-07-04 08:23:39.881 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL
2025-07-04 08:23:39.881 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:23:39.881 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL ::: DataSources: slave
2025-07-04 08:23:39.882 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==> Parameters: 
2025-07-04 08:23:39.883 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - <==      Total: 1
2025-07-04 08:24:02.201 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:24:02.201 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:02.201 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:24:02.201 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:24:02.203 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:24:02.203 [http-nio-8080-exec-6] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=10
2025-07-04 08:24:02.203 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:24:02.203 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:02.203 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:24:02.204 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 08:24:02.208 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - <==      Total: 8
2025-07-04 08:24:02.209 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL
2025-07-04 08:24:02.209 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:02.209 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL ::: DataSources: slave
2025-07-04 08:24:02.209 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==> Parameters: 
2025-07-04 08:24:02.210 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - <==      Total: 1
2025-07-04 08:24:11.143 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==>  Preparing: select `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt` from topic where `status`=1 order by `rank` asc limit ?,?
2025-07-04 08:24:11.143 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.143 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select  
        `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt`
      from topic where `status`=1 order by `rank` asc limit ?,? ::: DataSources: slave
2025-07-04 08:24:11.144 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-07-04 08:24:11.145 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-07-04 08:24:11.146 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.146 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-07-04 08:24:11.147 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - <==      Total: 1
2025-07-04 08:24:11.149 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==>  Preparing: select count(*) from topic where `status`=1
2025-07-04 08:24:11.149 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.149 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from topic where `status`=1 ::: DataSources: slave
2025-07-04 08:24:11.150 [http-nio-8080-exec-3] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-07-04 08:24:11.150 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.150 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-07-04 08:24:11.150 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==> Parameters: 
2025-07-04 08:24:11.151 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-07-04 08:24:11.152 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.152 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-07-04 08:24:11.152 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - <==      Total: 1
2025-07-04 08:24:11.153 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 08:24:11.153 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-07-04 08:24:11.153 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.153 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-07-04 08:24:11.157 [http-nio-8080-exec-3] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-07-04 08:24:11.158 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 08:24:11.158 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 5
2025-07-04 08:24:11.160 [http-nio-8080-exec-3] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 6
2025-07-04 08:24:11.158 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.164 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 08:24:11.166 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:11.166 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 08:24:11.166 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.166 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.166 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:11.166 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 08:24:11.166 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 08:24:11.167 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 08:24:11.167 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 08:24:11.170 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 08:24:11.171 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 4
2025-07-04 08:24:11.171 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:24:11.171 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.171 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:24:11.173 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-07-04 08:24:11.174 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 6(Long)
2025-07-04 08:24:11.174 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:11.175 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.175 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:11.175 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:11.175 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.175 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:24:11.175 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:11.177 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:11.175 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 08:24:11.178 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:11.178 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.178 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:11.178 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:24:11.178 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 08:24:11.179 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 08:24:11.179 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 08:24:11.179 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.179 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 08:24:11.180 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 08:24:11.180 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:11.180 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:24:11.180 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:24:11.180 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:11.180 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.181 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.181 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:11.181 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:24:11.181 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 2(Integer)
2025-07-04 08:24:11.181 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:11.183 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:11.183 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.183 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:11.183 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:24:11.183 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:11.184 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 08:24:11.184 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 08:24:11.184 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:11.185 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.185 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:11.185 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:11.185 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.185 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:11.185 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:24:11.185 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:11.185 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:24:11.185 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:11.185 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.185 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:11.186 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:24:11.186 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:11.187 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:24:11.187 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 08:24:11.187 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:11.187 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:11.187 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:24:11.187 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.187 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.187 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:24:11.188 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:11.188 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:11.188 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 08:24:11.188 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.188 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:11.188 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:11.188 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:11.189 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:11.189 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.189 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:11.189 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 08:24:11.190 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:24:11.189 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 08:24:11.190 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.190 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 08:24:11.190 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:24:11.191 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:24:11.191 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:24:11.191 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.191 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:24:11.191 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:11.192 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:11.192 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.192 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:11.193 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:11.193 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:11.193 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 5(Long)
2025-07-04 08:24:11.193 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:11.193 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.193 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:11.193 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:24:11.193 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 08:24:11.195 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:11.196 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 0
2025-07-04 08:24:11.196 [http-nio-8080-exec-4] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==>  Preparing: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC
2025-07-04 08:24:11.196 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.196 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC ::: DataSources: slave
2025-07-04 08:24:11.197 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:24:11.197 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:24:11.198 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 08:24:11.198 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.198 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 08:24:11.198 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:11.199 [http-nio-8080-exec-4] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==> Parameters: 
2025-07-04 08:24:11.200 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 4(Long)
2025-07-04 08:24:11.200 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:11.200 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.200 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:11.201 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:24:11.201 [http-nio-8080-exec-4] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - <==      Total: 1
2025-07-04 08:24:11.202 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:11.202 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 08:24:11.202 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 08:24:11.202 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.202 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 08:24:11.202 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-07-04 08:24:11.204 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 08:24:11.205 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:11.205 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:11.205 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:11.205 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:24:11.207 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:12.401 [http-nio-8080-exec-6] INFO  com.huang.store.controller.CommentController - 获取图书评论: bookId=3, page=1, pageSize=10
2025-07-04 08:24:12.401 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:24:12.402 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:12.402 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:24:12.402 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 08:24:12.403 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:12.403 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 08:24:12.403 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 08:24:12.404 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 08:24:12.407 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 08:24:12.407 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:24:12.408 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:24:12.408 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.CommentMapper.getCommentDetailsByBook - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.bookId = ? AND c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:24:12.408 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:12.408 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:12.408 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:24:12.408 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.bookId = ? AND c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:24:12.409 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 08:24:12.409 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.CommentMapper.getCommentDetailsByBook - ==> Parameters: 3(Integer), 0(Integer), 10(Integer)
2025-07-04 08:24:12.412 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 08:24:12.412 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.CommentMapper.getCommentDetailsByBook - <==      Total: 2
2025-07-04 08:24:12.413 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:24:12.413 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:12.413 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:24:12.414 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==>  Preparing: select * from user where id = ?
2025-07-04 08:24:12.414 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:12.414 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where id = ? ::: DataSources: slave
2025-07-04 08:24:12.414 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 08:24:12.415 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==> Parameters: 3(Integer)
2025-07-04 08:24:12.417 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:24:12.417 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUserById - <==      Total: 1
2025-07-04 08:24:12.417 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:24:12.417 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==>  Preparing: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ?
2025-07-04 08:24:12.417 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:12.417 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:12.417 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:24:12.417 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ? ::: DataSources: slave
2025-07-04 08:24:12.417 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 08:24:12.418 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==> Parameters: 6(Integer), 5(Integer)
2025-07-04 08:24:12.419 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - <==      Total: 1
2025-07-04 08:24:12.419 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:24:12.420 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==>  Preparing: SELECT * FROM book_comment WHERE parentId = ? ORDER BY createTime ASC
2025-07-04 08:24:12.420 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:12.420 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT * FROM book_comment 
        WHERE parentId = ?
        ORDER BY createTime ASC ::: DataSources: slave
2025-07-04 08:24:12.420 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:24:12.420 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:12.420 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:24:12.420 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 08:24:12.420 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==> Parameters: 6(Integer)
2025-07-04 08:24:12.422 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:24:12.422 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - <==      Total: 1
2025-07-04 08:24:12.423 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==>  Preparing: select * from user where id = ?
2025-07-04 08:24:12.423 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:12.423 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where id = ? ::: DataSources: slave
2025-07-04 08:24:12.423 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==> Parameters: 2(Integer)
2025-07-04 08:24:12.424 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUserById - <==      Total: 1
2025-07-04 08:24:12.425 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==>  Preparing: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ?
2025-07-04 08:24:12.425 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:12.425 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ? ::: DataSources: slave
2025-07-04 08:24:12.425 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==> Parameters: 15(Integer), 5(Integer)
2025-07-04 08:24:12.427 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - <==      Total: 1
2025-07-04 08:24:12.427 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==>  Preparing: select * from user where id = ?
2025-07-04 08:24:12.427 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:12.427 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where id = ? ::: DataSources: slave
2025-07-04 08:24:12.428 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==> Parameters: 2(Integer)
2025-07-04 08:24:12.430 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUserById - <==      Total: 1
2025-07-04 08:24:12.431 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==>  Preparing: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ?
2025-07-04 08:24:12.431 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:12.431 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ? ::: DataSources: slave
2025-07-04 08:24:12.432 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==> Parameters: 5(Integer), 5(Integer)
2025-07-04 08:24:12.435 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - <==      Total: 1
2025-07-04 08:24:12.435 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==>  Preparing: SELECT * FROM book_comment WHERE parentId = ? ORDER BY createTime ASC
2025-07-04 08:24:12.435 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:12.435 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT * FROM book_comment 
        WHERE parentId = ?
        ORDER BY createTime ASC ::: DataSources: slave
2025-07-04 08:24:12.435 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==> Parameters: 5(Integer)
2025-07-04 08:24:12.438 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - <==      Total: 1
2025-07-04 08:24:12.441 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==>  Preparing: select * from user where id = ?
2025-07-04 08:24:12.441 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:12.441 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where id = ? ::: DataSources: slave
2025-07-04 08:24:12.441 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==> Parameters: 3(Integer)
2025-07-04 08:24:12.444 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUserById - <==      Total: 1
2025-07-04 08:24:12.444 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==>  Preparing: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ?
2025-07-04 08:24:12.445 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:12.445 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ? ::: DataSources: slave
2025-07-04 08:24:12.445 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==> Parameters: 14(Integer), 5(Integer)
2025-07-04 08:24:12.447 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - <==      Total: 1
2025-07-04 08:24:12.448 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByBook - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE bookId = ? AND parentId IS NULL
2025-07-04 08:24:12.448 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:12.448 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE bookId = ? AND parentId IS NULL ::: DataSources: slave
2025-07-04 08:24:12.449 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByBook - ==> Parameters: 3(Integer)
2025-07-04 08:24:12.451 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByBook - <==      Total: 1
2025-07-04 08:24:12.498 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=?
2025-07-04 08:24:12.499 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:12.499 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-07-04 08:24:12.499 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787111407010(String)
2025-07-04 08:24:12.500 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 1
2025-07-04 08:24:12.500 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:12.500 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:12.500 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:12.501 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:24:12.503 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:12.503 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?)
2025-07-04 08:24:12.503 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:12.503 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-07-04 08:24:12.504 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 3(Integer)
2025-07-04 08:24:12.506 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-07-04 08:24:12.507 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=?
2025-07-04 08:24:12.507 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:12.507 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-07-04 08:24:12.507 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 科技(String)
2025-07-04 08:24:12.509 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-07-04 08:24:20.810 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-07-04 08:24:20.810 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.810 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-07-04 08:24:20.811 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 08:24:20.811 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==>  Preparing: select `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt` from topic where `status`=1 order by `rank` asc limit ?,?
2025-07-04 08:24:20.811 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.811 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select  
        `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt`
      from topic where `status`=1 order by `rank` asc limit ?,? ::: DataSources: slave
2025-07-04 08:24:20.811 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-07-04 08:24:20.813 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-07-04 08:24:20.813 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:20.813 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.813 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:20.814 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 08:24:20.815 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:20.815 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:20.815 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.815 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:20.815 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - <==      Total: 1
2025-07-04 08:24:20.815 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:24:20.816 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==>  Preparing: select count(*) from topic where `status`=1
2025-07-04 08:24:20.816 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.816 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from topic where `status`=1 ::: DataSources: slave
2025-07-04 08:24:20.816 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==> Parameters: 
2025-07-04 08:24:20.817 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:20.817 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - <==      Total: 1
2025-07-04 08:24:20.817 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:20.817 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.817 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:20.818 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:24:20.819 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:20.819 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:20.819 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.819 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:20.820 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:24:20.821 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-07-04 08:24:20.821 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.821 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-07-04 08:24:20.821 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:20.822 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 08:24:20.822 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:20.822 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.822 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:20.823 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:24:20.824 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:20.824 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 5
2025-07-04 08:24:20.824 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:20.824 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.824 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:20.824 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:24:20.825 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:20.825 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-07-04 08:24:20.826 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:20.826 [http-nio-8080-exec-10] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-07-04 08:24:20.827 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.827 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.827 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:20.827 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-07-04 08:24:20.827 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:24:20.827 [http-nio-8080-exec-10] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-07-04 08:24:20.827 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.827 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-07-04 08:24:20.828 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 08:24:20.829 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:20.829 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:20.830 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.830 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:20.830 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:24:20.830 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 4
2025-07-04 08:24:20.830 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:20.830 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.830 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:20.831 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:24:20.831 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:20.832 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:20.832 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.832 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:20.832 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 08:24:20.833 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:20.833 [http-nio-8080-exec-10] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 6
2025-07-04 08:24:20.833 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:20.833 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.833 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:20.833 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 08:24:20.833 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:24:20.833 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:20.835 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.836 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 08:24:20.836 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:20.836 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.836 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:20.836 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:24:20.836 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:20.836 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 6(Long)
2025-07-04 08:24:20.837 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:20.837 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:20.837 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.837 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:20.837 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 08:24:20.838 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:20.838 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 08:24:20.838 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 08:24:20.838 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.838 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 08:24:20.838 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:20.839 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 2(Integer)
2025-07-04 08:24:20.839 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.839 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:20.839 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:24:20.840 [http-nio-8080-exec-5] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==>  Preparing: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC
2025-07-04 08:24:20.840 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.840 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC ::: DataSources: slave
2025-07-04 08:24:20.840 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 08:24:20.840 [http-nio-8080-exec-5] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==> Parameters: 
2025-07-04 08:24:20.840 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:20.841 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:20.841 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.841 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:20.841 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:24:20.841 [http-nio-8080-exec-5] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - <==      Total: 1
2025-07-04 08:24:20.842 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:20.844 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 08:24:20.844 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.844 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 08:24:20.844 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 5(Long)
2025-07-04 08:24:20.846 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 0
2025-07-04 08:24:20.843 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 08:24:20.846 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.846 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 08:24:20.846 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 08:24:20.846 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.846 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 08:24:20.846 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 08:24:20.846 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 4(Long)
2025-07-04 08:24:20.848 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 08:24:20.848 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:24:20.848 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.848 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:24:20.848 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 08:24:20.848 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 08:24:20.848 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 08:24:20.848 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.848 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 08:24:20.848 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-07-04 08:24:20.850 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 08:24:20.850 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 08:24:20.850 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:20.850 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:24:20.850 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.850 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:24:20.850 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.850 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:20.850 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:24:20.850 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 08:24:20.851 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:20.851 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:24:20.852 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:24:20.852 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.852 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:24:20.852 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 08:24:20.853 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:24:20.853 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:24:20.853 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:20.853 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:24:20.853 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 08:24:20.854 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:24:23.275 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 08:24:23.276 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:23.277 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 08:24:23.277 [http-nio-8080-exec-7] INFO  com.huang.store.controller.CommentController - 获取图书评论: bookId=5, page=1, pageSize=10
2025-07-04 08:24:23.277 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 08:24:23.277 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:24:23.277 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:23.277 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:24:23.277 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 08:24:23.278 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:24:23.278 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 08:24:23.279 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.CommentMapper.getCommentDetailsByBook - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.bookId = ? AND c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:24:23.279 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:24:23.279 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:23.279 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.bookId = ? AND c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:24:23.279 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:23.279 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:24:23.280 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.CommentMapper.getCommentDetailsByBook - ==> Parameters: 5(Integer), 0(Integer), 10(Integer)
2025-07-04 08:24:23.280 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 08:24:23.281 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 08:24:23.282 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.CommentMapper.getCommentDetailsByBook - <==      Total: 1
2025-07-04 08:24:23.282 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==>  Preparing: select * from user where id = ?
2025-07-04 08:24:23.282 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:24:23.282 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:23.282 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:23.282 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where id = ? ::: DataSources: slave
2025-07-04 08:24:23.282 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:24:23.282 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 08:24:23.283 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==> Parameters: 3(Integer)
2025-07-04 08:24:23.284 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:24:23.285 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUserById - <==      Total: 1
2025-07-04 08:24:23.285 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:24:23.285 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:23.285 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:24:23.285 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==>  Preparing: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ?
2025-07-04 08:24:23.285 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:23.285 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ? ::: DataSources: slave
2025-07-04 08:24:23.285 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 08:24:23.286 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==> Parameters: 8(Integer), 5(Integer)
2025-07-04 08:24:23.287 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:24:23.288 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - <==      Total: 1
2025-07-04 08:24:23.288 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:24:23.288 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:23.288 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:24:23.289 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==>  Preparing: SELECT * FROM book_comment WHERE parentId = ? ORDER BY createTime ASC
2025-07-04 08:24:23.289 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:23.289 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: SELECT * FROM book_comment 
        WHERE parentId = ?
        ORDER BY createTime ASC ::: DataSources: slave
2025-07-04 08:24:23.289 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 08:24:23.290 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==> Parameters: 8(Integer)
2025-07-04 08:24:23.292 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - <==      Total: 1
2025-07-04 08:24:23.292 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:24:23.293 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==>  Preparing: select * from user where id = ?
2025-07-04 08:24:23.293 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:23.293 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where id = ? ::: DataSources: slave
2025-07-04 08:24:23.293 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==> Parameters: 2(Integer)
2025-07-04 08:24:23.295 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUserById - <==      Total: 1
2025-07-04 08:24:23.296 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==>  Preparing: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ?
2025-07-04 08:24:23.296 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:23.296 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ? ::: DataSources: slave
2025-07-04 08:24:23.297 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==> Parameters: 17(Integer), 5(Integer)
2025-07-04 08:24:23.298 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - <==      Total: 1
2025-07-04 08:24:23.299 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByBook - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE bookId = ? AND parentId IS NULL
2025-07-04 08:24:23.299 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:23.299 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE bookId = ? AND parentId IS NULL ::: DataSources: slave
2025-07-04 08:24:23.300 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByBook - ==> Parameters: 5(Integer)
2025-07-04 08:24:23.301 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 08:24:23.301 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:23.301 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 08:24:23.301 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 5(Integer)
2025-07-04 08:24:23.302 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByBook - <==      Total: 1
2025-07-04 08:24:23.303 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 08:24:23.303 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=?
2025-07-04 08:24:23.303 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:23.303 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-07-04 08:24:23.304 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002214(String)
2025-07-04 08:24:23.305 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 1
2025-07-04 08:24:23.306 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:24:23.306 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:23.306 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:24:23.306 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:24:23.308 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:24:23.309 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?)
2025-07-04 08:24:23.309 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:23.309 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-07-04 08:24:23.310 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 5(Integer)
2025-07-04 08:24:23.311 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-07-04 08:24:23.312 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=?
2025-07-04 08:24:23.312 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:24:23.312 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-07-04 08:24:23.313 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-07-04 08:24:23.314 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-07-04 08:25:08.490 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 08:25:08.490 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 08:25:08.490 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:25:08.490 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 08:25:08.491 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 08:25:08.492 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 08:25:08.493 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 08:25:08.493 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 08:25:08.493 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:25:08.493 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 08:25:08.494 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 08:25:08.496 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 08:25:08.497 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 08:27:11.808 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:27:11.808 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:11.808 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:27:11.810 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:27:11.813 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:27:11.813 [http-nio-8080-exec-3] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=5
2025-07-04 08:27:11.814 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:27:11.814 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:11.814 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:27:11.815 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==> Parameters: 0(Integer), 5(Integer)
2025-07-04 08:27:11.817 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - <==      Total: 5
2025-07-04 08:27:11.817 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL
2025-07-04 08:27:11.817 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:11.817 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL ::: DataSources: slave
2025-07-04 08:27:11.818 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==> Parameters: 
2025-07-04 08:27:11.819 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - <==      Total: 1
2025-07-04 08:27:39.951 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 08:27:39.951 [http-nio-8080-exec-10] INFO  com.huang.store.controller.CommentController - 获取图书评论: bookId=5, page=1, pageSize=10
2025-07-04 08:27:39.951 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:39.951 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 08:27:39.951 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:27:39.951 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:39.951 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:27:39.951 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 08:27:39.951 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 08:27:39.952 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 08:27:39.952 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:27:39.952 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:39.952 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:27:39.952 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 08:27:39.952 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:39.952 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 08:27:39.952 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 08:27:39.952 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:27:39.952 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.CommentMapper.getCommentDetailsByBook - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.bookId = ? AND c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:27:39.952 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:39.952 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.bookId = ? AND c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:27:39.952 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 5(Integer)
2025-07-04 08:27:39.952 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.CommentMapper.getCommentDetailsByBook - ==> Parameters: 5(Integer), 0(Integer), 10(Integer)
2025-07-04 08:27:39.952 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 08:27:39.953 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:27:39.953 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:39.953 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:27:39.953 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 08:27:39.953 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.CommentMapper.getCommentDetailsByBook - <==      Total: 1
2025-07-04 08:27:39.953 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 08:27:39.953 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=?
2025-07-04 08:27:39.953 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==>  Preparing: select * from user where id = ?
2025-07-04 08:27:39.953 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:39.953 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-07-04 08:27:39.953 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:39.953 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from user where id = ? ::: DataSources: slave
2025-07-04 08:27:39.953 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002214(String)
2025-07-04 08:27:39.953 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==> Parameters: 3(Integer)
2025-07-04 08:27:39.953 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:27:39.955 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:27:39.955 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:39.955 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:27:39.955 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 08:27:39.955 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 1
2025-07-04 08:27:39.955 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUserById - <==      Total: 1
2025-07-04 08:27:39.955 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:27:39.955 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:39.955 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:27:39.955 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==>  Preparing: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ?
2025-07-04 08:27:39.955 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:39.955 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ? ::: DataSources: slave
2025-07-04 08:27:39.955 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:27:39.955 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==> Parameters: 8(Integer), 5(Integer)
2025-07-04 08:27:39.956 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:27:39.956 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:27:39.956 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - <==      Total: 1
2025-07-04 08:27:39.956 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==>  Preparing: SELECT * FROM book_comment WHERE parentId = ? ORDER BY createTime ASC
2025-07-04 08:27:39.956 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:27:39.956 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?)
2025-07-04 08:27:39.956 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:39.956 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT * FROM book_comment 
        WHERE parentId = ?
        ORDER BY createTime ASC ::: DataSources: slave
2025-07-04 08:27:39.956 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:39.956 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:39.956 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:27:39.956 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-07-04 08:27:39.956 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 08:27:39.956 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 5(Integer)
2025-07-04 08:27:39.956 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==> Parameters: 8(Integer)
2025-07-04 08:27:39.956 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-07-04 08:27:39.956 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:27:39.956 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - <==      Total: 1
2025-07-04 08:27:39.956 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=?
2025-07-04 08:27:39.956 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:39.956 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-07-04 08:27:39.956 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==>  Preparing: select * from user where id = ?
2025-07-04 08:27:39.956 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:39.956 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from user where id = ? ::: DataSources: slave
2025-07-04 08:27:39.956 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-07-04 08:27:39.956 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==> Parameters: 2(Integer)
2025-07-04 08:27:39.957 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUserById - <==      Total: 1
2025-07-04 08:27:39.957 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-07-04 08:27:39.957 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==>  Preparing: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ?
2025-07-04 08:27:39.957 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:39.957 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ? ::: DataSources: slave
2025-07-04 08:27:39.957 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==> Parameters: 17(Integer), 5(Integer)
2025-07-04 08:27:39.957 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - <==      Total: 1
2025-07-04 08:27:39.958 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByBook - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE bookId = ? AND parentId IS NULL
2025-07-04 08:27:39.958 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:39.958 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE bookId = ? AND parentId IS NULL ::: DataSources: slave
2025-07-04 08:27:39.958 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByBook - ==> Parameters: 5(Integer)
2025-07-04 08:27:39.958 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByBook - <==      Total: 1
2025-07-04 08:27:59.413 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:27:59.413 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:59.413 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:27:59.413 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:27:59.414 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:27:59.414 [http-nio-8080-exec-1] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=10
2025-07-04 08:27:59.415 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:27:59.415 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:59.415 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:27:59.415 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 08:27:59.416 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - <==      Total: 8
2025-07-04 08:27:59.416 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL
2025-07-04 08:27:59.416 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:59.416 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL ::: DataSources: slave
2025-07-04 08:27:59.416 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==> Parameters: 
2025-07-04 08:27:59.417 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - <==      Total: 1
2025-07-04 08:27:59.527 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 08:27:59.527 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:59.527 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 08:27:59.528 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 5(Integer)
2025-07-04 08:27:59.529 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 08:27:59.529 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=?
2025-07-04 08:27:59.529 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:59.529 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-07-04 08:27:59.530 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002214(String)
2025-07-04 08:27:59.530 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 08:27:59.530 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:59.530 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 08:27:59.530 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 08:27:59.531 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 1
2025-07-04 08:27:59.531 [http-nio-8080-exec-6] INFO  com.huang.store.controller.CommentController - 获取图书评论: bookId=5, page=1, pageSize=10
2025-07-04 08:27:59.531 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:27:59.531 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:59.531 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:27:59.531 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:27:59.531 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:59.531 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:27:59.531 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:27:59.531 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 08:27:59.531 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 08:27:59.531 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:27:59.531 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:27:59.532 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:27:59.532 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.CommentMapper.getCommentDetailsByBook - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.bookId = ? AND c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:27:59.532 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?)
2025-07-04 08:27:59.532 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:59.532 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:59.532 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:59.532 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:27:59.532 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.bookId = ? AND c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:27:59.532 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-07-04 08:27:59.532 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 08:27:59.532 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 5(Integer)
2025-07-04 08:27:59.532 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.CommentMapper.getCommentDetailsByBook - ==> Parameters: 5(Integer), 0(Integer), 10(Integer)
2025-07-04 08:27:59.533 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-07-04 08:27:59.533 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 08:27:59.533 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=?
2025-07-04 08:27:59.533 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:27:59.533 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:59.533 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:59.533 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-07-04 08:27:59.533 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:27:59.533 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 08:27:59.533 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-07-04 08:27:59.533 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.CommentMapper.getCommentDetailsByBook - <==      Total: 1
2025-07-04 08:27:59.534 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-07-04 08:27:59.534 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:27:59.534 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==>  Preparing: select * from user where id = ?
2025-07-04 08:27:59.534 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:59.534 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where id = ? ::: DataSources: slave
2025-07-04 08:27:59.534 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:27:59.534 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:59.534 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:27:59.534 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==> Parameters: 3(Integer)
2025-07-04 08:27:59.534 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 08:27:59.535 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:27:59.535 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUserById - <==      Total: 1
2025-07-04 08:27:59.535 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==>  Preparing: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ?
2025-07-04 08:27:59.535 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:27:59.535 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:59.535 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:59.535 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:27:59.535 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ? ::: DataSources: slave
2025-07-04 08:27:59.535 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==> Parameters: 8(Integer), 5(Integer)
2025-07-04 08:27:59.535 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 08:27:59.536 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - <==      Total: 1
2025-07-04 08:27:59.536 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:27:59.536 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==>  Preparing: SELECT * FROM book_comment WHERE parentId = ? ORDER BY createTime ASC
2025-07-04 08:27:59.536 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:59.536 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT * FROM book_comment 
        WHERE parentId = ?
        ORDER BY createTime ASC ::: DataSources: slave
2025-07-04 08:27:59.536 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==> Parameters: 8(Integer)
2025-07-04 08:27:59.537 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - <==      Total: 1
2025-07-04 08:27:59.538 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==>  Preparing: select * from user where id = ?
2025-07-04 08:27:59.538 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:59.538 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where id = ? ::: DataSources: slave
2025-07-04 08:27:59.538 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==> Parameters: 2(Integer)
2025-07-04 08:27:59.539 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUserById - <==      Total: 1
2025-07-04 08:27:59.539 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==>  Preparing: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ?
2025-07-04 08:27:59.539 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:59.539 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ? ::: DataSources: slave
2025-07-04 08:27:59.539 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==> Parameters: 17(Integer), 5(Integer)
2025-07-04 08:27:59.540 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - <==      Total: 1
2025-07-04 08:27:59.540 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByBook - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE bookId = ? AND parentId IS NULL
2025-07-04 08:27:59.540 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:27:59.540 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE bookId = ? AND parentId IS NULL ::: DataSources: slave
2025-07-04 08:27:59.540 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByBook - ==> Parameters: 5(Integer)
2025-07-04 08:27:59.541 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByBook - <==      Total: 1
2025-07-04 08:28:15.764 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:28:15.764 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:28:15.764 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:28:15.764 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:28:15.765 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:28:15.765 [http-nio-8080-exec-4] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=10
2025-07-04 08:28:15.765 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:28:15.765 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:28:15.765 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:28:15.765 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 08:28:15.766 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - <==      Total: 8
2025-07-04 08:28:15.766 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL
2025-07-04 08:28:15.766 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:28:15.766 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL ::: DataSources: slave
2025-07-04 08:28:15.766 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==> Parameters: 
2025-07-04 08:28:15.767 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - <==      Total: 1
2025-07-04 08:28:15.908 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 08:28:15.909 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:28:15.909 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 08:28:15.909 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 08:28:15.909 [http-nio-8080-exec-9] INFO  com.huang.store.controller.CommentController - 获取图书评论: bookId=5, page=1, pageSize=10
2025-07-04 08:28:15.909 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:28:15.909 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:28:15.909 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:28:15.909 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 08:28:15.909 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 08:28:15.909 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:28:15.909 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 08:28:15.909 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 5(Integer)
2025-07-04 08:28:15.910 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 08:28:15.910 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:28:15.910 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:28:15.910 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CommentMapper.getCommentDetailsByBook - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.bookId = ? AND c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:28:15.910 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:28:15.910 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:28:15.910 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:28:15.910 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.bookId = ? AND c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:28:15.910 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 08:28:15.910 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 08:28:15.910 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=?
2025-07-04 08:28:15.910 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:28:15.910 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-07-04 08:28:15.910 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CommentMapper.getCommentDetailsByBook - ==> Parameters: 5(Integer), 0(Integer), 10(Integer)
2025-07-04 08:28:15.910 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002214(String)
2025-07-04 08:28:15.911 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 1
2025-07-04 08:28:15.911 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 08:28:15.911 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CommentMapper.getCommentDetailsByBook - <==      Total: 1
2025-07-04 08:28:15.911 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:28:15.911 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:28:15.911 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:28:15.911 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:28:15.911 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:28:15.911 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:28:15.911 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==>  Preparing: select * from user where id = ?
2025-07-04 08:28:15.911 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:28:15.911 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where id = ? ::: DataSources: slave
2025-07-04 08:28:15.911 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==> Parameters: 3(Integer)
2025-07-04 08:28:15.911 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:28:15.911 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 08:28:15.912 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUserById - <==      Total: 1
2025-07-04 08:28:15.912 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:28:15.912 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:28:15.912 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==>  Preparing: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ?
2025-07-04 08:28:15.912 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:28:15.912 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:28:15.912 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ? ::: DataSources: slave
2025-07-04 08:28:15.912 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?)
2025-07-04 08:28:15.912 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:28:15.912 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:28:15.912 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:28:15.912 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-07-04 08:28:15.912 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 5(Integer)
2025-07-04 08:28:15.912 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 08:28:15.912 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==> Parameters: 8(Integer), 5(Integer)
2025-07-04 08:28:15.912 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - <==      Total: 1
2025-07-04 08:28:15.912 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-07-04 08:28:15.912 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:28:15.913 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=?
2025-07-04 08:28:15.913 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==>  Preparing: SELECT * FROM book_comment WHERE parentId = ? ORDER BY createTime ASC
2025-07-04 08:28:15.913 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:28:15.913 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:28:15.913 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-07-04 08:28:15.913 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT * FROM book_comment 
        WHERE parentId = ?
        ORDER BY createTime ASC ::: DataSources: slave
2025-07-04 08:28:15.913 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 08:28:15.913 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:28:15.913 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 08:28:15.913 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==> Parameters: 8(Integer)
2025-07-04 08:28:15.913 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-07-04 08:28:15.913 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 08:28:15.913 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 08:28:15.914 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - <==      Total: 1
2025-07-04 08:28:15.914 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-07-04 08:28:15.914 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==>  Preparing: select * from user where id = ?
2025-07-04 08:28:15.914 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:28:15.914 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where id = ? ::: DataSources: slave
2025-07-04 08:28:15.914 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==> Parameters: 2(Integer)
2025-07-04 08:28:15.915 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUserById - <==      Total: 1
2025-07-04 08:28:15.916 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==>  Preparing: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ?
2025-07-04 08:28:15.916 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:28:15.916 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ? ::: DataSources: slave
2025-07-04 08:28:15.916 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==> Parameters: 17(Integer), 5(Integer)
2025-07-04 08:28:15.917 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - <==      Total: 1
2025-07-04 08:28:15.918 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByBook - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE bookId = ? AND parentId IS NULL
2025-07-04 08:28:15.918 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:28:15.918 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE bookId = ? AND parentId IS NULL ::: DataSources: slave
2025-07-04 08:28:15.918 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByBook - ==> Parameters: 5(Integer)
2025-07-04 08:28:15.919 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByBook - <==      Total: 1
2025-07-04 08:30:08.491 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 08:30:08.491 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 08:30:08.491 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:30:08.491 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 08:30:08.492 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 08:30:08.493 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 08:30:08.493 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 08:30:08.493 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 08:30:08.493 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:30:08.493 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 08:30:08.494 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 08:30:08.494 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 08:30:08.495 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 08:30:45.573 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 08:30:45.574 [Thread-7] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 08:30:45.576 [Thread-7] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-07-04 08:30:45.596 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1290506341] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 08:30:45.596 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1290506341] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 08:30:45.597 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-638373160] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 08:30:45.597 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-638373160] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 08:30:45.597 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-nioEventLoop-4-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/sun.nio.ch.WEPoll.wait(Native Method)
 java.base@17.0.8/sun.nio.ch.WEPollSelectorImpl.doSelect(WEPollSelectorImpl.java:111)
 java.base@17.0.8/sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:129)
 java.base@17.0.8/sun.nio.ch.SelectorImpl.select(SelectorImpl.java:146)
 app//io.netty.channel.nio.SelectedSelectionKeySetSelector.select(SelectedSelectionKeySetSelector.java:68)
 app//io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:879)
 app//io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:526)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-07-04 08:30:45.598 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-07-04 08:30:45.598 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-2] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-07-04 08:30:45.598 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-3] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-07-04 08:30:45.599 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-4] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-07-04 08:30:45.599 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-5] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-07-04 08:30:45.599 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-6] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-07-04 08:30:45.599 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-7] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-07-04 08:30:45.600 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 08:30:45.602 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 08:30:45.722 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closing ...
2025-07-04 08:30:45.725 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-07-04 08:30:45.725 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closing ...
2025-07-04 08:30:45.726 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-07-04 08:30:45.854 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 21708 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 08:30:45.854 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 08:30:45.854 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 08:30:46.101 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 08:30:46.101 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 08:30:46.110 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-07-04 08:30:46.162 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$81c5ec25] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 08:30:46.167 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 08:30:46.230 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 08:30:46.230 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 08:30:46.230 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 08:30:46.230 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 08:30:46.231 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 08:30:46.231 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 08:30:46.231 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 08:30:46.231 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 08:30:46.246 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 08:30:46.246 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 387 ms
2025-07-04 08:30:46.247 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 08:30:46.353 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} inited
2025-07-04 08:30:46.371 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} inited
2025-07-04 08:30:46.543 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 08:30:46.543 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 08:30:46.740 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 08:30:46.872 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@60464228, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@38e798b3, org.springframework.security.web.context.SecurityContextPersistenceFilter@4402619, org.springframework.security.web.header.HeaderWriterFilter@4861c07, org.springframework.web.filter.CorsFilter@147653a2, org.springframework.security.web.authentication.logout.LogoutFilter@46b34ee, com.huang.store.security.JwtAuthenticationTokenFilter@705dc8c0, com.huang.store.security.CustomAuthenticationFilter@5700e19c, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@e482963, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@11e6f4c8, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2534a4d7, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6476532b, org.springframework.security.web.session.SessionManagementFilter@67687cdf, org.springframework.security.web.access.ExceptionTranslationFilter@443a3128, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@633267a]
2025-07-04 08:30:47.086 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 08:30:47.106 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 08:30:47.109 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 08:30:47.113 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 08:30:47.113 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 1.302 seconds (JVM running for 1242.644)
2025-07-04 08:30:47.113 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 08:30:47.113 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:30:47.113 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 08:30:47.114 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 08:30:47.116 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 08:30:47.116 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 08:30:47.120 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 08:30:47.120 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:30:47.120 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 08:30:47.120 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 08:30:47.122 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 08:30:47.124 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 08:30:48.534 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 08:30:48.534 [Thread-9] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 08:30:48.537 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1414165451] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 08:30:48.538 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1414165451] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 08:30:48.538 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-155327152] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 08:30:48.539 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-155327152] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 08:30:48.539 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 08:30:48.540 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 08:30:48.543 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closing ...
2025-07-04 08:30:48.544 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closed
2025-07-04 08:30:48.544 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closing ...
2025-07-04 08:30:48.545 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closed
2025-07-04 08:30:48.616 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 21708 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 08:30:48.616 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 08:30:48.616 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 08:30:48.727 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 08:30:48.727 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 08:30:48.735 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-07-04 08:30:48.770 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$81c5ec25] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 08:30:48.774 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 08:30:48.814 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 08:30:48.814 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 08:30:48.814 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 08:30:48.814 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 08:30:48.814 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 08:30:48.814 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 08:30:48.814 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 08:30:48.814 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 08:30:48.827 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 08:30:48.827 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 209 ms
2025-07-04 08:30:48.828 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 08:30:48.890 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} inited
2025-07-04 08:30:48.903 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} inited
2025-07-04 08:30:48.995 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 08:30:48.995 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 08:30:49.111 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 08:30:49.163 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@167e3c4f, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@128de433, org.springframework.security.web.context.SecurityContextPersistenceFilter@3988aebe, org.springframework.security.web.header.HeaderWriterFilter@1c53b59, org.springframework.web.filter.CorsFilter@4021fd2, org.springframework.security.web.authentication.logout.LogoutFilter@1da7d9e0, com.huang.store.security.JwtAuthenticationTokenFilter@647b7117, com.huang.store.security.CustomAuthenticationFilter@47ed025a, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@3383d366, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2637566e, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@e80be02, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@40d61262, org.springframework.security.web.session.SessionManagementFilter@3acab066, org.springframework.security.web.access.ExceptionTranslationFilter@52d9bf2e, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@7b56ccd5]
2025-07-04 08:30:49.258 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 08:30:49.265 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 08:30:49.267 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 08:30:49.270 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 08:30:49.271 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.68 seconds (JVM running for 1244.802)
2025-07-04 08:30:49.271 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 08:30:49.271 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:30:49.271 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 08:30:49.272 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 08:30:49.273 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 08:30:49.273 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 08:30:49.275 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 08:30:49.275 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:30:49.275 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 08:30:49.276 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 08:30:49.277 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 08:30:49.278 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 08:31:31.612 [http-nio-8080-exec-2] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-04 08:31:31.612 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-04 08:31:31.613 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-07-04 08:31:31.619 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:31:31.619 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:31:31.619 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:31:31.620 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 08:31:31.621 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:31:36.146 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:31:36.146 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:31:36.146 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:31:36.146 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 08:31:36.147 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:31:36.147 [http-nio-8080-exec-1] INFO  com.huang.store.controller.CommentController - 获取用户评论: userId=5, userAccount=56464ff@456.com, page=1, pageSize=10
2025-07-04 08:31:36.148 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - ==>  Preparing: SELECT c.*, b.bookName as bookName FROM book_comment c LEFT JOIN book b ON c.bookId = b.id WHERE c.userId = ? AND c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:31:36.148 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:31:36.148 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT
            c.*,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.userId = ? AND c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:31:36.149 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - ==> Parameters: 5(Integer), 0(Integer), 10(Integer)
2025-07-04 08:31:36.151 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - <==      Total: 0
2025-07-04 08:31:36.152 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 08:31:36.152 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:31:36.152 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 08:31:36.153 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 08:31:36.154 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 08:31:57.933 [Thread-15] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 08:31:57.933 [Thread-15] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 08:31:57.934 [Thread-15] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-07-04 08:31:57.938 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1294365946] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 08:31:57.939 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1294365946] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 08:31:57.940 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1287503863] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 08:31:57.940 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1287503863] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 08:31:57.940 [Thread-15] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 08:31:57.941 [Thread-15] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 08:31:57.943 [Thread-15] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closing ...
2025-07-04 08:31:57.943 [Thread-15] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closed
2025-07-04 08:31:57.943 [Thread-15] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closing ...
2025-07-04 08:31:57.944 [Thread-15] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closed
2025-07-04 08:31:58.009 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 21708 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 08:31:58.009 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 08:31:58.009 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 08:31:58.194 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 08:31:58.194 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 08:31:58.202 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-07-04 08:31:58.259 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$81c5ec25] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 08:31:58.268 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 08:31:58.374 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 08:31:58.375 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 08:31:58.375 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 08:31:58.375 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 08:31:58.375 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 08:31:58.376 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 08:31:58.376 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 08:31:58.376 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 08:31:58.391 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 08:31:58.391 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 381 ms
2025-07-04 08:31:58.393 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 08:31:58.504 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-7} inited
2025-07-04 08:31:58.524 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-8} inited
2025-07-04 08:31:58.624 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 08:31:58.624 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 08:31:58.754 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 08:31:58.810 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@17630b1a, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1d540c0d, org.springframework.security.web.context.SecurityContextPersistenceFilter@579da9f6, org.springframework.security.web.header.HeaderWriterFilter@728c4a5, org.springframework.web.filter.CorsFilter@38f539a7, org.springframework.security.web.authentication.logout.LogoutFilter@42a893a2, com.huang.store.security.JwtAuthenticationTokenFilter@26dda5af, com.huang.store.security.CustomAuthenticationFilter@48687874, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@8aa8b59, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@26a9fafb, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@67e50f67, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4d49b9a6, org.springframework.security.web.session.SessionManagementFilter@64cf7ea0, org.springframework.security.web.access.ExceptionTranslationFilter@65a29cf2, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4b7b6312]
2025-07-04 08:31:58.899 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 08:31:58.907 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 08:31:58.909 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 08:31:58.912 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 08:31:58.912 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.931 seconds (JVM running for 1314.443)
2025-07-04 08:31:58.912 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 08:31:58.912 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:31:58.912 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 08:31:58.913 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 08:31:58.914 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 08:31:58.914 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 08:31:58.917 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 08:31:58.917 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:31:58.917 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 08:31:58.918 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 08:31:58.919 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 08:31:58.919 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 08:36:58.913 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 08:36:58.913 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 08:36:58.913 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:36:58.913 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 08:36:58.914 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 08:36:58.915 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 08:36:58.916 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 08:36:58.916 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 08:36:58.916 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:36:58.916 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 08:36:58.916 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 08:36:58.917 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 08:36:58.917 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 08:41:58.913 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 08:41:58.914 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 08:41:58.914 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:41:58.914 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 08:41:58.918 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 08:41:58.920 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 08:41:58.920 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 08:41:58.921 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 08:41:58.921 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:41:58.921 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 08:41:58.921 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 08:41:58.923 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 08:41:58.923 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 08:42:34.827 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-04 08:42:34.827 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-04 08:42:34.828 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-07-04 08:42:34.830 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:42:34.830 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:42:34.830 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:42:34.831 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 08:42:34.832 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:42:34.832 [http-nio-8080-exec-1] INFO  com.huang.store.controller.CommentController - 获取用户评论: userId=5, userAccount=56464ff@456.com, page=1, pageSize=10
2025-07-04 08:42:34.832 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - ==>  Preparing: SELECT c.*, b.bookName as bookName FROM book_comment c LEFT JOIN book b ON c.bookId = b.id WHERE c.userId = ? AND c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:42:34.832 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:42:34.832 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT
            c.*,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.userId = ? AND c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:42:34.833 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - ==> Parameters: 5(Integer), 0(Integer), 10(Integer)
2025-07-04 08:42:34.833 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - <==      Total: 0
2025-07-04 08:42:34.834 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 08:42:34.834 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:42:34.834 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 08:42:34.834 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 08:42:34.834 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 08:43:58.246 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:43:58.246 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:43:58.246 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:43:58.247 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 08:43:58.248 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:43:58.248 [http-nio-8080-exec-5] INFO  com.huang.store.controller.CommentController - 获取用户评论: userId=5, userAccount=56464ff@456.com, page=1, pageSize=10
2025-07-04 08:43:58.248 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - ==>  Preparing: SELECT c.*, b.bookName as bookName FROM book_comment c LEFT JOIN book b ON c.bookId = b.id WHERE c.userId = ? AND c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:43:58.248 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:43:58.248 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT
            c.*,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.userId = ? AND c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:43:58.248 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - ==> Parameters: 5(Integer), 0(Integer), 10(Integer)
2025-07-04 08:43:58.249 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - <==      Total: 0
2025-07-04 08:43:58.249 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 08:43:58.249 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:43:58.249 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 08:43:58.249 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 08:43:58.250 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 08:44:19.885 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:44:19.885 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:44:19.885 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:44:19.885 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 08:44:19.886 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:44:19.886 [http-nio-8080-exec-3] INFO  com.huang.store.controller.CommentController - 获取用户评论: userId=5, userAccount=56464ff@456.com, page=1, pageSize=10
2025-07-04 08:44:19.886 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - ==>  Preparing: SELECT c.*, b.bookName as bookName FROM book_comment c LEFT JOIN book b ON c.bookId = b.id WHERE c.userId = ? AND c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:44:19.886 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:44:19.886 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT
            c.*,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.userId = ? AND c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:44:19.886 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - ==> Parameters: 5(Integer), 0(Integer), 10(Integer)
2025-07-04 08:44:19.887 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - <==      Total: 0
2025-07-04 08:44:19.888 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 08:44:19.888 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:44:19.888 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 08:44:19.888 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 08:44:19.889 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 08:44:38.562 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:44:38.562 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:44:38.563 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:44:38.563 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 08:44:38.563 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:44:38.563 [http-nio-8080-exec-4] INFO  com.huang.store.controller.CommentController - 获取用户评论: userId=5, userAccount=56464ff@456.com, page=1, pageSize=10
2025-07-04 08:44:38.563 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - ==>  Preparing: SELECT c.*, b.bookName as bookName FROM book_comment c LEFT JOIN book b ON c.bookId = b.id WHERE c.userId = ? AND c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:44:38.563 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:44:38.563 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT
            c.*,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.userId = ? AND c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:44:38.563 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - ==> Parameters: 5(Integer), 0(Integer), 10(Integer)
2025-07-04 08:44:38.564 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - <==      Total: 0
2025-07-04 08:44:38.564 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 08:44:38.564 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:44:38.564 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 08:44:38.564 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 08:44:38.564 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 08:44:58.697 [Thread-21] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 08:44:58.697 [Thread-21] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 08:44:58.698 [Thread-21] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-07-04 08:44:58.703 [Thread-21] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1686864132] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 08:44:58.703 [Thread-21] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1686864132] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 08:44:58.703 [Thread-21] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-918340967] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 08:44:58.703 [Thread-21] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-918340967] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 08:44:58.704 [Thread-21] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 08:44:58.705 [Thread-21] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 08:44:58.709 [Thread-21] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-7} closing ...
2025-07-04 08:44:58.710 [Thread-21] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-7} closed
2025-07-04 08:44:58.710 [Thread-21] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-8} closing ...
2025-07-04 08:44:58.710 [Thread-21] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-8} closed
2025-07-04 08:44:58.790 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 21708 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 08:44:58.790 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 08:44:58.790 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 08:44:58.989 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 08:44:58.990 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 08:44:59.003 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.
2025-07-04 08:44:59.068 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$81c5ec25] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 08:44:59.076 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 08:44:59.150 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 08:44:59.151 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 08:44:59.151 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 08:44:59.151 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 08:44:59.151 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 08:44:59.152 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 08:44:59.152 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 08:44:59.152 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 08:44:59.167 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 08:44:59.167 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 369 ms
2025-07-04 08:44:59.169 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 08:44:59.280 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-9} inited
2025-07-04 08:44:59.297 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-10} inited
2025-07-04 08:44:59.399 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 08:44:59.399 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 08:44:59.567 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 08:44:59.631 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@6f8320d7, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@63d6a847, org.springframework.security.web.context.SecurityContextPersistenceFilter@129f1363, org.springframework.security.web.header.HeaderWriterFilter@7bbde694, org.springframework.web.filter.CorsFilter@595ebdf6, org.springframework.security.web.authentication.logout.LogoutFilter@4bcecc3a, com.huang.store.security.JwtAuthenticationTokenFilter@7560a543, com.huang.store.security.CustomAuthenticationFilter@689b408b, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@249cefa4, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@31facbaf, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@25671242, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@39661111, org.springframework.security.web.session.SessionManagementFilter@1a53c20a, org.springframework.security.web.access.ExceptionTranslationFilter@33e20483, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5bfb2a88]
2025-07-04 08:44:59.760 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 08:44:59.775 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 08:44:59.778 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 08:44:59.782 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 08:44:59.782 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 1.034 seconds (JVM running for 2095.313)
2025-07-04 08:44:59.782 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 08:44:59.783 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:44:59.783 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 08:44:59.783 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 08:44:59.785 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 08:44:59.785 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 08:44:59.788 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 08:44:59.788 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:44:59.788 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 08:44:59.789 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 08:44:59.790 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 08:44:59.791 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 08:45:01.644 [Thread-27] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 08:45:01.644 [Thread-27] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 08:45:01.646 [Thread-27] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-898161460] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 08:45:01.647 [Thread-27] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-898161460] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 08:45:01.647 [Thread-27] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-2114644908] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 08:45:01.647 [Thread-27] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-2114644908] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 08:45:01.648 [Thread-27] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 08:45:01.648 [Thread-27] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 08:45:01.652 [Thread-27] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-9} closing ...
2025-07-04 08:45:01.653 [Thread-27] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-9} closed
2025-07-04 08:45:01.653 [Thread-27] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-10} closing ...
2025-07-04 08:45:01.653 [Thread-27] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-10} closed
2025-07-04 08:45:01.716 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 21708 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 08:45:01.716 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 08:45:01.716 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 08:45:01.867 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 08:45:01.867 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 08:45:01.875 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-07-04 08:45:01.908 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$81c5ec25] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 08:45:01.912 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 08:45:01.950 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 08:45:01.950 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 08:45:01.950 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 08:45:01.950 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 08:45:01.951 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 08:45:01.951 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 08:45:01.951 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 08:45:01.951 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 08:45:01.962 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 08:45:01.962 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 246 ms
2025-07-04 08:45:01.964 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 08:45:02.030 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-11} inited
2025-07-04 08:45:02.043 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-12} inited
2025-07-04 08:45:02.132 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 08:45:02.132 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 08:45:02.251 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 08:45:02.306 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@72d50b95, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1d8896a, org.springframework.security.web.context.SecurityContextPersistenceFilter@39a57f11, org.springframework.security.web.header.HeaderWriterFilter@166b4ac6, org.springframework.web.filter.CorsFilter@175d8792, org.springframework.security.web.authentication.logout.LogoutFilter@5bca4508, com.huang.store.security.JwtAuthenticationTokenFilter@5c1f16a1, com.huang.store.security.CustomAuthenticationFilter@1b9744a3, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@1d642758, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1a4aa7a7, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@563be352, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@41a8ebc6, org.springframework.security.web.session.SessionManagementFilter@b929675, org.springframework.security.web.access.ExceptionTranslationFilter@27109b91, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@32e02bdf]
2025-07-04 08:45:02.397 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 08:45:02.404 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 08:45:02.406 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 08:45:02.409 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 08:45:02.409 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.718 seconds (JVM running for 2097.94)
2025-07-04 08:45:02.409 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 08:45:02.409 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:45:02.409 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 08:45:02.409 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 08:45:02.410 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 08:45:02.410 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 08:45:02.413 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 08:45:02.413 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:45:02.413 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 08:45:02.413 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 08:45:02.413 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 08:45:02.413 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 08:47:45.759 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-04 08:47:45.759 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-04 08:47:45.760 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-07-04 08:47:45.765 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:47:45.765 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:47:45.765 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:47:45.766 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:47:45.767 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:47:45.768 [http-nio-8080-exec-1] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=10, keyword=null
2025-07-04 08:47:45.768 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:47:45.768 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:47:45.768 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:47:45.769 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 08:47:45.770 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - <==      Total: 8
2025-07-04 08:47:45.771 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL
2025-07-04 08:47:45.771 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:47:45.771 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL ::: DataSources: slave
2025-07-04 08:47:45.771 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==> Parameters: 
2025-07-04 08:47:45.772 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - <==      Total: 1
2025-07-04 08:47:49.593 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:47:49.593 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:47:49.593 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:47:49.593 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:47:49.594 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:47:49.594 [http-nio-8080-exec-2] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=10, keyword=红
2025-07-04 08:47:49.595 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.CommentMapper.searchAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL AND ( u.name LIKE CONCAT('%', ?, '%') OR b.bookName LIKE CONCAT('%', ?, '%') OR c.content LIKE CONCAT('%', ?, '%') ) ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:47:49.595 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:47:49.595 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
         
            AND (
                u.name LIKE CONCAT('%', ?, '%') OR
                b.bookName LIKE CONCAT('%', ?, '%') OR
                c.content LIKE CONCAT('%', ?, '%')
            )
         
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:47:49.596 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.CommentMapper.searchAllComments - ==> Parameters: 红(String), 红(String), 红(String), 0(Integer), 10(Integer)
2025-07-04 08:47:49.598 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.CommentMapper.searchAllComments - <==      Total: 2
2025-07-04 08:47:49.599 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.CommentMapper.getSearchCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL AND ( u.name LIKE CONCAT('%', ?, '%') OR b.bookName LIKE CONCAT('%', ?, '%') OR c.content LIKE CONCAT('%', ?, '%') )
2025-07-04 08:47:49.599 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:47:49.599 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*)
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
         
            AND (
                u.name LIKE CONCAT('%', ?, '%') OR
                b.bookName LIKE CONCAT('%', ?, '%') OR
                c.content LIKE CONCAT('%', ?, '%')
            ) ::: DataSources: slave
2025-07-04 08:47:49.600 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.CommentMapper.getSearchCommentCount - ==> Parameters: 红(String), 红(String), 红(String)
2025-07-04 08:47:49.601 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.CommentMapper.getSearchCommentCount - <==      Total: 1
2025-07-04 08:47:50.510 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:47:50.510 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:47:50.510 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:47:50.510 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:47:50.512 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:47:50.512 [http-nio-8080-exec-3] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=10, keyword=null
2025-07-04 08:47:50.512 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:47:50.512 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:47:50.512 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:47:50.512 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 08:47:50.515 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - <==      Total: 8
2025-07-04 08:47:50.515 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL
2025-07-04 08:47:50.515 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:47:50.515 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL ::: DataSources: slave
2025-07-04 08:47:50.515 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==> Parameters: 
2025-07-04 08:47:50.517 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - <==      Total: 1
2025-07-04 08:47:53.563 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:47:53.563 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:47:53.563 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:47:53.563 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:47:53.564 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:47:53.564 [http-nio-8080-exec-4] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=5, keyword=null
2025-07-04 08:47:53.564 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:47:53.564 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:47:53.564 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:47:53.564 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==> Parameters: 0(Integer), 5(Integer)
2025-07-04 08:47:53.565 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - <==      Total: 5
2025-07-04 08:47:53.566 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL
2025-07-04 08:47:53.566 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:47:53.566 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL ::: DataSources: slave
2025-07-04 08:47:53.566 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==> Parameters: 
2025-07-04 08:47:53.566 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - <==      Total: 1
2025-07-04 08:47:55.735 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-11} closing ...
2025-07-04 08:47:55.735 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-11} closed
2025-07-04 08:47:55.735 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-12} closing ...
2025-07-04 08:47:55.735 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-12} closed
2025-07-04 08:48:01.507 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-07-04 08:48:01.520 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 19128 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 08:48:01.521 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 08:48:01.521 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 08:48:01.630 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-04 08:48:01.630 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-04 08:48:02.052 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 08:48:02.054 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 08:48:02.075 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 12 ms. Found 0 Redis repository interfaces.
2025-07-04 08:48:02.248 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$552042ec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 08:48:02.259 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 08:48:02.588 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 08:48:02.589 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 08:48:02.589 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 08:48:02.589 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 08:48:02.593 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 08:48:02.598 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 08:48:02.599 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 08:48:02.599 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 08:48:02.643 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 08:48:02.643 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1013 ms
2025-07-04 08:48:02.646 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 08:48:03.277 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-07-04 08:48:03.298 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-07-04 08:48:03.586 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 08:48:03.586 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 08:48:03.982 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 08:48:04.109 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@34296130, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3cf5328a, org.springframework.security.web.context.SecurityContextPersistenceFilter@243f6506, org.springframework.security.web.header.HeaderWriterFilter@59cc363c, org.springframework.web.filter.CorsFilter@676a9383, org.springframework.security.web.authentication.logout.LogoutFilter@5a8a9341, com.huang.store.security.JwtAuthenticationTokenFilter@1a9f876e, com.huang.store.security.CustomAuthenticationFilter@2030bfda, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@348a8172, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@45354a4e, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5aaf76a3, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6e19fb37, org.springframework.security.web.session.SessionManagementFilter@6a1c95a7, org.springframework.security.web.access.ExceptionTranslationFilter@b7956c3, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6ce7188a]
2025-07-04 08:48:04.357 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 08:48:04.370 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 08:48:04.386 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 08:48:04.392 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 08:48:04.395 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.192 seconds (JVM running for 3.648)
2025-07-04 08:48:04.412 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 08:48:04.421 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:04.422 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 08:48:04.458 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 08:48:04.468 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 08:48:04.471 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 08:48:04.476 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 08:48:04.476 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:04.476 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 08:48:04.478 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 08:48:04.480 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 08:48:04.480 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 08:48:09.634 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-04 08:48:09.634 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-04 08:48:09.635 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-07-04 08:48:09.676 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:48:09.676 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:09.676 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:48:09.677 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:48:09.680 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:48:09.681 [http-nio-8080-exec-1] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=5, keyword=红
2025-07-04 08:48:09.692 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.CommentMapper.searchAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL AND ( u.name LIKE CONCAT('%', ?, '%') OR b.bookName LIKE CONCAT('%', ?, '%') OR c.content LIKE CONCAT('%', ?, '%') ) ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:48:09.693 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:09.693 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
         
            AND (
                u.name LIKE CONCAT('%', ?, '%') OR
                b.bookName LIKE CONCAT('%', ?, '%') OR
                c.content LIKE CONCAT('%', ?, '%')
            )
         
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:48:09.700 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.CommentMapper.searchAllComments - ==> Parameters: 红(String), 红(String), 红(String), 0(Integer), 5(Integer)
2025-07-04 08:48:09.703 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.CommentMapper.searchAllComments - <==      Total: 2
2025-07-04 08:48:09.704 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.CommentMapper.getSearchCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL AND ( u.name LIKE CONCAT('%', ?, '%') OR b.bookName LIKE CONCAT('%', ?, '%') OR c.content LIKE CONCAT('%', ?, '%') )
2025-07-04 08:48:09.705 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:09.705 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*)
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
         
            AND (
                u.name LIKE CONCAT('%', ?, '%') OR
                b.bookName LIKE CONCAT('%', ?, '%') OR
                c.content LIKE CONCAT('%', ?, '%')
            ) ::: DataSources: slave
2025-07-04 08:48:09.709 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.CommentMapper.getSearchCommentCount - ==> Parameters: 红(String), 红(String), 红(String)
2025-07-04 08:48:09.712 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.CommentMapper.getSearchCommentCount - <==      Total: 1
2025-07-04 08:48:11.148 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:48:11.148 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:11.148 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:48:11.148 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:48:11.151 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:48:11.151 [http-nio-8080-exec-2] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=5, keyword=null
2025-07-04 08:48:11.151 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:48:11.152 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:11.152 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:48:11.154 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==> Parameters: 0(Integer), 5(Integer)
2025-07-04 08:48:11.158 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - <==      Total: 5
2025-07-04 08:48:11.159 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL
2025-07-04 08:48:11.159 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:11.159 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL ::: DataSources: slave
2025-07-04 08:48:11.160 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==> Parameters: 
2025-07-04 08:48:11.161 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - <==      Total: 1
2025-07-04 08:48:20.416 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:48:20.416 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:20.416 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:48:20.417 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:48:20.422 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:48:20.423 [http-nio-8080-exec-6] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=5, keyword=红
2025-07-04 08:48:20.424 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.CommentMapper.searchAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL AND ( u.name LIKE CONCAT('%', ?, '%') OR b.bookName LIKE CONCAT('%', ?, '%') OR c.content LIKE CONCAT('%', ?, '%') ) ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:48:20.424 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:20.425 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
         
            AND (
                u.name LIKE CONCAT('%', ?, '%') OR
                b.bookName LIKE CONCAT('%', ?, '%') OR
                c.content LIKE CONCAT('%', ?, '%')
            )
         
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:48:20.425 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.CommentMapper.searchAllComments - ==> Parameters: 红(String), 红(String), 红(String), 0(Integer), 5(Integer)
2025-07-04 08:48:20.428 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.CommentMapper.searchAllComments - <==      Total: 2
2025-07-04 08:48:20.430 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.CommentMapper.getSearchCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL AND ( u.name LIKE CONCAT('%', ?, '%') OR b.bookName LIKE CONCAT('%', ?, '%') OR c.content LIKE CONCAT('%', ?, '%') )
2025-07-04 08:48:20.430 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:20.430 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*)
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
         
            AND (
                u.name LIKE CONCAT('%', ?, '%') OR
                b.bookName LIKE CONCAT('%', ?, '%') OR
                c.content LIKE CONCAT('%', ?, '%')
            ) ::: DataSources: slave
2025-07-04 08:48:20.432 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.CommentMapper.getSearchCommentCount - ==> Parameters: 红(String), 红(String), 红(String)
2025-07-04 08:48:20.438 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.CommentMapper.getSearchCommentCount - <==      Total: 1
2025-07-04 08:48:21.237 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:48:21.237 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:21.237 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:48:21.237 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:48:21.239 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:48:21.239 [http-nio-8080-exec-4] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=5, keyword=null
2025-07-04 08:48:21.239 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:48:21.240 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:21.240 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:48:21.240 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==> Parameters: 0(Integer), 5(Integer)
2025-07-04 08:48:21.244 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - <==      Total: 5
2025-07-04 08:48:21.245 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL
2025-07-04 08:48:21.245 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:21.245 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL ::: DataSources: slave
2025-07-04 08:48:21.245 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==> Parameters: 
2025-07-04 08:48:21.247 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - <==      Total: 1
2025-07-04 08:48:22.658 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:48:22.659 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:22.659 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:48:22.659 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:48:22.663 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:48:22.663 [http-nio-8080-exec-9] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=5, keyword=李
2025-07-04 08:48:22.665 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.CommentMapper.searchAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL AND ( u.name LIKE CONCAT('%', ?, '%') OR b.bookName LIKE CONCAT('%', ?, '%') OR c.content LIKE CONCAT('%', ?, '%') ) ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:48:22.666 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:22.666 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
         
            AND (
                u.name LIKE CONCAT('%', ?, '%') OR
                b.bookName LIKE CONCAT('%', ?, '%') OR
                c.content LIKE CONCAT('%', ?, '%')
            )
         
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:48:22.668 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.CommentMapper.searchAllComments - ==> Parameters: 李(String), 李(String), 李(String), 0(Integer), 5(Integer)
2025-07-04 08:48:22.688 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.CommentMapper.searchAllComments - <==      Total: 4
2025-07-04 08:48:22.695 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CommentMapper.getSearchCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL AND ( u.name LIKE CONCAT('%', ?, '%') OR b.bookName LIKE CONCAT('%', ?, '%') OR c.content LIKE CONCAT('%', ?, '%') )
2025-07-04 08:48:22.695 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:22.696 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*)
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
         
            AND (
                u.name LIKE CONCAT('%', ?, '%') OR
                b.bookName LIKE CONCAT('%', ?, '%') OR
                c.content LIKE CONCAT('%', ?, '%')
            ) ::: DataSources: slave
2025-07-04 08:48:22.697 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CommentMapper.getSearchCommentCount - ==> Parameters: 李(String), 李(String), 李(String)
2025-07-04 08:48:22.702 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CommentMapper.getSearchCommentCount - <==      Total: 1
2025-07-04 08:48:24.882 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:48:24.882 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:24.882 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:48:24.883 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:48:24.888 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:48:24.888 [http-nio-8080-exec-7] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=5, keyword=null
2025-07-04 08:48:24.888 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:48:24.889 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:24.889 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:48:24.889 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==> Parameters: 0(Integer), 5(Integer)
2025-07-04 08:48:24.894 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - <==      Total: 5
2025-07-04 08:48:24.896 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL
2025-07-04 08:48:24.896 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:24.897 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL ::: DataSources: slave
2025-07-04 08:48:24.898 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==> Parameters: 
2025-07-04 08:48:24.902 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - <==      Total: 1
2025-07-04 08:48:38.194 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:38.194 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:38.195 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.195 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:38.195 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.195 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:38.202 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 08:48:38.213 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 08:48:38.214 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:38.214 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.214 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:38.217 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:38.222 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:48:38.224 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:38.224 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.224 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:38.228 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:48:38.231 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:38.232 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:48:38.235 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:38.253 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:38.253 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:38.253 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.253 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.253 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:38.253 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:38.254 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:48:38.254 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:48:38.256 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:38.256 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:38.257 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:38.257 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.257 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:38.258 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 08:48:38.258 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.258 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:38.258 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181520552434(String)
2025-07-04 08:48:38.260 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 08:48:38.262 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:38.262 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:38.262 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:38.262 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.262 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:38.263 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:48:38.264 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:38.265 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:38.265 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.265 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:38.265 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181355860200(String)
2025-07-04 08:48:38.267 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:38.268 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:38.269 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.269 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:38.269 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:48:38.271 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:38.271 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:38.271 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.271 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:38.271 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181206573250(String)
2025-07-04 08:48:38.273 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:38.274 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:38.274 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.274 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:38.274 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:48:38.275 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:38.276 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:38.276 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.276 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:38.276 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703175346171678(String)
2025-07-04 08:48:38.278 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:38.278 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:38.278 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.278 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:38.279 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:48:38.280 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:38.281 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 08:48:38.281 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.281 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:38.282 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 08:48:38.283 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:38.296 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:38.297 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.297 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:38.299 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:38.302 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 08:48:38.302 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:48:38.302 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.302 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:38.303 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 08:48:38.305 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:38.335 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:38.335 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.335 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:38.337 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:38.337 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:38.337 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.337 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:38.339 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:38.340 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:48:38.340 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:38.340 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.340 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:38.340 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:48:38.343 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:48:38.343 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:38.343 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:38.343 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.344 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:38.344 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:38.344 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:48:38.344 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.344 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:38.346 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:48:38.347 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:38.348 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:38.348 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.348 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:38.348 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:38.348 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:48:38.348 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 08:48:38.348 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.348 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:38.348 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 08:48:38.349 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:38.349 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:38.349 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:48:38.349 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.349 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:38.350 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 08:48:38.351 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:38.420 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:38.421 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.421 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:38.421 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:38.422 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 08:48:38.423 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:48:38.423 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.423 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:38.423 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 08:48:38.424 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:38.440 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:38.440 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.440 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:38.440 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:38.443 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:48:38.444 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:38.444 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.444 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:38.444 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 08:48:38.446 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:38.447 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:38.447 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.447 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:38.447 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:48:38.449 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:38.450 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:48:38.450 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.450 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:38.450 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 08:48:38.452 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:38.453 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:38.454 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.454 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:38.454 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:38.456 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:48:38.457 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:38.457 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.457 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:38.457 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:48:38.458 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:38.459 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:38.459 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.459 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:38.459 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:48:38.460 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:38.461 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:48:38.461 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.461 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:38.462 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 08:48:38.463 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:38.479 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:38.479 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:38.479 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.479 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:38.479 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.479 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:38.479 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:38.479 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:38.481 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:48:38.481 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:48:38.481 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:38.482 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.482 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:38.482 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:38.482 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.482 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:38.482 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 08:48:38.482 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 08:48:38.483 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:38.483 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:38.484 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:38.484 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.484 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:38.484 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:38.484 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.484 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:38.485 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:48:38.485 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:48:38.486 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:38.486 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:38.487 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:48:38.487 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.487 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:38.487 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:48:38.487 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.487 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:38.487 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 08:48:38.487 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 08:48:38.488 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:38.488 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:38.508 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:38.508 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:38.508 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.508 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.508 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:38.508 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:38.508 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:38.509 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:38.510 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:48:38.510 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:48:38.511 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:38.511 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.511 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:38.511 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:38.511 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.511 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:38.511 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 08:48:38.511 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 08:48:38.513 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:38.513 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:38.514 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:38.514 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:38.514 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.514 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.514 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:38.514 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:38.514 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:48:38.514 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:48:38.515 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:38.515 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:38.515 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:48:38.515 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.515 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:38.516 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:48:38.516 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.516 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:38.516 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 08:48:38.516 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 08:48:38.517 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:38.517 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:38.536 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:38.536 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.536 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:38.536 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:38.538 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:48:38.539 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:38.539 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.539 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:38.539 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 08:48:38.541 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:38.541 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:38.541 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.541 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:38.542 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:48:38.543 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:38.544 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:48:38.544 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:38.544 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:38.544 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 08:48:38.545 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:40.745 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:40.745 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.745 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:40.745 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 08:48:40.754 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:48:40.755 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:40.755 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.755 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:40.755 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 08:48:40.763 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:40.764 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:40.765 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.765 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:40.765 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:48:40.767 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:40.768 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:48:40.768 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.768 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:40.769 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 08:48:40.771 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:40.804 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:40.804 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.804 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:40.805 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:40.810 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:48:40.811 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:40.811 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.811 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:40.812 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:48:40.814 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:40.815 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:40.815 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.815 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:40.816 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:48:40.818 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:40.819 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 08:48:40.819 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.819 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:40.819 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 08:48:40.821 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:40.836 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:40.836 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.837 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:40.837 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:40.839 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 08:48:40.840 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:48:40.840 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.840 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:40.840 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 08:48:40.842 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:40.854 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:40.854 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.854 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:40.854 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:40.857 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:48:40.858 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:40.858 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.858 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:40.859 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:48:40.861 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:40.862 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:40.862 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.862 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:40.863 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:48:40.864 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:40.865 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:48:40.865 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.865 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:40.866 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 08:48:40.867 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:40.880 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:40.880 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.880 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:40.880 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:40.882 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:48:40.883 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:40.883 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.883 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:40.883 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 08:48:40.886 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:40.887 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:40.887 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.887 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:40.887 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:48:40.889 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:40.889 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:48:40.889 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.889 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:40.890 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 08:48:40.892 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:40.908 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:40.909 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.909 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:40.909 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:40.912 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:48:40.913 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:40.913 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.913 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:40.913 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 08:48:40.915 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:40.916 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:40.916 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.916 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:40.916 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:48:40.917 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:40.918 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:48:40.918 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.918 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:40.918 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 08:48:40.919 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:40.931 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:40.931 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.932 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:40.932 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:40.935 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:48:40.936 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:40.936 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.936 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:40.936 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 08:48:40.938 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:40.939 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:40.939 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.939 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:40.940 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:48:40.941 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:40.942 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:48:40.942 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:40.942 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:40.943 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 08:48:40.944 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:41.134 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:41.134 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.134 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:41.135 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 08:48:41.138 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:48:41.139 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:41.139 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.139 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:41.139 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 08:48:41.141 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:41.142 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:41.142 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.142 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:41.142 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:48:41.144 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:41.145 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:48:41.145 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.145 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:41.145 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 08:48:41.146 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:41.169 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:41.169 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.169 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:41.169 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:41.171 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:48:41.171 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:41.171 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.171 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:41.172 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:48:41.174 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:41.175 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:41.175 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.175 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:41.175 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:48:41.177 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:41.178 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 08:48:41.178 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.178 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:41.178 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 08:48:41.180 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:41.195 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:41.195 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.195 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:41.196 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:41.197 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 08:48:41.198 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:48:41.198 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.198 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:41.198 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 08:48:41.200 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:41.211 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:41.211 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.211 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:41.211 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:41.213 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:48:41.214 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:41.214 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.214 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:41.214 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:48:41.216 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:41.216 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:41.216 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.216 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:41.217 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:48:41.218 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:41.219 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:48:41.219 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.219 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:41.219 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 08:48:41.221 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:41.231 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:41.231 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.231 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:41.232 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:41.234 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:48:41.234 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:41.234 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.234 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:41.235 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 08:48:41.236 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:41.236 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:41.236 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.236 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:41.236 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:48:41.237 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:41.238 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:48:41.238 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.238 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:41.238 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 08:48:41.240 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:41.250 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:41.251 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.251 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:41.251 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:41.254 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:48:41.255 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:41.255 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.255 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:41.255 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 08:48:41.257 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:41.258 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:41.258 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.258 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:41.258 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:48:41.259 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:41.261 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:48:41.261 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.261 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:41.261 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 08:48:41.262 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:48:41.273 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:48:41.273 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.273 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:48:41.274 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:48:41.276 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:48:41.277 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:48:41.277 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.278 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:48:41.278 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 08:48:41.280 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:48:41.281 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:48:41.281 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.281 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:48:41.282 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:48:41.284 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:48:41.284 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:48:41.284 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:48:41.284 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:48:41.285 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 08:48:41.286 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:53:04.394 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 08:53:04.396 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 08:53:04.397 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:53:04.397 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 08:53:04.409 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 08:53:04.412 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 08:53:04.413 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 08:53:04.413 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 08:53:04.413 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:53:04.413 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 08:53:04.414 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 08:53:04.416 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 08:53:04.417 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 08:54:29.551 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:54:29.551 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:29.551 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:54:29.552 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:54:29.554 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:54:29.554 [http-nio-8080-exec-4] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=10, keyword=null
2025-07-04 08:54:29.554 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:54:29.554 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:29.554 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:54:29.555 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 08:54:29.557 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - <==      Total: 8
2025-07-04 08:54:29.557 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL
2025-07-04 08:54:29.558 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:29.558 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL ::: DataSources: slave
2025-07-04 08:54:29.558 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==> Parameters: 
2025-07-04 08:54:29.559 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - <==      Total: 1
2025-07-04 08:54:29.880 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:29.880 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:29.880 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:29.880 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:29.880 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:29.880 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:29.880 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:29.882 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 08:54:29.882 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:54:29.883 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:29.883 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:29.883 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:29.884 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:54:29.886 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:29.887 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:29.887 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:29.887 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:29.887 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:54:29.888 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 08:54:29.889 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:29.889 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:29.889 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:29.889 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:29.889 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 08:54:29.889 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:54:29.889 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:29.889 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:29.890 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 08:54:29.891 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:29.892 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:29.893 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:29.893 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:29.893 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:29.893 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:54:29.894 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:29.895 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:29.895 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:29.895 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:29.895 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181520552434(String)
2025-07-04 08:54:29.897 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:29.898 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:29.898 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:29.898 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:29.898 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:54:29.900 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:29.900 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:29.900 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:29.900 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:29.901 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181355860200(String)
2025-07-04 08:54:29.902 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:29.903 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:29.903 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:29.903 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:29.903 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:54:29.904 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:29.905 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:29.905 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:29.905 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:29.905 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181206573250(String)
2025-07-04 08:54:29.907 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:29.908 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:29.908 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:29.908 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:29.908 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:54:29.910 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:29.910 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:29.910 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:29.910 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:29.910 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703175346171678(String)
2025-07-04 08:54:29.911 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:29.911 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:29.911 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:29.911 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:29.911 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:54:29.913 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:29.914 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 08:54:29.914 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:29.914 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:29.914 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 08:54:29.915 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:29.994 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:29.994 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:29.994 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:29.994 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:29.996 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 08:54:29.996 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:54:29.996 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:29.996 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:29.997 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 08:54:29.998 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:30.052 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:30.052 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.052 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:30.052 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:30.053 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:30.053 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.053 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:30.053 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:30.054 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:54:30.054 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:30.055 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.055 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:30.055 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:54:30.055 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:54:30.055 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:30.055 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.055 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:30.055 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:54:30.056 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:30.056 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:30.056 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:30.056 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:30.056 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.056 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.056 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:30.056 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:30.056 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:54:30.056 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:54:30.057 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:30.057 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:30.058 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 08:54:30.058 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:54:30.058 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.058 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.058 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:30.058 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:30.058 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 08:54:30.058 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 08:54:30.060 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:30.060 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:30.092 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:30.092 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.092 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:30.092 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:30.093 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 08:54:30.094 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:54:30.094 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.094 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:30.094 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 08:54:30.095 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:30.133 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:30.133 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.133 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:30.134 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:30.136 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:54:30.137 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:30.137 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.137 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:30.137 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 08:54:30.138 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:30.139 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:30.139 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.139 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:30.139 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:30.139 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:54:30.139 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.139 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:30.139 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:30.140 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:30.141 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:54:30.141 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.141 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:30.141 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:54:30.141 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 08:54:30.141 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:30.141 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.141 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:30.142 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:54:30.142 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:30.143 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:30.143 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:30.143 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.143 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:30.143 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:54:30.145 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:30.145 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:54:30.146 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.146 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:30.146 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 08:54:30.147 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:30.184 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:30.184 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.184 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:30.185 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:30.187 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:30.187 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.187 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:30.187 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:54:30.188 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:30.188 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:30.188 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.188 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:30.188 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 08:54:30.189 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:30.189 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:54:30.190 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:30.190 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.190 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:30.190 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:30.190 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.190 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:30.190 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:54:30.190 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 08:54:30.191 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:30.191 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:30.191 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:54:30.191 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:30.191 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.191 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:30.191 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.191 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:30.191 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:54:30.191 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 08:54:30.192 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:30.192 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:30.193 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:54:30.193 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.193 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:30.193 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 08:54:30.194 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:30.242 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:30.242 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.242 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:30.242 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:30.243 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:30.244 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.244 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:30.244 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:30.245 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:54:30.245 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:30.245 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.245 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:30.245 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:54:30.245 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 08:54:30.246 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:30.246 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.246 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:30.246 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 08:54:30.247 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:30.248 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:30.248 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:30.248 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.248 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:30.248 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:54:30.248 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:30.248 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.248 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:30.249 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:54:30.250 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:30.250 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:30.250 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:54:30.251 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.251 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:30.251 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:54:30.251 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.251 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:30.251 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 08:54:30.251 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 08:54:30.252 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:30.252 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:30.267 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:30.267 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.267 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:30.268 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:30.270 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:54:30.271 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:30.271 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.271 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:30.271 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 08:54:30.272 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:30.273 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:30.273 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.273 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:30.273 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:54:30.274 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:30.275 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:54:30.275 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:30.275 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:30.275 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 08:54:30.276 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:44.549 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 08:54:44.550 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.550 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 08:54:44.550 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 08:54:44.554 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 08:54:44.555 [http-nio-8080-exec-5] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=10, keyword=null
2025-07-04 08:54:44.555 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 08:54:44.555 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.555 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 08:54:44.556 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 08:54:44.559 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - <==      Total: 8
2025-07-04 08:54:44.560 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL
2025-07-04 08:54:44.560 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.560 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL ::: DataSources: slave
2025-07-04 08:54:44.561 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==> Parameters: 
2025-07-04 08:54:44.562 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - <==      Total: 1
2025-07-04 08:54:44.653 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:44.653 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:44.653 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.653 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.653 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:44.653 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:44.653 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 08:54:44.653 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:44.654 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:54:44.655 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:44.655 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.655 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:44.655 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:54:44.655 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 08:54:44.655 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:44.655 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.655 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:44.655 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:54:44.656 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:44.656 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:44.657 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:44.657 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:44.657 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.657 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.657 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:44.657 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:44.657 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:54:44.657 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:54:44.658 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:44.658 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:44.658 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:44.658 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 08:54:44.658 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.658 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.658 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:44.658 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:44.658 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181520552434(String)
2025-07-04 08:54:44.658 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 08:54:44.658 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:44.659 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:44.659 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:44.659 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.659 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:44.659 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:54:44.661 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:44.661 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:44.661 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.661 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:44.661 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181355860200(String)
2025-07-04 08:54:44.663 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:44.663 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:44.663 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.663 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:44.663 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:54:44.664 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:44.665 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:44.665 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.665 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:44.665 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181206573250(String)
2025-07-04 08:54:44.667 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:44.667 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:44.667 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.667 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:44.667 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:54:44.668 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:44.669 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:44.669 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.669 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:44.669 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703175346171678(String)
2025-07-04 08:54:44.670 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:44.671 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:44.671 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.671 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:44.671 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:54:44.672 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:44.673 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 08:54:44.673 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.673 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:44.673 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 08:54:44.674 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:44.749 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:44.749 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.749 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:44.749 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:44.750 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 08:54:44.751 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:54:44.751 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.751 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:44.751 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 08:54:44.752 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:44.840 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:44.840 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.840 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:44.840 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:44.841 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:54:44.842 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:44.842 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.842 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:44.842 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:54:44.843 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:44.844 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:44.844 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.844 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:44.844 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:54:44.845 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:44.845 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 08:54:44.845 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.845 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:44.845 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:44.845 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 08:54:44.845 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.845 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:44.845 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:44.846 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:44.847 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:54:44.848 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:44.848 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.848 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:44.848 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:54:44.849 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:44.850 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:44.850 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.850 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:44.850 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:54:44.851 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:44.851 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:54:44.851 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.852 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:44.852 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 08:54:44.853 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:44.863 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:44.863 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.863 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:44.863 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:44.865 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 08:54:44.865 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:54:44.865 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.865 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:44.865 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 08:54:44.866 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:44.907 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:44.907 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.907 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:44.907 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:44.909 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:54:44.909 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:44.909 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.909 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:44.909 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 08:54:44.911 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:44.911 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:44.911 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.911 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:44.911 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:54:44.912 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:44.912 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:54:44.912 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.912 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:44.912 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 08:54:44.913 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:44.919 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:44.919 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.919 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:44.919 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:44.921 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:54:44.921 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:44.921 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.921 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:44.921 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:54:44.923 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:44.924 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:44.924 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.924 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:44.924 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:54:44.925 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:44.926 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:54:44.926 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.926 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:44.926 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 08:54:44.927 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:44.947 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:44.947 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:44.947 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.947 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:44.947 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.947 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:44.947 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:44.947 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:44.949 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:54:44.950 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:44.950 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.950 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:44.950 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 08:54:44.950 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:54:44.950 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:44.950 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.950 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:44.950 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 08:54:44.950 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:44.951 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:44.951 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:44.951 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.951 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:44.951 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:54:44.951 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:44.951 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.951 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:44.951 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:54:44.952 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:44.952 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:44.952 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:54:44.953 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.953 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:44.953 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:54:44.953 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.953 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 08:54:44.953 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:44.953 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 08:54:44.954 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:44.954 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:44.988 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:44.988 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.988 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:44.988 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:44.988 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:44.989 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.989 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:44.989 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:44.990 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:54:44.991 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:54:44.991 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:44.991 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:44.991 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.991 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.991 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:44.991 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:44.991 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 08:54:44.991 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 08:54:44.992 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:44.992 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:44.993 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:44.993 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:44.993 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.993 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.993 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:44.993 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:44.993 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:54:44.993 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:54:44.994 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:44.994 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:44.994 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:54:44.994 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:54:44.994 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.994 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:44.994 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:44.994 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:44.995 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 08:54:44.995 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 08:54:44.995 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:44.995 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:54:45.009 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:54:45.009 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:45.009 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:54:45.009 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:54:45.011 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:54:45.012 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:54:45.012 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:45.012 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:54:45.012 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 08:54:45.013 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:54:45.014 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:54:45.014 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:45.014 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:54:45.014 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:54:45.015 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:54:45.016 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:54:45.016 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:54:45.016 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:54:45.016 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 08:54:45.017 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:55:03.362 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:55:03.362 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:55:03.363 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.363 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.363 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:55:03.363 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:55:03.363 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 08:55:03.363 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:55:03.364 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:55:03.365 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:55:03.365 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 08:55:03.365 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.365 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:55:03.365 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.365 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:55:03.365 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:55:03.365 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:55:03.366 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:55:03.366 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:55:03.366 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:55:03.367 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:55:03.367 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:55:03.367 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.367 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.367 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:55:03.367 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:55:03.367 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:55:03.367 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:55:03.368 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:55:03.368 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:55:03.369 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:55:03.369 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 08:55:03.369 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.369 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:55:03.369 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.369 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:55:03.369 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181520552434(String)
2025-07-04 08:55:03.369 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 08:55:03.370 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:55:03.371 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:55:03.371 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.371 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:55:03.371 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:55:03.371 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:55:03.371 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:55:03.371 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:55:03.371 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.372 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:55:03.372 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181355860200(String)
2025-07-04 08:55:03.373 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:55:03.374 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:55:03.374 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.374 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:55:03.375 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:55:03.376 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:55:03.377 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:55:03.377 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.377 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:55:03.377 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181206573250(String)
2025-07-04 08:55:03.378 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:55:03.379 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:55:03.379 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.379 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:55:03.383 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:55:03.384 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:55:03.385 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:55:03.385 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.385 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:55:03.385 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703175346171678(String)
2025-07-04 08:55:03.386 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:55:03.387 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:55:03.387 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.387 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:55:03.387 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:55:03.388 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:55:03.389 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 08:55:03.389 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.389 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:55:03.390 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 08:55:03.391 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:55:03.422 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:55:03.422 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.422 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:55:03.422 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:55:03.423 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 08:55:03.424 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:55:03.424 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.424 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:55:03.424 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 08:55:03.425 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:55:03.489 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:55:03.489 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.489 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:55:03.490 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:55:03.491 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:55:03.492 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:55:03.492 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.492 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:55:03.492 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:55:03.496 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:55:03.496 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:55:03.496 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.496 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:55:03.497 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:55:03.497 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:55:03.497 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.497 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:55:03.497 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:55:03.498 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:55:03.498 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 08:55:03.498 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.498 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:55:03.499 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 08:55:03.499 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:55:03.499 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:55:03.499 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.499 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:55:03.499 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:55:03.499 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:55:03.501 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:55:03.501 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:55:03.501 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.501 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:55:03.501 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:55:03.502 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:55:03.503 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:55:03.503 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.503 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:55:03.503 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 08:55:03.504 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:55:03.525 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:55:03.525 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.525 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:55:03.526 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:55:03.527 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 08:55:03.528 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:55:03.528 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.528 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:55:03.528 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 08:55:03.529 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:55:03.553 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:55:03.554 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.554 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:55:03.554 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:55:03.555 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:55:03.555 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:55:03.555 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.555 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:55:03.555 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 08:55:03.556 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:55:03.557 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:55:03.557 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.557 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:55:03.557 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:55:03.558 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:55:03.558 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:55:03.558 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.558 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:55:03.558 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:55:03.558 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:55:03.558 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.558 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:55:03.558 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 08:55:03.559 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:55:03.559 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:55:03.559 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:55:03.559 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.559 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:55:03.559 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:55:03.560 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:55:03.561 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:55:03.561 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.561 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:55:03.561 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:55:03.562 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:55:03.562 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:55:03.562 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.563 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:55:03.563 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 08:55:03.563 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:55:03.612 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:55:03.612 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.612 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:55:03.612 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:55:03.613 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:55:03.613 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.613 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:55:03.613 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:55:03.613 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:55:03.614 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:55:03.614 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.614 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:55:03.614 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 08:55:03.614 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:55:03.614 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:55:03.615 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:55:03.615 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.615 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:55:03.615 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:55:03.615 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.615 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:55:03.615 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 08:55:03.615 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:55:03.615 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:55:03.616 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:55:03.616 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:55:03.616 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.616 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:55:03.616 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:55:03.616 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.616 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:55:03.616 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:55:03.616 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 08:55:03.616 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:55:03.616 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:55:03.617 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:55:03.617 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.617 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:55:03.617 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 08:55:03.618 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:55:03.654 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:55:03.654 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.654 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:55:03.654 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:55:03.656 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:55:03.656 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:55:03.656 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.656 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:55:03.656 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 08:55:03.657 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:55:03.657 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.657 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:55:03.657 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:55:03.657 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:55:03.658 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:55:03.658 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.658 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:55:03.658 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:55:03.659 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:55:03.660 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:55:03.660 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.660 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:55:03.660 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 08:55:03.660 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:55:03.660 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:55:03.660 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.660 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:55:03.660 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 08:55:03.661 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:55:03.661 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:55:03.661 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:55:03.661 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.661 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:55:03.662 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:55:03.662 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:55:03.663 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:55:03.663 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.663 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:55:03.663 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 08:55:03.664 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:55:03.691 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:55:03.691 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.691 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:55:03.691 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:55:03.693 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:55:03.693 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:55:03.693 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.693 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:55:03.693 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 08:55:03.694 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:55:03.695 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:55:03.695 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.695 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:55:03.695 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:55:03.696 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:55:03.696 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:55:03.696 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:55:03.696 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:55:03.697 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 08:55:03.697 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:56:05.736 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:56:05.736 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.736 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:56:05.736 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:56:05.737 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.737 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:56:05.738 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 08:56:05.738 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:56:05.739 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:56:05.739 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:56:05.739 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.739 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:56:05.739 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:56:05.739 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 08:56:05.739 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:56:05.739 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.739 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:56:05.739 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:56:05.740 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:56:05.740 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:56:05.740 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:56:05.740 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.740 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:56:05.740 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:56:05.740 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:56:05.740 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.740 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:56:05.740 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:56:05.741 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:56:05.741 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:56:05.741 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:56:05.741 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 08:56:05.741 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.741 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:56:05.741 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.741 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:56:05.741 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181520552434(String)
2025-07-04 08:56:05.741 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 08:56:05.742 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:56:05.742 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:56:05.742 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:56:05.742 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.742 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:56:05.742 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:56:05.743 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:56:05.743 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:56:05.743 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.743 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:56:05.743 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181355860200(String)
2025-07-04 08:56:05.744 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:56:05.744 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:56:05.744 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.744 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:56:05.744 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:56:05.745 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:56:05.746 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:56:05.746 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.746 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:56:05.746 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181206573250(String)
2025-07-04 08:56:05.747 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:56:05.747 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:56:05.747 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.747 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:56:05.747 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:56:05.748 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:56:05.748 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:56:05.748 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.748 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:56:05.749 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703175346171678(String)
2025-07-04 08:56:05.749 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:56:05.750 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:56:05.750 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.750 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:56:05.750 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 08:56:05.751 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:56:05.751 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 08:56:05.751 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.751 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:56:05.751 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 08:56:05.752 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:56:05.760 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:56:05.760 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.760 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:56:05.760 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:56:05.761 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 08:56:05.761 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:56:05.761 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.761 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:56:05.761 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 08:56:05.762 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:56:05.846 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:56:05.847 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.847 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:56:05.847 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:56:05.849 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:56:05.850 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:56:05.850 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:56:05.850 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.850 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:56:05.850 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:56:05.850 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.851 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:56:05.851 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:56:05.851 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:56:05.852 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:56:05.852 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.852 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:56:05.852 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:56:05.852 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:56:05.853 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:56:05.853 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.853 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:56:05.853 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:56:05.854 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:56:05.854 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 08:56:05.854 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.854 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:56:05.854 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:56:05.855 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 08:56:05.855 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:56:05.855 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.855 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:56:05.855 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:56:05.856 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:56:05.857 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:56:05.858 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:56:05.858 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.858 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:56:05.858 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 08:56:05.859 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:56:05.895 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:56:05.896 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.896 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:56:05.896 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:56:05.898 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 08:56:05.898 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:56:05.898 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.898 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:56:05.899 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 08:56:05.900 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:56:05.908 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:56:05.908 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.908 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:56:05.908 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:56:05.913 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:56:05.913 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:56:05.914 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.914 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:56:05.914 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 08:56:05.916 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:56:05.917 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:56:05.917 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.917 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:56:05.917 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:56:05.919 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:56:05.920 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:56:05.920 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.920 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:56:05.920 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 08:56:05.922 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:56:05.926 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:56:05.926 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.926 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:56:05.927 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:56:05.929 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:56:05.929 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:56:05.929 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.929 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:56:05.930 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 08:56:05.931 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:56:05.932 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:56:05.932 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.932 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:56:05.932 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 08:56:05.934 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:56:05.934 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:56:05.935 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.935 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:56:05.935 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 08:56:05.936 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:56:05.978 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:56:05.978 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.979 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:56:05.979 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:56:05.981 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:56:05.982 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:56:05.982 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.982 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:56:05.982 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 08:56:05.984 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:56:05.984 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:56:05.984 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.984 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:56:05.984 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:56:05.986 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:56:05.986 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:56:05.986 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.986 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:56:05.986 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:56:05.986 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.986 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:56:05.987 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 08:56:05.987 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:56:05.987 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:56:05.988 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:56:05.988 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:56:05.988 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.988 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:56:05.988 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 08:56:05.989 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:56:05.990 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:56:05.990 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.990 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:56:05.990 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:56:05.991 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:56:05.992 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:56:05.992 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:05.992 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:56:05.992 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 08:56:05.993 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:56:06.070 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:56:06.071 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:06.071 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:56:06.071 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:56:06.072 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:56:06.073 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:56:06.073 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:06.073 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:56:06.073 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 08:56:06.074 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:56:06.075 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:56:06.075 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:06.075 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:56:06.075 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:56:06.076 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:56:06.077 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:56:06.077 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:06.077 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:56:06.077 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 08:56:06.079 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:56:06.093 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:56:06.093 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:06.093 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:56:06.093 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:56:06.095 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:56:06.095 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:56:06.095 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:06.095 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:56:06.096 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 08:56:06.097 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:56:06.097 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:56:06.097 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:06.097 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:56:06.097 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 08:56:06.098 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:56:06.099 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:56:06.099 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:06.099 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:56:06.099 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 08:56:06.100 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:56:06.138 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 08:56:06.138 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:06.138 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 08:56:06.138 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 08:56:06.140 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 08:56:06.141 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 08:56:06.141 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:06.141 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 08:56:06.141 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 08:56:06.142 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 08:56:06.142 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 08:56:06.142 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:06.142 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 08:56:06.142 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 08:56:06.143 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 08:56:06.143 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 08:56:06.144 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:56:06.144 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 08:56:06.144 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 08:56:06.145 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 08:58:04.394 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 08:58:04.394 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 08:58:04.395 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:58:04.395 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 08:58:04.397 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 08:58:04.399 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 08:58:04.399 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 08:58:04.400 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 08:58:04.400 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 08:58:04.400 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 08:58:04.402 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 08:58:04.403 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 08:58:04.403 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:01:33.401 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:01:33.401 [Thread-7] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 09:01:33.404 [Thread-7] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-07-04 09:01:33.417 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1868743234] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:01:33.418 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1868743234] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:01:33.419 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-2088800240] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:01:33.419 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-2088800240] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:01:33.420 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 09:01:33.421 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 09:01:33.453 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closing ...
2025-07-04 09:01:33.458 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-07-04 09:01:33.458 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closing ...
2025-07-04 09:01:33.461 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-07-04 09:01:33.612 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 19128 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 09:01:33.613 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 09:01:33.613 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 09:01:33.926 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 09:01:33.926 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 09:01:33.943 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17 ms. Found 0 Redis repository interfaces.
2025-07-04 09:01:34.018 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$552042ec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:01:34.025 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:01:34.157 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 09:01:34.157 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 09:01:34.158 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 09:01:34.158 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 09:01:34.159 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 09:01:34.160 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:01:34.161 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 09:01:34.161 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 09:01:34.207 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 09:01:34.208 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 586 ms
2025-07-04 09:01:34.220 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 09:01:34.391 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} inited
2025-07-04 09:01:34.412 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} inited
2025-07-04 09:01:34.639 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 09:01:34.639 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 09:01:35.008 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 09:01:35.260 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@570c4475, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2efe8fa2, org.springframework.security.web.context.SecurityContextPersistenceFilter@6fce2ba9, org.springframework.security.web.header.HeaderWriterFilter@3419d14f, org.springframework.web.filter.CorsFilter@412f2fdd, org.springframework.security.web.authentication.logout.LogoutFilter@30a84d5c, com.huang.store.security.JwtAuthenticationTokenFilter@45421dd7, com.huang.store.security.CustomAuthenticationFilter@6b106c2a, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@38853dd3, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@15b6965c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6f5fbe0c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7ed7d525, org.springframework.security.web.session.SessionManagementFilter@39ff1885, org.springframework.security.web.access.ExceptionTranslationFilter@6493c23e, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@19a18944]
2025-07-04 09:01:35.514 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 09:01:35.530 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 09:01:35.534 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 09:01:35.539 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:01:35.540 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 1.996 seconds (JVM running for 814.793)
2025-07-04 09:01:35.540 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:01:35.540 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:01:35.540 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:01:35.541 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:01:35.542 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:01:35.543 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:01:35.547 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:01:35.547 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:01:35.547 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:01:35.548 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:01:35.550 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:01:35.552 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:03:03.000 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:03:03.000 [Thread-9] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 09:03:03.004 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1921366241] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:03:03.004 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1921366241] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:03:03.004 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-145877775] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:03:03.005 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-145877775] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:03:03.005 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 09:03:03.006 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 09:03:03.010 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closing ...
2025-07-04 09:03:03.011 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closed
2025-07-04 09:03:03.011 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closing ...
2025-07-04 09:03:03.012 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closed
2025-07-04 09:03:03.136 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 19128 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 09:03:03.136 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 09:03:03.136 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 09:03:03.494 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 09:03:03.494 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 09:03:03.512 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17 ms. Found 0 Redis repository interfaces.
2025-07-04 09:03:03.587 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$552042ec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:03:03.593 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:03:03.670 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 09:03:03.670 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 09:03:03.670 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 09:03:03.670 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 09:03:03.671 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 09:03:03.671 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:03:03.671 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 09:03:03.671 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 09:03:03.689 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 09:03:03.689 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 550 ms
2025-07-04 09:03:03.691 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 09:03:03.852 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} inited
2025-07-04 09:03:03.882 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} inited
2025-07-04 09:03:04.092 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 09:03:04.092 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 09:03:04.333 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderController': Unsatisfied dependency expressed through field 'userService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.huang.store.service.imp.UserService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true), @org.springframework.beans.factory.annotation.Qualifier("UserServiceImpl")}
2025-07-04 09:03:04.338 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closing ...
2025-07-04 09:03:04.338 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closed
2025-07-04 09:03:04.339 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closing ...
2025-07-04 09:03:04.339 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closed
2025-07-04 09:03:04.340 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 09:03:04.352 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-07-04 09:03:04.425 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderController': Unsatisfied dependency expressed through field 'userService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.huang.store.service.imp.UserService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true), @org.springframework.beans.factory.annotation.Qualifier("UserServiceImpl")}
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.huang.store.service.imp.UserService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true), @org.springframework.beans.factory.annotation.Qualifier("UserServiceImpl")}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1801)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1357)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 25 common frames omitted
2025-07-04 09:05:00.862 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-07-04 09:05:00.874 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 11592 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 09:05:00.874 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 09:05:00.874 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 09:05:01.009 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-04 09:05:01.009 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-04 09:05:01.510 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 09:05:01.512 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 09:05:01.553 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 28 ms. Found 0 Redis repository interfaces.
2025-07-04 09:05:01.743 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$faadec3a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:05:01.754 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:05:02.066 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 09:05:02.066 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 09:05:02.066 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 09:05:02.066 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 09:05:02.070 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 09:05:02.074 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:05:02.076 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 09:05:02.076 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 09:05:02.119 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 09:05:02.119 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1110 ms
2025-07-04 09:05:02.122 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 09:05:02.820 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-07-04 09:05:02.841 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-07-04 09:05:03.127 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 09:05:03.127 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 09:05:03.383 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderController': Unsatisfied dependency expressed through field 'userService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.huang.store.service.imp.UserService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true), @org.springframework.beans.factory.annotation.Qualifier("UserServiceImpl")}
2025-07-04 09:05:03.391 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closing ...
2025-07-04 09:05:03.394 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-07-04 09:05:03.394 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closing ...
2025-07-04 09:05:03.395 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-07-04 09:05:03.397 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 09:05:03.407 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-07-04 09:05:03.422 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderController': Unsatisfied dependency expressed through field 'userService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.huang.store.service.imp.UserService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true), @org.springframework.beans.factory.annotation.Qualifier("UserServiceImpl")}
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.huang.store.service.imp.UserService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true), @org.springframework.beans.factory.annotation.Qualifier("UserServiceImpl")}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1801)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1357)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 25 common frames omitted
2025-07-04 09:05:37.024 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-07-04 09:05:37.037 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 21644 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 09:05:37.037 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 09:05:37.037 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 09:05:37.134 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-04 09:05:37.134 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-04 09:05:37.573 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 09:05:37.575 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 09:05:37.596 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.
2025-07-04 09:05:37.765 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$2eb2b79a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:05:37.778 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:05:38.107 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 09:05:38.108 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 09:05:38.108 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 09:05:38.108 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 09:05:38.111 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 09:05:38.116 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:05:38.117 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 09:05:38.117 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 09:05:38.160 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 09:05:38.160 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1025 ms
2025-07-04 09:05:38.163 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 09:05:38.736 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-07-04 09:05:38.758 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-07-04 09:05:39.027 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 09:05:39.027 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 09:05:39.278 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderController': Unsatisfied dependency expressed through field 'userService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.huang.store.service.imp.UserService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true), @org.springframework.beans.factory.annotation.Qualifier("UserServiceImpl")}
2025-07-04 09:05:39.286 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closing ...
2025-07-04 09:05:39.289 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-07-04 09:05:39.289 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closing ...
2025-07-04 09:05:39.290 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-07-04 09:05:39.292 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 09:05:39.301 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-07-04 09:05:39.316 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderController': Unsatisfied dependency expressed through field 'userService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.huang.store.service.imp.UserService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true), @org.springframework.beans.factory.annotation.Qualifier("UserServiceImpl")}
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.huang.store.service.imp.UserService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true), @org.springframework.beans.factory.annotation.Qualifier("UserServiceImpl")}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1801)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1357)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 25 common frames omitted
2025-07-04 09:09:42.112 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-07-04 09:09:42.121 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 18068 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 09:09:42.122 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 09:09:42.122 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 09:09:42.219 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-04 09:09:42.219 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-04 09:09:42.647 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 09:09:42.649 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 09:09:42.669 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 12 ms. Found 0 Redis repository interfaces.
2025-07-04 09:09:42.830 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$ac37fe21] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:09:42.840 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:09:43.146 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 09:09:43.147 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 09:09:43.147 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 09:09:43.147 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 09:09:43.150 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 09:09:43.155 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:09:43.156 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 09:09:43.156 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 09:09:43.199 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 09:09:43.200 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 980 ms
2025-07-04 09:09:43.203 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 09:09:43.745 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-07-04 09:09:43.783 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-07-04 09:09:44.059 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 09:09:44.059 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 09:09:44.447 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 09:09:44.563 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@735cd233, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@565486f5, org.springframework.security.web.context.SecurityContextPersistenceFilter@7941e728, org.springframework.security.web.header.HeaderWriterFilter@7a2a1fbb, org.springframework.web.filter.CorsFilter@6d33080b, org.springframework.security.web.authentication.logout.LogoutFilter@6ea5e315, com.huang.store.security.JwtAuthenticationTokenFilter@5c97a004, com.huang.store.security.CustomAuthenticationFilter@42bc58fa, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@6ce1482, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3fd38c11, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@33dffade, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@423e4f61, org.springframework.security.web.session.SessionManagementFilter@36f777ea, org.springframework.security.web.access.ExceptionTranslationFilter@692cde5e, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@3998b1e1]
2025-07-04 09:09:44.792 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 09:09:44.807 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 09:09:44.822 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 09:09:44.828 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:09:44.831 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 2.981 seconds (JVM running for 3.375)
2025-07-04 09:09:44.847 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:09:44.856 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:44.857 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:09:44.897 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:09:44.908 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:09:44.912 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:09:44.915 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:09:44.915 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:44.915 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:09:44.918 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:09:44.920 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:09:44.920 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:09:48.438 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-04 09:09:48.438 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-04 09:09:48.439 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-07-04 09:09:48.499 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:48.499 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.499 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:48.506 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 09:09:48.509 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:09:48.510 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:48.510 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.510 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:48.513 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:09:48.515 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:48.559 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:48.559 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.559 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:48.561 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:48.563 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:48.563 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:48.563 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.563 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:48.564 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:09:48.567 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:48.578 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:48.578 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.578 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:48.579 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:48.580 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:48.581 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:09:48.582 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.582 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:48.583 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:09:48.584 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:48.618 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:48.618 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.618 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:48.618 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:48.619 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:09:48.620 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:48.620 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.620 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:48.620 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:09:48.621 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:48.633 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:48.633 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.633 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:48.633 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:48.635 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:48.637 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:48.637 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.637 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:48.638 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:09:48.640 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:48.641 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:48.641 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.641 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:48.641 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:48.643 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:48.644 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:48.644 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.644 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:48.644 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:09:48.646 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:48.669 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:48.669 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.669 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:48.669 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:48.672 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:48.673 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:48.673 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.673 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:48.673 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:09:48.676 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:48.678 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:48.678 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.678 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:48.678 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:09:48.680 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:48.681 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:48.681 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.681 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:48.681 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:09:48.683 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:48.696 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:48.697 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.697 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:48.697 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:48.700 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:48.700 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:48.700 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.700 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:48.701 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:09:48.703 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:48.703 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:48.704 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.704 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:48.704 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:09:48.705 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:48.706 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:48.706 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.707 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:48.707 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:09:48.708 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:48.723 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:48.724 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.724 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:48.724 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:48.725 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:48.725 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:48.725 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.725 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:48.726 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:09:48.728 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:48.729 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:48.729 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.729 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:48.729 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:09:48.730 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:48.731 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:48.731 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:48.731 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:48.732 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 09:09:48.733 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:49.241 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:49.241 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.241 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:49.241 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 09:09:49.245 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 09:09:49.245 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:49.245 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.245 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:49.245 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:09:49.247 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:49.247 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:49.247 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.247 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:49.248 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:49.249 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:49.249 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:49.249 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.249 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:49.249 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181520552434(String)
2025-07-04 09:09:49.251 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:49.251 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:49.251 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.251 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:49.251 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:49.253 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:49.253 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:49.253 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.253 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:49.253 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181355860200(String)
2025-07-04 09:09:49.255 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:49.255 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:49.255 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.255 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:49.255 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:49.256 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:49.257 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:49.257 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.257 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:49.257 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181206573250(String)
2025-07-04 09:09:49.258 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:49.259 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:49.259 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.259 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:49.259 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:49.260 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:49.260 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:49.260 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.260 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:49.261 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703175346171678(String)
2025-07-04 09:09:49.262 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:49.262 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:49.262 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.262 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:49.263 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:09:49.264 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:49.264 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:09:49.264 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.264 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:49.264 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:09:49.266 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:49.296 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:49.297 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.297 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:49.297 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:49.299 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:49.299 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:49.299 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.299 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:49.300 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:09:49.301 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:49.302 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:49.302 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.302 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:49.302 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:49.303 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:49.304 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:09:49.304 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.304 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:49.305 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:09:49.306 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:49.317 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:49.317 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.317 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:49.318 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:49.319 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:09:49.320 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:49.320 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.320 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:49.320 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:09:49.321 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:49.331 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:49.331 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.331 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:49.331 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:49.333 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:49.333 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:49.333 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.333 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:49.333 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:09:49.334 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:49.335 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:49.335 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.335 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:49.335 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:49.336 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:49.336 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:49.336 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.336 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:49.336 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:09:49.337 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:49.347 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:49.347 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.347 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:49.347 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:49.348 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:49.349 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:49.349 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.349 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:49.349 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:09:49.350 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:49.350 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:49.350 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.350 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:49.350 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:09:49.351 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:49.351 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:49.351 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.351 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:49.351 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:09:49.352 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:49.364 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:49.364 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.364 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:49.364 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:49.366 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:49.366 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:49.366 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.366 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:49.366 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:09:49.368 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:49.368 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:49.368 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.368 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:49.368 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:09:49.370 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:49.370 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:49.370 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.370 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:49.371 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:09:49.372 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:49.389 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:49.389 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.389 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:49.390 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:49.391 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:49.391 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:49.391 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.391 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:49.392 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:09:49.393 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:49.393 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:49.393 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.393 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:49.393 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:09:49.394 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:49.395 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:49.395 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:49.395 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:49.395 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 09:09:49.396 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:50.355 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:50.355 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.355 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:50.356 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 09:09:50.360 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 09:09:50.361 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:50.361 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.361 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:50.361 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:09:50.363 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:50.364 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:50.364 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.364 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:50.364 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:50.365 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:50.365 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:50.365 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.365 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:50.365 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181520552434(String)
2025-07-04 09:09:50.366 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:50.366 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:50.366 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.366 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:50.366 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:50.367 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:50.368 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:50.368 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.368 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:50.368 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181355860200(String)
2025-07-04 09:09:50.369 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:50.369 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:50.369 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.369 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:50.369 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:50.370 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:50.370 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:50.370 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.370 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:50.370 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181206573250(String)
2025-07-04 09:09:50.371 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:50.371 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:50.371 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.371 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:50.371 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:50.372 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:50.372 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:50.372 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.372 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:50.372 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703175346171678(String)
2025-07-04 09:09:50.373 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:50.373 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:50.373 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.373 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:50.374 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:09:50.374 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:50.375 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:50.375 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.375 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:50.375 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:09:50.376 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:50.396 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:50.396 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.396 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:50.396 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:50.398 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:50.398 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:50.398 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.398 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:50.398 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:09:50.399 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:50.399 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:50.399 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.399 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:50.399 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:50.400 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:50.400 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:09:50.400 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.400 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:50.400 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:09:50.401 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:50.410 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:50.410 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.410 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:50.410 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:50.411 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:09:50.412 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:50.412 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.412 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:50.412 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:09:50.413 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:50.420 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:50.420 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.420 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:50.421 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:50.422 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:50.423 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:50.423 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.423 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:50.423 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:09:50.424 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:50.424 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:50.424 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.424 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:50.424 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:50.425 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:50.425 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:50.425 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.425 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:50.425 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:09:50.426 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:50.434 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:50.435 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.435 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:50.435 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:50.436 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:50.436 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:50.436 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.436 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:50.436 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:09:50.437 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:50.438 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:50.438 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.438 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:50.438 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:09:50.438 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:50.439 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:50.439 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.439 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:50.439 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:09:50.440 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:50.451 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:50.451 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.451 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:50.451 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:50.452 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:50.453 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:50.453 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.453 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:50.453 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:09:50.453 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:50.454 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:50.454 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.454 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:50.454 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:09:50.455 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:50.455 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:50.455 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.455 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:50.455 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:09:50.456 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:50.464 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:50.464 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.464 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:50.464 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:50.466 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:50.466 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:50.466 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.466 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:50.466 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:09:50.467 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:50.467 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:50.467 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.467 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:50.467 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:09:50.468 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:50.468 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:50.468 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:50.468 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:50.468 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 09:09:50.469 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:51.203 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:51.203 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.203 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:51.203 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 09:09:51.205 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:51.205 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:51.205 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.205 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:51.205 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:09:51.206 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:51.206 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:51.206 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.207 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:51.207 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:09:51.207 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:51.208 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:51.208 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.208 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:51.208 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:09:51.208 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:51.225 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:51.226 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.226 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:51.226 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:51.227 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:51.228 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:51.228 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.228 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:51.228 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:09:51.229 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:51.229 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:51.229 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.229 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:51.230 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:51.230 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:51.231 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:09:51.231 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.231 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:51.231 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:09:51.232 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:51.242 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:51.242 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.242 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:51.242 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:51.243 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:09:51.244 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:51.244 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.244 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:51.244 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:09:51.245 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:51.254 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:51.254 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.254 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:51.255 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:51.256 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:51.256 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:51.256 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.256 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:51.257 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:09:51.258 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:51.258 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:51.258 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.258 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:51.258 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:51.259 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:51.259 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:51.259 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.259 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:51.259 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:09:51.260 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:51.270 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:51.270 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.270 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:51.270 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:51.272 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:51.272 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:51.272 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.272 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:51.272 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:09:51.272 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:51.272 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:51.272 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.272 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:51.272 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:09:51.273 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:51.273 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:51.273 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.273 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:51.273 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:09:51.274 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:51.284 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:51.284 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.284 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:51.285 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:51.286 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:51.286 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:51.286 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.286 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:51.286 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:09:51.287 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:51.287 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:51.287 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.287 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:51.287 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:09:51.288 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:51.288 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:51.288 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.288 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:51.288 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:09:51.289 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:51.299 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:51.299 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.299 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:51.299 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:51.301 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:51.301 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:51.301 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.301 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:51.301 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:09:51.302 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:51.302 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:51.302 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.302 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:51.302 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:09:51.303 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:51.303 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:51.303 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:51.303 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:51.303 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 09:09:51.304 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:54.132 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:54.133 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.133 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:54.133 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 09:09:54.135 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:54.135 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.135 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:54.139 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 09:09:54.140 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:54.140 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.140 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:54.147 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:54.151 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:54.152 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:09:54.152 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:54.152 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.152 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:54.155 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:54.156 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:09:54.156 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:54.156 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.156 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:54.158 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:54.159 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:54.159 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.159 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:54.159 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:54.161 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:54.161 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:54.161 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.162 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:54.162 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:54.163 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:54.164 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181520552434(String)
2025-07-04 09:09:54.164 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:09:54.164 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.164 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:54.166 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:54.167 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:09:54.167 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:54.167 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.167 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:54.169 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:54.169 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:54.170 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:54.171 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:54.171 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.171 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:54.171 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181355860200(String)
2025-07-04 09:09:54.173 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:54.174 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:54.174 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.175 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:54.175 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:54.177 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:54.177 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:54.177 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.177 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:54.177 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181206573250(String)
2025-07-04 09:09:54.179 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:54.179 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:54.179 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.179 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:54.179 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:54.181 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:54.182 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:54.182 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.182 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:54.182 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703175346171678(String)
2025-07-04 09:09:54.184 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:54.185 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:54.185 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.185 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:54.185 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:09:54.186 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:54.186 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:09:54.186 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.186 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:54.188 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:09:54.189 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:54.331 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:54.332 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.332 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:54.334 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:54.336 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:09:54.337 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:54.337 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.337 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:54.337 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:09:54.338 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:54.370 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:54.370 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.370 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:54.372 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:54.375 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:54.375 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:54.376 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.376 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:54.376 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:09:54.379 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:54.380 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:54.380 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.380 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:54.380 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:54.382 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:54.382 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:09:54.382 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.382 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:54.382 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:09:54.383 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:54.383 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.383 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:54.383 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:54.384 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:54.385 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:54.386 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:54.386 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.386 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:54.386 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:09:54.388 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:54.389 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:54.389 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.389 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:54.389 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:54.391 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:54.392 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:54.392 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.392 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:54.392 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:09:54.393 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:54.399 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:54.399 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.399 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:54.399 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:54.401 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:09:54.401 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:54.402 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.402 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:54.402 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:09:54.404 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:54.422 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:54.422 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.422 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:54.423 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:54.425 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:54.426 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:54.426 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.426 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:54.426 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:09:54.428 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:54.428 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:54.428 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.428 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:54.428 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:54.428 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:54.428 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.428 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:54.428 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:09:54.429 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:54.430 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:54.430 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:54.430 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.430 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:54.430 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:54.430 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.430 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:54.430 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:09:54.430 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:09:54.431 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:54.431 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:54.432 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:54.432 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.433 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:54.433 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:54.435 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:54.436 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:54.436 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.436 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:54.436 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:09:54.440 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:54.466 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:54.466 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.466 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:54.466 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:54.466 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.466 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:54.466 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:54.466 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:54.468 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:54.468 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:54.468 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:54.468 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:54.468 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.468 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.468 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:54.468 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:54.468 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:09:54.468 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:09:54.470 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:54.471 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:54.471 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:54.471 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.471 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:54.472 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:54.472 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:09:54.472 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.472 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:54.472 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:09:54.473 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:54.473 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:54.474 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:54.474 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:54.474 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.474 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.474 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:54.474 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:54.474 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:09:54.474 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:09:54.475 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:54.475 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:54.500 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:54.500 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:54.500 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.500 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.500 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:54.500 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:54.500 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:54.500 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:54.502 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:54.502 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:54.502 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:54.502 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:54.502 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.502 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.502 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:54.502 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:54.502 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:09:54.502 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:09:54.504 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:54.504 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:54.505 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:54.505 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.505 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:54.505 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:54.505 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.505 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:54.505 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:09:54.505 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:09:54.506 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:54.506 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:54.507 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:54.507 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:54.507 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.507 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.507 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:54.507 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:54.508 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 09:09:54.508 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:09:54.509 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:54.509 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:54.524 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:54.524 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.524 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:54.524 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:54.526 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:54.526 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:54.526 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.526 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:54.527 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:09:54.529 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:54.530 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:54.531 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.531 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:54.531 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:09:54.532 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:54.532 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:54.532 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:54.532 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:54.533 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 09:09:54.533 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:55.531 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:55.531 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.531 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:55.531 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 09:09:55.533 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:55.534 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:55.534 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.534 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:55.534 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:09:55.536 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:55.537 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:55.537 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.537 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:55.538 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:09:55.540 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:55.541 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:55.541 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.541 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:55.541 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:09:55.542 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:55.562 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:55.562 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.562 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:55.562 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:55.564 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:55.565 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:55.565 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.565 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:55.565 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:09:55.568 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:55.569 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:55.569 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.569 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:55.569 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:55.571 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:55.573 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:09:55.573 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.573 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:55.573 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:09:55.574 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:55.594 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:55.594 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.594 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:55.594 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:55.596 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:09:55.596 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:55.597 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.597 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:55.597 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:09:55.598 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:55.612 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:55.612 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.612 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:55.613 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:55.617 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:55.618 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:55.618 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.618 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:55.618 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:09:55.621 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:55.622 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:55.623 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.623 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:55.623 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:09:55.625 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:55.625 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:55.625 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.625 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:55.626 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:09:55.629 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:55.638 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:55.638 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.638 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:55.639 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:55.641 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:55.642 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:55.642 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.642 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:55.643 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:09:55.645 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:55.646 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:55.647 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.647 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:55.647 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:09:55.648 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:55.650 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:55.650 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.650 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:55.650 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:09:55.653 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:55.664 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:55.664 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.664 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:55.664 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:55.666 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:55.667 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:55.667 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.667 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:55.667 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:09:55.669 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:55.671 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:55.671 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.671 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:55.671 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:09:55.674 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:55.675 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:55.675 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.675 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:55.675 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:09:55.676 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:55.688 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:09:55.688 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.688 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:09:55.689 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:09:55.691 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:09:55.691 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:55.691 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.691 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:55.692 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:09:55.695 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:09:55.695 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:09:55.696 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.696 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:09:55.696 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:09:55.697 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:09:55.698 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:09:55.698 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:55.698 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:09:55.698 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 09:09:55.699 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:09:56.644 [http-nio-8080-exec-7] INFO  com.huang.store.controller.OrderController - 获取用户订单详情: userAccount=56464ff@456.com, orderId=20250701224811070894
2025-07-04 09:09:56.645 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.orderId = ?
2025-07-04 09:09:56.645 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:56.645 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
        WHERE o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:56.646 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:09:56.649 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - <==      Total: 1
2025-07-04 09:09:56.649 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:09:56.650 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:09:56.650 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:09:56.650 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:09:56.652 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:12:17.379 [http-nio-8080-exec-10] INFO  com.huang.store.controller.OrderController - 获取用户订单详情: userAccount=56464ff@456.com, orderId=20250701224811070894
2025-07-04 09:12:17.380 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.orderId = ?
2025-07-04 09:12:17.380 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:12:17.380 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
        WHERE o.orderId = ? ::: DataSources: slave
2025-07-04 09:12:17.391 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:12:17.393 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - <==      Total: 1
2025-07-04 09:12:17.394 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:12:17.394 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:12:17.394 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:12:17.394 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:12:17.396 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:12:34.982 [http-nio-8080-exec-1] INFO  com.huang.store.controller.OrderController - 获取用户订单详情: userAccount=56464ff@456.com, orderId=20250701224811070894
2025-07-04 09:12:34.982 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.orderId = ?
2025-07-04 09:12:34.982 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:12:34.982 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
        WHERE o.orderId = ? ::: DataSources: slave
2025-07-04 09:12:34.982 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:12:34.985 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - <==      Total: 1
2025-07-04 09:12:34.986 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:12:34.986 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:12:34.987 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:12:34.987 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:12:34.989 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:13:23.846 [http-nio-8080-exec-4] INFO  com.huang.store.controller.OrderController - 获取用户订单详情: userAccount=56464ff@456.com, orderId=20250701224811070894
2025-07-04 09:13:23.846 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.orderId = ?
2025-07-04 09:13:23.846 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:13:23.846 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
        WHERE o.orderId = ? ::: DataSources: slave
2025-07-04 09:13:23.846 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:13:23.848 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - <==      Total: 1
2025-07-04 09:13:23.849 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:13:23.849 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:13:23.849 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:13:23.849 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:13:23.851 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:13:46.353 [http-nio-8080-exec-3] INFO  com.huang.store.controller.OrderController - 获取用户订单详情: userAccount=56464ff@456.com, orderId=20250701224811070894
2025-07-04 09:13:46.353 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.orderId = ?
2025-07-04 09:13:46.353 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:13:46.353 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
        WHERE o.orderId = ? ::: DataSources: slave
2025-07-04 09:13:46.353 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:13:46.354 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - <==      Total: 1
2025-07-04 09:13:46.354 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:13:46.354 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:13:46.354 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:13:46.355 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:13:46.356 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:14:40.989 [http-nio-8080-exec-2] INFO  com.huang.store.controller.OrderController - 获取用户订单详情: userAccount=56464ff@456.com, orderId=20250701224811070894
2025-07-04 09:14:40.990 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.orderId = ?
2025-07-04 09:14:40.990 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:14:40.990 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
        WHERE o.orderId = ? ::: DataSources: slave
2025-07-04 09:14:40.990 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:14:40.992 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - <==      Total: 1
2025-07-04 09:14:40.992 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:14:40.992 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:14:40.992 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:14:40.992 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:14:40.994 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:14:44.830 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:14:44.830 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:14:44.830 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:14:44.830 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:14:44.830 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:14:44.832 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:14:44.832 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:14:44.832 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:14:44.832 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:14:44.832 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:14:44.833 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:14:44.834 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:14:44.834 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:16:35.566 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:16:35.566 [Thread-7] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 09:16:35.567 [Thread-7] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-07-04 09:16:35.578 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-544624770] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:16:35.578 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-544624770] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:16:35.578 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-970900424] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:16:35.578 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-970900424] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:16:35.580 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 09:16:35.582 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 09:16:35.601 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closing ...
2025-07-04 09:16:35.604 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-07-04 09:16:35.605 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closing ...
2025-07-04 09:16:35.606 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-07-04 09:16:35.736 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 18068 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 09:16:35.736 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 09:16:35.736 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 09:16:36.096 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 09:16:36.096 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 09:16:36.114 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 18 ms. Found 0 Redis repository interfaces.
2025-07-04 09:16:36.211 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$ac37fe21] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:16:36.219 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:16:36.357 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 09:16:36.357 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 09:16:36.357 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 09:16:36.357 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 09:16:36.357 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 09:16:36.357 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:16:36.358 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 09:16:36.358 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 09:16:36.387 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 09:16:36.387 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 642 ms
2025-07-04 09:16:36.391 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 09:16:36.541 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} inited
2025-07-04 09:16:36.562 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} inited
2025-07-04 09:16:36.804 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 09:16:36.804 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 09:16:37.121 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 09:16:37.255 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@659019e6, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@a3799c1, org.springframework.security.web.context.SecurityContextPersistenceFilter@4e1096f5, org.springframework.security.web.header.HeaderWriterFilter@14c1536b, org.springframework.web.filter.CorsFilter@2922f7a6, org.springframework.security.web.authentication.logout.LogoutFilter@417e173f, com.huang.store.security.JwtAuthenticationTokenFilter@14ffc2bd, com.huang.store.security.CustomAuthenticationFilter@567a2b1f, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@4fa4c0e1, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5c6e744, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1b82b69c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@59a57b2c, org.springframework.security.web.session.SessionManagementFilter@6d1fb3c1, org.springframework.security.web.access.ExceptionTranslationFilter@41315596, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@2eb4caff]
2025-07-04 09:16:37.511 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 09:16:37.531 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 09:16:37.534 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 09:16:37.540 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:16:37.541 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 1.865 seconds (JVM running for 416.085)
2025-07-04 09:16:37.542 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:16:37.542 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:16:37.542 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:16:37.543 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:16:37.545 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:16:37.546 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:16:37.549 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:16:37.550 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:16:37.550 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:16:37.552 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:16:37.555 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:16:37.557 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:16:39.018 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:16:39.018 [Thread-9] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 09:16:39.024 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-825388986] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:16:39.024 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-825388986] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:16:39.025 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-2068345137] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:16:39.025 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-2068345137] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:16:39.026 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 09:16:39.027 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 09:16:39.031 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closing ...
2025-07-04 09:16:39.033 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closed
2025-07-04 09:16:39.033 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closing ...
2025-07-04 09:16:39.034 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closed
2025-07-04 09:16:39.170 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 18068 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 09:16:39.170 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 09:16:39.170 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 09:16:39.447 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 09:16:39.447 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 09:16:39.468 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 0 Redis repository interfaces.
2025-07-04 09:16:39.543 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$ac37fe21] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:16:39.550 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:16:39.629 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 09:16:39.629 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 09:16:39.629 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 09:16:39.629 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 09:16:39.631 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 09:16:39.631 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:16:39.631 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 09:16:39.631 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 09:16:39.661 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 09:16:39.661 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 489 ms
2025-07-04 09:16:39.664 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 09:16:39.817 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} inited
2025-07-04 09:16:39.837 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} inited
2025-07-04 09:16:40.018 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 09:16:40.018 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 09:16:40.388 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 09:16:40.612 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@1f545ff8, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@59ea8c99, org.springframework.security.web.context.SecurityContextPersistenceFilter@40e3b120, org.springframework.security.web.header.HeaderWriterFilter@78811ba1, org.springframework.web.filter.CorsFilter@1782b9fd, org.springframework.security.web.authentication.logout.LogoutFilter@20fc5c7c, com.huang.store.security.JwtAuthenticationTokenFilter@36d0a373, com.huang.store.security.CustomAuthenticationFilter@4de9904, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@4afebca3, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5522ac2e, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@250ef938, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@28008035, org.springframework.security.web.session.SessionManagementFilter@3e9cc025, org.springframework.security.web.access.ExceptionTranslationFilter@639ed953, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@787102e0]
2025-07-04 09:16:40.945 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 09:16:40.961 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 09:16:40.964 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 09:16:40.968 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:16:40.969 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 1.84 seconds (JVM running for 419.512)
2025-07-04 09:16:40.969 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:16:40.969 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:16:40.969 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:16:40.969 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:16:40.971 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:16:40.971 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:16:40.974 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:16:40.974 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:16:40.974 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:16:40.975 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:16:40.976 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:16:40.977 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:17:17.789 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closing ...
2025-07-04 09:17:17.790 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closed
2025-07-04 09:17:17.790 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closing ...
2025-07-04 09:17:17.790 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closed
2025-07-04 09:17:21.361 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-07-04 09:17:21.377 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 18708 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 09:17:21.377 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 09:17:21.378 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 09:17:21.505 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-04 09:17:21.505 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-04 09:17:21.962 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 09:17:21.964 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 09:17:21.994 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 0 Redis repository interfaces.
2025-07-04 09:17:22.226 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$621d1fb3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:17:22.238 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:17:22.614 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 09:17:22.614 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 09:17:22.614 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 09:17:22.614 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 09:17:22.618 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 09:17:22.624 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:17:22.627 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 09:17:22.627 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 09:17:22.682 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 09:17:22.682 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1177 ms
2025-07-04 09:17:22.686 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 09:17:23.332 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-07-04 09:17:23.358 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-07-04 09:17:23.683 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 09:17:23.683 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 09:17:24.146 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 09:17:24.278 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@76ee135, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2854a2fe, org.springframework.security.web.context.SecurityContextPersistenceFilter@56437569, org.springframework.security.web.header.HeaderWriterFilter@16f724c0, org.springframework.web.filter.CorsFilter@587095b7, org.springframework.security.web.authentication.logout.LogoutFilter@31a1ff3b, com.huang.store.security.JwtAuthenticationTokenFilter@54533ab2, com.huang.store.security.CustomAuthenticationFilter@455a0707, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@60e2c32f, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3b4be608, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7adfa94c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2466ed73, org.springframework.security.web.session.SessionManagementFilter@263a1e98, org.springframework.security.web.access.ExceptionTranslationFilter@74fdca42, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@30ef4d28]
2025-07-04 09:17:24.507 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 09:17:24.524 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 09:17:24.538 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 09:17:24.544 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:17:24.546 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.538 seconds (JVM running for 4.108)
2025-07-04 09:17:24.569 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:17:24.581 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:24.582 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:17:24.621 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:17:24.634 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:17:24.636 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:17:24.645 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:17:24.645 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:24.645 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:17:24.649 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:17:24.651 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:17:24.652 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:17:27.748 [http-nio-8080-exec-2] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-04 09:17:27.748 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-04 09:17:27.749 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-07-04 09:17:27.818 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:17:27.818 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:17:27.818 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:27.818 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:27.818 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:17:27.818 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:17:27.824 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 09:17:27.830 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 09:17:27.832 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:17:27.832 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:17:27.832 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:27.832 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:17:27.835 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:17:27.835 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:17:27.835 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:27.835 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:17:27.839 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:17:27.839 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:17:27.851 [http-nio-8080-exec-2] ERROR druid.sql.Statement - {conn-110002, pstmt-120005} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:17:27.851 [http-nio-8080-exec-1] ERROR druid.sql.Statement - {conn-110001, pstmt-120006} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:17:27.888 [http-nio-8080-exec-1] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 136 common frames omitted
2025-07-04 09:17:27.888 [http-nio-8080-exec-2] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 136 common frames omitted
2025-07-04 09:17:27.936 [http-nio-8080-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:17:27.936 [http-nio-8080-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:17:27.949 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:17:27.949 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:27.949 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:17:27.953 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:17:27.955 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:17:27.957 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:17:27.957 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:27.957 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:17:27.959 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:17:27.961 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:17:27.989 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:17:27.990 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:27.990 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:17:27.990 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:17:27.993 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:17:27.994 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:17:27.994 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:27.994 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:17:27.995 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:17:27.996 [http-nio-8080-exec-4] ERROR druid.sql.Statement - {conn-110001, pstmt-120009} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:17:27.999 [http-nio-8080-exec-4] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 136 common frames omitted
2025-07-04 09:17:28.002 [http-nio-8080-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:17:28.019 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:17:28.019 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:28.020 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:17:28.020 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:17:28.024 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:17:28.024 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:17:28.024 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:28.024 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:17:28.025 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:17:28.027 [http-nio-8080-exec-5] ERROR druid.sql.Statement - {conn-110001, pstmt-120010} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:17:28.029 [http-nio-8080-exec-5] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 136 common frames omitted
2025-07-04 09:17:28.031 [http-nio-8080-exec-5] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:17:28.048 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:17:28.048 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:28.048 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:17:28.049 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:17:28.052 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:17:28.052 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:17:28.053 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:28.053 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:17:28.054 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:17:28.055 [http-nio-8080-exec-6] ERROR druid.sql.Statement - {conn-110001, pstmt-120011} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:17:28.057 [http-nio-8080-exec-6] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 136 common frames omitted
2025-07-04 09:17:28.058 [http-nio-8080-exec-6] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:17:28.074 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:17:28.075 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:28.075 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:17:28.075 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:17:28.080 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:17:28.080 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:17:28.081 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:28.081 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:17:28.082 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:17:28.084 [http-nio-8080-exec-7] ERROR druid.sql.Statement - {conn-110001, pstmt-120012} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:17:28.085 [http-nio-8080-exec-7] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 136 common frames omitted
2025-07-04 09:17:28.087 [http-nio-8080-exec-7] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:17:30.281 [http-nio-8080-exec-9] INFO  com.huang.store.controller.CouponController - 用户查询可领取的优惠券模板
2025-07-04 09:17:30.282 [http-nio-8080-exec-8] INFO  com.huang.store.controller.CouponController - 用户查询优惠券: 56464ff@456.com
2025-07-04 09:17:30.299 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CouponTemplateMapper.selectAllEnabled - ==>  Preparing: SELECT * FROM coupon_template WHERE status = 1 ORDER BY create_time DESC
2025-07-04 09:17:30.299 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.UserCouponMapper.selectByAccount - ==>  Preparing: SELECT uc.*, ct.name as coupon_name, ct.type, ct.discount_value, ct.min_order_amount, ct.max_discount_amount FROM user_coupon uc LEFT JOIN coupon_template ct ON uc.coupon_template_id = ct.id WHERE uc.account = ? ORDER BY uc.receive_time DESC
2025-07-04 09:17:30.300 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:30.300 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT uc.*, ct.name as coupon_name, ct.type, ct.discount_value, ct.min_order_amount, ct.max_discount_amount FROM user_coupon uc LEFT JOIN coupon_template ct ON uc.coupon_template_id = ct.id WHERE uc.account = ? ORDER BY uc.receive_time DESC ::: DataSources: slave
2025-07-04 09:17:30.300 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:30.300 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT * FROM coupon_template WHERE status = 1 ORDER BY create_time DESC ::: DataSources: slave
2025-07-04 09:17:30.302 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.UserCouponMapper.selectByAccount - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:17:30.302 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CouponTemplateMapper.selectAllEnabled - ==> Parameters: 
2025-07-04 09:17:30.335 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.UserCouponMapper.selectByAccount - <==      Total: 2
2025-07-04 09:17:30.335 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CouponTemplateMapper.selectAllEnabled - <==      Total: 4
2025-07-04 09:17:30.361 [http-nio-8080-exec-10] INFO  com.huang.store.controller.CouponController - 用户查询优惠券: 56464ff@456.com
2025-07-04 09:17:30.362 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.UserCouponMapper.selectByAccount - ==>  Preparing: SELECT uc.*, ct.name as coupon_name, ct.type, ct.discount_value, ct.min_order_amount, ct.max_discount_amount FROM user_coupon uc LEFT JOIN coupon_template ct ON uc.coupon_template_id = ct.id WHERE uc.account = ? ORDER BY uc.receive_time DESC
2025-07-04 09:17:30.362 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:30.362 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT uc.*, ct.name as coupon_name, ct.type, ct.discount_value, ct.min_order_amount, ct.max_discount_amount FROM user_coupon uc LEFT JOIN coupon_template ct ON uc.coupon_template_id = ct.id WHERE uc.account = ? ORDER BY uc.receive_time DESC ::: DataSources: slave
2025-07-04 09:17:30.363 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.UserCouponMapper.selectByAccount - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:17:30.366 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.UserCouponMapper.selectByAccount - <==      Total: 2
2025-07-04 09:17:30.706 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:17:30.707 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:30.707 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:17:30.707 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:17:30.708 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:30.708 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:17:30.708 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 09:17:30.709 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:17:30.712 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:17:30.712 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:17:30.713 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:30.713 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:17:30.713 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:17:30.714 [http-nio-8080-exec-1] ERROR druid.sql.Statement - {conn-110002, pstmt-120017} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:17:30.716 [http-nio-8080-exec-1] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 136 common frames omitted
2025-07-04 09:17:30.718 [http-nio-8080-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:17:30.718 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 09:17:30.718 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:17:30.718 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:30.718 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:17:30.719 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:17:30.720 [http-nio-8080-exec-2] ERROR druid.sql.Statement - {conn-110001, pstmt-120018} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:17:30.721 [http-nio-8080-exec-2] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 136 common frames omitted
2025-07-04 09:17:30.723 [http-nio-8080-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:17:30.729 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:17:30.729 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:30.729 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:17:30.729 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:17:30.731 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:17:30.732 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:17:30.732 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:30.732 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:17:30.733 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:17:30.734 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:17:30.745 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:17:30.745 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:30.745 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:17:30.746 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:17:30.748 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:17:30.749 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:17:30.749 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:30.749 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:17:30.750 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:17:30.751 [http-nio-8080-exec-4] ERROR druid.sql.Statement - {conn-110001, pstmt-120019} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:17:30.752 [http-nio-8080-exec-4] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 136 common frames omitted
2025-07-04 09:17:30.753 [http-nio-8080-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:17:30.764 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:17:30.764 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:30.764 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:17:30.764 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:17:30.766 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:17:30.767 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:17:30.767 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:30.767 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:17:30.768 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:17:30.769 [http-nio-8080-exec-5] ERROR druid.sql.Statement - {conn-110001, pstmt-120020} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:17:30.771 [http-nio-8080-exec-5] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 136 common frames omitted
2025-07-04 09:17:30.772 [http-nio-8080-exec-5] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:17:30.783 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:17:30.784 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:30.784 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:17:30.784 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:17:30.786 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:17:30.787 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:17:30.787 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:30.787 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:17:30.787 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:17:30.788 [http-nio-8080-exec-6] ERROR druid.sql.Statement - {conn-110001, pstmt-120021} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:17:30.789 [http-nio-8080-exec-6] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 136 common frames omitted
2025-07-04 09:17:30.791 [http-nio-8080-exec-6] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:17:30.808 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:17:30.808 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:30.808 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:17:30.808 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:17:30.810 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:17:30.811 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:17:30.811 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:30.811 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:17:30.812 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:17:30.813 [http-nio-8080-exec-7] ERROR druid.sql.Statement - {conn-110001, pstmt-120022} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:17:30.814 [http-nio-8080-exec-7] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 136 common frames omitted
2025-07-04 09:17:30.815 [http-nio-8080-exec-7] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:17:36.482 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:17:36.482 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:36.482 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:17:36.484 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 09:17:36.495 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:17:36.518 [http-nio-8080-exec-9] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:2545059634@qq.com    数据库密码:$2a$10$w8zNNUSDq3MCiLDDuAhYXedA0QGva1Z4.6UxO61Njhsrlo8voc01G
2025-07-04 09:17:36.679 [http-nio-8080-exec-9] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=2545059634@qq.com, password=$2a$10$w8zNNUSDq3MCiLDDuAhYXedA0QGva1Z4.6UxO61Njhsrlo8voc01G, enabled=true, roles=[ROLE_ADMIN]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=6E938B37B8A03C69FAE8A21BB507B3A7], Granted Authorities=[ROLE_ADMIN]]
2025-07-04 09:17:36.708 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:17:36.708 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:36.708 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:17:36.708 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 09:17:36.710 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:17:37.923 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getTotalStock - ==>  Preparing: SELECT COALESCE(SUM(stock), 0) FROM book
2025-07-04 09:17:37.923 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:37.928 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT COALESCE(SUM(stock), 0) FROM book ::: DataSources: slave
2025-07-04 09:17:37.927 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getLowStockBooks - ==>  Preparing: SELECT * FROM book WHERE stock <= ? ORDER BY stock ASC, id DESC LIMIT ?, ?
2025-07-04 09:17:37.929 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:37.930 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT * FROM book
        WHERE stock <= ?
        ORDER BY stock ASC, id DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 09:17:37.927 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE beUserDelete = ?
2025-07-04 09:17:37.930 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:37.930 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  beUserDelete = ? ::: DataSources: slave
2025-07-04 09:17:37.931 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getTotalStock - ==> Parameters: 
2025-07-04 09:17:37.931 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getLowStockBooks - ==> Parameters: 10(Integer), 0(Integer), 10(Integer)
2025-07-04 09:17:37.927 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:17:37.932 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:37.932 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:17:37.934 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getLowStockBooks - <==      Total: 0
2025-07-04 09:17:37.934 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getTotalStock - <==      Total: 1
2025-07-04 09:17:37.936 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==>  Preparing: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount FROM ( SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice FROM bookorder join expense on bookorder.orderId = expense.orderId WHERE orderTime >= ? and orderTime <= ? ) AS dateOrder GROUP BY orderTime
2025-07-04 09:17:37.936 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:37.936 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount
            FROM (
                SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice
                FROM bookorder join expense on bookorder.orderId = expense.orderId
                WHERE orderTime >= ? and  orderTime <= ?
            ) AS dateOrder
        GROUP BY orderTime ::: DataSources: slave
2025-07-04 09:17:37.937 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - ==>  Preparing: SELECT COUNT(*) FROM book WHERE stock <= ?
2025-07-04 09:17:37.938 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:37.938 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book
        WHERE stock <= ? ::: DataSources: slave
2025-07-04 09:17:37.943 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==>  Preparing: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount FROM ( SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice FROM bookorder join expense on bookorder.orderId = expense.orderId WHERE orderTime >= ? and orderTime <= ? ) AS dateOrder GROUP BY orderTime
2025-07-04 09:17:37.943 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:37.943 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount
            FROM (
                SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice
                FROM bookorder join expense on bookorder.orderId = expense.orderId
                WHERE orderTime >= ? and  orderTime <= ?
            ) AS dateOrder
        GROUP BY orderTime ::: DataSources: slave
2025-07-04 09:17:37.945 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: false(Boolean)
2025-07-04 09:17:37.951 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:17:37.952 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.count - ==>  Preparing: select count(*) from user where manage = false
2025-07-04 09:17:37.952 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:37.952 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from user where manage = false ::: DataSources: slave
2025-07-04 09:17:37.956 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: false(Boolean), 0(Integer), 5(Integer)
2025-07-04 09:17:37.962 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 09:17:37.963 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - ==> Parameters: 0(Integer)
2025-07-04 09:17:37.965 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - <==      Total: 1
2025-07-04 09:17:37.965 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - ==>  Preparing: SELECT COUNT(*) FROM book WHERE stock <= ?
2025-07-04 09:17:37.965 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:37.965 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book
        WHERE stock <= ? ::: DataSources: slave
2025-07-04 09:17:37.977 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.count - ==> Parameters: 
2025-07-04 09:17:37.979 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.count - <==      Total: 1
2025-07-04 09:17:37.980 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==>  Preparing: select count(*) from book
2025-07-04 09:17:37.980 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:37.980 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from book ::: DataSources: slave
2025-07-04 09:17:37.981 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - ==> Parameters: 20(Integer)
2025-07-04 09:17:37.982 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - <==      Total: 1
2025-07-04 09:17:37.983 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==>  Preparing: select count(*) from book
2025-07-04 09:17:37.983 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:37.983 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from book ::: DataSources: slave
2025-07-04 09:17:37.983 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==> Parameters: 
2025-07-04 09:17:37.984 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==> Parameters: 2025-06-28 00:00:00.0(Timestamp), 2025-07-04 00:00:00.0(Timestamp)
2025-07-04 09:17:37.984 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==> Parameters: 2025-07-04 00:00:00.0(Timestamp), 2025-07-04 23:59:59.0(Timestamp)
2025-07-04 09:17:37.985 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCount - <==      Total: 1
2025-07-04 09:17:37.985 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==> Parameters: 
2025-07-04 09:17:37.986 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==>  Preparing: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount FROM ( SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice FROM bookorder join expense on bookorder.orderId = expense.orderId WHERE orderTime >= ? and orderTime <= ? ) AS dateOrder GROUP BY orderTime
2025-07-04 09:17:37.986 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:37.986 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount
            FROM (
                SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice
                FROM bookorder join expense on bookorder.orderId = expense.orderId
                WHERE orderTime >= ? and  orderTime <= ?
            ) AS dateOrder
        GROUP BY orderTime ::: DataSources: slave
2025-07-04 09:17:37.987 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCount - <==      Total: 1
2025-07-04 09:17:37.987 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - ==>  Preparing: SELECT COUNT(*) FROM book WHERE stock <= ?
2025-07-04 09:17:37.987 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:37.987 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book
        WHERE stock <= ? ::: DataSources: slave
2025-07-04 09:17:37.988 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==> Parameters: 2025-07-04 00:00:00.0(Timestamp), 2025-07-04 23:59:59.0(Timestamp)
2025-07-04 09:17:37.992 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - <==      Total: 0
2025-07-04 09:17:37.993 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - <==      Total: 4
2025-07-04 09:17:37.993 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - <==      Total: 0
2025-07-04 09:17:37.994 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - ==> Parameters: 20(Integer)
2025-07-04 09:17:37.994 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==>  Preparing: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount FROM ( SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice FROM bookorder join expense on bookorder.orderId = expense.orderId WHERE orderTime >= ? and orderTime <= ? ) AS dateOrder GROUP BY orderTime
2025-07-04 09:17:37.994 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:37.994 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount
            FROM (
                SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice
                FROM bookorder join expense on bookorder.orderId = expense.orderId
                WHERE orderTime >= ? and  orderTime <= ?
            ) AS dateOrder
        GROUP BY orderTime ::: DataSources: slave
2025-07-04 09:17:37.994 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==> Parameters: 2025-07-04 00:00:00.0(Timestamp), 2025-07-04 23:59:59.0(Timestamp)
2025-07-04 09:17:37.994 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - <==      Total: 1
2025-07-04 09:17:37.996 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - <==      Total: 0
2025-07-04 09:17:37.996 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==>  Preparing: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount FROM ( SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice FROM bookorder join expense on bookorder.orderId = expense.orderId WHERE orderTime >= ? and orderTime <= ? ) AS dateOrder GROUP BY orderTime
2025-07-04 09:17:37.996 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:37.996 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount
            FROM (
                SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice
                FROM bookorder join expense on bookorder.orderId = expense.orderId
                WHERE orderTime >= ? and  orderTime <= ?
            ) AS dateOrder
        GROUP BY orderTime ::: DataSources: slave
2025-07-04 09:17:37.996 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==> Parameters: 2025-07-03 00:00:00.0(Timestamp), 2025-07-03 23:59:59.0(Timestamp)
2025-07-04 09:17:38.003 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==>  Preparing: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount FROM ( SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice FROM bookorder join expense on bookorder.orderId = expense.orderId WHERE orderTime >= ? and orderTime <= ? ) AS dateOrder GROUP BY orderTime
2025-07-04 09:17:38.003 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:38.003 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount
            FROM (
                SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice
                FROM bookorder join expense on bookorder.orderId = expense.orderId
                WHERE orderTime >= ? and  orderTime <= ?
            ) AS dateOrder
        GROUP BY orderTime ::: DataSources: slave
2025-07-04 09:17:38.004 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==> Parameters: 2025-07-04 00:00:00.0(Timestamp), 2025-07-04 23:59:59.0(Timestamp)
2025-07-04 09:17:38.004 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - <==      Total: 1
2025-07-04 09:17:38.004 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE orderStatus = ? AND beUserDelete = ?
2025-07-04 09:17:38.004 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:38.004 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:17:38.005 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 待发货(String), false(Boolean)
2025-07-04 09:17:38.006 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:17:38.012 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - <==      Total: 0
2025-07-04 09:17:42.627 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-07-04 09:17:42.627 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.627 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-07-04 09:17:42.627 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-07-04 09:17:42.627 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.627 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-07-04 09:17:42.628 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 09:17:42.627 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-07-04 09:17:42.630 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.630 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-07-04 09:17:42.630 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 09:17:42.630 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.630 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 09:17:42.631 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 09:17:42.631 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-07-04 09:17:42.632 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:17:42.632 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.632 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:17:42.634 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 09:17:42.635 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 09:17:42.635 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:17:42.635 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.635 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:17:42.635 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:17:42.635 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 09:17:42.635 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:17:42.635 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.635 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:17:42.636 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:17:42.637 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:17:42.637 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 09:17:42.637 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:17:42.637 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:17:42.637 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.637 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.637 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:17:42.637 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:17:42.638 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:17:42.638 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 09:17:42.639 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:17:42.639 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 09:17:42.640 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:17:42.640 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:17:42.640 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.640 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.640 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:17:42.640 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:17:42.640 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:17:42.640 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 09:17:42.642 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 09:17:42.642 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:17:42.642 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:17:42.642 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:17:42.642 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.642 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.642 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:17:42.642 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:17:42.643 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:17:42.643 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 09:17:42.644 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:17:42.644 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 09:17:42.644 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==>  Preparing: select `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt` from topic where `status`=1 order by `rank` asc limit ?,?
2025-07-04 09:17:42.644 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.644 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select  
        `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt`
      from topic where `status`=1 order by `rank` asc limit ?,? ::: DataSources: slave
2025-07-04 09:17:42.645 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-07-04 09:17:42.647 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 09:17:42.649 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - <==      Total: 1
2025-07-04 09:17:42.649 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==>  Preparing: select count(*) from topic where `status`=1
2025-07-04 09:17:42.649 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.649 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from topic where `status`=1 ::: DataSources: slave
2025-07-04 09:17:42.650 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==> Parameters: 
2025-07-04 09:17:42.651 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - <==      Total: 1
2025-07-04 09:17:42.652 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 4
2025-07-04 09:17:42.653 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:17:42.653 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.653 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:17:42.654 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:17:42.656 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:17:42.657 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:17:42.657 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.657 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:17:42.657 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:17:42.658 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:17:42.658 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:17:42.658 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.658 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:17:42.659 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 09:17:42.660 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:17:42.661 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:17:42.661 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.661 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:17:42.661 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:17:42.646 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 09:17:42.662 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:17:42.664 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 5
2025-07-04 09:17:42.664 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:17:42.664 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.664 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:17:42.665 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:17:42.666 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:17:42.667 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:17:42.667 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.667 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:17:42.667 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:17:42.669 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:17:42.669 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:17:42.669 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.669 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:17:42.669 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:17:42.671 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:17:42.671 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:17:42.672 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.672 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:17:42.672 [http-nio-8080-exec-3] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-07-04 09:17:42.672 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 09:17:42.672 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.672 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-07-04 09:17:42.672 [http-nio-8080-exec-3] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-07-04 09:17:42.672 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:17:42.672 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:17:42.673 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.673 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:17:42.673 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:17:42.675 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:17:42.679 [http-nio-8080-exec-9] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==>  Preparing: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC
2025-07-04 09:17:42.679 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.679 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC ::: DataSources: slave
2025-07-04 09:17:42.679 [http-nio-8080-exec-9] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==> Parameters: 
2025-07-04 09:17:42.680 [http-nio-8080-exec-3] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 6
2025-07-04 09:17:42.682 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 09:17:42.682 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.682 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 09:17:42.682 [http-nio-8080-exec-9] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - <==      Total: 1
2025-07-04 09:17:42.685 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 6(Long)
2025-07-04 09:17:42.689 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 09:17:42.689 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 09:17:42.690 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.690 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 09:17:42.690 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 2(Integer)
2025-07-04 09:17:42.694 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 09:17:42.694 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:17:42.695 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.695 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:17:42.695 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:17:42.697 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:17:42.698 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 09:17:42.698 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.698 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 09:17:42.698 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 5(Long)
2025-07-04 09:17:42.700 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 0
2025-07-04 09:17:42.700 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 09:17:42.700 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.700 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 09:17:42.700 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 4(Long)
2025-07-04 09:17:42.703 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 09:17:42.704 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 09:17:42.704 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.704 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 09:17:42.704 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-07-04 09:17:42.707 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 09:17:42.708 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:17:42.708 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:17:42.708 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:17:42.708 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:17:42.709 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:18:15.666 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:18:15.666 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:15.666 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:18:15.666 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:18:15.668 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:18:15.669 [http-nio-8080-exec-7] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-07-04 09:18:15.739 [http-nio-8080-exec-7] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=56464ff@456.com, password=$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy, enabled=true, roles=[ROLE_USER]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=6E938B37B8A03C69FAE8A21BB507B3A7], Granted Authorities=[ROLE_USER]]
2025-07-04 09:18:15.740 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:18:15.740 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:15.740 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:18:15.740 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:18:15.741 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:18:16.784 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 09:18:16.784 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-07-04 09:18:16.784 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-07-04 09:18:16.784 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.784 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==>  Preparing: select `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt` from topic where `status`=1 order by `rank` asc limit ?,?
2025-07-04 09:18:16.784 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-07-04 09:18:16.784 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.784 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.785 [http-nio-8080-exec-6] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-07-04 09:18:16.785 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.785 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.785 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-07-04 09:18:16.785 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 09:18:16.785 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select  
        `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt`
      from topic where `status`=1 order by `rank` asc limit ?,? ::: DataSources: slave
2025-07-04 09:18:16.785 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-07-04 09:18:16.785 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-07-04 09:18:16.785 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-07-04 09:18:16.785 [http-nio-8080-exec-6] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-07-04 09:18:16.785 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.785 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-07-04 09:18:16.785 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 09:18:16.785 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 09:18:16.787 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - <==      Total: 1
2025-07-04 09:18:16.788 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==>  Preparing: select count(*) from topic where `status`=1
2025-07-04 09:18:16.788 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-07-04 09:18:16.788 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.788 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from topic where `status`=1 ::: DataSources: slave
2025-07-04 09:18:16.788 [http-nio-8080-exec-6] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 6
2025-07-04 09:18:16.788 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:18:16.788 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.788 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:18:16.789 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 09:18:16.789 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.789 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 09:18:16.789 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==> Parameters: 
2025-07-04 09:18:16.789 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 09:18:16.789 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 09:18:16.789 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 09:18:16.789 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:18:16.789 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.789 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:18:16.790 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 09:18:16.790 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - <==      Total: 1
2025-07-04 09:18:16.791 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 4
2025-07-04 09:18:16.791 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 5
2025-07-04 09:18:16.792 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:18:16.792 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 6(Long)
2025-07-04 09:18:16.792 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 09:18:16.792 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:18:16.792 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:18:16.792 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.792 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.792 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:18:16.792 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:18:16.792 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:18:16.792 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:18:16.792 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.792 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:18:16.792 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:18:16.794 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 09:18:16.794 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:18:16.794 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 09:18:16.794 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:18:16.794 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:18:16.794 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.794 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.794 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:18:16.794 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:18:16.794 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:18:16.794 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 09:18:16.794 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.794 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 09:18:16.794 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:18:16.795 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:18:16.795 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:18:16.795 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.795 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 09:18:16.795 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:18:16.795 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 2(Integer)
2025-07-04 09:18:16.796 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:18:16.796 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:18:16.796 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 09:18:16.796 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 09:18:16.796 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:18:16.796 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:18:16.796 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:18:16.796 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:18:16.796 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:18:16.796 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.796 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:18:16.796 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.796 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:18:16.796 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.796 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.796 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:18:16.796 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:18:16.797 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:18:16.797 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:18:16.797 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 09:18:16.798 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:18:16.798 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:18:16.798 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:18:16.798 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:18:16.798 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:18:16.798 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:18:16.798 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:18:16.798 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 09:18:16.798 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.798 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.798 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.798 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:18:16.798 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:18:16.798 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:18:16.798 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 09:18:16.798 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:18:16.799 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 09:18:16.799 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:18:16.799 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.799 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:18:16.799 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:18:16.799 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:18:16.799 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:18:16.799 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:18:16.799 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:18:16.799 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.799 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:18:16.799 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 09:18:16.799 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:18:16.799 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:18:16.799 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.799 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.799 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:18:16.799 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:18:16.799 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.799 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:18:16.799 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 09:18:16.799 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:18:16.800 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:18:16.800 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 09:18:16.801 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:18:16.801 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:18:16.801 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:18:16.801 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 09:18:16.802 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 5(Long)
2025-07-04 09:18:16.804 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 0
2025-07-04 09:18:16.804 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 09:18:16.804 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.804 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 09:18:16.805 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 4(Long)
2025-07-04 09:18:16.808 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 09:18:16.809 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 09:18:16.809 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.809 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 09:18:16.809 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-07-04 09:18:16.810 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 09:18:16.812 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:18:16.812 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.812 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:18:16.812 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:18:16.814 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:18:16.824 [http-nio-8080-exec-2] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==>  Preparing: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC
2025-07-04 09:18:16.824 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:16.824 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC ::: DataSources: slave
2025-07-04 09:18:16.824 [http-nio-8080-exec-2] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==> Parameters: 
2025-07-04 09:18:16.826 [http-nio-8080-exec-2] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - <==      Total: 1
2025-07-04 09:18:18.339 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:18:18.339 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:18.339 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:18:18.339 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:18:18.340 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:18:19.908 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:18:19.908 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:19.908 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:18:19.908 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:18:19.909 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:19.909 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:18:19.910 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 09:18:19.910 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:18:19.913 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:18:19.913 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:18:19.913 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:19.913 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:18:19.914 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 09:18:19.914 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:18:19.914 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:18:19.915 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:19.915 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:18:19.915 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:18:19.916 [http-nio-8080-exec-7] ERROR druid.sql.Statement - {conn-110005, pstmt-120070} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:18:19.916 [http-nio-8080-exec-3] ERROR druid.sql.Statement - {conn-110003, pstmt-120071} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:18:19.918 [http-nio-8080-exec-7] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 136 common frames omitted
2025-07-04 09:18:19.919 [http-nio-8080-exec-3] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 136 common frames omitted
2025-07-04 09:18:19.921 [http-nio-8080-exec-7] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:18:19.921 [http-nio-8080-exec-3] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:18:19.934 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:18:19.934 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:19.934 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:18:19.935 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:18:19.937 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:18:19.937 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:18:19.937 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:19.937 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:18:19.938 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:18:19.940 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:18:19.954 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:18:19.954 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:19.954 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:18:19.954 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:18:19.956 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:18:19.957 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:18:19.957 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:19.957 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:18:19.958 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:18:19.959 [http-nio-8080-exec-8] ERROR druid.sql.Statement - {conn-110003, pstmt-120074} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:18:19.961 [http-nio-8080-exec-8] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 136 common frames omitted
2025-07-04 09:18:19.962 [http-nio-8080-exec-8] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:18:19.973 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:18:19.973 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:19.973 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:18:19.974 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:18:19.975 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:18:19.976 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:18:19.976 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:19.976 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:18:19.977 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:18:19.978 [http-nio-8080-exec-4] ERROR druid.sql.Statement - {conn-110003, pstmt-120075} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:18:19.979 [http-nio-8080-exec-4] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 135 common frames omitted
2025-07-04 09:18:19.982 [http-nio-8080-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:18:19.996 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:18:19.996 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:19.996 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:18:19.996 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:18:19.998 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:18:19.999 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:18:19.999 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:19.999 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:18:20.000 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:18:20.001 [http-nio-8080-exec-10] ERROR druid.sql.Statement - {conn-110003, pstmt-120076} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:18:20.002 [http-nio-8080-exec-10] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 134 common frames omitted
2025-07-04 09:18:20.004 [http-nio-8080-exec-10] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:18:20.026 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:18:20.026 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:20.026 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:18:20.027 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:18:20.029 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:18:20.029 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:18:20.029 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:18:20.029 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:18:20.030 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:18:20.031 [http-nio-8080-exec-5] ERROR druid.sql.Statement - {conn-110003, pstmt-120077} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:18:20.032 [http-nio-8080-exec-5] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 134 common frames omitted
2025-07-04 09:18:20.033 [http-nio-8080-exec-5] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:20:11.309 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:20:11.309 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:20:11.309 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:20:11.309 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:20:11.309 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:20:11.309 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:20:11.317 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:20:11.320 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 09:20:11.320 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:20:11.321 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:20:11.321 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:20:11.321 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:20:11.323 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:20:11.324 [http-nio-8080-exec-4] ERROR druid.sql.Statement - {conn-110003, pstmt-120080} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:20:11.327 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 09:20:11.327 [http-nio-8080-exec-4] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 134 common frames omitted
2025-07-04 09:20:11.328 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:20:11.328 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:20:11.328 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:20:11.329 [http-nio-8080-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:20:11.329 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:20:11.330 [http-nio-8080-exec-8] ERROR druid.sql.Statement - {conn-110005, pstmt-120081} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:20:11.332 [http-nio-8080-exec-8] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 134 common frames omitted
2025-07-04 09:20:11.335 [http-nio-8080-exec-8] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:20:11.431 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:20:11.431 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:20:11.431 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:20:11.434 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:20:11.435 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:20:11.436 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:20:11.436 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:20:11.436 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:20:11.438 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:20:11.439 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:20:11.633 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:20:11.633 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:20:11.633 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:20:11.633 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:20:11.635 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:20:11.636 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:20:11.636 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:20:11.636 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:20:11.637 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:20:11.638 [http-nio-8080-exec-5] ERROR druid.sql.Statement - {conn-110005, pstmt-120084} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:20:11.639 [http-nio-8080-exec-5] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 134 common frames omitted
2025-07-04 09:20:11.640 [http-nio-8080-exec-5] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:20:11.651 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:20:11.651 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:20:11.651 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:20:11.652 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:20:11.653 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:20:11.654 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:20:11.654 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:20:11.654 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:20:11.655 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:20:11.656 [http-nio-8080-exec-2] ERROR druid.sql.Statement - {conn-110005, pstmt-120085} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:20:11.657 [http-nio-8080-exec-2] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 134 common frames omitted
2025-07-04 09:20:11.659 [http-nio-8080-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:20:11.670 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:20:11.671 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:20:11.671 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:20:11.674 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:20:11.675 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:20:11.676 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:20:11.676 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:20:11.676 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:20:11.677 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:20:11.678 [http-nio-8080-exec-6] ERROR druid.sql.Statement - {conn-110005, pstmt-120086} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:20:11.679 [http-nio-8080-exec-6] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 134 common frames omitted
2025-07-04 09:20:11.681 [http-nio-8080-exec-6] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:20:11.696 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:20:11.696 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:20:11.696 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:20:11.697 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:20:11.700 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:20:11.700 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:20:11.701 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:20:11.701 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:20:11.701 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:20:11.703 [http-nio-8080-exec-7] ERROR druid.sql.Statement - {conn-110005, pstmt-120087} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:20:11.704 [http-nio-8080-exec-7] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 134 common frames omitted
2025-07-04 09:20:11.706 [http-nio-8080-exec-7] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:22:24.545 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:22:24.545 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:22:24.545 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:22:24.545 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:22:24.547 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:22:24.549 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:22:24.549 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:22:24.550 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:22:24.550 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:22:24.550 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:22:24.551 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:22:24.552 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:22:24.552 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:24:14.820 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:24:14.820 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:24:14.820 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:24:14.820 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:24:14.820 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:24:14.820 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:24:14.822 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:24:14.822 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 09:24:14.824 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:24:14.824 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:24:14.824 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:24:14.824 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:24:14.824 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 09:24:14.825 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:24:14.825 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:24:14.825 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:24:14.825 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:24:14.825 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:24:14.826 [http-nio-8080-exec-1] ERROR druid.sql.Statement - {conn-110005, pstmt-120094} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:24:14.826 [http-nio-8080-exec-3] ERROR druid.sql.Statement - {conn-110003, pstmt-120093} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:24:14.828 [http-nio-8080-exec-3] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 134 common frames omitted
2025-07-04 09:24:14.828 [http-nio-8080-exec-1] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 134 common frames omitted
2025-07-04 09:24:14.831 [http-nio-8080-exec-3] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:24:14.831 [http-nio-8080-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:24:14.951 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:24:14.952 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:24:14.952 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:24:14.952 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:24:14.953 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:24:14.954 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:24:14.955 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:24:14.955 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:24:14.955 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:24:14.956 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:24:14.969 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:24:14.970 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:24:14.970 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:24:14.970 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:24:14.971 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:24:14.972 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:24:14.972 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:24:14.972 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:24:14.973 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:24:14.975 [http-nio-8080-exec-4] ERROR druid.sql.Statement - {conn-110005, pstmt-120095} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:24:14.978 [http-nio-8080-exec-4] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 134 common frames omitted
2025-07-04 09:24:14.979 [http-nio-8080-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:24:14.991 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:24:14.991 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:24:14.991 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:24:14.992 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:24:14.994 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:24:14.995 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:24:14.995 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:24:14.995 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:24:14.996 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:24:14.997 [http-nio-8080-exec-8] ERROR druid.sql.Statement - {conn-110005, pstmt-120096} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:24:15.000 [http-nio-8080-exec-8] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 134 common frames omitted
2025-07-04 09:24:15.001 [http-nio-8080-exec-8] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:24:15.012 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:24:15.012 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:24:15.013 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:24:15.013 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:24:15.015 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:24:15.016 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:24:15.016 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:24:15.016 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:24:15.017 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:24:15.019 [http-nio-8080-exec-10] ERROR druid.sql.Statement - {conn-110005, pstmt-120097} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:24:15.021 [http-nio-8080-exec-10] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 134 common frames omitted
2025-07-04 09:24:15.022 [http-nio-8080-exec-10] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:24:15.034 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:24:15.034 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:24:15.034 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:24:15.034 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:24:15.037 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:24:15.038 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description, b.coverImg FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:24:15.038 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:24:15.038 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:24:15.039 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:24:15.040 [http-nio-8080-exec-5] ERROR druid.sql.Statement - {conn-110005, pstmt-120098} execute error. select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description,
          b.coverImg
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ?
java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:24:15.042 [http-nio-8080-exec-5] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy84.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy116.findOrderDetailDtoList(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy117.findOrderDetailDtoList(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.findOrderDetailDtoList(OrderServiceImpl.java:442)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:386)
	at org.springframework.aop.framework.CglibAopProxy.access$000(CglibAopProxy.java:85)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:703)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$69b710c.findOrderDetailDtoList(<generated>)
	at com.huang.store.controller.OrderController.getUserOrderList(OrderController.java:401)
	at jdk.internal.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor34.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy147.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:333)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 134 common frames omitted
2025-07-04 09:24:15.043 [http-nio-8080-exec-5] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select                     o.orderid,           o.num,           o.price,           b.bookName,           b.id,           b.author,           b.isbn,           b.publish,           b.birthday,           b.marketPrice,           b.price AS bookPrice,           b.stock,           b.description,           b.coverImg               FROM         orderdetail AS o         LEFT JOIN book AS b ON o.bookId = b.id         where o.orderId = ?<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list'<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'b.coverImg' in 'field list']
2025-07-04 09:24:20.500 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:24:20.500 [Thread-7] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 09:24:20.501 [Thread-7] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-07-04 09:24:20.510 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1737335105] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:24:20.510 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1737335105] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:24:20.511 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-280316138] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:24:20.511 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-280316138] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:24:20.512 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 09:24:20.514 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 09:24:20.532 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closing ...
2025-07-04 09:24:20.534 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-07-04 09:24:20.534 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closing ...
2025-07-04 09:24:20.537 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-07-04 09:24:20.656 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 18708 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 09:24:20.656 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 09:24:20.656 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 09:24:21.109 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 09:24:21.109 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 09:24:21.138 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 29 ms. Found 0 Redis repository interfaces.
2025-07-04 09:24:21.237 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$621d1fb3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:24:21.245 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:24:21.398 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 09:24:21.398 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 09:24:21.398 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 09:24:21.398 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 09:24:21.399 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 09:24:21.399 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:24:21.399 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 09:24:21.399 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 09:24:21.425 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 09:24:21.425 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 761 ms
2025-07-04 09:24:21.428 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 09:24:21.595 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} inited
2025-07-04 09:24:21.642 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} inited
2025-07-04 09:24:21.897 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 09:24:21.898 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 09:24:22.187 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 09:24:22.245 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@b5f4485, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3e8f9ec5, org.springframework.security.web.context.SecurityContextPersistenceFilter@2bba3ab0, org.springframework.security.web.header.HeaderWriterFilter@4b5a9c0e, org.springframework.web.filter.CorsFilter@6520a447, org.springframework.security.web.authentication.logout.LogoutFilter@15c40a68, com.huang.store.security.JwtAuthenticationTokenFilter@4a9586be, com.huang.store.security.CustomAuthenticationFilter@2c1eeb9b, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@49c576d6, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@603fd3db, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7f9a893e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3ebf39e7, org.springframework.security.web.session.SessionManagementFilter@1ea1df5a, org.springframework.security.web.access.ExceptionTranslationFilter@155bc2ae, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@47bf91af]
2025-07-04 09:24:22.342 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 09:24:22.351 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 09:24:22.353 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 09:24:22.356 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:24:22.356 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 1.76 seconds (JVM running for 421.918)
2025-07-04 09:24:22.356 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:24:22.356 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:24:22.356 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:24:22.357 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:24:22.359 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:24:22.359 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:24:22.366 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:24:22.366 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:24:22.367 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:24:22.367 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:24:22.369 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:24:22.370 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:24:44.306 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closing ...
2025-07-04 09:24:44.307 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closed
2025-07-04 09:24:44.307 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closing ...
2025-07-04 09:24:44.307 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closed
2025-07-04 09:24:47.518 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-07-04 09:24:47.535 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 20432 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 09:24:47.536 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 09:24:47.536 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 09:24:47.668 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-04 09:24:47.668 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-04 09:24:48.158 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 09:24:48.160 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 09:24:48.187 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-07-04 09:24:48.367 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$ac37fe21] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:24:48.378 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:24:48.707 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 09:24:48.708 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 09:24:48.708 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 09:24:48.708 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 09:24:48.711 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 09:24:48.717 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:24:48.718 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 09:24:48.718 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 09:24:48.763 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 09:24:48.763 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1095 ms
2025-07-04 09:24:48.767 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 09:24:49.435 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-07-04 09:24:49.459 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-07-04 09:24:49.785 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 09:24:49.785 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 09:24:50.254 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 09:24:50.379 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@735cd233, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@565486f5, org.springframework.security.web.context.SecurityContextPersistenceFilter@7941e728, org.springframework.security.web.header.HeaderWriterFilter@7a2a1fbb, org.springframework.web.filter.CorsFilter@6d33080b, org.springframework.security.web.authentication.logout.LogoutFilter@6ea5e315, com.huang.store.security.JwtAuthenticationTokenFilter@5c97a004, com.huang.store.security.CustomAuthenticationFilter@42bc58fa, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@6ce1482, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3fd38c11, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@33dffade, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@423e4f61, org.springframework.security.web.session.SessionManagementFilter@36f777ea, org.springframework.security.web.access.ExceptionTranslationFilter@692cde5e, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@3998b1e1]
2025-07-04 09:24:50.639 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 09:24:50.656 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 09:24:50.671 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 09:24:50.678 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:24:50.681 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.466 seconds (JVM running for 3.929)
2025-07-04 09:24:50.699 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:24:50.708 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:24:50.709 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:24:50.747 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:24:50.757 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:24:50.760 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:24:50.765 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:24:50.765 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:24:50.765 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:24:50.768 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:24:50.770 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:24:50.771 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:25:08.339 [http-nio-8080-exec-2] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-04 09:25:08.339 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-04 09:25:08.339 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-07-04 09:25:08.396 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:08.396 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:08.396 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.396 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.396 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:08.396 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:08.403 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:08.409 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:08.410 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 09:25:08.410 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:08.410 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.410 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:08.417 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 09:25:08.417 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:08.417 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.417 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:08.420 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:25:08.420 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:25:08.424 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:08.424 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:08.433 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:08.433 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:08.433 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.433 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.433 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:08.434 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:08.435 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:25:08.435 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:25:08.437 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:08.437 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:08.437 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:08.437 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.437 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:08.437 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181520552434(String)
2025-07-04 09:25:08.438 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:25:08.438 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.438 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:08.439 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:25:08.439 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:08.439 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:08.439 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.439 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:08.440 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:25:08.440 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:08.440 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:08.441 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:08.441 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.441 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:08.442 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181355860200(String)
2025-07-04 09:25:08.443 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:08.444 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:08.444 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.444 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:08.444 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:25:08.445 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:08.446 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:08.446 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.446 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:08.446 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181206573250(String)
2025-07-04 09:25:08.447 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:08.447 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:08.447 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.448 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:08.448 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:25:08.449 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:08.449 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:08.449 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.449 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:08.449 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703175346171678(String)
2025-07-04 09:25:08.451 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:08.452 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:08.452 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.452 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:08.452 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:25:08.454 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:08.455 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:25:08.455 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.455 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:08.456 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:25:08.457 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:08.505 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:08.506 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.506 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:08.509 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:08.510 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:25:08.511 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:08.511 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.511 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:08.513 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:25:08.514 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:08.537 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:08.538 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.538 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:08.539 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:08.542 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:08.542 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:08.542 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.542 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:08.542 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:25:08.544 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:08.545 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:08.545 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.545 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:08.545 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:25:08.546 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:08.547 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.547 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:08.547 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:08.548 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:08.548 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:25:08.548 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.548 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:08.548 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:25:08.550 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:08.550 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:08.550 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:08.550 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.550 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:08.551 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:25:08.554 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:08.554 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:08.555 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.555 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:08.555 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:25:08.556 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:08.557 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:08.557 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.557 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:08.558 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:25:08.558 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:08.563 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:08.563 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.563 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:08.563 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:08.564 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:25:08.565 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:08.565 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.565 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:08.566 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:25:08.567 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:08.586 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:08.586 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.586 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:08.586 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:08.586 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.586 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:08.587 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:08.587 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:08.589 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:08.589 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:08.590 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:08.590 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:08.590 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.590 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.590 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:08.590 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:08.590 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:25:08.590 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:25:08.591 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:08.591 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:08.592 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:08.592 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.592 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:08.592 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:08.592 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.592 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:08.592 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:25:08.592 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:25:08.593 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:08.593 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:08.593 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:08.593 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:08.593 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.593 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.593 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:08.593 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:08.593 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:25:08.593 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:25:08.595 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:08.595 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:08.606 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:08.606 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.606 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:08.606 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:08.609 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:08.610 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:08.610 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.610 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:08.610 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:25:08.612 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:08.612 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:08.612 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.612 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:08.612 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:25:08.613 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:08.614 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:08.614 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.614 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:08.614 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:25:08.616 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:08.622 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:08.622 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.622 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:08.622 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:08.624 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:08.624 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:08.624 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.624 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:08.624 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:25:08.626 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:08.626 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:08.626 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.626 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:08.626 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:25:08.628 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:08.628 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:08.628 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.628 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:08.628 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:25:08.629 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:08.637 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:08.637 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.637 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:08.637 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:08.639 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:08.639 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:08.639 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.639 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:08.639 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:25:08.641 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:08.641 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:08.641 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.642 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:08.642 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:25:08.643 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:08.643 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:08.643 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.643 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:08.643 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:25:08.644 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:08.656 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:08.656 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.656 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:08.656 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:08.658 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:08.658 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:08.658 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.658 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:08.659 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:25:08.660 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:08.660 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:08.660 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.660 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:08.660 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:25:08.661 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:08.661 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:08.661 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.661 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:08.661 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 09:25:08.662 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:08.670 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:08.670 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.670 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:08.670 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:08.672 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:08.673 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:08.673 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.673 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:08.673 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:25:08.674 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:08.674 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:08.674 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.675 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:08.675 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:25:08.676 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:08.676 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:08.676 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:08.676 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:08.676 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 09:25:08.677 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:21.530 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:25:21.530 [Thread-7] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 09:25:21.531 [Thread-7] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-07-04 09:25:21.542 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-544624770] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:25:21.542 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-544624770] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:25:21.542 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-970900424] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:25:21.543 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-970900424] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:25:21.543 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 09:25:21.545 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 09:25:21.562 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closing ...
2025-07-04 09:25:21.566 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-07-04 09:25:21.566 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closing ...
2025-07-04 09:25:21.568 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-07-04 09:25:21.664 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 20432 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 09:25:21.665 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 09:25:21.665 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 09:25:21.872 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 09:25:21.872 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 09:25:21.880 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-07-04 09:25:21.916 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$ac37fe21] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:25:21.920 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:25:21.993 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 09:25:21.993 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 09:25:21.993 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 09:25:21.993 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 09:25:21.994 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 09:25:21.994 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:25:21.995 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 09:25:21.995 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 09:25:22.010 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 09:25:22.010 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 343 ms
2025-07-04 09:25:22.012 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 09:25:22.103 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} inited
2025-07-04 09:25:22.120 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} inited
2025-07-04 09:25:22.249 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 09:25:22.249 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 09:25:22.427 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 09:25:22.488 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@66123aa6, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@670b40b, org.springframework.security.web.context.SecurityContextPersistenceFilter@38c9bd3a, org.springframework.security.web.header.HeaderWriterFilter@733a1592, org.springframework.web.filter.CorsFilter@5b2ea4f2, org.springframework.security.web.authentication.logout.LogoutFilter@b8ab75c, com.huang.store.security.JwtAuthenticationTokenFilter@32a10af6, com.huang.store.security.CustomAuthenticationFilter@2d707207, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@7f989f1d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5c34b252, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7f01aac3, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@9fbf8dd, org.springframework.security.web.session.SessionManagementFilter@22a46f7c, org.springframework.security.web.access.ExceptionTranslationFilter@501691e0, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5b627bd6]
2025-07-04 09:25:22.587 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 09:25:22.596 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 09:25:22.599 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 09:25:22.602 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:25:22.602 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.982 seconds (JVM running for 35.85)
2025-07-04 09:25:22.603 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:25:22.603 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:22.603 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:25:22.604 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:25:22.606 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:25:22.606 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:25:22.608 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:25:22.608 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:22.608 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:25:22.609 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:25:22.610 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:25:22.611 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:25:24.427 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-04 09:25:24.427 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-04 09:25:24.428 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-07-04 09:25:24.434 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:24.434 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.434 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:24.435 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 09:25:24.437 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:24.437 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:24.437 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.437 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:24.438 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:25:24.441 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:24.443 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:24.443 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.443 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:24.443 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:25:24.445 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:24.446 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:24.446 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.446 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:24.446 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:25:24.448 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:24.473 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:24.473 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.473 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:24.475 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:24.478 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:24.479 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:24.479 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.479 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:24.479 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:25:24.481 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:24.482 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:24.482 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.482 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:24.483 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:25:24.484 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:24.484 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:25:24.484 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.484 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:24.485 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:25:24.486 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:24.496 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:24.497 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.497 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:24.497 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:24.498 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:25:24.498 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:24.498 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.498 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:24.498 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:25:24.499 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:24.509 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:24.509 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.509 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:24.509 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:24.511 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:24.511 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:24.511 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.511 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:24.511 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:25:24.512 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:24.513 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:24.513 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.513 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:24.513 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:25:24.513 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:24.514 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:24.514 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.514 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:24.514 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:25:24.514 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:24.523 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:24.523 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.523 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:24.524 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:24.525 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:24.525 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:24.525 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.525 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:24.525 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:25:24.526 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:24.527 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:24.527 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.527 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:24.527 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:25:24.528 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:24.528 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:24.528 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.528 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:24.528 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:25:24.529 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:24.539 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:24.539 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.539 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:24.539 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:24.540 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:24.540 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:24.541 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.541 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:24.541 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:25:24.541 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:24.542 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:24.542 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.542 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:24.542 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:25:24.543 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:24.543 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:24.543 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.543 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:24.544 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:25:24.545 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:24.554 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:24.555 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.555 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:24.555 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:24.557 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:24.558 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:24.558 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.558 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:24.558 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:25:24.559 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:24.559 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:24.559 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.559 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:24.559 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:25:24.560 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:24.561 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:24.561 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:24.561 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:24.561 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 09:25:24.562 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:25.375 [http-nio-8080-exec-8] INFO  com.huang.store.controller.OrderController - 获取用户订单详情: userAccount=56464ff@456.com, orderId=20250701224811070894
2025-07-04 09:25:25.377 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.orderId = ?
2025-07-04 09:25:25.377 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:25.377 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
        WHERE o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:25.380 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:25:25.381 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - <==      Total: 1
2025-07-04 09:25:25.381 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:25.381 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:25.381 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:25.382 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:25:25.383 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:37.916 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:37.916 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:37.916 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.916 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.916 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:37.916 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:37.917 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 09:25:37.919 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 09:25:37.920 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:37.920 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:37.920 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.920 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:37.921 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:37.922 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:37.922 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:25:37.922 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.922 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:37.923 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:37.923 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:25:37.924 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:37.924 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.924 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:37.924 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:37.924 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:25:37.924 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:37.924 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.924 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:37.925 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:37.926 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:25:37.926 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:37.926 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.926 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:37.927 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:37.927 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181520552434(String)
2025-07-04 09:25:37.927 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:25:37.927 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.927 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:37.928 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:37.928 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:25:37.928 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:37.928 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.929 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:37.929 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:37.929 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:25:37.930 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:37.930 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:37.930 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.930 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:37.930 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181355860200(String)
2025-07-04 09:25:37.933 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:37.934 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:37.934 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.934 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:37.934 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:25:37.935 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:37.935 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:37.935 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.936 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:37.936 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181206573250(String)
2025-07-04 09:25:37.937 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:37.937 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:37.937 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.937 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:37.937 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:25:37.939 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:37.939 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:37.940 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.940 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:37.940 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703175346171678(String)
2025-07-04 09:25:37.941 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:37.942 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:37.942 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.942 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:37.942 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:25:37.943 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:37.943 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:25:37.943 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.943 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:37.944 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:37.944 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:25:37.944 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.944 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:37.944 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:37.945 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:25:37.945 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:37.945 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:37.945 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.945 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:37.946 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:25:37.947 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:37.975 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:37.975 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:37.975 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.975 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.975 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:37.975 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:37.975 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:37.975 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:37.976 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:37.977 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:37.977 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.977 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:37.977 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:25:37.977 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:37.977 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:37.978 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.978 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:37.978 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:25:37.978 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:37.979 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:37.979 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.979 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:37.979 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:25:37.979 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:37.980 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:37.980 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.980 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:37.980 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:25:37.980 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:37.980 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:37.980 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.980 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:37.981 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:25:37.981 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:37.981 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:25:37.981 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.981 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:37.981 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:25:37.982 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:37.982 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:37.999 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:37.999 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:37.999 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.999 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:37.999 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:37.999 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:38.000 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:38.000 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:38.001 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:25:38.001 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:38.001 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.001 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:38.002 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:25:38.003 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:38.004 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:38.005 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:38.005 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.005 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:38.005 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:25:38.008 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:38.009 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:38.009 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.009 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:38.009 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:25:38.010 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:38.010 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:38.010 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.010 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:38.010 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:25:38.011 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:38.064 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:38.064 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.064 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:38.064 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:38.067 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:38.068 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:38.068 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.068 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:38.068 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:25:38.070 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:38.071 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:38.071 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.071 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:38.072 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:25:38.072 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:38.073 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:38.073 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.074 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:38.074 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:25:38.075 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:38.076 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:38.076 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.076 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:38.076 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:38.078 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:38.078 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:38.079 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.079 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:38.079 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:25:38.081 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:38.081 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:38.082 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.082 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:38.082 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:25:38.083 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:38.084 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:38.084 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.084 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:38.085 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:25:38.086 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:38.098 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:38.099 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.099 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:38.099 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:38.101 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:38.102 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:38.102 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.102 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:38.102 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:38.102 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.102 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:38.102 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:25:38.102 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:38.104 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:38.104 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:38.105 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:38.105 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:38.105 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.105 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.105 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:38.105 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:38.105 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:25:38.105 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:25:38.107 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:38.107 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:38.107 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:38.107 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:38.107 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.107 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:38.107 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.108 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:38.108 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:25:38.108 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 09:25:38.109 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:38.109 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:38.109 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:38.109 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.109 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:38.109 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:25:38.110 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:38.129 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:38.129 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.129 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:38.130 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:38.131 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:38.131 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:38.131 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.131 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:38.131 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:25:38.132 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:38.132 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:38.132 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.132 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:38.132 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:25:38.134 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:38.134 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:38.134 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.134 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:38.135 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:25:38.135 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:38.146 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:38.146 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.147 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:38.148 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:38.149 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:38.150 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:38.150 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.150 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:38.150 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:25:38.151 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:38.151 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:38.151 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.151 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:38.152 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:25:38.152 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:38.154 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:38.154 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:38.154 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:38.154 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 09:25:38.155 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:43.801 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:43.801 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.801 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:43.801 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 09:25:43.803 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:43.804 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:43.804 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.804 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:43.804 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:25:43.805 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:43.805 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:43.805 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.805 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:43.805 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:25:43.806 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:43.806 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:43.806 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.806 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:43.806 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:25:43.807 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:43.825 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:43.825 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.825 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:43.825 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:43.826 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:43.827 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:43.827 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.827 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:43.827 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:25:43.827 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:43.828 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:43.828 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.828 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:43.828 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:25:43.829 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:43.829 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:25:43.829 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.829 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:43.829 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:25:43.830 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:43.840 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:43.840 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.840 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:43.840 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:43.841 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:25:43.841 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:43.841 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.841 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:43.841 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:25:43.842 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:43.850 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:43.851 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.851 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:43.851 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:43.852 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:43.852 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:43.852 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.852 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:43.852 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:25:43.853 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:43.853 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:43.853 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.853 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:43.853 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:25:43.854 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:43.854 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:43.854 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.854 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:43.854 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:25:43.855 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:43.862 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:43.863 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.863 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:43.863 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:43.864 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:43.864 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:43.864 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.864 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:43.865 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:25:43.865 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:43.866 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:43.866 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.866 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:43.866 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:25:43.866 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:43.867 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:43.867 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.867 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:43.867 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:25:43.867 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:43.875 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:43.875 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.875 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:43.876 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:43.877 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:43.877 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:43.877 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.877 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:43.877 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:25:43.878 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:43.879 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:43.879 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.879 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:43.879 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:25:43.879 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:43.880 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:43.880 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.880 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:43.880 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:25:43.880 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:43.889 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:25:43.889 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.889 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:25:43.889 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:25:43.890 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:25:43.891 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:43.891 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.891 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:43.891 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:25:43.892 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:25:43.893 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:25:43.893 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.893 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:25:43.893 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:25:43.893 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:25:43.894 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:25:43.894 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:43.894 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:25:43.894 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 09:25:43.895 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:25:44.885 [http-nio-8080-exec-10] INFO  com.huang.store.controller.OrderController - 获取用户订单详情: userAccount=56464ff@456.com, orderId=20250701224811070894
2025-07-04 09:25:44.885 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.orderId = ?
2025-07-04 09:25:44.885 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:44.885 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
        WHERE o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:44.886 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:25:44.888 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.OrderMapper.findOrderDtoByOrderId - <==      Total: 1
2025-07-04 09:25:44.888 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:25:44.888 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:25:44.888 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:25:44.888 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:25:44.889 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:26:07.979 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:26:07.979 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:07.979 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:26:07.979 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:26:07.981 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:26:07.981 [http-nio-8080-exec-9] INFO  com.huang.store.controller.CommentController - 添加评论: bookId=1, userId=5, userAccount=56464ff@456.com
2025-07-04 09:26:07.981 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.CommentMapper.addComment - ==>  Preparing: INSERT INTO book_comment (bookId, userId, parentId, content, likeCount, createTime) VALUES (?, ?, ?, ?, ?, ?)
2025-07-04 09:26:07.982 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:07.982 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: INSERT INTO book_comment (bookId, userId, parentId, content, likeCount, createTime)
        VALUES (?, ?, ?, ?, ?, ?) ::: DataSources: master
2025-07-04 09:26:08.052 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.CommentMapper.addComment - ==> Parameters: 1(Integer), 5(Integer), null, 很好的一本书。真的很好(String), 0(Integer), 2025-07-04 09:26:07.981(Timestamp)
2025-07-04 09:26:08.064 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.CommentMapper.addComment - <==    Updates: 1
2025-07-04 09:26:08.120 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:26:08.120 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:26:08.120 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.120 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.120 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:26:08.120 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:26:08.120 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 09:26:08.120 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:26:08.121 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:26:08.122 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 09:26:08.122 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:26:08.122 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.122 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:26:08.122 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:26:08.122 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.122 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:26:08.122 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:26:08.122 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:26:08.123 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:26:08.123 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:26:08.123 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:08.123 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:08.123 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.123 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.123 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:08.123 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:08.123 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:26:08.123 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:26:08.124 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:08.124 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:08.124 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:26:08.125 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.125 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:26:08.125 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:26:08.125 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.125 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:26:08.125 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181520552434(String)
2025-07-04 09:26:08.125 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:26:08.125 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:26:08.125 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:26:08.126 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:08.126 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.126 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:08.126 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:26:08.127 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:08.127 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:26:08.128 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.128 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:26:08.128 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181355860200(String)
2025-07-04 09:26:08.129 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:26:08.129 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:08.129 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.129 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:08.129 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:26:08.130 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:08.131 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:26:08.131 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.131 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:26:08.131 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181206573250(String)
2025-07-04 09:26:08.132 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:26:08.133 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:08.133 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.133 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:08.133 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:26:08.134 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:08.134 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:26:08.134 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.134 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:26:08.134 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703175346171678(String)
2025-07-04 09:26:08.135 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:26:08.135 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:08.135 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.135 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:08.135 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:26:08.136 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:08.136 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:26:08.136 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.136 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:26:08.136 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:26:08.137 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:26:08.138 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:26:08.138 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.138 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:26:08.138 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:26:08.139 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:26:08.140 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:26:08.140 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.140 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:26:08.140 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:26:08.141 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:26:08.165 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:26:08.165 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:26:08.165 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.165 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.165 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:26:08.165 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:26:08.165 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:26:08.165 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:26:08.167 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:26:08.167 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:26:08.167 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:26:08.167 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.167 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:26:08.167 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:26:08.167 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.167 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:26:08.167 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:26:08.167 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:26:08.169 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:26:08.169 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:26:08.169 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:08.169 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:08.170 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.170 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.170 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:08.170 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:08.170 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:26:08.170 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:26:08.171 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:08.171 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:08.171 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:26:08.171 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:26:08.171 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.171 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.171 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:26:08.171 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:26:08.171 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:26:08.171 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:26:08.172 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:26:08.172 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:26:08.235 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:26:08.235 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.235 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:26:08.235 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:26:08.237 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:26:08.237 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:26:08.237 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.237 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:26:08.237 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:26:08.238 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:26:08.247 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:26:08.247 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.247 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:26:08.247 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:26:08.249 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:26:08.249 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:26:08.249 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.249 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:26:08.249 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:26:08.251 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:26:08.251 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:08.251 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.251 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:08.251 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:26:08.252 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:08.253 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:26:08.253 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.253 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:26:08.253 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:26:08.254 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:26:08.260 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:26:08.260 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.260 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:26:08.260 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:26:08.261 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:26:08.262 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:26:08.262 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.262 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:26:08.262 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:26:08.263 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:26:08.263 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:08.263 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.263 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:08.263 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:26:08.264 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:08.265 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:26:08.265 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.265 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:26:08.265 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:26:08.266 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:26:08.279 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:26:08.279 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:26:08.279 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.279 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:26:08.279 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.279 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:26:08.279 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:26:08.279 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:26:08.280 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:26:08.280 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:26:08.281 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:26:08.281 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:26:08.281 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.281 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.281 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:26:08.281 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:26:08.281 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:26:08.281 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:26:08.281 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:26:08.281 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:26:08.282 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:08.282 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.282 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:08.282 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:08.282 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.282 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:08.282 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:26:08.282 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:26:08.282 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:08.282 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:08.283 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:26:08.283 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:26:08.283 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.283 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.283 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:26:08.283 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:26:08.283 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:26:08.283 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:26:08.284 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:26:08.284 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:26:08.302 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:26:08.302 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:26:08.302 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.302 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.302 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:26:08.302 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:26:08.302 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:26:08.302 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:26:08.303 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:26:08.303 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:26:08.303 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:26:08.303 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:26:08.303 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.303 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.303 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:26:08.303 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:26:08.303 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:26:08.303 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:26:08.305 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:26:08.305 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:26:08.305 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:08.305 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:08.305 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.305 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.305 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:08.305 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:08.305 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:26:08.305 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:26:08.306 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:08.306 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:08.306 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:26:08.306 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:26:08.307 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.307 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.307 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:26:08.307 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:26:08.307 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 09:26:08.307 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:26:08.307 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:26:08.307 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:26:08.328 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:26:08.328 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.328 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:26:08.328 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:26:08.329 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:26:08.330 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:26:08.330 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.330 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:26:08.330 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:26:08.330 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:26:08.331 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:08.331 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.331 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:08.331 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:26:08.331 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:08.331 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:26:08.331 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:08.331 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:26:08.331 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 09:26:08.332 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:26:11.483 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-07-04 09:26:11.483 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-07-04 09:26:11.483 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 09:26:11.483 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.483 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-07-04 09:26:11.483 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.483 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.483 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 09:26:11.483 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-07-04 09:26:11.483 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-07-04 09:26:11.483 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.483 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-07-04 09:26:11.484 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 09:26:11.486 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 09:26:11.486 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:26:11.486 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.486 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:26:11.487 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 09:26:11.488 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 09:26:11.488 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-07-04 09:26:11.489 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:11.489 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==>  Preparing: select `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt` from topic where `status`=1 order by `rank` asc limit ?,?
2025-07-04 09:26:11.489 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.489 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:11.489 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.489 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select  
        `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt`
      from topic where `status`=1 order by `rank` asc limit ?,? ::: DataSources: slave
2025-07-04 09:26:11.489 [http-nio-8080-exec-8] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-07-04 09:26:11.489 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.489 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-07-04 09:26:11.489 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 09:26:11.492 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 5
2025-07-04 09:26:11.492 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 4
2025-07-04 09:26:11.492 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 09:26:11.492 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:11.492 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.492 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:11.492 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:11.492 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.492 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:11.492 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 09:26:11.493 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:11.493 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 09:26:11.493 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:26:11.493 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:11.493 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.493 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.493 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:26:11.494 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:11.494 [http-nio-8080-exec-8] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-07-04 09:26:11.494 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-07-04 09:26:11.495 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - <==      Total: 1
2025-07-04 09:26:11.495 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:26:11.495 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==>  Preparing: select count(*) from topic where `status`=1
2025-07-04 09:26:11.495 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.495 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from topic where `status`=1 ::: DataSources: slave
2025-07-04 09:26:11.496 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:11.496 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:11.497 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.497 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:11.497 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:26:11.497 [http-nio-8080-exec-8] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 6
2025-07-04 09:26:11.497 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:11.498 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:11.498 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:26:11.498 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.498 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:11.498 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 09:26:11.499 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:11.499 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 09:26:11.499 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 09:26:11.499 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.499 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 09:26:11.499 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:26:11.499 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:26:11.499 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:11.499 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.499 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:26:11.499 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:26:11.499 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.499 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:11.499 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==> Parameters: 
2025-07-04 09:26:11.500 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - <==      Total: 1
2025-07-04 09:26:11.500 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:11.500 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:11.501 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:26:11.501 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 09:26:11.501 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:11.501 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:11.501 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.501 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.501 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:11.501 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:11.502 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:11.502 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 09:26:11.502 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 09:26:11.502 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:11.502 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:26:11.502 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:26:11.502 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.502 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.502 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:26:11.502 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:11.502 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 6(Long)
2025-07-04 09:26:11.503 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:11.503 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:11.504 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:11.504 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:11.504 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:26:11.504 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.504 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 09:26:11.504 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:11.504 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.504 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:11.505 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:11.505 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 09:26:11.505 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 09:26:11.505 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:11.505 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 09:26:11.505 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:26:11.505 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.505 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:11.505 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 09:26:11.505 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:26:11.506 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.506 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 09:26:11.506 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:11.506 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:11.507 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:11.507 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:11.507 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.507 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:11.507 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 2(Integer)
2025-07-04 09:26:11.508 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:26:11.509 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:11.510 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 09:26:11.510 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:11.510 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.510 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:11.510 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:26:11.511 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:11.514 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 09:26:11.515 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.515 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 09:26:11.515 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 5(Long)
2025-07-04 09:26:11.517 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 0
2025-07-04 09:26:11.517 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 09:26:11.518 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.518 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 09:26:11.518 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 4(Long)
2025-07-04 09:26:11.521 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 09:26:11.522 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 09:26:11.522 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.522 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 09:26:11.523 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-07-04 09:26:11.524 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 09:26:11.525 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:11.525 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.525 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:11.527 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:26:11.526 [http-nio-8080-exec-10] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==>  Preparing: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC
2025-07-04 09:26:11.529 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:11.529 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:11.529 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC ::: DataSources: slave
2025-07-04 09:26:11.530 [http-nio-8080-exec-10] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==> Parameters: 
2025-07-04 09:26:11.532 [http-nio-8080-exec-10] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - <==      Total: 1
2025-07-04 09:26:12.916 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 09:26:12.917 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.917 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 09:26:12.917 [http-nio-8080-exec-4] INFO  com.huang.store.controller.CommentController - 获取图书评论: bookId=1, page=1, pageSize=10
2025-07-04 09:26:12.918 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 09:26:12.918 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:26:12.918 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.918 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:26:12.918 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:26:12.919 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:26:12.920 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getCommentDetailsByBook - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.bookId = ? AND c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 09:26:12.920 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.920 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.bookId = ? AND c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 09:26:12.921 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 09:26:12.922 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:26:12.922 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.922 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:26:12.922 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 09:26:12.923 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getCommentDetailsByBook - ==> Parameters: 1(Integer), 0(Integer), 10(Integer)
2025-07-04 09:26:12.924 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 09:26:12.925 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:26:12.925 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.925 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:26:12.925 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 09:26:12.925 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getCommentDetailsByBook - <==      Total: 3
2025-07-04 09:26:12.926 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 09:26:12.926 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==>  Preparing: select * from user where id = ?
2025-07-04 09:26:12.926 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.926 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from user where id = ? ::: DataSources: slave
2025-07-04 09:26:12.927 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:26:12.927 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.927 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:26:12.927 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 09:26:12.927 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==> Parameters: 5(Integer)
2025-07-04 09:26:12.928 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 09:26:12.928 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUserById - <==      Total: 1
2025-07-04 09:26:12.929 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:26:12.929 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.929 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==>  Preparing: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ?
2025-07-04 09:26:12.929 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:26:12.929 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.929 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ? ::: DataSources: slave
2025-07-04 09:26:12.929 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 09:26:12.929 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==> Parameters: 18(Integer), 5(Integer)
2025-07-04 09:26:12.930 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 09:26:12.931 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - <==      Total: 1
2025-07-04 09:26:12.932 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==>  Preparing: SELECT * FROM book_comment WHERE parentId = ? ORDER BY createTime ASC
2025-07-04 09:26:12.932 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.932 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT * FROM book_comment 
        WHERE parentId = ?
        ORDER BY createTime ASC ::: DataSources: slave
2025-07-04 09:26:12.933 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==> Parameters: 18(Integer)
2025-07-04 09:26:12.934 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - <==      Total: 0
2025-07-04 09:26:12.935 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==>  Preparing: select * from user where id = ?
2025-07-04 09:26:12.935 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.935 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from user where id = ? ::: DataSources: slave
2025-07-04 09:26:12.936 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==> Parameters: 3(Integer)
2025-07-04 09:26:12.937 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUserById - <==      Total: 1
2025-07-04 09:26:12.937 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==>  Preparing: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ?
2025-07-04 09:26:12.937 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.937 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ? ::: DataSources: slave
2025-07-04 09:26:12.937 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==> Parameters: 2(Integer), 5(Integer)
2025-07-04 09:26:12.938 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - <==      Total: 1
2025-07-04 09:26:12.939 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==>  Preparing: SELECT * FROM book_comment WHERE parentId = ? ORDER BY createTime ASC
2025-07-04 09:26:12.939 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.939 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT * FROM book_comment 
        WHERE parentId = ?
        ORDER BY createTime ASC ::: DataSources: slave
2025-07-04 09:26:12.939 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==> Parameters: 2(Integer)
2025-07-04 09:26:12.940 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - <==      Total: 1
2025-07-04 09:26:12.941 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==>  Preparing: select * from user where id = ?
2025-07-04 09:26:12.941 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.941 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from user where id = ? ::: DataSources: slave
2025-07-04 09:26:12.941 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==> Parameters: 2(Integer)
2025-07-04 09:26:12.942 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUserById - <==      Total: 1
2025-07-04 09:26:12.942 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==>  Preparing: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ?
2025-07-04 09:26:12.943 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.943 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ? ::: DataSources: slave
2025-07-04 09:26:12.943 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==> Parameters: 11(Integer), 5(Integer)
2025-07-04 09:26:12.943 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - <==      Total: 1
2025-07-04 09:26:12.944 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==>  Preparing: select * from user where id = ?
2025-07-04 09:26:12.944 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.944 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from user where id = ? ::: DataSources: slave
2025-07-04 09:26:12.944 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==> Parameters: 2(Integer)
2025-07-04 09:26:12.944 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUserById - <==      Total: 1
2025-07-04 09:26:12.945 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==>  Preparing: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ?
2025-07-04 09:26:12.945 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.945 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ? ::: DataSources: slave
2025-07-04 09:26:12.945 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==> Parameters: 1(Integer), 5(Integer)
2025-07-04 09:26:12.945 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - <==      Total: 1
2025-07-04 09:26:12.946 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==>  Preparing: SELECT * FROM book_comment WHERE parentId = ? ORDER BY createTime ASC
2025-07-04 09:26:12.946 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.946 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT * FROM book_comment 
        WHERE parentId = ?
        ORDER BY createTime ASC ::: DataSources: slave
2025-07-04 09:26:12.946 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==> Parameters: 1(Integer)
2025-07-04 09:26:12.948 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - <==      Total: 2
2025-07-04 09:26:12.948 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==>  Preparing: select * from user where id = ?
2025-07-04 09:26:12.948 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.948 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from user where id = ? ::: DataSources: slave
2025-07-04 09:26:12.948 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==> Parameters: 3(Integer)
2025-07-04 09:26:12.949 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUserById - <==      Total: 1
2025-07-04 09:26:12.949 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==>  Preparing: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ?
2025-07-04 09:26:12.949 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.949 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ? ::: DataSources: slave
2025-07-04 09:26:12.949 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==> Parameters: 9(Integer), 5(Integer)
2025-07-04 09:26:12.949 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - <==      Total: 1
2025-07-04 09:26:12.950 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==>  Preparing: select * from user where id = ?
2025-07-04 09:26:12.950 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.950 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from user where id = ? ::: DataSources: slave
2025-07-04 09:26:12.950 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUserById - ==> Parameters: 2(Integer)
2025-07-04 09:26:12.950 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUserById - <==      Total: 1
2025-07-04 09:26:12.950 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==>  Preparing: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ?
2025-07-04 09:26:12.950 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.950 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM comment_like WHERE commentId = ? AND userId = ? ::: DataSources: slave
2025-07-04 09:26:12.951 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - ==> Parameters: 10(Integer), 5(Integer)
2025-07-04 09:26:12.951 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CommentMapper.hasLiked - <==      Total: 1
2025-07-04 09:26:12.951 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByBook - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE bookId = ? AND parentId IS NULL
2025-07-04 09:26:12.951 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:12.951 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE bookId = ? AND parentId IS NULL ::: DataSources: slave
2025-07-04 09:26:12.952 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByBook - ==> Parameters: 1(Integer)
2025-07-04 09:26:12.953 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByBook - <==      Total: 1
2025-07-04 09:26:13.274 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 09:26:13.274 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:13.274 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 09:26:13.274 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-07-04 09:26:13.275 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 09:26:13.276 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=?
2025-07-04 09:26:13.276 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:13.276 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-07-04 09:26:13.276 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-07-04 09:26:13.277 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-07-04 09:26:13.277 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:26:13.277 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:13.277 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:26:13.277 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:26:13.278 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:26:13.279 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?)
2025-07-04 09:26:13.279 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:13.279 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-07-04 09:26:13.280 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-07-04 09:26:13.281 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-07-04 09:26:13.281 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=?
2025-07-04 09:26:13.281 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:13.281 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-07-04 09:26:13.282 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-07-04 09:26:13.282 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-07-04 09:26:32.443 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:26:32.443 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:32.443 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:26:32.443 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 09:26:32.444 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:26:32.446 [http-nio-8080-exec-3] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:2545059634@qq.com    数据库密码:$2a$10$w8zNNUSDq3MCiLDDuAhYXedA0QGva1Z4.6UxO61Njhsrlo8voc01G
2025-07-04 09:26:32.515 [http-nio-8080-exec-3] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=2545059634@qq.com, password=$2a$10$w8zNNUSDq3MCiLDDuAhYXedA0QGva1Z4.6UxO61Njhsrlo8voc01G, enabled=true, roles=[ROLE_ADMIN]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]
2025-07-04 09:26:32.529 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:26:32.529 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:32.529 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:26:32.529 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 09:26:32.529 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:26:33.618 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getTotalStock - ==>  Preparing: SELECT COALESCE(SUM(stock), 0) FROM book
2025-07-04 09:26:33.618 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:33.619 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT COALESCE(SUM(stock), 0) FROM book ::: DataSources: slave
2025-07-04 09:26:33.619 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE beUserDelete = ?
2025-07-04 09:26:33.619 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:33.619 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  beUserDelete = ? ::: DataSources: slave
2025-07-04 09:26:33.619 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:26:33.619 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:33.619 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:26:33.620 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getTotalStock - ==> Parameters: 
2025-07-04 09:26:33.620 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==>  Preparing: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount FROM ( SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice FROM bookorder join expense on bookorder.orderId = expense.orderId WHERE orderTime >= ? and orderTime <= ? ) AS dateOrder GROUP BY orderTime
2025-07-04 09:26:33.620 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: false(Boolean)
2025-07-04 09:26:33.620 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:33.620 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount
            FROM (
                SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice
                FROM bookorder join expense on bookorder.orderId = expense.orderId
                WHERE orderTime >= ? and  orderTime <= ?
            ) AS dateOrder
        GROUP BY orderTime ::: DataSources: slave
2025-07-04 09:26:33.620 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getLowStockBooks - ==>  Preparing: SELECT * FROM book WHERE stock <= ? ORDER BY stock ASC, id DESC LIMIT ?, ?
2025-07-04 09:26:33.620 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:33.620 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT * FROM book
        WHERE stock <= ?
        ORDER BY stock ASC, id DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 09:26:33.620 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==>  Preparing: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount FROM ( SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice FROM bookorder join expense on bookorder.orderId = expense.orderId WHERE orderTime >= ? and orderTime <= ? ) AS dateOrder GROUP BY orderTime
2025-07-04 09:26:33.621 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:33.621 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:26:33.621 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getTotalStock - <==      Total: 1
2025-07-04 09:26:33.621 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount
            FROM (
                SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice
                FROM bookorder join expense on bookorder.orderId = expense.orderId
                WHERE orderTime >= ? and  orderTime <= ?
            ) AS dateOrder
        GROUP BY orderTime ::: DataSources: slave
2025-07-04 09:26:33.621 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: false(Boolean), 0(Integer), 5(Integer)
2025-07-04 09:26:33.621 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.count - ==>  Preparing: select count(*) from user where manage = false
2025-07-04 09:26:33.621 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - ==>  Preparing: SELECT COUNT(*) FROM book WHERE stock <= ?
2025-07-04 09:26:33.621 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:33.621 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from user where manage = false ::: DataSources: slave
2025-07-04 09:26:33.621 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:33.622 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book
        WHERE stock <= ? ::: DataSources: slave
2025-07-04 09:26:33.623 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getLowStockBooks - ==> Parameters: 10(Integer), 0(Integer), 10(Integer)
2025-07-04 09:26:33.624 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 09:26:33.624 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getLowStockBooks - <==      Total: 0
2025-07-04 09:26:33.626 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - ==> Parameters: 0(Integer)
2025-07-04 09:26:33.627 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.count - ==> Parameters: 
2025-07-04 09:26:33.627 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - <==      Total: 1
2025-07-04 09:26:33.628 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - ==>  Preparing: SELECT COUNT(*) FROM book WHERE stock <= ?
2025-07-04 09:26:33.628 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:33.628 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book
        WHERE stock <= ? ::: DataSources: slave
2025-07-04 09:26:33.628 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.count - <==      Total: 1
2025-07-04 09:26:33.628 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - ==> Parameters: 20(Integer)
2025-07-04 09:26:33.628 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==> Parameters: 2025-06-28 00:00:00.0(Timestamp), 2025-07-04 00:00:00.0(Timestamp)
2025-07-04 09:26:33.628 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==>  Preparing: select count(*) from book
2025-07-04 09:26:33.628 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:33.628 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from book ::: DataSources: slave
2025-07-04 09:26:33.628 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==> Parameters: 2025-07-04 00:00:00.0(Timestamp), 2025-07-04 23:59:59.0(Timestamp)
2025-07-04 09:26:33.629 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - <==      Total: 1
2025-07-04 09:26:33.629 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==> Parameters: 
2025-07-04 09:26:33.629 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==>  Preparing: select count(*) from book
2025-07-04 09:26:33.629 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:33.630 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from book ::: DataSources: slave
2025-07-04 09:26:33.630 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==> Parameters: 
2025-07-04 09:26:33.630 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - <==      Total: 0
2025-07-04 09:26:33.630 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCount - <==      Total: 1
2025-07-04 09:26:33.631 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==>  Preparing: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount FROM ( SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice FROM bookorder join expense on bookorder.orderId = expense.orderId WHERE orderTime >= ? and orderTime <= ? ) AS dateOrder GROUP BY orderTime
2025-07-04 09:26:33.631 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:33.631 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - <==      Total: 4
2025-07-04 09:26:33.631 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount
            FROM (
                SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice
                FROM bookorder join expense on bookorder.orderId = expense.orderId
                WHERE orderTime >= ? and  orderTime <= ?
            ) AS dateOrder
        GROUP BY orderTime ::: DataSources: slave
2025-07-04 09:26:33.632 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCount - <==      Total: 1
2025-07-04 09:26:33.632 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - ==>  Preparing: SELECT COUNT(*) FROM book WHERE stock <= ?
2025-07-04 09:26:33.632 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:33.632 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book
        WHERE stock <= ? ::: DataSources: slave
2025-07-04 09:26:33.633 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - ==> Parameters: 20(Integer)
2025-07-04 09:26:33.633 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==> Parameters: 2025-07-04 00:00:00.0(Timestamp), 2025-07-04 23:59:59.0(Timestamp)
2025-07-04 09:26:33.634 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==>  Preparing: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount FROM ( SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice FROM bookorder join expense on bookorder.orderId = expense.orderId WHERE orderTime >= ? and orderTime <= ? ) AS dateOrder GROUP BY orderTime
2025-07-04 09:26:33.634 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:33.634 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount
            FROM (
                SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice
                FROM bookorder join expense on bookorder.orderId = expense.orderId
                WHERE orderTime >= ? and  orderTime <= ?
            ) AS dateOrder
        GROUP BY orderTime ::: DataSources: slave
2025-07-04 09:26:33.634 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==> Parameters: 2025-07-04 00:00:00.0(Timestamp), 2025-07-04 23:59:59.0(Timestamp)
2025-07-04 09:26:33.634 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getLowStockCount - <==      Total: 1
2025-07-04 09:26:33.635 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - <==      Total: 0
2025-07-04 09:26:33.636 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==>  Preparing: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount FROM ( SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice FROM bookorder join expense on bookorder.orderId = expense.orderId WHERE orderTime >= ? and orderTime <= ? ) AS dateOrder GROUP BY orderTime
2025-07-04 09:26:33.636 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - <==      Total: 0
2025-07-04 09:26:33.636 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:33.636 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount
            FROM (
                SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice
                FROM bookorder join expense on bookorder.orderId = expense.orderId
                WHERE orderTime >= ? and  orderTime <= ?
            ) AS dateOrder
        GROUP BY orderTime ::: DataSources: slave
2025-07-04 09:26:33.636 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==> Parameters: 2025-07-04 00:00:00.0(Timestamp), 2025-07-04 23:59:59.0(Timestamp)
2025-07-04 09:26:33.636 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - <==      Total: 0
2025-07-04 09:26:33.637 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==>  Preparing: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount FROM ( SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice FROM bookorder join expense on bookorder.orderId = expense.orderId WHERE orderTime >= ? and orderTime <= ? ) AS dateOrder GROUP BY orderTime
2025-07-04 09:26:33.638 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:33.638 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT orderTime, count(orderTime) as count, sum(finallyPrice) as amount
            FROM (
                SELECT DATE_FORMAT(orderTime, "%Y-%m-%d") as orderTime,id,finallyPrice
                FROM bookorder join expense on bookorder.orderId = expense.orderId
                WHERE orderTime >= ? and  orderTime <= ?
            ) AS dateOrder
        GROUP BY orderTime ::: DataSources: slave
2025-07-04 09:26:33.638 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - ==> Parameters: 2025-07-03 00:00:00.0(Timestamp), 2025-07-03 23:59:59.0(Timestamp)
2025-07-04 09:26:33.639 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.OrderMapper.getOrderStatistic - <==      Total: 1
2025-07-04 09:26:33.640 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE orderStatus = ? AND beUserDelete = ?
2025-07-04 09:26:33.640 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:33.640 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:26:33.641 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 待发货(String), false(Boolean)
2025-07-04 09:26:33.642 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:26:35.581 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:26:35.581 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:35.581 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:26:35.581 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-07-04 09:26:35.583 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:26:35.583 [http-nio-8080-exec-5] INFO  com.huang.store.controller.CommentController - 管理员获取所有评论: userAccount=2545059634@qq.com, page=1, pageSize=10, keyword=null
2025-07-04 09:26:35.584 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==>  Preparing: SELECT c.*, u.name as userName, u.imgUrl as userImgUrl, b.bookName as bookName FROM book_comment c LEFT JOIN user u ON c.userId = u.id LEFT JOIN book b ON c.bookId = b.id WHERE c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 09:26:35.584 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:35.584 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT 
            c.*,
            u.name as userName,
            u.imgUrl as userImgUrl,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN user u ON c.userId = u.id
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 09:26:35.586 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 09:26:35.590 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.CommentMapper.getAllComments - <==      Total: 9
2025-07-04 09:26:35.590 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL
2025-07-04 09:26:35.590 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:35.590 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE parentId IS NULL ::: DataSources: slave
2025-07-04 09:26:35.591 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - ==> Parameters: 
2025-07-04 09:26:35.592 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.CommentMapper.getTotalCommentCount - <==      Total: 1
2025-07-04 09:26:47.894 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:26:47.894 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:26:47.894 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:26:47.894 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:26:47.895 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:27:01.344 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:27:01.344 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:27:01.344 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:27:01.344 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:27:01.345 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:27:09.543 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:27:09.543 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:27:09.543 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:27:09.543 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:27:09.545 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:27:21.823 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:27:21.823 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:27:21.823 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:27:21.823 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:27:21.824 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:28:01.337 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:28:01.337 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:28:01.337 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:28:01.337 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:28:01.339 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:28:12.394 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:28:12.394 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:28:12.394 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:28:12.394 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:28:12.396 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:28:15.201 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:28:15.201 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:28:15.201 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:28:15.202 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:28:15.204 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:28:31.247 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:28:31.247 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:28:31.247 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:28:31.248 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:28:31.250 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:30:22.603 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:30:22.603 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:30:22.603 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:30:22.603 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:30:22.612 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:30:22.613 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:30:22.613 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:30:22.613 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:30:22.613 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:30:22.613 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:30:22.614 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:30:22.614 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:30:22.614 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:35:01.354 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:35:01.354 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:35:01.354 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:35:01.355 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:35:01.356 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:35:22.603 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:35:22.604 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:35:22.604 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:35:22.604 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:35:22.604 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:35:22.607 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:35:22.608 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:35:22.608 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:35:22.608 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:35:22.608 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:35:22.608 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:35:22.610 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:35:22.611 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:35:49.644 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:35:49.645 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:35:49.645 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:35:49.645 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:35:49.646 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:36:03.376 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:36:03.376 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:36:03.376 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:36:03.376 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:36:03.377 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:36:23.772 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:36:23.772 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:36:23.772 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:36:23.772 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:36:23.773 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:37:35.493 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:37:35.493 [Thread-9] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 09:37:35.493 [Thread-9] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-07-04 09:37:35.499 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-2020278609] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:37:35.499 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-2020278609] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:37:35.500 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-508680872] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:37:35.500 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-508680872] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:37:35.500 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-nioEventLoop-6-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/sun.nio.ch.WEPoll.wait(Native Method)
 java.base@17.0.8/sun.nio.ch.WEPollSelectorImpl.doSelect(WEPollSelectorImpl.java:111)
 java.base@17.0.8/sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:129)
 java.base@17.0.8/sun.nio.ch.SelectorImpl.select(SelectorImpl.java:146)
 app//io.netty.channel.nio.SelectedSelectionKeySetSelector.select(SelectedSelectionKeySetSelector.java:68)
 app//io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:879)
 app//io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:526)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:37:35.500 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-4-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-07-04 09:37:35.501 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 09:37:35.502 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 09:37:35.621 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closing ...
2025-07-04 09:37:35.623 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closed
2025-07-04 09:37:35.623 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closing ...
2025-07-04 09:37:35.627 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closed
2025-07-04 09:37:35.755 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 20432 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 09:37:35.755 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 09:37:35.755 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 09:37:36.036 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 09:37:36.036 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 09:37:36.060 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 24 ms. Found 0 Redis repository interfaces.
2025-07-04 09:37:36.146 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$ac37fe21] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:37:36.180 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:37:36.280 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 09:37:36.280 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 09:37:36.281 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 09:37:36.281 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 09:37:36.282 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 09:37:36.283 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:37:36.283 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 09:37:36.283 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 09:37:36.308 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 09:37:36.308 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 543 ms
2025-07-04 09:37:36.311 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 09:37:36.469 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} inited
2025-07-04 09:37:36.486 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} inited
2025-07-04 09:37:36.666 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 09:37:36.666 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 09:37:36.956 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 09:37:37.137 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@672cdb78, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7413b666, org.springframework.security.web.context.SecurityContextPersistenceFilter@3e04ae3b, org.springframework.security.web.header.HeaderWriterFilter@428ebacf, org.springframework.web.filter.CorsFilter@31bacb96, org.springframework.security.web.authentication.logout.LogoutFilter@3dde6c00, com.huang.store.security.JwtAuthenticationTokenFilter@5b1707c8, com.huang.store.security.CustomAuthenticationFilter@13c5385c, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@308c48c9, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1dca8a4c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7c7bba24, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3c5ba1a5, org.springframework.security.web.session.SessionManagementFilter@53c7c56e, org.springframework.security.web.access.ExceptionTranslationFilter@73da16e9, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@43f1f36e]
2025-07-04 09:37:37.435 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 09:37:37.466 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 09:37:37.473 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 09:37:37.484 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:37:37.484 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 1.776 seconds (JVM running for 770.731)
2025-07-04 09:37:37.485 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:37:37.485 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:37:37.486 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:37:37.488 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:37:37.491 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:37:37.492 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:37:37.496 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:37:37.496 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:37:37.496 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:37:37.497 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:37:37.499 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:37:37.500 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:39:22.064 [Thread-15] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:39:22.064 [Thread-15] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 09:39:22.067 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-392002153] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:39:22.067 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-392002153] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:39:22.070 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-826626244] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:39:22.071 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-826626244] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:39:22.071 [Thread-15] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 09:39:22.072 [Thread-15] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 09:39:22.076 [Thread-15] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closing ...
2025-07-04 09:39:22.077 [Thread-15] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closed
2025-07-04 09:39:22.077 [Thread-15] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closing ...
2025-07-04 09:39:22.078 [Thread-15] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closed
2025-07-04 09:39:22.249 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 20432 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 09:39:22.249 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 09:39:22.249 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 09:39:22.512 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 09:39:22.512 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 09:39:22.532 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 0 Redis repository interfaces.
2025-07-04 09:39:22.599 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$ac37fe21] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:39:22.604 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:39:22.673 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 09:39:22.674 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 09:39:22.674 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 09:39:22.674 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 09:39:22.674 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 09:39:22.675 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:39:22.675 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 09:39:22.675 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 09:39:22.696 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 09:39:22.696 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 445 ms
2025-07-04 09:39:22.699 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 09:39:22.852 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-7} inited
2025-07-04 09:39:22.888 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-8} inited
2025-07-04 09:39:23.092 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 09:39:23.092 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 09:39:23.501 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 09:39:23.650 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@2c2cd7af, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4e02aaa3, org.springframework.security.web.context.SecurityContextPersistenceFilter@5982d310, org.springframework.security.web.header.HeaderWriterFilter@6d233708, org.springframework.web.filter.CorsFilter@6a4f920f, org.springframework.security.web.authentication.logout.LogoutFilter@78b35099, com.huang.store.security.JwtAuthenticationTokenFilter@79e5bb30, com.huang.store.security.CustomAuthenticationFilter@483c8ae5, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@659728d2, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2a39fb5, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@764c639e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1cc92e9e, org.springframework.security.web.session.SessionManagementFilter@47a0d978, org.springframework.security.web.access.ExceptionTranslationFilter@6417edb8, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@64b7641]
2025-07-04 09:39:24.554 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 09:39:24.590 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 09:39:24.615 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 09:39:24.621 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 2.422 seconds (JVM running for 877.868)
2025-07-04 09:39:24.738 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:39:24.739 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:39:24.739 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:39:24.739 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:39:24.739 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:39:24.740 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:39:24.741 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:39:24.745 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:39:24.745 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:39:24.745 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:39:24.745 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:39:24.746 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:39:24.747 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:39:51.725 [http-nio-8080-exec-10] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-04 09:39:51.725 [http-nio-8080-exec-10] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-04 09:39:51.727 [http-nio-8080-exec-10] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-07-04 09:39:51.731 [http-nio-8080-exec-9] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 09:39:51.732 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:39:51.732 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:39:51.732 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:39:51.732 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:39:51.732 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:39:51.732 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:39:51.733 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:39:51.734 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:39:51.734 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:39:51.735 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:39:51.735 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:39:51.735 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:39:51.736 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:39:51.736 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:39:51.736 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:39:51.737 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:39:51.737 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:39:51.737 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:39:51.737 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:39:51.738 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:39:51.738 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:39:51.738 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:39:51.738 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:39:51.740 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 09:39:51.741 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:39:51.742 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:39:51.742 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:39:51.742 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:39:51.744 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:39:51.747 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:39:51.748 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:39:51.748 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:39:51.748 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:39:51.748 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:39:51.749 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:40:10.328 [Thread-21] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:40:10.328 [Thread-21] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 09:40:10.328 [Thread-21] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-07-04 09:40:10.332 [Thread-21] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-953951858] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:40:10.332 [Thread-21] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-953951858] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:40:10.332 [Thread-21] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-493834960] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:40:10.333 [Thread-21] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-493834960] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:40:10.333 [Thread-21] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 09:40:10.334 [Thread-21] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 09:40:10.338 [Thread-21] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-7} closing ...
2025-07-04 09:40:10.339 [Thread-21] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-7} closed
2025-07-04 09:40:10.339 [Thread-21] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-8} closing ...
2025-07-04 09:40:10.340 [Thread-21] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-8} closed
2025-07-04 09:40:10.420 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 20432 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 09:40:10.420 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 09:40:10.420 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 09:40:10.645 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 09:40:10.645 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 09:40:10.663 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16 ms. Found 0 Redis repository interfaces.
2025-07-04 09:40:10.727 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$ac37fe21] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:40:10.734 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:40:10.816 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 09:40:10.816 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 09:40:10.816 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 09:40:10.816 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 09:40:10.817 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 09:40:10.817 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:40:10.818 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 09:40:10.818 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 09:40:10.842 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 09:40:10.842 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 420 ms
2025-07-04 09:40:10.845 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 09:40:10.989 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-9} inited
2025-07-04 09:40:11.015 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-10} inited
2025-07-04 09:40:11.192 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 09:40:11.192 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 09:40:11.446 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 09:40:11.559 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@267ef831, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@153269d7, org.springframework.security.web.context.SecurityContextPersistenceFilter@3bd123a0, org.springframework.security.web.header.HeaderWriterFilter@7aa98e8f, org.springframework.web.filter.CorsFilter@6ced612a, org.springframework.security.web.authentication.logout.LogoutFilter@74ea8746, com.huang.store.security.JwtAuthenticationTokenFilter@56e601bd, com.huang.store.security.CustomAuthenticationFilter@46367473, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@3947ed7d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7ceebb21, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4a058fc5, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@72344169, org.springframework.security.web.session.SessionManagementFilter@1d8223e9, org.springframework.security.web.access.ExceptionTranslationFilter@43c0970c, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@15d76daf]
2025-07-04 09:40:11.772 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 09:40:11.789 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 09:40:11.792 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 09:40:11.797 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:40:11.797 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 1.413 seconds (JVM running for 925.044)
2025-07-04 09:40:11.797 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:40:11.797 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:40:11.797 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:40:11.798 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:40:11.802 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:40:11.802 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:40:11.806 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:40:11.806 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:40:11.806 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:40:11.807 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:40:11.809 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:40:11.810 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:40:12.835 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-9} closing ...
2025-07-04 09:40:12.836 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-9} closed
2025-07-04 09:40:12.836 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-10} closing ...
2025-07-04 09:40:12.837 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-10} closed
2025-07-04 09:40:16.470 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-07-04 09:40:16.487 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 8336 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 09:40:16.487 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 09:40:16.487 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 09:40:16.588 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-04 09:40:16.588 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-04 09:40:17.035 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 09:40:17.037 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 09:40:17.055 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-07-04 09:40:17.227 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$621d1fb3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:40:17.238 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:40:17.615 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 09:40:17.616 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 09:40:17.616 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 09:40:17.616 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 09:40:17.620 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 09:40:17.625 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:40:17.626 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 09:40:17.627 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 09:40:17.682 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 09:40:17.682 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1093 ms
2025-07-04 09:40:17.685 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 09:40:18.251 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-07-04 09:40:18.273 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-07-04 09:40:18.570 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 09:40:18.570 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 09:40:18.954 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 09:40:19.087 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@73beaf25, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4b260a70, org.springframework.security.web.context.SecurityContextPersistenceFilter@7c1f6633, org.springframework.security.web.header.HeaderWriterFilter@56da34d2, org.springframework.web.filter.CorsFilter@3d2256f0, org.springframework.security.web.authentication.logout.LogoutFilter@2a404260, com.huang.store.security.JwtAuthenticationTokenFilter@1872095f, com.huang.store.security.CustomAuthenticationFilter@4fdee670, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@6c75b594, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2a692c0a, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7ee5f263, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7a215eb5, org.springframework.security.web.session.SessionManagementFilter@5143b980, org.springframework.security.web.access.ExceptionTranslationFilter@2cbc765c, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@c2f3167]
2025-07-04 09:40:19.334 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 09:40:19.349 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 09:40:19.360 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 09:40:19.369 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:40:19.373 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.193 seconds (JVM running for 3.713)
2025-07-04 09:40:19.391 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:40:19.400 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:40:19.401 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:40:19.435 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:40:19.446 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:40:19.449 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:40:19.459 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:40:19.459 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:40:19.459 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:40:19.462 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:40:19.464 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:40:19.465 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:40:25.987 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-04 09:40:25.987 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-04 09:40:25.988 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-07-04 09:40:26.031 [http-nio-8080-exec-1] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 09:40:26.038 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:40:26.038 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:40:26.038 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:40:26.039 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:40:26.043 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:40:26.048 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:40:26.049 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:40:26.049 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:40:26.053 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:40:26.055 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:40:26.057 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:40:26.057 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:40:26.057 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:40:26.058 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:40:26.059 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:40:26.060 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:40:26.060 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:40:26.060 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:40:26.060 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:40:26.061 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:40:26.062 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:40:26.062 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:40:26.062 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:40:26.067 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 09:40:26.072 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:40:26.074 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:40:26.074 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:40:26.074 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:40:26.075 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:40:26.079 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:40:26.079 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:40:26.079 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:40:26.079 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:40:26.080 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:40:26.082 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:40:33.631 [http-nio-8080-exec-4] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 09:40:33.631 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:40:33.631 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:40:33.631 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:40:33.631 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:40:33.631 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:40:33.631 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:40:33.631 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:40:33.633 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:40:33.634 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:40:33.637 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:40:33.638 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:40:33.638 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:40:33.638 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:40:33.639 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:40:33.641 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:40:33.642 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:40:33.642 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:40:33.642 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:40:33.642 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:40:33.644 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:40:33.645 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:40:33.645 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:40:33.646 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:40:33.646 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 09:40:33.648 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:40:33.649 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:40:33.649 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:40:33.649 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:40:33.650 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:40:33.652 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:40:33.652 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:40:33.652 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:40:33.652 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:40:33.652 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:40:33.654 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:45:19.369 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:45:19.369 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:45:19.370 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:45:19.370 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:45:19.403 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:45:19.404 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:45:19.405 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:45:19.405 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:45:19.405 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:45:19.405 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:45:19.405 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:45:19.407 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:45:19.407 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:45:23.841 [http-nio-8080-exec-6] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 09:45:23.841 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:45:23.841 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:45:23.841 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:45:23.841 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:45:23.841 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:45:23.842 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:45:23.842 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:45:23.842 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:45:23.842 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:45:23.843 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:45:23.844 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:45:23.844 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:45:23.844 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:45:23.844 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:45:23.845 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:45:23.846 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:45:23.846 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:45:23.846 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:45:23.846 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:45:23.847 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:45:23.849 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:45:23.849 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:45:23.849 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:45:23.849 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 09:45:23.851 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:45:23.851 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:45:23.851 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:45:23.851 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:45:23.851 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:45:23.853 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:45:23.854 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:45:23.854 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:45:23.854 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:45:23.855 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:45:23.856 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:46:28.127 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:46:28.127 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:28.127 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:46:28.129 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:46:28.130 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:46:28.130 [http-nio-8080-exec-7] INFO  com.huang.store.controller.CommentController - 获取用户评论: userId=5, userAccount=56464ff@456.com, page=1, pageSize=10, keyword=null
2025-07-04 09:46:28.131 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - ==>  Preparing: SELECT c.*, b.bookName as bookName FROM book_comment c LEFT JOIN book b ON c.bookId = b.id WHERE c.userId = ? AND c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 09:46:28.131 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:28.131 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: SELECT
            c.*,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.userId = ? AND c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 09:46:28.133 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - ==> Parameters: 5(Integer), 0(Integer), 10(Integer)
2025-07-04 09:46:28.134 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - <==      Total: 1
2025-07-04 09:46:28.135 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==>  Preparing: SELECT * FROM book_comment WHERE parentId = ? ORDER BY createTime ASC
2025-07-04 09:46:28.135 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:28.135 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: SELECT * FROM book_comment 
        WHERE parentId = ?
        ORDER BY createTime ASC ::: DataSources: slave
2025-07-04 09:46:28.136 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==> Parameters: 18(Integer)
2025-07-04 09:46:28.137 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - <==      Total: 0
2025-07-04 09:46:28.137 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 09:46:28.137 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:28.137 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 09:46:28.138 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 09:46:28.139 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 09:46:31.219 [http-nio-8080-exec-2] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 09:46:31.219 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:46:31.220 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:46:31.220 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:31.220 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:31.220 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:46:31.220 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:46:31.220 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:46:31.222 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:46:31.223 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:46:31.223 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:46:31.224 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:46:31.224 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:31.224 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:46:31.225 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:46:31.228 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:46:31.229 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:46:31.229 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:31.229 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:46:31.230 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:46:31.231 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:46:31.232 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:46:31.232 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:31.232 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:46:31.233 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 09:46:31.235 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:46:31.235 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:46:31.235 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:31.235 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:46:31.236 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:46:31.237 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:46:31.238 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:46:31.238 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:31.238 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:46:31.238 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:46:31.240 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:46:33.041 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:46:33.041 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:33.042 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:46:33.042 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:46:33.045 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:46:33.045 [http-nio-8080-exec-10] INFO  com.huang.store.controller.CommentController - 获取用户评论: userId=5, userAccount=56464ff@456.com, page=1, pageSize=10, keyword=null
2025-07-04 09:46:33.046 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - ==>  Preparing: SELECT c.*, b.bookName as bookName FROM book_comment c LEFT JOIN book b ON c.bookId = b.id WHERE c.userId = ? AND c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 09:46:33.046 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:33.046 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT
            c.*,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.userId = ? AND c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 09:46:33.047 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - ==> Parameters: 5(Integer), 0(Integer), 10(Integer)
2025-07-04 09:46:33.049 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - <==      Total: 1
2025-07-04 09:46:33.049 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==>  Preparing: SELECT * FROM book_comment WHERE parentId = ? ORDER BY createTime ASC
2025-07-04 09:46:33.049 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:33.049 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT * FROM book_comment 
        WHERE parentId = ?
        ORDER BY createTime ASC ::: DataSources: slave
2025-07-04 09:46:33.051 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==> Parameters: 18(Integer)
2025-07-04 09:46:33.053 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - <==      Total: 0
2025-07-04 09:46:33.054 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 09:46:33.054 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:33.054 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 09:46:33.054 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 09:46:33.056 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 09:46:34.143 [http-nio-8080-exec-3] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 09:46:34.143 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:46:34.143 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:46:34.143 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:34.143 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:34.143 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:46:34.143 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:46:34.143 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:46:34.143 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:46:34.145 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:46:34.146 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:46:34.146 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:46:34.146 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:34.146 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:46:34.147 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:46:34.148 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:46:34.149 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:46:34.149 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:34.149 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:46:34.149 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:46:34.151 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:46:34.151 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:46:34.152 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:34.152 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:46:34.152 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 09:46:34.154 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:46:34.155 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:46:34.155 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:34.155 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:46:34.155 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:46:34.157 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:46:34.157 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:46:34.157 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:34.157 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:46:34.157 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:46:34.158 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:46:35.829 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:46:35.829 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:35.829 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:46:35.830 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:46:35.832 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:46:35.833 [http-nio-8080-exec-9] INFO  com.huang.store.controller.CommentController - 获取用户评论: userId=5, userAccount=56464ff@456.com, page=1, pageSize=10, keyword=null
2025-07-04 09:46:35.834 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - ==>  Preparing: SELECT c.*, b.bookName as bookName FROM book_comment c LEFT JOIN book b ON c.bookId = b.id WHERE c.userId = ? AND c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 09:46:35.834 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:35.834 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT
            c.*,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.userId = ? AND c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 09:46:35.834 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - ==> Parameters: 5(Integer), 0(Integer), 10(Integer)
2025-07-04 09:46:35.835 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - <==      Total: 1
2025-07-04 09:46:35.835 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==>  Preparing: SELECT * FROM book_comment WHERE parentId = ? ORDER BY createTime ASC
2025-07-04 09:46:35.835 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:35.835 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT * FROM book_comment 
        WHERE parentId = ?
        ORDER BY createTime ASC ::: DataSources: slave
2025-07-04 09:46:35.835 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==> Parameters: 18(Integer)
2025-07-04 09:46:35.836 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - <==      Total: 0
2025-07-04 09:46:35.836 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 09:46:35.836 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:35.836 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 09:46:35.837 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 09:46:35.838 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 09:46:44.209 [http-nio-8080-exec-4] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-07-04 09:46:44.209 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false
2025-07-04 09:46:44.209 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:44.209 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-07-04 09:46:44.210 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:46:44.215 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-07-04 09:46:44.215 [http-nio-8080-exec-4] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-07-04 09:46:45.434 [http-nio-8080-exec-6] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 09:46:45.434 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:46:45.434 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:45.434 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:46:45.435 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:46:45.435 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:46:45.435 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:45.435 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:46:45.435 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:46:45.435 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:46:45.437 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:46:45.438 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:46:45.438 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:45.438 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:46:45.438 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:46:45.440 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:46:45.440 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:46:45.440 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:45.440 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:46:45.440 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:46:45.441 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:46:45.442 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:46:45.442 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:45.442 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:46:45.442 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 09:46:45.444 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:46:45.445 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:46:45.445 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:45.445 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:46:45.445 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:46:45.447 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:46:45.448 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:46:45.448 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:46:45.448 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:46:45.448 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:46:45.449 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:47:43.706 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:47:43.707 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:47:43.707 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:47:43.707 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:47:43.710 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:47:43.710 [http-nio-8080-exec-7] INFO  com.huang.store.controller.CommentController - 获取用户评论: userId=5, userAccount=56464ff@456.com, page=1, pageSize=10, keyword=null
2025-07-04 09:47:43.710 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - ==>  Preparing: SELECT c.*, b.bookName as bookName FROM book_comment c LEFT JOIN book b ON c.bookId = b.id WHERE c.userId = ? AND c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 09:47:43.710 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:47:43.710 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: SELECT
            c.*,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.userId = ? AND c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 09:47:43.711 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - ==> Parameters: 5(Integer), 0(Integer), 10(Integer)
2025-07-04 09:47:43.713 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - <==      Total: 1
2025-07-04 09:47:43.713 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==>  Preparing: SELECT * FROM book_comment WHERE parentId = ? ORDER BY createTime ASC
2025-07-04 09:47:43.714 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:47:43.714 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: SELECT * FROM book_comment 
        WHERE parentId = ?
        ORDER BY createTime ASC ::: DataSources: slave
2025-07-04 09:47:43.714 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==> Parameters: 18(Integer)
2025-07-04 09:47:43.715 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - <==      Total: 0
2025-07-04 09:47:43.715 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 09:47:43.715 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:47:43.715 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 09:47:43.715 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 09:47:43.717 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 09:47:44.460 [http-nio-8080-exec-2] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 09:47:44.460 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:47:44.460 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:47:44.460 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:47:44.460 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:47:44.460 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:47:44.460 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:47:44.460 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:47:44.460 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:47:44.462 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:47:44.462 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:47:44.462 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:47:44.462 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:47:44.462 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:47:44.462 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:47:44.465 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:47:44.465 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:47:44.466 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:47:44.466 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:47:44.466 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:47:44.468 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:47:44.469 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:47:44.469 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:47:44.469 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:47:44.470 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 09:47:44.475 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:47:44.476 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:47:44.476 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:47:44.476 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:47:44.476 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:47:44.478 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:47:44.479 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:47:44.479 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:47:44.479 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:47:44.480 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:47:44.482 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:48:36.357 [http-nio-8080-exec-10] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-07-04 09:48:36.358 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false
2025-07-04 09:48:36.358 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:48:36.358 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-07-04 09:48:36.359 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:48:36.360 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-07-04 09:48:36.360 [http-nio-8080-exec-10] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-07-04 09:48:38.105 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:48:38.105 [http-nio-8080-exec-3] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 09:48:38.105 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:48:38.105 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:48:38.106 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:48:38.106 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:48:38.106 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:48:38.106 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:48:38.106 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:48:38.107 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:48:38.108 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:48:38.108 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:48:38.108 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:48:38.108 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:48:38.109 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:48:38.111 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:48:38.113 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:48:38.113 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:48:38.113 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:48:38.113 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:48:38.115 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:48:38.116 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:48:38.116 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:48:38.116 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:48:38.116 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 09:48:38.120 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:48:38.121 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:48:38.121 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:48:38.121 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:48:38.121 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:48:38.124 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:48:38.125 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:48:38.125 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:48:38.125 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:48:38.125 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:48:38.127 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:49:26.584 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:49:26.584 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:49:26.584 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:49:26.585 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:49:26.587 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:49:26.588 [http-nio-8080-exec-9] INFO  com.huang.store.controller.CommentController - 获取用户评论: userId=5, userAccount=56464ff@456.com, page=1, pageSize=10, keyword=null
2025-07-04 09:49:26.588 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - ==>  Preparing: SELECT c.*, b.bookName as bookName FROM book_comment c LEFT JOIN book b ON c.bookId = b.id WHERE c.userId = ? AND c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 09:49:26.588 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:49:26.588 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT
            c.*,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.userId = ? AND c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 09:49:26.589 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - ==> Parameters: 5(Integer), 0(Integer), 10(Integer)
2025-07-04 09:49:26.591 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - <==      Total: 1
2025-07-04 09:49:26.592 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==>  Preparing: SELECT * FROM book_comment WHERE parentId = ? ORDER BY createTime ASC
2025-07-04 09:49:26.592 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:49:26.592 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT * FROM book_comment 
        WHERE parentId = ?
        ORDER BY createTime ASC ::: DataSources: slave
2025-07-04 09:49:26.592 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==> Parameters: 18(Integer)
2025-07-04 09:49:26.593 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - <==      Total: 0
2025-07-04 09:49:26.594 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 09:49:26.594 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:49:26.594 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 09:49:26.595 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 09:49:26.597 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 09:50:19.371 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:50:19.371 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:50:19.371 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:50:19.371 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:50:19.371 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:50:19.373 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:50:19.374 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:50:19.374 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:50:19.374 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:50:19.374 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:50:19.374 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:50:19.375 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:50:19.376 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:54:29.177 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:54:29.177 [Thread-7] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 09:54:29.179 [Thread-7] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-07-04 09:54:29.192 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1737335105] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:54:29.192 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1737335105] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:54:29.193 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-280316138] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:54:29.193 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-280316138] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:54:29.194 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 09:54:29.195 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 09:54:29.214 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closing ...
2025-07-04 09:54:29.218 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-07-04 09:54:29.218 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closing ...
2025-07-04 09:54:29.220 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-07-04 09:54:29.325 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 8336 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 09:54:29.325 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 09:54:29.325 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 09:54:29.617 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 09:54:29.617 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 09:54:29.633 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 0 Redis repository interfaces.
2025-07-04 09:54:29.722 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$621d1fb3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:54:29.732 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:54:29.897 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 09:54:29.897 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 09:54:29.897 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 09:54:29.897 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 09:54:29.898 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 09:54:29.898 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:54:29.898 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 09:54:29.898 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 09:54:29.938 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 09:54:29.938 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 605 ms
2025-07-04 09:54:29.945 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 09:54:30.134 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} inited
2025-07-04 09:54:30.167 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} inited
2025-07-04 09:54:30.452 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 09:54:30.454 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 09:54:30.932 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 09:54:31.149 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@2ea27c9e, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@230dfd43, org.springframework.security.web.context.SecurityContextPersistenceFilter@1d92d459, org.springframework.security.web.header.HeaderWriterFilter@7f3c999b, org.springframework.web.filter.CorsFilter@20327720, org.springframework.security.web.authentication.logout.LogoutFilter@15ca549f, com.huang.store.security.JwtAuthenticationTokenFilter@26137d7a, com.huang.store.security.CustomAuthenticationFilter@9979e14, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@653300b7, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7d8862cf, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@66e3cca4, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@391dcfd8, org.springframework.security.web.session.SessionManagementFilter@6523b93d, org.springframework.security.web.access.ExceptionTranslationFilter@6841176b, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4ee94d00]
2025-07-04 09:54:31.478 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 09:54:31.506 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 09:54:31.512 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 09:54:31.519 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:54:31.519 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 2.247 seconds (JVM running for 855.859)
2025-07-04 09:54:31.519 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:54:31.519 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:54:31.519 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:54:31.521 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:54:31.523 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:54:31.523 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:54:31.531 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:54:31.531 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:54:31.531 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:54:31.532 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:54:31.534 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:54:31.537 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:55:14.516 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:55:14.517 [Thread-9] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 09:55:14.522 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1213793412] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:55:14.523 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1213793412] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:55:14.523 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-719430533] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:55:14.523 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-719430533] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:55:14.524 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 09:55:14.524 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 09:55:14.529 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closing ...
2025-07-04 09:55:14.530 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closed
2025-07-04 09:55:14.530 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closing ...
2025-07-04 09:55:14.532 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closed
2025-07-04 09:55:14.644 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 8336 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 09:55:14.644 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 09:55:14.644 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 09:55:14.892 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 09:55:14.892 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 09:55:14.920 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 27 ms. Found 0 Redis repository interfaces.
2025-07-04 09:55:15.007 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$621d1fb3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:55:15.012 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:55:15.138 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 09:55:15.140 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 09:55:15.140 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 09:55:15.140 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 09:55:15.141 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 09:55:15.141 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:55:15.142 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 09:55:15.142 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 09:55:15.180 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 09:55:15.180 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 532 ms
2025-07-04 09:55:15.184 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 09:55:15.368 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} inited
2025-07-04 09:55:15.384 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} inited
2025-07-04 09:55:15.604 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 09:55:15.604 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 09:55:15.943 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 09:55:16.133 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@a5dbe17, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7a7a0c48, org.springframework.security.web.context.SecurityContextPersistenceFilter@2c7529e3, org.springframework.security.web.header.HeaderWriterFilter@34512874, org.springframework.web.filter.CorsFilter@9c2c433, org.springframework.security.web.authentication.logout.LogoutFilter@6a890937, com.huang.store.security.JwtAuthenticationTokenFilter@4bea6b1, com.huang.store.security.CustomAuthenticationFilter@178fc6ec, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@634429b6, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@a19abb, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3d0e0053, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@72d9aea1, org.springframework.security.web.session.SessionManagementFilter@253eea93, org.springframework.security.web.access.ExceptionTranslationFilter@68889e08, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4416a28c]
2025-07-04 09:55:16.444 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 09:55:16.465 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 09:55:16.484 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 09:55:16.490 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:55:16.490 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 1.888 seconds (JVM running for 900.831)
2025-07-04 09:55:16.491 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:55:16.491 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:55:16.492 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:55:16.494 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:55:16.496 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:55:16.497 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:55:16.503 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:55:16.503 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:55:16.503 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:55:16.505 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:55:16.507 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:55:16.508 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:56:09.127 [Thread-15] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:56:09.127 [Thread-15] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 09:56:09.130 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1792653676] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:56:09.130 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1792653676] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:56:09.130 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-605726859] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:56:09.131 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-605726859] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:56:09.131 [Thread-15] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 09:56:09.132 [Thread-15] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 09:56:09.135 [Thread-15] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closing ...
2025-07-04 09:56:09.136 [Thread-15] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closed
2025-07-04 09:56:09.136 [Thread-15] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closing ...
2025-07-04 09:56:09.137 [Thread-15] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closed
2025-07-04 09:56:09.216 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 8336 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 09:56:09.216 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 09:56:09.216 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 09:56:09.463 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 09:56:09.463 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 09:56:09.481 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17 ms. Found 0 Redis repository interfaces.
2025-07-04 09:56:09.551 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$621d1fb3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:56:09.556 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:56:09.636 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 09:56:09.636 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 09:56:09.636 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 09:56:09.636 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 09:56:09.637 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 09:56:09.637 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:56:09.637 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 09:56:09.638 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 09:56:09.662 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 09:56:09.663 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 445 ms
2025-07-04 09:56:09.666 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 09:56:09.823 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-7} inited
2025-07-04 09:56:09.844 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-8} inited
2025-07-04 09:56:10.034 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 09:56:10.035 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 09:56:10.297 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 09:56:10.410 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@1d53240f, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1300949e, org.springframework.security.web.context.SecurityContextPersistenceFilter@38c836f0, org.springframework.security.web.header.HeaderWriterFilter@6eadf50b, org.springframework.web.filter.CorsFilter@b375a41, org.springframework.security.web.authentication.logout.LogoutFilter@5f68de13, com.huang.store.security.JwtAuthenticationTokenFilter@7d94792e, com.huang.store.security.CustomAuthenticationFilter@fc6d447, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@39bacb09, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@19db817c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@185f2ae1, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3233dace, org.springframework.security.web.session.SessionManagementFilter@16650d47, org.springframework.security.web.access.ExceptionTranslationFilter@30e23a17, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@57247ae8]
2025-07-04 09:56:10.625 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 09:56:10.635 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 09:56:10.637 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 09:56:10.642 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:56:10.642 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 1.464 seconds (JVM running for 954.982)
2025-07-04 09:56:10.642 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:56:10.642 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:10.642 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:56:10.643 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:56:10.645 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:56:10.645 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:56:10.648 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:56:10.648 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:10.648 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:56:10.649 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:56:10.651 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:56:10.651 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:56:12.067 [Thread-21] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:56:12.067 [Thread-21] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 09:56:12.069 [Thread-21] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-659292278] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:56:12.069 [Thread-21] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-659292278] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:56:12.069 [Thread-21] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-851401713] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 09:56:12.069 [Thread-21] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-851401713] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 09:56:12.069 [Thread-21] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 09:56:12.071 [Thread-21] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 09:56:12.073 [Thread-21] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-7} closing ...
2025-07-04 09:56:12.073 [Thread-21] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-7} closed
2025-07-04 09:56:12.073 [Thread-21] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-8} closing ...
2025-07-04 09:56:12.074 [Thread-21] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-8} closed
2025-07-04 09:56:12.119 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 8336 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 09:56:12.119 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 09:56:12.119 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 09:56:12.225 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 09:56:12.225 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 09:56:12.232 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-07-04 09:56:12.260 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$621d1fb3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:56:12.263 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:56:12.300 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 09:56:12.301 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 09:56:12.301 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 09:56:12.301 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 09:56:12.301 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 09:56:12.301 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:56:12.301 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 09:56:12.301 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 09:56:12.313 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 09:56:12.313 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 193 ms
2025-07-04 09:56:12.314 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 09:56:12.377 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-9} inited
2025-07-04 09:56:12.390 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-10} inited
2025-07-04 09:56:12.474 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 09:56:12.474 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 09:56:12.589 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 09:56:12.638 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@20d4ea29, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5cfd7ef0, org.springframework.security.web.context.SecurityContextPersistenceFilter@72a73e10, org.springframework.security.web.header.HeaderWriterFilter@36cfec3f, org.springframework.web.filter.CorsFilter@b050207, org.springframework.security.web.authentication.logout.LogoutFilter@6936ed23, com.huang.store.security.JwtAuthenticationTokenFilter@5b98151d, com.huang.store.security.CustomAuthenticationFilter@56480539, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@4f6f664f, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4aca3664, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@32d8516, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@68364cd9, org.springframework.security.web.session.SessionManagementFilter@523e6318, org.springframework.security.web.access.ExceptionTranslationFilter@4e0ecb73, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1eeed16a]
2025-07-04 09:56:12.729 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 09:56:12.736 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 09:56:12.738 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 09:56:12.741 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.64 seconds (JVM running for 957.081)
2025-07-04 09:56:12.741 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:56:12.741 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:56:12.741 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:12.741 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:56:12.741 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:56:12.742 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:56:12.743 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:56:12.745 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:56:12.745 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:12.745 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:56:12.746 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:56:12.749 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:56:12.750 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:56:14.387 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-9} closing ...
2025-07-04 09:56:14.387 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-9} closed
2025-07-04 09:56:14.387 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-10} closing ...
2025-07-04 09:56:14.387 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-10} closed
2025-07-04 09:56:16.898 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-07-04 09:56:16.908 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 10480 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 09:56:16.908 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 09:56:16.908 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 09:56:17.014 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-04 09:56:17.014 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-04 09:56:17.441 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 09:56:17.442 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 09:56:17.463 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 12 ms. Found 0 Redis repository interfaces.
2025-07-04 09:56:17.648 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$80340cd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:56:17.660 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 09:56:17.998 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 09:56:17.999 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 09:56:17.999 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 09:56:17.999 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 09:56:18.003 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 09:56:18.009 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 09:56:18.010 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 09:56:18.010 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 09:56:18.061 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 09:56:18.061 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1047 ms
2025-07-04 09:56:18.065 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 09:56:18.723 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-07-04 09:56:18.753 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-07-04 09:56:19.065 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 09:56:19.065 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 09:56:19.438 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 09:56:19.547 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@37cd3e86, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@669a9f96, org.springframework.security.web.context.SecurityContextPersistenceFilter@5dd365e4, org.springframework.security.web.header.HeaderWriterFilter@33dffade, org.springframework.web.filter.CorsFilter@5fea5ef8, org.springframework.security.web.authentication.logout.LogoutFilter@54e96506, com.huang.store.security.JwtAuthenticationTokenFilter@4bf43af9, com.huang.store.security.CustomAuthenticationFilter@4cffec24, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@1a0232f6, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4d95d36f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6ea5e315, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1e166b17, org.springframework.security.web.session.SessionManagementFilter@31de5cd5, org.springframework.security.web.access.ExceptionTranslationFilter@1002510e, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@730cd313]
2025-07-04 09:56:19.780 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 09:56:19.792 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 09:56:19.806 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 09:56:19.813 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 09:56:19.815 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.207 seconds (JVM running for 3.682)
2025-07-04 09:56:19.832 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 09:56:19.844 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:19.845 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 09:56:19.887 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 09:56:19.899 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 09:56:19.901 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 09:56:19.906 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 09:56:19.906 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:19.906 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 09:56:19.908 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 09:56:19.910 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 09:56:19.911 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 09:56:32.135 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-04 09:56:32.135 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-04 09:56:32.136 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-07-04 09:56:32.169 [http-nio-8080-exec-1] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 09:56:32.173 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:56:32.173 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:32.173 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:56:32.174 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:56:32.176 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:56:32.182 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:56:32.182 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:32.182 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:56:32.186 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:56:32.188 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:56:32.188 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:56:32.188 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:32.188 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:56:32.189 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:56:32.190 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:56:32.191 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:56:32.191 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:32.191 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:56:32.192 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:56:32.193 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:56:32.193 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:56:32.193 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:32.193 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:56:32.199 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 09:56:32.202 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:56:32.202 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:56:32.202 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:32.202 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:56:32.203 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:56:32.205 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:56:32.206 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:56:32.206 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:32.206 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:56:32.206 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:56:32.208 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:56:32.208 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 09:56:32.208 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:32.208 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 09:56:32.209 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 09:56:32.210 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 09:56:51.402 [http-nio-8080-exec-4] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 09:56:51.402 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:56:51.402 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:51.402 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:56:51.403 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:56:51.403 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:51.403 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:56:51.403 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:56:51.405 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:56:51.406 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:56:51.407 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:56:51.408 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:56:51.408 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:51.408 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:56:51.409 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:56:51.411 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:56:51.411 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:56:51.412 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:51.412 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:56:51.412 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:56:51.413 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:56:51.414 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:56:51.414 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:51.414 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:56:51.414 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 09:56:51.418 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:56:51.420 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:56:51.421 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:51.421 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:56:51.422 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:56:51.426 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:56:51.429 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:56:51.429 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:51.430 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:56:51.430 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:56:51.433 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:56:51.434 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 09:56:51.434 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:51.434 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 09:56:51.434 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 09:56:51.436 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 09:56:59.447 [http-nio-8080-exec-5] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==>  Preparing: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC
2025-07-04 09:56:59.447 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:56:59.447 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC ::: DataSources: slave
2025-07-04 09:56:59.449 [http-nio-8080-exec-5] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==> Parameters: 
2025-07-04 09:56:59.451 [http-nio-8080-exec-5] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - <==      Total: 1
2025-07-04 09:57:00.149 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.AboutMapper.getAbout - ==>  Preparing: SELECT * FROM about LIMIT 1
2025-07-04 09:57:00.149 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:00.150 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT * FROM about LIMIT 1 ::: DataSources: slave
2025-07-04 09:57:00.151 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.AboutMapper.getAbout - ==> Parameters: 
2025-07-04 09:57:00.170 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.AboutMapper.getAbout - <==      Total: 1
2025-07-04 09:57:01.626 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:01.626 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:01.626 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.626 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:01.626 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.626 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:01.628 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 09:57:01.629 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:01.631 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:01.632 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:01.632 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.632 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:01.634 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:57:01.636 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 09:57:01.637 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:01.637 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.637 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:01.637 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:57:01.638 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:01.639 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:01.658 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:01.658 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.658 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:01.658 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:01.658 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.658 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:01.659 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:01.659 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:01.661 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:01.661 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:01.662 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:01.662 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.662 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:57:01.662 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:01.662 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.662 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181520552434(String)
2025-07-04 09:57:01.662 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:01.665 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:57:01.665 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:01.666 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:01.666 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.666 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:01.666 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:01.666 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:01.668 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:01.669 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:01.669 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.669 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:01.669 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181355860200(String)
2025-07-04 09:57:01.672 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:01.673 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:01.673 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.674 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:01.674 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:01.684 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:01.685 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:01.685 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.685 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:01.686 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181206573250(String)
2025-07-04 09:57:01.688 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:01.689 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:01.689 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.689 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:01.690 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:01.692 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:01.693 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:01.693 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.693 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:01.693 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703175346171678(String)
2025-07-04 09:57:01.696 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:01.697 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:01.697 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.697 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:01.698 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:57:01.700 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:01.700 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:57:01.700 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.701 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:01.702 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:57:01.702 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:01.702 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.702 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:01.703 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:01.704 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:01.704 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:57:01.705 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:01.705 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.705 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:01.705 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:57:01.707 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:01.755 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:01.755 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.755 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:01.755 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:01.758 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:01.759 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:01.759 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.759 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:01.759 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:57:01.762 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:01.763 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:01.763 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.763 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:01.763 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:01.765 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:01.767 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:57:01.767 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.767 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:01.768 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:57:01.770 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:01.770 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:01.770 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.770 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:01.771 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:01.776 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:01.776 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:01.777 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.777 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:01.777 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:57:01.779 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:01.779 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:01.779 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.779 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:01.780 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:01.781 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:01.781 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:01.782 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.782 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:01.782 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:57:01.783 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:01.839 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:01.839 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.839 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:01.840 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:01.842 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:57:01.843 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:01.843 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.843 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:01.843 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:57:01.846 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:01.859 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:01.860 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.861 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:01.861 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:01.866 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:01.867 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:01.867 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.867 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:01.868 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:57:01.871 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:01.872 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:01.872 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.872 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:01.873 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:01.874 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:01.875 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:01.875 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.875 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:01.875 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:01.876 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.876 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:01.876 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:01.877 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:57:01.878 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:01.879 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:01.880 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:01.880 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.880 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:01.881 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:57:01.883 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:01.884 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:01.884 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.884 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:01.885 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:01.886 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:01.887 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:01.887 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.887 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:01.888 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:57:01.890 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:01.907 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:01.907 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.907 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:01.908 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:01.910 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:01.910 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.910 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:01.910 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:01.911 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:01.911 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.911 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:01.911 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:57:01.923 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:01.923 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:01.924 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.924 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:01.924 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:01.926 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:01.927 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:01.927 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.927 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:01.928 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:57:01.929 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:01.929 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:01.932 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:01.933 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:01.933 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.933 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:01.933 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:57:01.936 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:01.936 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:01.937 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.937 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:01.937 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:01.939 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:01.941 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:01.941 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.941 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:01.941 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:57:01.946 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:01.972 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:01.972 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.972 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:01.972 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:01.975 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:01.977 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:01.977 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.977 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:01.977 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:01.977 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.977 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:01.977 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:57:01.977 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:01.979 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:01.980 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:01.980 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.980 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:01.980 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:01.982 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:01.983 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:01.983 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.983 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:01.983 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:57:01.984 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:01.984 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:01.984 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.984 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:01.985 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:57:01.985 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:01.990 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:01.991 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:01.991 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.991 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:01.991 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:57:01.993 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:01.994 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:01.994 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:01.994 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:01.994 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 09:57:01.996 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:02.005 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:02.005 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:02.005 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:02.005 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:02.008 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:02.009 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:02.009 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:02.009 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:02.009 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:57:02.011 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:02.011 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:02.011 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:02.011 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:02.011 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:57:02.013 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:02.013 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:02.013 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:02.013 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:02.014 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 09:57:02.016 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:02.609 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,put,num,addTime,account from book join cart on book.id = cart.id where account=? limit ?,?
2025-07-04 09:57:02.610 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:02.610 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,put,num,addTime,account
         from book join cart on book.id = cart.id
         where account=? limit ?,? ::: DataSources: slave
2025-07-04 09:57:02.613 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==> Parameters: 56464ff@456.com(String), 0(Integer), 10(Integer)
2025-07-04 09:57:02.623 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - <==      Total: 1
2025-07-04 09:57:02.625 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:02.625 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:02.625 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:02.625 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:02.627 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:03.854 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-07-04 09:57:03.854 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.854 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-07-04 09:57:03.855 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-07-04 09:57:03.856 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 09:57:03.856 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.857 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-07-04 09:57:03.857 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==>  Preparing: select `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt` from topic where `status`=1 order by `rank` asc limit ?,?
2025-07-04 09:57:03.857 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.857 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select  
        `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt`
      from topic where `status`=1 order by `rank` asc limit ?,? ::: DataSources: slave
2025-07-04 09:57:03.854 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-07-04 09:57:03.858 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.858 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-07-04 09:57:03.858 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 09:57:03.858 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.858 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 09:57:03.859 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-07-04 09:57:03.860 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:03.860 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.860 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:03.863 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-07-04 09:57:03.866 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - <==      Total: 1
2025-07-04 09:57:03.867 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==>  Preparing: select count(*) from topic where `status`=1
2025-07-04 09:57:03.867 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.867 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from topic where `status`=1 ::: DataSources: slave
2025-07-04 09:57:03.874 [http-nio-8080-exec-5] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-07-04 09:57:03.874 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.874 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-07-04 09:57:03.876 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 09:57:03.876 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 09:57:03.879 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 5
2025-07-04 09:57:03.879 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:03.879 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.879 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:03.880 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 4
2025-07-04 09:57:03.880 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 09:57:03.880 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:03.880 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.880 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:03.881 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:03.882 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:03.882 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.882 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:03.881 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 09:57:03.882 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==> Parameters: 
2025-07-04 09:57:03.884 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 09:57:03.884 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - <==      Total: 1
2025-07-04 09:57:03.885 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:03.886 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:57:03.886 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:03.886 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.886 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:57:03.887 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:03.887 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:03.887 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.887 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:03.888 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:03.888 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:57:03.888 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:03.888 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.888 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:03.890 [http-nio-8080-exec-5] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-07-04 09:57:03.890 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 09:57:03.890 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:03.891 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:57:03.891 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:03.891 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.891 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:03.892 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:03.892 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:03.892 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.892 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:03.893 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 09:57:03.893 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:57:03.894 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:03.894 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:57:03.894 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.894 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:57:03.895 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:03.895 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:03.896 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.896 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:03.896 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:03.896 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:03.896 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:03.896 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.896 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:03.896 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 09:57:03.896 [http-nio-8080-exec-5] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 6
2025-07-04 09:57:03.897 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:03.897 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:03.897 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.897 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:03.897 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:57:03.897 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 09:57:03.897 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 09:57:03.898 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 09:57:03.898 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:57:03.898 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 09:57:03.898 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.898 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 09:57:03.898 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.898 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:03.898 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:57:03.898 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:03.898 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:03.899 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:03.899 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:03.899 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.899 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.899 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:03.899 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:03.899 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:03.899 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.899 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:03.899 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:03.899 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 09:57:03.901 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:03.901 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 09:57:03.902 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:57:03.903 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:57:03.903 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:57:03.903 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.903 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:57:03.903 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:03.904 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 09:57:03.904 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:03.906 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 09:57:03.906 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 6(Long)
2025-07-04 09:57:03.909 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 09:57:03.910 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 09:57:03.910 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.910 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 09:57:03.911 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 2(Integer)
2025-07-04 09:57:03.912 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 09:57:03.912 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:03.913 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.913 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:03.913 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:57:03.913 [http-nio-8080-exec-2] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==>  Preparing: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC
2025-07-04 09:57:03.913 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.913 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC ::: DataSources: slave
2025-07-04 09:57:03.916 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:03.917 [http-nio-8080-exec-2] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==> Parameters: 
2025-07-04 09:57:03.919 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 09:57:03.919 [http-nio-8080-exec-2] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - <==      Total: 1
2025-07-04 09:57:03.919 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.919 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 09:57:03.919 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 5(Long)
2025-07-04 09:57:03.922 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 0
2025-07-04 09:57:03.922 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 09:57:03.922 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.922 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 09:57:03.923 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 4(Long)
2025-07-04 09:57:03.924 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 09:57:03.925 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 09:57:03.925 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.925 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 09:57:03.925 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-07-04 09:57:03.930 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 09:57:03.930 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:03.931 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:03.931 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:03.931 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:03.932 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:08.081 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,put,num,addTime,account from book join cart on book.id = cart.id where account=? limit ?,?
2025-07-04 09:57:08.081 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:08.081 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,put,num,addTime,account
         from book join cart on book.id = cart.id
         where account=? limit ?,? ::: DataSources: slave
2025-07-04 09:57:08.082 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==> Parameters: 56464ff@456.com(String), 0(Integer), 10(Integer)
2025-07-04 09:57:08.085 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - <==      Total: 1
2025-07-04 09:57:08.085 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:08.086 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:08.086 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:08.086 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:08.088 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:09.226 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:09.226 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.226 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:09.227 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 09:57:09.228 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:09.228 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.229 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:09.231 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:09.234 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:09.235 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 09:57:09.235 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:09.236 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.236 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:09.236 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:09.236 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.236 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:09.236 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:57:09.237 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:57:09.239 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:09.240 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:09.240 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.240 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:09.240 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:09.240 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:09.241 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:09.241 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.241 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:09.242 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:09.243 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:09.243 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:09.243 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:57:09.243 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.243 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:09.244 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:57:09.244 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:09.244 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.244 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:09.244 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181520552434(String)
2025-07-04 09:57:09.246 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:09.246 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:09.247 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:09.247 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.247 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:09.248 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:09.250 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:09.251 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:09.251 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.251 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:09.251 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181355860200(String)
2025-07-04 09:57:09.253 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:09.254 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:09.254 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.254 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:09.254 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:09.255 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:09.256 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:09.256 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.256 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:09.256 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181206573250(String)
2025-07-04 09:57:09.258 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:09.258 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:09.258 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.258 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:09.259 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:09.260 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:09.261 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:09.261 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.261 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:09.262 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703175346171678(String)
2025-07-04 09:57:09.264 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:09.265 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:09.265 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.265 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:09.266 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:57:09.267 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:09.268 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:57:09.268 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.268 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:09.269 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:09.269 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:57:09.269 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.269 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:09.269 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:09.270 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:09.271 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:57:09.272 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:09.272 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.272 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:09.272 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:57:09.274 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:09.306 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:09.306 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:09.306 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.306 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:09.306 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.306 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:09.306 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:09.307 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:09.308 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:09.308 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:09.309 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:09.309 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:09.309 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.309 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.309 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:09.309 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:09.309 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:57:09.309 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:57:09.312 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:09.312 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:09.313 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:09.313 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.313 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:09.313 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:09.313 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.313 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:09.313 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:09.313 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:09.315 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:09.315 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:09.316 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:09.316 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:57:09.317 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.317 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.317 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:09.317 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:09.317 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:57:09.317 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:57:09.318 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:09.320 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:09.338 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:09.339 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.339 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:09.340 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:09.342 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:57:09.342 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:09.342 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.342 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:09.343 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:57:09.345 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:09.354 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:09.354 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.354 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:09.354 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:09.356 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:09.357 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:09.357 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.357 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:09.357 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:57:09.359 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:09.360 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:09.360 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.360 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:09.360 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:09.361 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:09.362 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:09.362 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.362 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:09.362 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:09.362 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.362 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:09.362 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:09.362 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:57:09.363 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:09.364 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:09.364 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:09.364 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.364 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:09.364 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:57:09.365 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:09.366 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:09.366 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.366 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:09.367 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:09.368 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:09.369 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:09.369 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.369 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:09.369 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:57:09.370 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:09.385 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:09.386 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.386 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:09.386 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:09.388 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:09.388 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:09.389 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.389 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:09.389 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:57:09.389 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:09.389 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.389 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:09.389 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:09.391 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:09.391 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:09.391 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:09.391 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.391 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:09.391 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:09.392 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.392 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:09.392 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:09.392 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:57:09.393 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:09.393 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:09.393 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:09.393 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.393 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:09.393 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:09.393 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.393 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:09.394 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:09.394 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:57:09.394 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:09.394 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:09.395 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:09.395 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.395 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:09.396 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:57:09.397 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:09.413 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:09.414 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.414 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:09.414 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:09.416 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:09.416 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:09.416 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.416 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:09.416 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:57:09.417 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:09.417 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.417 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:09.417 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:09.417 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:09.418 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:09.418 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.418 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:09.418 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:57:09.418 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:09.419 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:09.419 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.419 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:09.419 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:57:09.419 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:09.419 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:09.419 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.419 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:09.419 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 09:57:09.420 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:09.420 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:09.420 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:09.420 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.420 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:09.420 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:09.422 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:09.422 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:09.422 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.422 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:09.423 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:57:09.424 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:09.440 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:09.440 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.440 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:09.440 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:09.442 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:09.443 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:09.443 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.443 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:09.443 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:57:09.444 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:09.445 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:09.445 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.445 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:09.445 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:57:09.446 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:09.447 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:09.447 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.447 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:09.447 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 09:57:09.448 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:09.731 [http-nio-8080-exec-4] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 09:57:09.731 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:57:09.731 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.731 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:09.731 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:57:09.731 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.732 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:09.732 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:57:09.732 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:57:09.732 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:09.732 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:57:09.732 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:09.732 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.732 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:09.733 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:57:09.735 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:09.736 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:09.736 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.736 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:09.737 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:57:09.739 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:09.740 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:09.740 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.740 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:09.740 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 09:57:09.743 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:09.743 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:09.743 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.743 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:09.743 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:57:09.745 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:09.745 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:57:09.745 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.745 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:57:09.745 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:57:09.746 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:57:09.746 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 09:57:09.746 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:09.746 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 09:57:09.746 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 09:57:09.748 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 09:57:10.234 [http-nio-8080-exec-6] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==>  Preparing: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC
2025-07-04 09:57:10.234 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:10.234 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC ::: DataSources: slave
2025-07-04 09:57:10.235 [http-nio-8080-exec-6] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==> Parameters: 
2025-07-04 09:57:10.236 [http-nio-8080-exec-6] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - <==      Total: 1
2025-07-04 09:57:10.789 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.AboutMapper.getAbout - ==>  Preparing: SELECT * FROM about LIMIT 1
2025-07-04 09:57:10.789 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:10.789 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT * FROM about LIMIT 1 ::: DataSources: slave
2025-07-04 09:57:10.789 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.AboutMapper.getAbout - ==> Parameters: 
2025-07-04 09:57:10.790 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.AboutMapper.getAbout - <==      Total: 1
2025-07-04 09:57:11.548 [http-nio-8080-exec-2] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==>  Preparing: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC
2025-07-04 09:57:11.549 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:11.549 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC ::: DataSources: slave
2025-07-04 09:57:11.549 [http-nio-8080-exec-2] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==> Parameters: 
2025-07-04 09:57:11.550 [http-nio-8080-exec-2] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - <==      Total: 1
2025-07-04 09:57:11.874 [http-nio-8080-exec-5] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 09:57:11.875 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:57:11.875 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:11.875 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:57:11.875 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:11.875 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:11.875 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:11.875 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:57:11.875 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:57:11.877 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:11.877 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:57:11.878 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:11.878 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:11.878 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:11.878 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:57:11.880 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:11.880 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:11.880 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:11.880 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:11.881 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:57:11.882 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:11.882 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:11.882 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:11.882 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:11.883 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 09:57:11.884 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:11.885 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:11.885 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:11.885 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:11.885 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:57:11.886 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:11.887 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:57:11.887 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:11.887 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:57:11.887 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:57:11.889 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:57:11.889 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 09:57:11.889 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:11.889 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 09:57:11.889 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 09:57:11.890 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 09:57:12.389 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:12.390 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.390 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:12.390 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:12.390 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.390 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:12.390 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:12.390 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 09:57:12.393 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:12.394 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:12.394 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.394 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:12.394 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:57:12.394 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 09:57:12.395 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:12.395 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.395 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:12.396 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:57:12.396 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:12.397 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:12.398 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.398 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:12.398 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:12.398 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:12.399 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:12.399 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.399 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:12.399 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:12.400 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:12.401 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:57:12.401 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.401 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:12.401 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:12.402 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:57:12.402 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:12.402 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.402 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:12.402 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181520552434(String)
2025-07-04 09:57:12.403 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:12.405 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:12.405 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:12.406 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.406 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:12.406 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:12.409 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:12.409 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:12.409 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.409 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:12.411 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181355860200(String)
2025-07-04 09:57:12.413 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:12.414 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:12.414 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.414 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:12.414 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:12.416 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:12.416 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:12.417 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.417 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:12.417 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181206573250(String)
2025-07-04 09:57:12.419 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:12.421 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:12.421 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.421 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:12.421 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:12.423 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:12.423 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:12.423 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.423 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:12.423 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703175346171678(String)
2025-07-04 09:57:12.426 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:12.427 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:12.428 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.428 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:12.428 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:57:12.431 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:12.431 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:12.431 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.431 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:12.431 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:57:12.431 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.431 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:12.432 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:12.432 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:57:12.433 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:12.433 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:57:12.433 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:12.433 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.433 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:12.433 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:57:12.435 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:12.448 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:12.448 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.448 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:12.448 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:12.450 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:12.451 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:12.451 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.451 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:12.451 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:57:12.453 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:12.453 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:12.453 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.453 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:12.453 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:12.455 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:12.455 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:12.456 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.456 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:12.456 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:57:12.457 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:12.471 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:12.471 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.471 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:12.471 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:12.473 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:12.473 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:12.473 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.473 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:12.474 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:57:12.475 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:12.475 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:12.475 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.475 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:12.475 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:12.477 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:12.477 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 09:57:12.477 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.477 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:12.478 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 09:57:12.479 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:12.490 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:12.490 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.490 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:12.491 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:12.492 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:12.493 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:12.493 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.493 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:12.493 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:57:12.494 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:12.495 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:12.495 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.495 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:12.495 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:12.496 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:12.496 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:12.496 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.496 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:12.496 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:57:12.498 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:12.505 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:12.505 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.505 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:12.505 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:12.507 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 09:57:12.508 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:12.508 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.508 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:12.508 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:57:12.509 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:12.521 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:12.522 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.522 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:12.522 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:12.523 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:12.524 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.524 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:12.524 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:12.524 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:12.524 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:12.524 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.524 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:12.525 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:57:12.526 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:12.526 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:12.526 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:12.526 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.526 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:12.526 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:12.526 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.526 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:12.526 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 09:57:12.526 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:12.527 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:12.528 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:12.528 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:12.528 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.528 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:12.528 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:57:12.529 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:12.529 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.529 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:12.529 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:12.529 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:12.530 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:12.531 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:12.531 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.531 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:12.531 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:57:12.533 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:12.550 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:12.550 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:12.550 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.551 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.551 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:12.551 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:12.551 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:12.551 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:12.552 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:12.553 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:12.553 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:12.553 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:12.553 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.553 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.553 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:12.553 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:12.553 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 09:57:12.553 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:57:12.555 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:12.555 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:12.555 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:12.555 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:12.555 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.555 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.555 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:12.555 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:12.555 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:12.555 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:57:12.555 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:12.555 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:12.556 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:12.556 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:12.556 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.556 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.556 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:12.556 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:12.556 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:57:12.556 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 09:57:12.557 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:12.557 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:12.575 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:12.576 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.576 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:12.576 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:12.578 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:12.578 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:12.578 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.578 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:12.578 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:57:12.579 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:12.580 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:12.580 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.580 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:12.580 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:12.581 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:12.582 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:12.582 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.582 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:12.582 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 09:57:12.583 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:12.593 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:57:12.594 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.594 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:57:12.594 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 09:57:12.596 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:57:12.596 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:57:12.597 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.597 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:57:12.597 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 09:57:12.598 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:57:12.598 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:12.598 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.598 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:12.599 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:57:12.599 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:12.600 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:57:12.600 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:12.600 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:57:12.600 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 09:57:12.602 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:57:13.858 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,put,num,addTime,account from book join cart on book.id = cart.id where account=? limit ?,?
2025-07-04 09:57:13.858 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:13.858 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,put,num,addTime,account
         from book join cart on book.id = cart.id
         where account=? limit ?,? ::: DataSources: slave
2025-07-04 09:57:13.859 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==> Parameters: 56464ff@456.com(String), 0(Integer), 10(Integer)
2025-07-04 09:57:13.862 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - <==      Total: 1
2025-07-04 09:57:13.862 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:13.862 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:13.863 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:13.863 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:13.864 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:38.678 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==>  Preparing: select `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt` from topic where `status`=1 order by `rank` asc limit ?,?
2025-07-04 09:57:38.678 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.678 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select  
        `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt`
      from topic where `status`=1 order by `rank` asc limit ?,? ::: DataSources: slave
2025-07-04 09:57:38.678 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-07-04 09:57:38.678 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.678 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-07-04 09:57:38.679 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-07-04 09:57:38.679 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.679 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 09:57:38.679 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-07-04 09:57:38.680 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-07-04 09:57:38.680 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 09:57:38.682 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 5
2025-07-04 09:57:38.682 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - <==      Total: 1
2025-07-04 09:57:38.683 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:38.683 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.683 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:38.683 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:38.683 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==>  Preparing: select count(*) from topic where `status`=1
2025-07-04 09:57:38.683 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.683 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from topic where `status`=1 ::: DataSources: slave
2025-07-04 09:57:38.684 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-07-04 09:57:38.684 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==> Parameters: 
2025-07-04 09:57:38.684 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:38.684 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.684 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:38.684 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 09:57:38.685 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:38.685 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - <==      Total: 1
2025-07-04 09:57:38.686 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:38.686 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:38.686 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.686 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:38.686 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:57:38.686 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:38.687 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.687 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:38.687 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:57:38.688 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:38.689 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:38.690 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.693 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:38.693 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:38.689 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:38.695 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:38.695 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-07-04 09:57:38.695 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.695 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.695 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:38.695 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-07-04 09:57:38.695 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 09:57:38.696 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:38.697 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:38.697 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.697 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:38.697 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:38.697 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 09:57:38.697 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:38.697 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.697 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:38.697 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:57:38.698 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:38.699 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 09:57:38.699 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:38.691 [http-nio-8080-exec-2] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-07-04 09:57:38.696 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 09:57:38.698 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:38.699 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.699 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:38.699 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:57:38.699 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:38.699 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.699 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-07-04 09:57:38.699 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.699 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:38.699 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:38.699 [http-nio-8080-exec-2] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-07-04 09:57:38.700 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:38.700 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:38.701 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 4
2025-07-04 09:57:38.703 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:38.703 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.703 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:38.703 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:38.699 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.704 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 09:57:38.704 [http-nio-8080-exec-2] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 6
2025-07-04 09:57:38.705 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:38.706 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:38.706 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.706 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:38.706 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 09:57:38.706 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:57:38.705 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 09:57:38.706 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.706 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 09:57:38.707 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:38.708 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:38.708 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 6(Long)
2025-07-04 09:57:38.708 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.708 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:38.708 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 09:57:38.709 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:38.709 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:38.709 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.709 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:38.710 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 09:57:38.711 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 09:57:38.711 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 09:57:38.711 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 09:57:38.711 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.711 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 09:57:38.711 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:38.712 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:57:38.712 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.712 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:57:38.712 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 2(Integer)
2025-07-04 09:57:38.712 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 09:57:38.714 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 09:57:38.714 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:57:38.714 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.714 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:57:38.715 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 09:57:38.715 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 09:57:38.715 [http-nio-8080-exec-4] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==>  Preparing: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC
2025-07-04 09:57:38.715 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:38.715 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.715 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:38.715 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 09:57:38.716 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 09:57:38.715 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.716 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC ::: DataSources: slave
2025-07-04 09:57:38.716 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:57:38.716 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.716 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:57:38.716 [http-nio-8080-exec-4] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==> Parameters: 
2025-07-04 09:57:38.716 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:57:38.716 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 09:57:38.717 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 09:57:38.717 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.717 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 09:57:38.718 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 09:57:38.718 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 5(Long)
2025-07-04 09:57:38.718 [http-nio-8080-exec-4] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - <==      Total: 1
2025-07-04 09:57:38.718 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 09:57:38.719 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.719 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 09:57:38.719 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 09:57:38.719 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 0
2025-07-04 09:57:38.719 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 09:57:38.719 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 09:57:38.719 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.719 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 09:57:38.720 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 4(Long)
2025-07-04 09:57:38.722 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 09:57:38.723 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 09:57:38.723 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.723 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 09:57:38.723 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-07-04 09:57:38.724 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 09:57:38.725 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 09:57:38.725 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:57:38.725 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 09:57:38.725 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 09:57:38.726 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 09:58:12.965 [http-nio-8080-exec-1] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 09:58:12.965 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:58:12.965 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:58:12.965 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:58:12.965 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:58:12.965 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:58:12.965 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:58:12.966 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:58:12.966 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 09:58:12.968 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:58:12.968 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:58:12.969 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:58:12.969 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:58:12.969 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:58:12.969 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 09:58:12.971 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:58:12.973 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 09:58:12.973 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:58:12.973 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 09:58:12.973 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 09:58:12.975 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 09:58:12.977 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 09:58:12.978 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:58:12.978 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 09:58:12.980 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 09:58:12.983 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 09:58:12.983 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 09:58:12.983 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:58:12.983 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 09:58:12.984 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 09:58:12.985 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 09:58:12.986 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 09:58:12.986 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:58:12.986 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 09:58:12.986 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 09:58:12.988 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 09:58:12.988 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 09:58:12.988 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 09:58:12.988 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 09:58:12.989 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 09:58:12.990 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 10:01:19.813 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 10:01:19.814 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 10:01:19.814 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:01:19.814 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 10:01:19.825 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 10:01:19.826 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 10:01:19.827 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 10:01:19.827 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 10:01:19.827 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:01:19.827 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 10:01:19.828 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 10:01:19.829 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 10:01:19.829 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 10:06:19.814 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 10:06:19.815 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 10:06:19.816 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:06:19.816 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 10:06:19.820 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 10:06:19.822 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 10:06:19.822 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 10:06:19.822 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 10:06:19.822 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:06:19.822 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 10:06:19.822 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 10:06:19.824 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 10:06:19.824 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 10:11:14.744 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 10:11:14.744 [Thread-7] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 10:11:14.746 [Thread-7] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-07-04 10:11:14.754 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1096877975] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 10:11:14.754 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1096877975] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 10:11:14.755 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1024272226] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 10:11:14.755 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1024272226] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 10:11:14.756 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 10:11:14.757 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 10:11:14.782 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closing ...
2025-07-04 10:11:14.786 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-07-04 10:11:14.786 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closing ...
2025-07-04 10:11:14.789 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-07-04 10:11:14.923 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 10480 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 10:11:14.923 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 10:11:14.923 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 10:11:15.274 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 10:11:15.274 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 10:11:15.303 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 29 ms. Found 0 Redis repository interfaces.
2025-07-04 10:11:15.426 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$80340cd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 10:11:15.437 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 10:11:15.611 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 10:11:15.611 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 10:11:15.611 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 10:11:15.612 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 10:11:15.613 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 10:11:15.614 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 10:11:15.614 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 10:11:15.614 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 10:11:15.670 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 10:11:15.670 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 739 ms
2025-07-04 10:11:15.674 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 10:11:15.843 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} inited
2025-07-04 10:11:15.887 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} inited
2025-07-04 10:11:16.149 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 10:11:16.149 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 10:11:16.583 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 10:11:16.801 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@2cc54f9, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2eb5205e, org.springframework.security.web.context.SecurityContextPersistenceFilter@43804c8b, org.springframework.security.web.header.HeaderWriterFilter@5a30498e, org.springframework.web.filter.CorsFilter@dcdfbed, org.springframework.security.web.authentication.logout.LogoutFilter@4e0afe, com.huang.store.security.JwtAuthenticationTokenFilter@748f227d, com.huang.store.security.CustomAuthenticationFilter@245c904c, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@5bc03928, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@64fa6237, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3c5e3b1f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@a3fa1e3, org.springframework.security.web.session.SessionManagementFilter@e7e76ce, org.springframework.security.web.access.ExceptionTranslationFilter@5c44337, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@75eebb20]
2025-07-04 10:11:17.171 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 10:11:17.198 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 10:11:17.205 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 10:11:17.214 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 10:11:17.214 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 2.343 seconds (JVM running for 901.081)
2025-07-04 10:11:17.214 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 10:11:17.214 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:11:17.214 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 10:11:17.216 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 10:11:17.219 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 10:11:17.220 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 10:11:17.226 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 10:11:17.226 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:11:17.226 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 10:11:17.227 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 10:11:17.229 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 10:11:17.233 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 10:12:29.830 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 10:12:29.830 [Thread-9] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 10:12:29.834 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1335076274] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 10:12:29.834 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1335076274] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 10:12:29.835 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1581197456] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 10:12:29.835 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1581197456] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 10:12:29.836 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 10:12:29.837 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 10:12:29.840 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closing ...
2025-07-04 10:12:29.841 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closed
2025-07-04 10:12:29.841 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closing ...
2025-07-04 10:12:29.842 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closed
2025-07-04 10:12:29.973 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 10480 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 10:12:29.974 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 10:12:29.974 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 10:12:30.263 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 10:12:30.263 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 10:12:30.289 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25 ms. Found 0 Redis repository interfaces.
2025-07-04 10:12:30.406 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$80340cd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 10:12:30.414 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 10:12:30.510 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 10:12:30.510 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 10:12:30.510 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 10:12:30.511 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 10:12:30.511 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 10:12:30.512 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 10:12:30.512 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 10:12:30.512 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 10:12:30.549 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 10:12:30.549 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 573 ms
2025-07-04 10:12:30.553 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 10:12:30.758 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} inited
2025-07-04 10:12:30.790 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} inited
2025-07-04 10:12:31.024 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 10:12:31.024 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 10:12:31.414 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 10:12:31.575 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@6a6c234b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2514f4b8, org.springframework.security.web.context.SecurityContextPersistenceFilter@3a5f48e3, org.springframework.security.web.header.HeaderWriterFilter@469c36c5, org.springframework.web.filter.CorsFilter@7aa26e43, org.springframework.security.web.authentication.logout.LogoutFilter@36b35fc4, com.huang.store.security.JwtAuthenticationTokenFilter@7dbd7309, com.huang.store.security.CustomAuthenticationFilter@1569988b, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@79bc0d42, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@8c0284b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2f4d1d88, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3b905732, org.springframework.security.web.session.SessionManagementFilter@2bce4635, org.springframework.security.web.access.ExceptionTranslationFilter@56bc8229, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@55e08f7c]
2025-07-04 10:12:31.955 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 10:12:31.991 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 10:12:31.997 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 10:12:32.004 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 10:12:32.004 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 2.083 seconds (JVM running for 975.871)
2025-07-04 10:12:32.004 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 10:12:32.004 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:12:32.004 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 10:12:32.005 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 10:12:32.007 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 10:12:32.008 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 10:12:32.013 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 10:12:32.013 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:12:32.013 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 10:12:32.014 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 10:12:32.016 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 10:12:32.018 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 10:17:32.005 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 10:17:32.005 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 10:17:32.005 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:17:32.005 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 10:17:32.006 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 10:17:32.007 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 10:17:32.007 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 10:17:32.007 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 10:17:32.007 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:17:32.007 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 10:17:32.008 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 10:17:32.009 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 10:17:32.009 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 10:20:16.034 [http-nio-8080-exec-2] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-04 10:20:16.034 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-04 10:20:16.036 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-04 10:20:16.041 [http-nio-8080-exec-2] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 10:20:16.042 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:20:16.042 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:20:16.042 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:20:16.042 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 10:20:16.043 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:20:16.043 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 10:20:16.045 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 10:20:16.047 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:20:16.048 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:20:16.049 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:20:16.049 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:20:16.050 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:20:16.053 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 10:20:16.054 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 10:20:16.055 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:20:16.056 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:20:16.056 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:20:16.056 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:20:16.056 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 10:20:16.058 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:20:16.059 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:20:16.059 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:20:16.059 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:20:16.063 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 10:20:16.067 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:20:16.069 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:20:16.069 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:20:16.069 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:20:16.071 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 10:20:16.075 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:20:16.075 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 10:20:16.075 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:20:16.075 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 10:20:16.076 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:20:16.077 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 10:20:16.078 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 10:20:16.078 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:20:16.079 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 10:20:16.080 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 10:20:16.081 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 10:22:32.005 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 10:22:32.005 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 10:22:32.005 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:22:32.005 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 10:22:32.006 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 10:22:32.007 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 10:22:32.007 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 10:22:32.008 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 10:22:32.008 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:22:32.008 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 10:22:32.008 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 10:22:32.009 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 10:22:32.009 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 10:22:52.679 [http-nio-8080-exec-4] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 10:22:52.680 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 10:22:52.680 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:22:52.680 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:22:52.680 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:22:52.680 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 10:22:52.680 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:22:52.680 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:22:52.681 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 10:22:52.681 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 10:22:52.685 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:22:52.686 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:22:52.686 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:22:52.686 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:22:52.686 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 10:22:52.688 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:22:52.688 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:22:52.688 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:22:52.688 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:22:52.688 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 10:22:52.690 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:22:52.690 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:22:52.691 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:22:52.691 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:22:52.692 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 10:22:52.693 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:22:52.694 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:22:52.694 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:22:52.694 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:22:52.694 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 10:22:52.696 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:22:52.697 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 10:22:52.697 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:22:52.697 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 10:22:52.697 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:22:52.699 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 10:22:52.699 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 10:22:52.699 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:22:52.699 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 10:22:52.700 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 10:22:52.701 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 10:22:56.726 [http-nio-8080-exec-5] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-07-04 10:22:56.727 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false
2025-07-04 10:22:56.727 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:22:56.727 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-07-04 10:22:56.728 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:22:56.729 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-07-04 10:22:56.730 [http-nio-8080-exec-5] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-07-04 10:25:54.991 [http-nio-8080-exec-6] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-07-04 10:25:54.991 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false
2025-07-04 10:25:54.991 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:25:54.991 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-07-04 10:25:54.993 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:25:54.994 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-07-04 10:25:54.995 [http-nio-8080-exec-6] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-07-04 10:26:44.288 [http-nio-8080-exec-7] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-07-04 10:26:44.289 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false
2025-07-04 10:26:44.289 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:26:44.289 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-07-04 10:26:44.289 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:26:44.290 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-07-04 10:26:44.290 [http-nio-8080-exec-7] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-07-04 10:27:11.545 [http-nio-8080-exec-8] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-07-04 10:27:11.545 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false
2025-07-04 10:27:11.546 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:27:11.546 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-07-04 10:27:11.546 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:27:11.547 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-07-04 10:27:11.547 [http-nio-8080-exec-8] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-07-04 10:27:32.004 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 10:27:32.005 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 10:27:32.005 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:27:32.005 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 10:27:32.007 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 10:27:32.013 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 10:27:32.013 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 10:27:32.014 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 10:27:32.014 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:27:32.014 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 10:27:32.015 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 10:27:32.018 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 10:27:32.019 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 10:27:41.062 [http-nio-8080-exec-9] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-07-04 10:27:41.062 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false
2025-07-04 10:27:41.062 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:27:41.062 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-07-04 10:27:41.063 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:27:41.063 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-07-04 10:27:41.064 [http-nio-8080-exec-9] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-07-04 10:28:02.912 [http-nio-8080-exec-10] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-07-04 10:28:02.912 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false
2025-07-04 10:28:02.912 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:02.912 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-07-04 10:28:02.912 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:28:02.914 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-07-04 10:28:02.914 [http-nio-8080-exec-10] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-07-04 10:28:25.313 [http-nio-8080-exec-2] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 10:28:25.313 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 10:28:25.313 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:28:25.313 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:25.313 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 10:28:25.313 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:25.313 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:28:25.313 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:28:25.315 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 10:28:25.315 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 10:28:25.316 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:28:25.318 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:28:25.318 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:25.318 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:28:25.318 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 10:28:25.319 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:28:25.319 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:28:25.320 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:25.320 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:28:25.320 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 10:28:25.320 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:28:25.322 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:28:25.322 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:25.322 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:28:25.323 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 10:28:25.324 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:28:25.325 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:28:25.325 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:25.325 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:28:25.325 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 10:28:25.326 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:28:25.326 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 10:28:25.326 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:25.326 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 10:28:25.326 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:28:25.327 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 10:28:25.327 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 10:28:25.327 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:25.327 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 10:28:25.328 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 10:28:25.328 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 10:28:26.905 [http-nio-8080-exec-3] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-07-04 10:28:26.906 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false
2025-07-04 10:28:26.906 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:26.906 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-07-04 10:28:26.906 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:28:26.910 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-07-04 10:28:26.910 [http-nio-8080-exec-3] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-07-04 10:28:30.951 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 10:28:30.951 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:30.951 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 10:28:30.951 [http-nio-8080-exec-5] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 10:28:30.951 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:28:30.951 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:28:30.951 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:30.951 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:28:30.952 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 10:28:30.953 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 10:28:30.953 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:28:30.954 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:28:30.954 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:30.954 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:28:30.954 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 10:28:30.956 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:28:30.957 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:28:30.957 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:30.957 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:28:30.957 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 10:28:30.958 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:28:30.959 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:28:30.959 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:30.959 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:28:30.959 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 10:28:30.961 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:28:30.962 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:28:30.962 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:30.962 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:28:30.962 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 10:28:30.964 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:28:30.964 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 10:28:30.964 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:30.964 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 10:28:30.964 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:28:30.965 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 10:28:30.966 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 10:28:30.966 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:30.966 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 10:28:30.967 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 10:28:30.968 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 10:28:42.673 [http-nio-8080-exec-6] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-07-04 10:28:42.674 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false
2025-07-04 10:28:42.674 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:42.674 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-07-04 10:28:42.674 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:28:42.678 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-07-04 10:28:42.678 [http-nio-8080-exec-6] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-07-04 10:28:43.627 [http-nio-8080-exec-7] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-07-04 10:28:43.627 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false
2025-07-04 10:28:43.627 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:43.627 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-07-04 10:28:43.628 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:28:43.629 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-07-04 10:28:43.629 [http-nio-8080-exec-7] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-07-04 10:28:57.728 [http-nio-8080-exec-9] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 10:28:57.728 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 10:28:57.729 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:28:57.729 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:57.729 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 10:28:57.729 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:57.729 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:28:57.729 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:28:57.729 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 10:28:57.730 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:28:57.730 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 10:28:57.731 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:28:57.731 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:57.731 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:28:57.732 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 10:28:57.734 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:28:57.735 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:28:57.735 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:57.735 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:28:57.735 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 10:28:57.737 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:28:57.738 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:28:57.738 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:57.738 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:28:57.738 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 10:28:57.741 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:28:57.741 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:28:57.741 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:57.741 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:28:57.741 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 10:28:57.742 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:28:57.743 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 10:28:57.743 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:57.743 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 10:28:57.743 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:28:57.744 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 10:28:57.744 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 10:28:57.745 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:57.745 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 10:28:57.745 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 10:28:57.745 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 10:28:58.850 [http-nio-8080-exec-10] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-07-04 10:28:58.850 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false
2025-07-04 10:28:58.851 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:28:58.851 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-07-04 10:28:58.851 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:28:58.853 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-07-04 10:28:58.853 [http-nio-8080-exec-10] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-07-04 10:29:06.076 [http-nio-8080-exec-1] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-07-04 10:29:06.076 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false
2025-07-04 10:29:06.076 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:29:06.076 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-07-04 10:29:06.077 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:29:06.078 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-07-04 10:29:06.078 [http-nio-8080-exec-1] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-07-04 10:29:25.585 [http-nio-8080-exec-2] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-07-04 10:29:25.585 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false
2025-07-04 10:29:25.585 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:29:25.585 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-07-04 10:29:25.585 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:29:25.586 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-07-04 10:29:25.587 [http-nio-8080-exec-2] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-07-04 10:29:50.250 [http-nio-8080-exec-3] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-07-04 10:29:50.250 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false
2025-07-04 10:29:50.250 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:29:50.250 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-07-04 10:29:50.251 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:29:50.251 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-07-04 10:29:50.252 [http-nio-8080-exec-3] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-07-04 10:30:13.773 [http-nio-8080-exec-4] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-07-04 10:30:13.773 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false
2025-07-04 10:30:13.773 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:30:13.774 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-07-04 10:30:13.774 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:30:13.775 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-07-04 10:30:13.775 [http-nio-8080-exec-4] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-07-04 10:32:32.005 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 10:32:32.005 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 10:32:32.006 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:32:32.006 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 10:32:32.008 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 10:32:32.009 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 10:32:32.009 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 10:32:32.009 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 10:32:32.009 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:32:32.009 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 10:32:32.009 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 10:32:32.010 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 10:32:32.011 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 10:32:59.919 [http-nio-8080-exec-5] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-07-04 10:32:59.919 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false
2025-07-04 10:32:59.919 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:32:59.919 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-07-04 10:32:59.919 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:32:59.921 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-07-04 10:32:59.921 [http-nio-8080-exec-5] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-07-04 10:33:04.020 [http-nio-8080-exec-7] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 10:33:04.020 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 10:33:04.020 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:04.020 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 10:33:04.020 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:33:04.020 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:33:04.020 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:04.020 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:33:04.021 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 10:33:04.021 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 10:33:04.022 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:33:04.022 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:33:04.022 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:04.022 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:33:04.022 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 10:33:04.024 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:33:04.026 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:33:04.026 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:04.026 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:33:04.026 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 10:33:04.028 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:33:04.028 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:33:04.028 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:04.028 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:33:04.029 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 10:33:04.030 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:33:04.030 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:33:04.030 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:04.030 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:33:04.030 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 10:33:04.032 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:33:04.032 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 10:33:04.032 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:04.032 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 10:33:04.033 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:33:04.034 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 10:33:04.034 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 10:33:04.034 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:04.034 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 10:33:04.034 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 10:33:04.035 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 10:33:05.008 [http-nio-8080-exec-8] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-07-04 10:33:05.009 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false
2025-07-04 10:33:05.009 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:05.009 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-07-04 10:33:05.009 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:33:05.012 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-07-04 10:33:05.012 [http-nio-8080-exec-8] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-07-04 10:33:06.597 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:33:06.597 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:33:06.597 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.597 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.597 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:33:06.597 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:33:06.599 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:33:06.599 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 10:33:06.602 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:33:06.603 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 10:33:06.603 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:33:06.603 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.603 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:33:06.603 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 10:33:06.603 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:33:06.603 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.603 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:33:06.604 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 10:33:06.604 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:33:06.606 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:33:06.613 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:33:06.613 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:33:06.613 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.613 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:33:06.613 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.614 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:33:06.614 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:33:06.614 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:33:06.615 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:33:06.615 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:33:06.616 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:33:06.616 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 10:33:06.616 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.616 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.616 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:33:06.616 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:33:06.616 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181520552434(String)
2025-07-04 10:33:06.616 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 10:33:06.617 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:33:06.617 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:33:06.617 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:33:06.617 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.617 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:33:06.617 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:33:06.619 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:33:06.619 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:33:06.619 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.619 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:33:06.619 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181355860200(String)
2025-07-04 10:33:06.620 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:33:06.621 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:33:06.621 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.621 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:33:06.621 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:33:06.622 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:33:06.623 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:33:06.623 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.623 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:33:06.623 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181206573250(String)
2025-07-04 10:33:06.624 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:33:06.624 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:33:06.624 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.624 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:33:06.624 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:33:06.625 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:33:06.625 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:33:06.625 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.625 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:33:06.625 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703175346171678(String)
2025-07-04 10:33:06.627 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:33:06.627 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:33:06.627 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.627 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:33:06.627 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:33:06.628 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:33:06.628 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 10:33:06.629 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.629 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:33:06.629 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 10:33:06.630 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:33:06.637 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:33:06.637 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.637 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:33:06.637 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:33:06.638 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 10:33:06.639 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:33:06.639 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.639 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:33:06.639 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 10:33:06.640 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:33:06.670 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:33:06.670 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.670 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:33:06.670 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:33:06.672 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:33:06.673 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:33:06.673 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.673 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:33:06.673 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 10:33:06.674 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:33:06.675 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:33:06.675 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.676 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:33:06.676 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:33:06.677 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:33:06.678 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 10:33:06.678 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:33:06.678 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.678 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:33:06.678 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.678 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:33:06.678 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 10:33:06.678 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:33:06.680 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:33:06.680 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:33:06.681 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:33:06.681 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.681 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:33:06.681 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 10:33:06.682 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:33:06.682 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:33:06.682 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.682 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:33:06.682 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:33:06.683 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:33:06.685 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:33:06.685 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.685 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:33:06.685 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 10:33:06.685 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:33:06.747 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:33:06.747 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.747 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:33:06.747 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:33:06.748 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 10:33:06.749 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:33:06.749 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.749 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:33:06.749 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 10:33:06.750 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:33:06.758 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:33:06.758 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.758 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:33:06.758 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:33:06.760 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:33:06.760 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:33:06.760 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.760 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:33:06.760 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 10:33:06.761 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:33:06.762 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:33:06.762 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.762 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:33:06.762 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:33:06.762 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:33:06.763 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:33:06.763 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.763 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:33:06.763 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 10:33:06.764 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:33:06.772 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:33:06.772 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.772 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:33:06.772 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:33:06.774 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:33:06.775 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:33:06.775 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.775 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:33:06.775 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 10:33:06.777 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:33:06.777 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:33:06.777 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.777 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:33:06.777 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:33:06.778 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:33:06.778 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:33:06.778 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.778 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:33:06.778 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 10:33:06.779 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:33:06.790 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:33:06.790 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.790 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:33:06.790 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:33:06.792 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:33:06.793 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:33:06.793 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.793 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:33:06.793 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 10:33:06.794 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:33:06.794 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:33:06.794 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.794 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:33:06.795 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:33:06.796 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:33:06.796 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:33:06.796 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.796 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:33:06.796 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 10:33:06.797 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:33:06.802 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:33:06.802 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.802 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:33:06.802 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:33:06.804 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:33:06.804 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:33:06.804 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.804 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:33:06.804 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 10:33:06.805 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:33:06.806 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:33:06.806 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.806 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:33:06.806 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:33:06.807 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:33:06.807 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:33:06.808 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.808 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:33:06.808 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 10:33:06.809 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:33:06.825 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:33:06.825 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.825 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:33:06.825 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:33:06.825 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:33:06.825 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.825 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:33:06.825 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:33:06.827 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:33:06.827 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:33:06.827 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:33:06.827 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:33:06.827 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.827 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.827 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:33:06.827 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:33:06.827 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 10:33:06.827 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 10:33:06.829 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:33:06.829 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:33:06.829 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:33:06.829 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.829 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:33:06.829 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:33:06.829 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.829 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:33:06.829 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:33:06.829 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:33:06.830 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:33:06.830 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:33:06.830 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:33:06.830 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:33:06.830 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.830 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.830 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:33:06.830 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:33:06.830 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 10:33:06.830 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 10:33:06.831 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:33:06.831 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:33:06.851 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:33:06.851 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.851 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:33:06.851 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:33:06.852 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:33:06.852 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:33:06.852 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.852 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:33:06.852 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 10:33:06.852 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:33:06.852 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:33:06.852 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.852 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:33:06.853 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:33:06.853 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:33:06.853 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:33:06.853 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:06.853 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:33:06.853 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 10:33:06.853 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:33:07.034 [http-nio-8080-exec-2] INFO  com.huang.store.controller.CouponController - 用户查询可领取的优惠券模板
2025-07-04 10:33:07.034 [http-nio-8080-exec-3] INFO  com.huang.store.controller.CouponController - 用户查询优惠券: 56464ff@456.com
2025-07-04 10:33:07.043 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.CouponTemplateMapper.selectAllEnabled - ==>  Preparing: SELECT * FROM coupon_template WHERE status = 1 ORDER BY create_time DESC
2025-07-04 10:33:07.043 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.UserCouponMapper.selectByAccount - ==>  Preparing: SELECT uc.*, ct.name as coupon_name, ct.type, ct.discount_value, ct.min_order_amount, ct.max_discount_amount FROM user_coupon uc LEFT JOIN coupon_template ct ON uc.coupon_template_id = ct.id WHERE uc.account = ? ORDER BY uc.receive_time DESC
2025-07-04 10:33:07.043 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:07.043 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:07.043 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT * FROM coupon_template WHERE status = 1 ORDER BY create_time DESC ::: DataSources: slave
2025-07-04 10:33:07.043 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT uc.*, ct.name as coupon_name, ct.type, ct.discount_value, ct.min_order_amount, ct.max_discount_amount FROM user_coupon uc LEFT JOIN coupon_template ct ON uc.coupon_template_id = ct.id WHERE uc.account = ? ORDER BY uc.receive_time DESC ::: DataSources: slave
2025-07-04 10:33:07.045 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.CouponTemplateMapper.selectAllEnabled - ==> Parameters: 
2025-07-04 10:33:07.047 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.UserCouponMapper.selectByAccount - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:33:07.050 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.CouponTemplateMapper.selectAllEnabled - <==      Total: 4
2025-07-04 10:33:07.051 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.UserCouponMapper.selectByAccount - <==      Total: 2
2025-07-04 10:33:07.069 [http-nio-8080-exec-4] INFO  com.huang.store.controller.CouponController - 用户查询优惠券: 56464ff@456.com
2025-07-04 10:33:07.069 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.UserCouponMapper.selectByAccount - ==>  Preparing: SELECT uc.*, ct.name as coupon_name, ct.type, ct.discount_value, ct.min_order_amount, ct.max_discount_amount FROM user_coupon uc LEFT JOIN coupon_template ct ON uc.coupon_template_id = ct.id WHERE uc.account = ? ORDER BY uc.receive_time DESC
2025-07-04 10:33:07.069 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:07.069 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT uc.*, ct.name as coupon_name, ct.type, ct.discount_value, ct.min_order_amount, ct.max_discount_amount FROM user_coupon uc LEFT JOIN coupon_template ct ON uc.coupon_template_id = ct.id WHERE uc.account = ? ORDER BY uc.receive_time DESC ::: DataSources: slave
2025-07-04 10:33:07.070 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.UserCouponMapper.selectByAccount - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:33:07.071 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.UserCouponMapper.selectByAccount - <==      Total: 2
2025-07-04 10:33:07.376 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 10:33:07.376 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:07.376 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 10:33:07.376 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:33:07.377 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 10:33:07.377 [http-nio-8080-exec-5] INFO  com.huang.store.controller.CommentController - 获取用户评论: userId=5, userAccount=56464ff@456.com, page=1, pageSize=10, keyword=null
2025-07-04 10:33:07.378 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - ==>  Preparing: SELECT c.*, b.bookName as bookName FROM book_comment c LEFT JOIN book b ON c.bookId = b.id WHERE c.userId = ? AND c.parentId IS NULL ORDER BY c.createTime DESC LIMIT ?, ?
2025-07-04 10:33:07.378 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:07.378 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT
            c.*,
            b.bookName as bookName
        FROM book_comment c
        LEFT JOIN book b ON c.bookId = b.id
        WHERE c.userId = ? AND c.parentId IS NULL
        ORDER BY c.createTime DESC
        LIMIT ?, ? ::: DataSources: slave
2025-07-04 10:33:07.381 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - ==> Parameters: 5(Integer), 0(Integer), 10(Integer)
2025-07-04 10:33:07.382 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.CommentMapper.getCommentsByUser - <==      Total: 1
2025-07-04 10:33:07.382 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==>  Preparing: SELECT * FROM book_comment WHERE parentId = ? ORDER BY createTime ASC
2025-07-04 10:33:07.382 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:07.382 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT * FROM book_comment 
        WHERE parentId = ?
        ORDER BY createTime ASC ::: DataSources: slave
2025-07-04 10:33:07.383 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - ==> Parameters: 18(Integer)
2025-07-04 10:33:07.383 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.CommentMapper.getRepliesByParent - <==      Total: 0
2025-07-04 10:33:07.383 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 10:33:07.383 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:07.383 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 10:33:07.383 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 10:33:07.384 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 10:33:09.982 [http-nio-8080-exec-7] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 10:33:09.982 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 10:33:09.982 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:09.982 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 10:33:09.982 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:33:09.982 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:09.982 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:33:09.982 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:33:09.983 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 10:33:09.984 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:33:09.984 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:33:09.984 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 10:33:09.984 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:09.984 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:33:09.985 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 10:33:09.986 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:33:09.986 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:33:09.986 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:09.986 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:33:09.986 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 10:33:09.987 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:33:09.987 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:33:09.987 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:09.987 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:33:09.987 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 10:33:09.988 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:33:09.988 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:33:09.988 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:09.988 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:33:09.988 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 10:33:09.990 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:33:09.990 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 10:33:09.990 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:09.990 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 10:33:09.990 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:33:09.991 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 10:33:09.991 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 10:33:09.991 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:09.991 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 10:33:09.991 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 10:33:09.991 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 10:33:11.039 [http-nio-8080-exec-8] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-07-04 10:33:11.040 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false
2025-07-04 10:33:11.040 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:33:11.040 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-07-04 10:33:11.040 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:33:11.040 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-07-04 10:33:11.040 [http-nio-8080-exec-8] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-07-04 10:37:15.922 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:15.922 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:15.922 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.922 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.922 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:15.922 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:15.924 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 10:37:15.924 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:15.926 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:37:15.926 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 10:37:15.926 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:15.926 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:15.926 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.926 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.926 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:15.926 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:15.926 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 10:37:15.926 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 10:37:15.928 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:15.928 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:15.928 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:15.928 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.928 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:15.928 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:37:15.928 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:15.928 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.928 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:15.929 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:37:15.929 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:15.929 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:15.929 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:15.929 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.929 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:15.929 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181520552434(String)
2025-07-04 10:37:15.930 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 10:37:15.930 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.930 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:15.930 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 10:37:15.930 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:15.931 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:15.931 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:15.931 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.931 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:15.931 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:37:15.932 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:15.932 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:15.932 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.932 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:15.932 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181355860200(String)
2025-07-04 10:37:15.934 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:15.934 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:15.934 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.934 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:15.934 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:37:15.935 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:15.935 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:15.935 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.935 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:15.935 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181206573250(String)
2025-07-04 10:37:15.937 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:15.937 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:15.937 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.937 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:15.937 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:37:15.938 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:15.938 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:15.938 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.938 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:15.939 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703175346171678(String)
2025-07-04 10:37:15.940 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:15.940 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:15.940 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.940 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:15.940 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:37:15.941 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:15.941 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 10:37:15.941 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.941 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:15.941 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 10:37:15.942 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:15.949 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:15.949 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.949 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:15.949 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:15.949 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 10:37:15.950 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:15.950 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.950 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:15.950 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 10:37:15.950 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:15.970 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:15.970 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.971 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:15.971 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:15.972 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:37:15.972 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:15.972 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.972 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:15.972 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 10:37:15.973 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:15.973 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:15.973 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.973 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:15.973 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:37:15.974 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:15.974 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 10:37:15.974 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.974 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:15.974 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 10:37:15.975 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:15.980 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:15.980 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.980 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:15.980 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:15.981 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:37:15.981 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:15.981 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.981 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:15.981 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 10:37:15.981 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:15.981 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:15.981 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.981 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:15.982 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:37:15.982 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:15.982 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:15.982 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:15.982 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:15.982 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 10:37:15.982 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:16.037 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:16.037 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.037 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:16.037 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:16.038 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 10:37:16.038 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:16.038 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.038 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:16.038 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 10:37:16.039 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:16.053 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:16.053 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.053 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:16.053 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:16.055 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:37:16.055 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:16.055 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.055 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:16.055 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 10:37:16.056 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:16.056 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:16.056 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.056 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:16.056 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:16.057 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:16.058 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:16.058 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.058 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:16.058 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 10:37:16.059 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:16.067 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:16.067 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.067 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:16.067 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:16.069 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:37:16.069 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:16.069 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.069 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:16.069 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 10:37:16.070 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:16.070 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:16.070 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.070 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:16.070 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:37:16.071 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:16.071 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:16.071 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.071 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:16.071 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 10:37:16.072 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:16.085 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:16.085 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:16.085 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.085 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:16.085 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.085 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:16.085 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:16.085 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:16.086 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:37:16.086 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:37:16.086 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:16.086 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:16.086 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.086 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:16.086 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.086 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:16.087 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 10:37:16.087 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 10:37:16.087 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:16.087 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:16.088 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:16.088 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:16.088 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.088 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.088 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:16.088 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:16.088 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:16.088 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:16.088 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:16.088 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:16.089 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:16.089 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:16.089 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.089 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.089 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:16.089 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:16.089 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 10:37:16.089 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 10:37:16.089 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:16.089 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:16.117 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:16.117 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:16.117 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.117 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.117 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:16.117 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:16.117 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:16.117 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:16.118 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:37:16.118 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:37:16.118 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:16.118 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:16.118 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.118 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.118 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:16.118 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:16.118 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 10:37:16.118 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 10:37:16.119 [http-nio-8080-exec-9] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:16.119 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:16.119 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:16.119 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:16.119 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.119 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.119 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:16.119 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:16.119 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:16.119 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:37:16.120 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:16.120 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:16.120 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:16.120 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:16.120 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.120 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.120 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:16.120 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:16.120 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 10:37:16.120 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 10:37:16.121 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:16.121 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:16.131 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:16.131 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.131 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:16.131 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:16.132 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:37:16.132 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:16.132 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.132 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:16.132 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 10:37:16.133 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:16.133 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:16.133 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.133 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:16.133 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:37:16.134 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:16.134 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:16.134 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.134 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:16.134 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 10:37:16.135 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:16.763 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 10:37:16.763 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.763 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 10:37:16.764 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:37:16.765 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 10:37:16.766 [http-nio-8080-exec-2] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 10:37:16.766 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:16.766 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.766 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:16.766 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 10:37:16.767 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:16.768 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:16.768 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.768 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:16.769 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 10:37:16.770 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:16.771 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:16.771 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.771 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:16.771 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 10:37:16.772 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:16.772 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:16.772 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.772 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:16.773 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 10:37:16.773 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:37:16.773 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:16.773 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.773 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:16.774 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 10:37:16.774 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:16.774 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 10:37:16.774 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.774 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 10:37:16.774 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:37:16.775 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 10:37:16.775 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 10:37:16.775 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:16.775 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 10:37:16.775 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 10:37:16.775 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 10:37:21.289 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:21.290 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.290 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:21.290 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-07-04 10:37:21.290 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:21.290 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.290 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:21.291 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:21.291 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 5
2025-07-04 10:37:21.292 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:21.292 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.292 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:21.292 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 10:37:21.293 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:21.293 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:37:21.293 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:21.293 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.293 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:21.293 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:21.293 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.293 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:21.293 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:37:21.293 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 10:37:21.294 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:21.294 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:21.294 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:21.294 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.294 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:21.294 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181520552434(String)
2025-07-04 10:37:21.294 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:21.294 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.294 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:21.294 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:37:21.295 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:21.295 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:21.296 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 10:37:21.296 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:21.296 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.296 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:21.296 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.296 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:37:21.296 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:21.297 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:21.297 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 10:37:21.297 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:21.297 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.297 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:21.297 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181355860200(String)
2025-07-04 10:37:21.298 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:21.299 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:21.299 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.299 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:21.299 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:37:21.300 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:21.300 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:21.300 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.300 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:21.300 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181206573250(String)
2025-07-04 10:37:21.301 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:21.301 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:21.302 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.302 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:21.302 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:37:21.302 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:21.303 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:21.303 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.303 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:21.303 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703175346171678(String)
2025-07-04 10:37:21.304 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:21.304 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:21.304 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:21.304 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.304 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:21.304 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:37:21.305 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:21.305 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 10:37:21.305 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.305 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:21.306 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 10:37:21.307 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:21.321 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:21.321 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.321 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:21.321 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:21.322 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 10:37:21.322 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:21.322 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.322 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:21.322 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 10:37:21.323 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:21.355 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:21.355 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:21.355 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.355 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.355 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:21.355 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:21.355 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:21.355 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:21.355 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:37:21.355 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:37:21.355 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:21.355 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:21.355 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.355 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.355 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:21.355 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:21.355 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 10:37:21.355 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 10:37:21.356 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:21.356 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:21.356 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:21.356 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:21.356 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.356 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:21.356 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.356 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:21.356 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:37:21.356 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:37:21.357 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:21.357 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:21.358 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:21.358 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-07-04 10:37:21.358 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.358 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.358 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:21.358 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:21.358 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-07-04 10:37:21.358 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 10:37:21.358 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:21.358 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:21.369 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:21.369 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.369 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:21.369 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:21.370 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-07-04 10:37:21.370 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:21.370 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.370 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:21.370 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 10:37:21.371 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:21.379 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:21.379 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.379 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:21.380 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:21.381 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:37:21.381 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:21.381 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.381 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:21.381 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 10:37:21.382 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:21.382 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:21.382 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.382 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:21.382 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:21.383 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:21.383 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:21.383 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.383 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:21.383 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 10:37:21.383 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:21.391 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:21.391 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.391 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:21.391 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:21.392 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:37:21.392 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:21.392 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.392 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:21.392 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703181942108219(String)
2025-07-04 10:37:21.393 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:21.393 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:21.393 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.393 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:21.393 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:37:21.394 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:21.395 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:21.395 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.395 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:21.395 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 10:37:21.395 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:21.403 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:21.403 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.403 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:21.404 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:21.404 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:37:21.405 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:21.405 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.405 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:21.405 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 10:37:21.405 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:21.405 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:21.405 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.405 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:21.405 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:21.406 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:21.406 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:21.406 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.406 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:21.406 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 10:37:21.407 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:21.407 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:21.407 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.407 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:21.407 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:21.408 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:37:21.409 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:21.409 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.409 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:21.409 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: SPIKE1751381288511772(String)
2025-07-04 10:37:21.410 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:21.410 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:21.410 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.410 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:21.410 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:21.411 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:21.411 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:21.411 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.411 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:21.411 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 10:37:21.411 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:21.424 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:21.424 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.424 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:21.424 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:21.425 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:37:21.425 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:21.425 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.425 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:21.425 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 10:37:21.426 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:21.426 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:21.426 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.426 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:21.426 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:37:21.427 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:21.427 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:21.427 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.427 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:21.427 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:21.427 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:21.427 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.427 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:21.427 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 10:37:21.427 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:21.427 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:37:21.428 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:21.428 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.428 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:21.428 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 10:37:21.429 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:21.429 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:21.429 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.429 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:21.429 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:21.429 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:21.430 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:21.430 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.430 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:21.430 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean)
2025-07-04 10:37:21.430 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:21.447 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:37:21.447 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.447 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:37:21.447 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean), 0(Integer), 1(Integer)
2025-07-04 10:37:21.448 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:37:21.448 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:37:21.448 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.448 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:37:21.448 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250703091609136788(String)
2025-07-04 10:37:21.449 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:37:21.449 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:21.449 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.449 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:21.449 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:37:21.450 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:21.450 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:37:21.450 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.450 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:37:21.450 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已取消(String), false(Boolean)
2025-07-04 10:37:21.451 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:37:21.815 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,put,num,addTime,account from book join cart on book.id = cart.id where account=? limit ?,?
2025-07-04 10:37:21.815 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.815 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,put,num,addTime,account
         from book join cart on book.id = cart.id
         where account=? limit ?,? ::: DataSources: slave
2025-07-04 10:37:21.816 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==> Parameters: 56464ff@456.com(String), 0(Integer), 10(Integer)
2025-07-04 10:37:21.818 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - <==      Total: 1
2025-07-04 10:37:21.818 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:21.818 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:21.818 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:21.818 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:21.819 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:23.390 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==>  Preparing: select `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt` from topic where `status`=1 order by `rank` asc limit ?,?
2025-07-04 10:37:23.390 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.390 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select  
        `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt`
      from topic where `status`=1 order by `rank` asc limit ?,? ::: DataSources: slave
2025-07-04 10:37:23.390 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-07-04 10:37:23.393 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - <==      Total: 1
2025-07-04 10:37:23.394 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==>  Preparing: select count(*) from topic where `status`=1
2025-07-04 10:37:23.394 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.394 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from topic where `status`=1 ::: DataSources: slave
2025-07-04 10:37:23.394 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 10:37:23.394 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-07-04 10:37:23.394 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-07-04 10:37:23.394 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.394 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.394 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-07-04 10:37:23.394 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 10:37:23.394 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.394 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-07-04 10:37:23.394 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-07-04 10:37:23.394 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==> Parameters: 
2025-07-04 10:37:23.394 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.394 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 10:37:23.394 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-07-04 10:37:23.395 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - <==      Total: 1
2025-07-04 10:37:23.395 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-07-04 10:37:23.395 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:23.395 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.395 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:23.395 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 10:37:23.396 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 10:37:23.397 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 10:37:23.397 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:37:23.397 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.397 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:37:23.397 [http-nio-8080-exec-2] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-07-04 10:37:23.397 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.397 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-07-04 10:37:23.398 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 10:37:23.399 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 5
2025-07-04 10:37:23.399 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 10:37:23.400 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:23.400 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.400 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:23.400 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 4
2025-07-04 10:37:23.400 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:23.400 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.400 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:23.400 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:23.401 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:23.401 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.401 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:23.401 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 10:37:23.401 [http-nio-8080-exec-2] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-07-04 10:37:23.402 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 10:37:23.402 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:23.402 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:37:23.402 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.402 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:37:23.403 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:23.403 [http-nio-8080-exec-2] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 6
2025-07-04 10:37:23.403 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:23.403 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.403 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:23.403 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:23.403 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:37:23.404 [http-nio-8080-exec-4] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==>  Preparing: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC
2025-07-04 10:37:23.404 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.404 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC ::: DataSources: slave
2025-07-04 10:37:23.404 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:23.404 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:23.404 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:23.404 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:23.404 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:37:23.404 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.404 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:23.404 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 10:37:23.404 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.404 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:23.404 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 10:37:23.404 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.404 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 10:37:23.405 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:23.405 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 10:37:23.405 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:23.405 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:37:23.405 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.405 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.405 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:37:23.405 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:37:23.405 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:23.405 [http-nio-8080-exec-4] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==> Parameters: 
2025-07-04 10:37:23.405 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:23.406 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:23.406 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:37:23.406 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.406 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:23.406 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:23.407 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:23.407 [http-nio-8080-exec-4] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - <==      Total: 1
2025-07-04 10:37:23.407 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.407 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:23.407 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 10:37:23.408 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 6(Long)
2025-07-04 10:37:23.409 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 10:37:23.409 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:37:23.409 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.409 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:37:23.410 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:37:23.410 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 10:37:23.410 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:23.411 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:23.411 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:37:23.411 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 10:37:23.411 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.411 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:23.411 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 10:37:23.411 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.411 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 10:37:23.411 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:23.412 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:23.412 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:23.412 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.412 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:23.412 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:23.412 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.412 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 10:37:23.412 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:23.412 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 10:37:23.412 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:23.412 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 10:37:23.412 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:23.412 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.412 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:23.412 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:37:23.413 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 2(Integer)
2025-07-04 10:37:23.413 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:23.413 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:23.413 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 10:37:23.414 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:23.414 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:37:23.414 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.414 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:23.414 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:23.414 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:37:23.414 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:23.416 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:23.417 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 10:37:23.418 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.418 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 10:37:23.418 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 5(Long)
2025-07-04 10:37:23.420 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 0
2025-07-04 10:37:23.420 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 10:37:23.421 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.421 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 10:37:23.421 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 4(Long)
2025-07-04 10:37:23.422 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 10:37:23.422 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 10:37:23.422 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.422 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 10:37:23.423 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-07-04 10:37:23.424 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 10:37:23.424 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:23.424 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:23.424 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:23.424 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:23.425 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:32.005 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 10:37:32.005 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 10:37:32.005 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:32.005 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 10:37:32.005 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 10:37:32.006 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 10:37:32.006 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 10:37:32.007 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 10:37:32.007 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:32.007 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 10:37:32.007 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 10:37:32.008 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 10:37:32.008 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 10:37:32.262 [http-nio-8080-exec-9] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-07-04 10:37:32.262 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:32.262 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-07-04 10:37:32.262 [http-nio-8080-exec-9] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-07-04 10:37:32.263 [http-nio-8080-exec-9] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 6
2025-07-04 10:37:32.264 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 10:37:32.264 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:32.264 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 10:37:32.264 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 6(Long)
2025-07-04 10:37:32.265 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 10:37:32.265 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 10:37:32.265 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:32.265 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 10:37:32.265 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 2(Integer)
2025-07-04 10:37:32.265 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 10:37:32.266 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:32.266 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:32.266 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:32.266 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:37:32.266 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:32.266 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 10:37:32.266 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:32.266 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 10:37:32.266 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 5(Long)
2025-07-04 10:37:32.267 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 0
2025-07-04 10:37:32.267 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 10:37:32.267 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:32.267 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 10:37:32.267 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 4(Long)
2025-07-04 10:37:32.267 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 10:37:32.268 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 10:37:32.268 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:32.268 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 10:37:32.268 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-07-04 10:37:32.268 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 10:37:32.268 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:32.268 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:32.268 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:32.268 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:32.269 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:33.797 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-07-04 10:37:33.797 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.797 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-07-04 10:37:33.797 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-07-04 10:37:33.797 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.797 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-07-04 10:37:33.804 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 10:37:33.804 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==>  Preparing: select `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt` from topic where `status`=1 order by `rank` asc limit ?,?
2025-07-04 10:37:33.804 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 10:37:33.804 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.804 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select  
        `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt`
      from topic where `status`=1 order by `rank` asc limit ?,? ::: DataSources: slave
2025-07-04 10:37:33.804 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 10:37:33.804 [http-nio-8080-exec-3] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-07-04 10:37:33.804 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-07-04 10:37:33.804 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.804 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-07-04 10:37:33.804 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.804 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.804 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-07-04 10:37:33.804 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 10:37:33.804 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-07-04 10:37:33.806 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-07-04 10:37:33.806 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:33.806 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.806 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:33.806 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 5
2025-07-04 10:37:33.806 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - <==      Total: 1
2025-07-04 10:37:33.806 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 10:37:33.806 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:33.806 [http-nio-8080-exec-3] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-07-04 10:37:33.806 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==>  Preparing: select count(*) from topic where `status`=1
2025-07-04 10:37:33.806 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.806 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:33.806 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.806 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from topic where `status`=1 ::: DataSources: slave
2025-07-04 10:37:33.807 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 10:37:33.808 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 4
2025-07-04 10:37:33.808 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:33.808 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.808 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:33.808 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 10:37:33.809 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:33.809 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:33.809 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.809 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:33.809 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:33.809 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 10:37:33.809 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:37:33.809 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.809 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:37:33.809 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==> Parameters: 
2025-07-04 10:37:33.810 [http-nio-8080-exec-3] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 6
2025-07-04 10:37:33.810 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - <==      Total: 1
2025-07-04 10:37:33.810 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:33.810 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 10:37:33.810 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.810 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 10:37:33.810 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:37:33.810 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:33.810 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:33.810 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.810 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 10:37:33.810 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:33.811 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:33.811 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:33.811 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:37:33.811 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 6(Long)
2025-07-04 10:37:33.811 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:33.811 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.811 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:33.811 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:33.811 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.811 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:33.811 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 10:37:33.811 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:37:33.811 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:37:33.811 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.811 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:37:33.812 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:33.812 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:33.812 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:37:33.812 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:33.812 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 10:37:33.812 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.812 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:33.812 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:33.812 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.812 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:33.812 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 10:37:33.813 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 10:37:33.813 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:37:33.813 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.813 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 10:37:33.813 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:33.813 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:37:33.813 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:33.813 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.813 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:33.813 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 10:37:33.813 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:37:33.813 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.813 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:37:33.813 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:33.813 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:33.813 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.813 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 10:37:33.813 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:33.813 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 2(Integer)
2025-07-04 10:37:33.814 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:33.814 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:33.814 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.814 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:33.814 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:33.814 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:33.814 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 10:37:33.814 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.814 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 10:37:33.814 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 10:37:33.814 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:33.814 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.814 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:33.814 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:33.814 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:33.815 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:33.815 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:33.815 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 10:37:33.815 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:37:33.815 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:37:33.815 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:37:33.815 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:33.815 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.815 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.815 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:37:33.815 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:33.815 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:37:33.816 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:33.816 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:33.816 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:33.816 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 10:37:33.816 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 10:37:33.816 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.816 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 10:37:33.817 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 5(Long)
2025-07-04 10:37:33.817 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 10:37:33.819 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 0
2025-07-04 10:37:33.819 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 10:37:33.819 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.819 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 10:37:33.819 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 4(Long)
2025-07-04 10:37:33.821 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 10:37:33.821 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 10:37:33.821 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.821 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 10:37:33.821 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-07-04 10:37:33.822 [http-nio-8080-exec-2] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==>  Preparing: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC
2025-07-04 10:37:33.822 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.822 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC ::: DataSources: slave
2025-07-04 10:37:33.823 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 10:37:33.823 [http-nio-8080-exec-2] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==> Parameters: 
2025-07-04 10:37:33.823 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:33.823 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:33.823 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:33.823 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:33.824 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:33.824 [http-nio-8080-exec-2] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - <==      Total: 1
2025-07-04 10:37:42.354 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,put,num,addTime,account from book join cart on book.id = cart.id where account=? limit ?,?
2025-07-04 10:37:42.354 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:42.354 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,put,num,addTime,account
         from book join cart on book.id = cart.id
         where account=? limit ?,? ::: DataSources: slave
2025-07-04 10:37:42.354 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==> Parameters: 56464ff@456.com(String), 0(Integer), 10(Integer)
2025-07-04 10:37:42.357 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - <==      Total: 1
2025-07-04 10:37:42.357 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:42.357 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:42.357 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:42.357 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:42.359 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:44.057 [http-nio-8080-exec-10] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-07-04 10:37:44.057 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-07-04 10:37:44.057 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.057 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 10:37:44.057 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-07-04 10:37:44.057 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.057 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-07-04 10:37:44.057 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.057 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 10:37:44.057 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==>  Preparing: select `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt` from topic where `status`=1 order by `rank` asc limit ?,?
2025-07-04 10:37:44.057 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-07-04 10:37:44.057 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-07-04 10:37:44.057 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.057 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.057 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 10:37:44.057 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-07-04 10:37:44.057 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.057 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 10:37:44.057 [http-nio-8080-exec-10] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-07-04 10:37:44.057 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select  
        `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt`
      from topic where `status`=1 order by `rank` asc limit ?,? ::: DataSources: slave
2025-07-04 10:37:44.057 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-07-04 10:37:44.058 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 10:37:44.058 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 10:37:44.059 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-07-04 10:37:44.059 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:37:44.059 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.059 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:37:44.059 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-07-04 10:37:44.059 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:44.059 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 10:37:44.059 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.059 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:44.059 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 4
2025-07-04 10:37:44.059 [http-nio-8080-exec-10] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 6
2025-07-04 10:37:44.060 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 10:37:44.060 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.060 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 10:37:44.060 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:44.060 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 10:37:44.060 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.060 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:44.060 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 10:37:44.060 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - <==      Total: 1
2025-07-04 10:37:44.060 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==>  Preparing: select count(*) from topic where `status`=1
2025-07-04 10:37:44.060 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.060 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from topic where `status`=1 ::: DataSources: slave
2025-07-04 10:37:44.060 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:44.060 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:44.060 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.060 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 6(Long)
2025-07-04 10:37:44.060 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:44.061 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 10:37:44.061 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:44.061 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:37:44.061 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.061 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:37:44.061 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 5
2025-07-04 10:37:44.061 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==> Parameters: 
2025-07-04 10:37:44.061 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:44.061 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.061 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:44.061 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:37:44.061 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:44.061 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:44.061 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.062 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:44.061 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 10:37:44.062 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:44.062 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:44.062 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:44.062 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.062 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:44.062 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 10:37:44.062 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 10:37:44.062 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.062 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 10:37:44.062 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:37:44.062 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 10:37:44.062 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:37:44.062 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.062 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:37:44.062 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:37:44.063 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:44.063 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - <==      Total: 1
2025-07-04 10:37:44.063 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:44.063 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:44.063 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:44.063 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.063 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.063 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:44.063 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:44.063 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 10:37:44.063 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:37:44.063 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 2(Integer)
2025-07-04 10:37:44.063 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:44.063 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 10:37:44.063 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:44.063 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.063 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:44.063 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:44.064 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 10:37:44.064 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:44.064 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.064 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:44.064 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 10:37:44.064 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:37:44.064 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:44.064 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:37:44.064 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:37:44.064 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.064 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:37:44.064 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:44.064 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:44.064 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.064 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:44.064 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 10:37:44.064 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.064 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:44.065 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:37:44.065 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:44.065 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:44.065 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:37:44.065 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:44.065 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:44.065 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.065 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:44.065 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.065 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:44.065 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:44.065 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:44.065 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 10:37:44.065 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 10:37:44.066 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:44.066 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:44.066 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 10:37:44.066 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.066 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 10:37:44.066 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 5(Long)
2025-07-04 10:37:44.067 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:44.067 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:44.067 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.067 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:44.067 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:37:44.068 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:44.068 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 0
2025-07-04 10:37:44.068 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 10:37:44.068 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.068 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 10:37:44.068 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 4(Long)
2025-07-04 10:37:44.070 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 10:37:44.070 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 10:37:44.070 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.070 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 10:37:44.070 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-07-04 10:37:44.071 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 10:37:44.071 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:37:44.071 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.071 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:37:44.071 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:37:44.071 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:37:44.074 [http-nio-8080-exec-6] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==>  Preparing: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC
2025-07-04 10:37:44.074 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:37:44.074 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC ::: DataSources: slave
2025-07-04 10:37:44.074 [http-nio-8080-exec-6] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==> Parameters: 
2025-07-04 10:37:44.075 [http-nio-8080-exec-6] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - <==      Total: 1
2025-07-04 10:42:06.687 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-07-04 10:42:06.687 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==>  Preparing: select `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt` from topic where `status`=1 order by `rank` asc limit ?,?
2025-07-04 10:42:06.687 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.687 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.687 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-07-04 10:42:06.687 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select  
        `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt`
      from topic where `status`=1 order by `rank` asc limit ?,? ::: DataSources: slave
2025-07-04 10:42:06.689 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 10:42:06.689 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-07-04 10:42:06.690 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - <==      Total: 1
2025-07-04 10:42:06.690 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-07-04 10:42:06.690 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.690 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==>  Preparing: select count(*) from topic where `status`=1
2025-07-04 10:42:06.690 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-07-04 10:42:06.690 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.690 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from topic where `status`=1 ::: DataSources: slave
2025-07-04 10:42:06.690 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.690 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-07-04 10:42:06.690 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==> Parameters: 
2025-07-04 10:42:06.690 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-07-04 10:42:06.691 [http-nio-8080-exec-9] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-07-04 10:42:06.691 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.691 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-07-04 10:42:06.691 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - <==      Total: 1
2025-07-04 10:42:06.691 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 10:42:06.691 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 10:42:06.691 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 10:42:06.691 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.691 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 10:42:06.692 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-07-04 10:42:06.692 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:42:06.692 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.692 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:42:06.692 [http-nio-8080-exec-9] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-07-04 10:42:06.693 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 4
2025-07-04 10:42:06.693 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 5
2025-07-04 10:42:06.693 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:42:06.693 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:42:06.693 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 10:42:06.693 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.693 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.693 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:42:06.693 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:42:06.693 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 10:42:06.693 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:42:06.694 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:42:06.694 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 10:42:06.694 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:42:06.694 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.694 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:42:06.694 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:42:06.694 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.694 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:42:06.694 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:42:06.694 [http-nio-8080-exec-9] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 6
2025-07-04 10:42:06.694 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 10:42:06.694 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.694 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 10:42:06.694 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:42:06.695 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:42:06.695 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:42:06.695 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:42:06.695 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:42:06.695 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 10:42:06.695 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.695 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.695 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 6(Long)
2025-07-04 10:42:06.695 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:42:06.695 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:42:06.696 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 10:42:06.696 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:42:06.696 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:42:06.696 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.696 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:42:06.696 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:42:06.696 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:42:06.696 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.696 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:42:06.696 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:42:06.696 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 10:42:06.696 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 10:42:06.696 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 10:42:06.696 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.696 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 10:42:06.697 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:42:06.697 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:42:06.697 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 10:42:06.697 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:42:06.697 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:42:06.697 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:42:06.697 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.697 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:42:06.697 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:42:06.697 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.697 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.697 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:42:06.697 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 10:42:06.697 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:42:06.697 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 2(Integer)
2025-07-04 10:42:06.698 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:42:06.698 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:42:06.698 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 10:42:06.698 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:42:06.698 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:42:06.698 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:42:06.698 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:42:06.698 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 10:42:06.698 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.698 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.698 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.698 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:42:06.698 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:42:06.698 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:42:06.698 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:42:06.699 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:42:06.699 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 10:42:06.699 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:42:06.699 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:42:06.699 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.699 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:42:06.699 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:42:06.699 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:42:06.699 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 10:42:06.699 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 10:42:06.699 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.699 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 10:42:06.699 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:42:06.699 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.699 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:42:06.700 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:42:06.700 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:42:06.700 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:42:06.700 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:42:06.700 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:42:06.700 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.700 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.700 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 10:42:06.700 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 5(Long)
2025-07-04 10:42:06.700 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:42:06.700 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:42:06.700 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:42:06.701 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 0
2025-07-04 10:42:06.701 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:42:06.701 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 10:42:06.701 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:42:06.702 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 10:42:06.702 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.702 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 10:42:06.702 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 4(Long)
2025-07-04 10:42:06.703 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:42:06.704 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 10:42:06.704 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 10:42:06.704 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.704 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 10:42:06.705 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-07-04 10:42:06.706 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 10:42:06.707 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:42:06.707 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.707 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:42:06.707 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:42:06.708 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:42:06.709 [http-nio-8080-exec-10] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==>  Preparing: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC
2025-07-04 10:42:06.709 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:06.709 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC ::: DataSources: slave
2025-07-04 10:42:06.709 [http-nio-8080-exec-10] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==> Parameters: 
2025-07-04 10:42:06.710 [http-nio-8080-exec-10] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - <==      Total: 1
2025-07-04 10:42:15.874 [http-nio-8080-exec-4] INFO  com.huang.store.controller.OrderController - 获取用户订单统计: userAccount=56464ff@456.com
2025-07-04 10:42:15.874 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 10:42:15.874 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:15.874 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 10:42:15.874 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:42:15.874 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:15.874 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:42:15.874 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:42:15.875 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 待付款(String), false(Boolean)
2025-07-04 10:42:15.878 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:42:15.878 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 10:42:15.878 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:42:15.878 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:15.878 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:42:15.879 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已付款(String), false(Boolean)
2025-07-04 10:42:15.880 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:42:15.881 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ?
2025-07-04 10:42:15.881 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:15.881 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-07-04 10:42:15.881 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-07-04 10:42:15.882 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-07-04 10:42:15.882 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-07-04 10:42:15.882 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:15.882 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-07-04 10:42:15.882 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已完成(String), false(Boolean), 0(Integer), 1000(Integer)
2025-07-04 10:42:15.885 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-07-04 10:42:15.885 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-07-04 10:42:15.885 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:15.885 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-07-04 10:42:15.886 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250701224811070894(String)
2025-07-04 10:42:15.887 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-07-04 10:42:15.888 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-07-04 10:42:15.888 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:15.888 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-07-04 10:42:15.888 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-07-04 10:42:15.888 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-07-04 10:42:15.889 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==>  Preparing: SELECT COUNT(*) FROM book_comment WHERE userId = ?
2025-07-04 10:42:15.889 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:15.889 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT COUNT(*) FROM book_comment WHERE userId = ? ::: DataSources: slave
2025-07-04 10:42:15.889 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - ==> Parameters: 5(Integer)
2025-07-04 10:42:15.890 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.CommentMapper.getCommentCountByUser - <==      Total: 1
2025-07-04 10:42:16.325 [http-nio-8080-exec-5] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==>  Preparing: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC
2025-07-04 10:42:16.325 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:16.325 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC ::: DataSources: slave
2025-07-04 10:42:16.325 [http-nio-8080-exec-5] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==> Parameters: 
2025-07-04 10:42:16.326 [http-nio-8080-exec-5] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - <==      Total: 1
2025-07-04 10:42:32.005 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 10:42:32.005 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 10:42:32.005 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:32.005 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 10:42:32.005 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 10:42:32.006 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 10:42:32.006 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 10:42:32.006 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 10:42:32.006 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:42:32.006 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 10:42:32.006 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 10:42:32.007 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 10:42:32.007 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 10:46:45.976 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==>  Preparing: select `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt` from topic where `status`=1 order by `rank` asc limit ?,?
2025-07-04 10:46:45.976 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.976 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select  
        `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt`
      from topic where `status`=1 order by `rank` asc limit ?,? ::: DataSources: slave
2025-07-04 10:46:45.977 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-07-04 10:46:45.977 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.977 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-07-04 10:46:45.977 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-07-04 10:46:45.977 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.977 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-07-04 10:46:45.977 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 10:46:45.977 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.977 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 10:46:45.977 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-07-04 10:46:45.978 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.978 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-07-04 10:46:45.977 [http-nio-8080-exec-2] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-07-04 10:46:45.978 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.978 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-07-04 10:46:45.978 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 10:46:45.978 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-07-04 10:46:45.979 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 10:46:45.980 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-07-04 10:46:45.980 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 10:46:45.980 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:45.980 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.980 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:45.981 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - <==      Total: 1
2025-07-04 10:46:45.981 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==>  Preparing: select count(*) from topic where `status`=1
2025-07-04 10:46:45.981 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.981 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from topic where `status`=1 ::: DataSources: slave
2025-07-04 10:46:45.981 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 10:46:45.981 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 10:46:45.981 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:46:45.981 [http-nio-8080-exec-2] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-07-04 10:46:45.981 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.981 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:46:45.983 [http-nio-8080-exec-2] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 6
2025-07-04 10:46:45.983 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 10:46:45.983 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 10:46:45.983 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.983 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 10:46:45.983 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 5
2025-07-04 10:46:45.984 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:45.984 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 4
2025-07-04 10:46:45.984 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.984 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:45.984 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:45.984 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:45.984 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.984 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:45.984 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==> Parameters: 
2025-07-04 10:46:45.984 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 10:46:45.984 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:45.984 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.984 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:45.984 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 6(Long)
2025-07-04 10:46:45.985 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - <==      Total: 1
2025-07-04 10:46:45.985 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:46:45.986 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 10:46:45.986 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 10:46:45.986 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:46:45.986 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.986 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 10:46:45.986 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 10:46:45.986 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:46:45.986 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.986 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:46:45.986 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:45.986 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:45.986 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.986 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:45.986 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 2(Integer)
2025-07-04 10:46:45.986 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:46:45.986 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:45.987 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:45.987 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 10:46:45.987 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.987 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:45.987 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 10:46:45.987 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:45.987 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:46:45.987 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.987 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:45.987 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 10:46:45.987 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:46:45.987 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.987 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:46:45.987 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:46:45.988 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:45.988 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:45.988 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:45.988 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:45.988 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:46:45.988 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:45.988 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.988 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.988 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:45.988 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:45.988 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:45.988 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:46:45.988 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.988 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:45.988 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 10:46:45.989 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:45.989 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:45.989 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 10:46:45.989 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:46:45.989 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:45.989 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 10:46:45.989 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.989 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.989 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:45.989 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 10:46:45.990 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 10:46:45.990 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:45.990 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:45.990 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:45.990 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:45.990 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.990 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.990 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:46:45.990 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:45.990 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:45.990 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.990 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:46:45.990 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:46:45.990 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 10:46:45.990 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 5(Long)
2025-07-04 10:46:45.991 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:45.991 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:45.991 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 0
2025-07-04 10:46:45.991 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:45.991 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 10:46:45.991 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.991 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:46:45.991 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 10:46:45.991 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 10:46:45.991 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.991 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:45.991 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:45.991 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 4(Long)
2025-07-04 10:46:45.991 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.991 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:45.992 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:45.992 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 10:46:45.992 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:46:45.992 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:46:45.992 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 10:46:45.992 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 10:46:45.992 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.992 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 10:46:45.992 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-07-04 10:46:45.993 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:45.993 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:45.993 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 10:46:45.993 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:45.993 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.993 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:45.993 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:46:45.994 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:45.997 [http-nio-8080-exec-3] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==>  Preparing: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC
2025-07-04 10:46:45.997 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:45.997 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC ::: DataSources: slave
2025-07-04 10:46:45.998 [http-nio-8080-exec-3] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==> Parameters: 
2025-07-04 10:46:45.999 [http-nio-8080-exec-3] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - <==      Total: 1
2025-07-04 10:46:47.252 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.AboutMapper.getAbout - ==>  Preparing: SELECT * FROM about LIMIT 1
2025-07-04 10:46:47.252 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:47.252 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM about LIMIT 1 ::: DataSources: slave
2025-07-04 10:46:47.253 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.AboutMapper.getAbout - ==> Parameters: 
2025-07-04 10:46:47.255 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.AboutMapper.getAbout - <==      Total: 1
2025-07-04 10:46:50.383 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.AboutMapper.getAbout - ==>  Preparing: SELECT * FROM about LIMIT 1
2025-07-04 10:46:50.383 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:50.383 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT * FROM about LIMIT 1 ::: DataSources: slave
2025-07-04 10:46:50.383 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.AboutMapper.getAbout - ==> Parameters: 
2025-07-04 10:46:50.384 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.AboutMapper.getAbout - <==      Total: 1
2025-07-04 10:46:53.247 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.AboutMapper.getAbout - ==>  Preparing: SELECT * FROM about LIMIT 1
2025-07-04 10:46:53.247 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:53.247 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT * FROM about LIMIT 1 ::: DataSources: slave
2025-07-04 10:46:53.247 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.AboutMapper.getAbout - ==> Parameters: 
2025-07-04 10:46:53.248 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.AboutMapper.getAbout - <==      Total: 1
2025-07-04 10:46:56.215 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-07-04 10:46:56.215 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.215 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-07-04 10:46:56.215 [http-nio-8080-exec-8] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-07-04 10:46:56.216 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-07-04 10:46:56.216 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.216 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.216 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==>  Preparing: select `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt` from topic where `status`=1 order by `rank` asc limit ?,?
2025-07-04 10:46:56.216 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-07-04 10:46:56.216 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-07-04 10:46:56.216 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.216 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.216 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-07-04 10:46:56.215 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-07-04 10:46:56.216 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.216 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-07-04 10:46:56.216 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-07-04 10:46:56.216 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 10:46:56.216 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select  
        `id`,`title`,`subTitle`,`cover`,`rank`,`status`,`viewCnt`,`favCnt`,`orderCnt`,`createdAt`,`updatedAt`
      from topic where `status`=1 order by `rank` asc limit ?,? ::: DataSources: slave
2025-07-04 10:46:56.216 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 0(Integer), 14(Integer)
2025-07-04 10:46:56.216 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-07-04 10:46:56.216 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-07-04 10:46:56.217 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-07-04 10:46:56.217 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 4
2025-07-04 10:46:56.217 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:46:56.217 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:56.217 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.217 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.217 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:46:56.217 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:56.217 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 5
2025-07-04 10:46:56.217 [http-nio-8080-exec-8] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-07-04 10:46:56.217 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-07-04 10:46:56.217 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:56.217 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.217 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:56.217 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-07-04 10:46:56.218 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-07-04 10:46:56.218 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:56.218 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.218 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:56.218 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-07-04 10:46:56.218 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:46:56.218 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:46:56.218 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:46:56.218 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.218 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:46:56.218 [http-nio-8080-exec-8] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 6
2025-07-04 10:46:56.218 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 10:46:56.218 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 10:46:56.218 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.218 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 10:46:56.219 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:56.219 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:56.219 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:56.219 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicList - <==      Total: 1
2025-07-04 10:46:56.219 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:56.219 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:56.219 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.219 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:56.219 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:56.219 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.219 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 6(Long)
2025-07-04 10:46:56.219 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:56.219 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.219 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==>  Preparing: select count(*) from topic where `status`=1
2025-07-04 10:46:56.219 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:46:56.219 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:56.219 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:46:56.219 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-07-04 10:46:56.219 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.219 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from topic where `status`=1 ::: DataSources: slave
2025-07-04 10:46:56.220 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:56.221 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:56.221 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:56.221 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.221 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:46:56.221 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:56.221 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 10:46:56.221 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.221 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:56.221 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:56.221 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - ==> Parameters: 
2025-07-04 10:46:56.221 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 10:46:56.221 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.221 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:46:56.221 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 10:46:56.222 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 10:46:56.222 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:46:56.222 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.222 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:46:56.222 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 10:46:56.222 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:56.222 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:56.222 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.TopicV2Mapper.getPublicTopicCount - <==      Total: 1
2025-07-04 10:46:56.222 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:56.222 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:56.222 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-07-04 10:46:56.222 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.222 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 2(Integer)
2025-07-04 10:46:56.222 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.222 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:56.222 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:56.222 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:46:56.222 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:56.223 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:56.223 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-07-04 10:46:56.223 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.223 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:56.223 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 10:46:56.223 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:56.223 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-07-04 10:46:56.223 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:46:56.223 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.223 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-07-04 10:46:56.223 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-07-04 10:46:56.223 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 10:46:56.223 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:56.223 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:56.223 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.223 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:56.223 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-07-04 10:46:56.223 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.224 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:56.224 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:56.224 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:56.224 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:46:56.224 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-07-04 10:46:56.224 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:56.224 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.224 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:56.224 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:56.224 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-07-04 10:46:56.224 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 10:46:56.224 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.224 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 10:46:56.225 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 5(Long)
2025-07-04 10:46:56.225 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:56.225 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:56.225 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:56.225 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.225 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:56.225 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-07-04 10:46:56.226 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 0
2025-07-04 10:46:56.226 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-07-04 10:46:56.226 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.226 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-07-04 10:46:56.226 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:56.226 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 4(Long)
2025-07-04 10:46:56.228 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 1
2025-07-04 10:46:56.228 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ?
2025-07-04 10:46:56.228 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.228 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-07-04 10:46:56.229 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-07-04 10:46:56.230 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-07-04 10:46:56.230 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-07-04 10:46:56.230 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.230 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-07-04 10:46:56.230 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-07-04 10:46:56.231 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-07-04 10:46:56.238 [http-nio-8080-exec-3] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==>  Preparing: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC
2025-07-04 10:46:56.238 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:46:56.238 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT * FROM announcement WHERE enable = 1 ORDER BY publishTime DESC ::: DataSources: slave
2025-07-04 10:46:56.238 [http-nio-8080-exec-3] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - ==> Parameters: 
2025-07-04 10:46:56.239 [http-nio-8080-exec-3] DEBUG c.h.s.m.AnnouncementMapper.getEnabledAnnouncements - <==      Total: 1
2025-07-04 10:47:32.005 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 10:47:32.005 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 10:47:32.005 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:47:32.005 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 10:47:32.005 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 10:47:32.008 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 10:47:32.008 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 10:47:32.009 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 10:47:32.009 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:47:32.009 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 10:47:32.009 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 10:47:32.011 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 10:47:32.012 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 10:49:09.330 [Thread-15] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 10:49:09.330 [Thread-15] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 10:49:09.331 [Thread-15] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-07-04 10:49:09.338 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1477289934] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 10:49:09.338 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1477289934] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 10:49:09.338 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-853695929] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 10:49:09.339 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-853695929] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 10:49:09.340 [Thread-15] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 10:49:09.341 [Thread-15] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 10:49:09.350 [Thread-15] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closing ...
2025-07-04 10:49:09.351 [Thread-15] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closed
2025-07-04 10:49:09.351 [Thread-15] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closing ...
2025-07-04 10:49:09.352 [Thread-15] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closed
2025-07-04 10:49:09.454 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 10480 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 10:49:09.454 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 10:49:09.454 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 10:49:09.633 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 10:49:09.633 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 10:49:09.643 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-07-04 10:49:09.677 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$80340cd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 10:49:09.681 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 10:49:09.738 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 10:49:09.738 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 10:49:09.738 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 10:49:09.738 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 10:49:09.745 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 10:49:09.745 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 10:49:09.745 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 10:49:09.745 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 10:49:09.758 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 10:49:09.759 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 301 ms
2025-07-04 10:49:09.761 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 10:49:09.853 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-7} inited
2025-07-04 10:49:09.863 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-8} inited
2025-07-04 10:49:09.967 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 10:49:09.967 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 10:49:10.095 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 10:49:10.153 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5ad49c6b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5db9c97a, org.springframework.security.web.context.SecurityContextPersistenceFilter@65125d9c, org.springframework.security.web.header.HeaderWriterFilter@6ea99049, org.springframework.web.filter.CorsFilter@11680f43, org.springframework.security.web.authentication.logout.LogoutFilter@23d863e0, com.huang.store.security.JwtAuthenticationTokenFilter@461ffd41, com.huang.store.security.CustomAuthenticationFilter@767fe42c, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@140f4145, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5fe55d48, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7deca525, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4ecdb2a6, org.springframework.security.web.session.SessionManagementFilter@38f22cc7, org.springframework.security.web.access.ExceptionTranslationFilter@19046927, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@69125d13]
2025-07-04 10:49:10.244 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 10:49:10.253 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 10:49:10.255 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 10:49:10.257 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 10:49:10.258 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.829 seconds (JVM running for 3174.124)
2025-07-04 10:49:10.258 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 10:49:10.258 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:49:10.258 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 10:49:10.258 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 10:49:10.261 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 10:49:10.261 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 10:49:10.264 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 10:49:10.264 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:49:10.264 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 10:49:10.266 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 10:49:10.268 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 10:49:10.269 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 10:54:10.259 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 10:54:10.259 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 10:54:10.259 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:54:10.259 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 10:54:10.261 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 10:54:10.261 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 10:54:10.262 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 10:54:10.262 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 10:54:10.262 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:54:10.262 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 10:54:10.262 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 10:54:10.263 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 10:54:10.263 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 10:59:10.258 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 10:59:10.258 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 10:59:10.258 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:59:10.258 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 10:59:10.259 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 10:59:10.260 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 10:59:10.260 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 10:59:10.260 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 10:59:10.260 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 10:59:10.260 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 10:59:10.260 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 10:59:10.261 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 10:59:10.261 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 11:01:09.691 [Thread-21] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 11:01:09.691 [Thread-21] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 11:01:09.693 [Thread-21] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-992188835] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 11:01:09.693 [Thread-21] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-992188835] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 11:01:09.693 [Thread-21] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-217197973] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 11:01:09.693 [Thread-21] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-217197973] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 11:01:09.693 [Thread-21] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 11:01:09.695 [Thread-21] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 11:01:09.697 [Thread-21] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-7} closing ...
2025-07-04 11:01:09.698 [Thread-21] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-7} closed
2025-07-04 11:01:09.698 [Thread-21] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-8} closing ...
2025-07-04 11:01:09.699 [Thread-21] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-8} closed
2025-07-04 11:01:09.755 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 10480 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 11:01:09.755 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 11:01:09.755 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 11:01:09.927 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 11:01:09.927 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 11:01:09.939 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-07-04 11:01:09.986 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$80340cd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 11:01:09.991 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 11:01:10.045 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 11:01:10.045 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 11:01:10.045 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 11:01:10.045 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 11:01:10.046 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 11:01:10.046 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 11:01:10.046 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 11:01:10.046 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 11:01:10.060 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 11:01:10.060 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 300 ms
2025-07-04 11:01:10.062 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 11:01:10.147 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-9} inited
2025-07-04 11:01:10.160 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-10} inited
2025-07-04 11:01:10.245 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 11:01:10.245 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 11:01:10.368 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 11:01:10.423 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5d010ce3, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@e323689, org.springframework.security.web.context.SecurityContextPersistenceFilter@bff171e, org.springframework.security.web.header.HeaderWriterFilter@49831fe5, org.springframework.web.filter.CorsFilter@feaf18e, org.springframework.security.web.authentication.logout.LogoutFilter@1f55a2b2, com.huang.store.security.JwtAuthenticationTokenFilter@2c4252ce, com.huang.store.security.CustomAuthenticationFilter@5ab9d99a, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@39c2b602, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7776fcbe, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@265bb982, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2e6a6f3c, org.springframework.security.web.session.SessionManagementFilter@7f66b2dc, org.springframework.security.web.access.ExceptionTranslationFilter@40f0f50, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1aff6148]
2025-07-04 11:01:10.512 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 11:01:10.521 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 11:01:10.523 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 11:01:10.526 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 11:01:10.526 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.793 seconds (JVM running for 3894.393)
2025-07-04 11:01:10.526 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 11:01:10.526 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 11:01:10.526 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 11:01:10.527 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 11:01:10.529 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 11:01:10.529 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 11:01:10.531 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 11:01:10.531 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 11:01:10.531 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 11:01:10.531 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 11:01:10.533 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 11:01:10.533 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 11:01:57.273 [Thread-27] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 11:01:57.273 [Thread-27] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 11:01:57.276 [Thread-27] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-2068451273] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 11:01:57.276 [Thread-27] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-2068451273] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 11:01:57.276 [Thread-27] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1039187716] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 11:01:57.277 [Thread-27] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1039187716] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 11:01:57.277 [Thread-27] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 11:01:57.278 [Thread-27] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 11:01:57.281 [Thread-27] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-9} closing ...
2025-07-04 11:01:57.283 [Thread-27] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-9} closed
2025-07-04 11:01:57.283 [Thread-27] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-10} closing ...
2025-07-04 11:01:57.284 [Thread-27] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-10} closed
2025-07-04 11:01:57.421 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 10480 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 11:01:57.421 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 11:01:57.421 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 11:01:57.651 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 11:01:57.651 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 11:01:57.668 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16 ms. Found 0 Redis repository interfaces.
2025-07-04 11:01:57.768 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$80340cd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 11:01:57.772 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 11:01:57.808 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 11:01:57.808 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 11:01:57.808 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 11:01:57.808 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 11:01:57.809 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 11:01:57.809 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 11:01:57.809 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 11:01:57.809 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 11:01:57.819 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 11:01:57.819 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 396 ms
2025-07-04 11:01:57.821 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 11:01:57.884 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-11} inited
2025-07-04 11:01:57.897 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-12} inited
2025-07-04 11:01:57.998 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 11:01:57.998 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 11:01:58.114 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 11:01:58.167 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5d241efa, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7c8ac728, org.springframework.security.web.context.SecurityContextPersistenceFilter@708d44f7, org.springframework.security.web.header.HeaderWriterFilter@26f0821e, org.springframework.web.filter.CorsFilter@592a686, org.springframework.security.web.authentication.logout.LogoutFilter@753098a, com.huang.store.security.JwtAuthenticationTokenFilter@a777fa4, com.huang.store.security.CustomAuthenticationFilter@9e370f2, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@148c67d7, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@d5bf407, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2f1967c0, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5a59d5a2, org.springframework.security.web.session.SessionManagementFilter@6f7ba678, org.springframework.security.web.access.ExceptionTranslationFilter@5804b5f4, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4055a23c]
2025-07-04 11:01:58.252 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 11:01:58.258 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 11:01:58.270 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 11:01:58.272 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 11:01:58.272 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.892 seconds (JVM running for 3942.139)
2025-07-04 11:01:58.272 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 11:01:58.272 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 11:01:58.272 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 11:01:58.272 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 11:01:58.273 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 11:01:58.273 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 11:01:58.276 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 11:01:58.276 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 11:01:58.276 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 11:01:58.276 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 11:01:58.277 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 11:01:58.277 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 11:02:20.115 [Thread-33] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 11:02:20.115 [Thread-33] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 11:02:20.118 [Thread-33] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-793665528] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 11:02:20.118 [Thread-33] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-793665528] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 11:02:20.118 [Thread-33] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1212854220] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 11:02:20.118 [Thread-33] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1212854220] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 11:02:20.118 [Thread-33] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 11:02:20.119 [Thread-33] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 11:02:20.122 [Thread-33] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-11} closing ...
2025-07-04 11:02:20.123 [Thread-33] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-11} closed
2025-07-04 11:02:20.123 [Thread-33] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-12} closing ...
2025-07-04 11:02:20.123 [Thread-33] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-12} closed
2025-07-04 11:02:20.187 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 10480 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 11:02:20.187 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 11:02:20.187 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 11:02:20.314 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 11:02:20.315 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 11:02:20.324 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-07-04 11:02:20.357 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$80340cd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 11:02:20.360 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 11:02:20.403 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 11:02:20.403 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 11:02:20.403 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 11:02:20.403 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 11:02:20.404 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 11:02:20.404 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 11:02:20.404 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 11:02:20.404 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 11:02:20.416 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 11:02:20.416 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 228 ms
2025-07-04 11:02:20.417 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 11:02:20.484 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-13} inited
2025-07-04 11:02:20.496 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-14} inited
2025-07-04 11:02:20.599 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 11:02:20.599 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 11:02:20.715 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 11:02:20.769 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@58b9d5ee, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@78b49825, org.springframework.security.web.context.SecurityContextPersistenceFilter@4c04f939, org.springframework.security.web.header.HeaderWriterFilter@42552131, org.springframework.web.filter.CorsFilter@1429c778, org.springframework.security.web.authentication.logout.LogoutFilter@26203e5f, com.huang.store.security.JwtAuthenticationTokenFilter@6b8d66b4, com.huang.store.security.CustomAuthenticationFilter@575aefea, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@791225e6, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@44419a08, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2f767718, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@71717a2d, org.springframework.security.web.session.SessionManagementFilter@3dcbeb3a, org.springframework.security.web.access.ExceptionTranslationFilter@710786, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@36562156]
2025-07-04 11:02:20.855 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 11:02:20.862 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 11:02:20.864 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 11:02:20.867 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 11:02:20.867 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.705 seconds (JVM running for 3964.734)
2025-07-04 11:02:20.867 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 11:02:20.867 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 11:02:20.867 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 11:02:20.868 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 11:02:20.869 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 11:02:20.869 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 11:02:20.871 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 11:02:20.871 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 11:02:20.871 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 11:02:20.872 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 11:02:20.873 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 11:02:20.873 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 11:02:53.085 [Thread-39] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 11:02:53.085 [Thread-39] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 11:02:53.088 [Thread-39] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-2079293864] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 11:02:53.088 [Thread-39] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-2079293864] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 11:02:53.088 [Thread-39] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-482657607] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 11:02:53.090 [Thread-39] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-482657607] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 11:02:53.090 [Thread-39] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 11:02:53.090 [Thread-39] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 11:02:53.093 [Thread-39] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-13} closing ...
2025-07-04 11:02:53.094 [Thread-39] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-13} closed
2025-07-04 11:02:53.094 [Thread-39] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-14} closing ...
2025-07-04 11:02:53.095 [Thread-39] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-14} closed
2025-07-04 11:02:53.192 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 10480 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 11:02:53.192 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 11:02:53.192 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 11:02:53.488 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 11:02:53.488 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 11:02:53.506 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17 ms. Found 0 Redis repository interfaces.
2025-07-04 11:02:53.567 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$80340cd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 11:02:53.572 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 11:02:53.644 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 11:02:53.644 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 11:02:53.644 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 11:02:53.644 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 11:02:53.646 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 11:02:53.646 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 11:02:53.646 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 11:02:53.647 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 11:02:53.671 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 11:02:53.671 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 476 ms
2025-07-04 11:02:53.674 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 11:02:53.805 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-15} inited
2025-07-04 11:02:53.824 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-16} inited
2025-07-04 11:02:54.030 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 11:02:54.030 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 11:02:54.300 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 11:02:54.442 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@37e0802f, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5d8cdc34, org.springframework.security.web.context.SecurityContextPersistenceFilter@4a44a2f3, org.springframework.security.web.header.HeaderWriterFilter@5496f90e, org.springframework.web.filter.CorsFilter@5bd9039d, org.springframework.security.web.authentication.logout.LogoutFilter@7b446b3d, com.huang.store.security.JwtAuthenticationTokenFilter@402cc1fa, com.huang.store.security.CustomAuthenticationFilter@1f631949, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@29e57f07, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@18516c49, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7b6ca8c4, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@46a598fc, org.springframework.security.web.session.SessionManagementFilter@329bbc0e, org.springframework.security.web.access.ExceptionTranslationFilter@76448062, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4effe917]
2025-07-04 11:02:54.700 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 11:02:54.722 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 11:02:54.727 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 11:02:54.733 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 11:02:54.734 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 1.581 seconds (JVM running for 3998.601)
2025-07-04 11:02:54.734 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 11:02:54.734 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 11:02:54.734 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 11:02:54.735 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 11:02:54.737 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 11:02:54.737 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 11:02:54.744 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 11:02:54.744 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 11:02:54.744 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 11:02:54.745 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 11:02:54.747 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 11:02:54.748 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
2025-07-04 11:03:49.220 [Thread-45] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-07-04 11:03:49.220 [Thread-45] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-07-04 11:03:49.222 [Thread-45] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1704684203] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 11:03:49.222 [Thread-45] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1704684203] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 11:03:49.222 [Thread-45] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1709814609] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-07-04 11:03:49.222 [Thread-45] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1709814609] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-07-04 11:03:49.222 [Thread-45] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-07-04 11:03:49.223 [Thread-45] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-07-04 11:03:49.225 [Thread-45] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-15} closing ...
2025-07-04 11:03:49.226 [Thread-45] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-15} closed
2025-07-04 11:03:49.226 [Thread-45] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-16} closing ...
2025-07-04 11:03:49.227 [Thread-45] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-16} closed
2025-07-04 11:03:49.283 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 10480 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-07-04 11:03:49.283 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-07-04 11:03:49.283 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-07-04 11:03:49.401 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 11:03:49.401 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 11:03:49.408 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-07-04 11:03:49.437 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$80340cd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 11:03:49.441 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-07-04 11:03:49.482 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-07-04 11:03:49.482 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-07-04 11:03:49.482 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-07-04 11:03:49.482 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-07-04 11:03:49.482 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-07-04 11:03:49.483 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-07-04 11:03:49.483 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 11:03:49.483 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-07-04 11:03:49.499 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-04 11:03:49.499 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 215 ms
2025-07-04 11:03:49.502 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-07-04 11:03:49.573 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-17} inited
2025-07-04 11:03:49.585 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-18} inited
2025-07-04 11:03:49.667 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-07-04 11:03:49.667 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-07-04 11:03:49.776 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-07-04 11:03:49.822 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@58c71629, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@31faf196, org.springframework.security.web.context.SecurityContextPersistenceFilter@12e31afd, org.springframework.security.web.header.HeaderWriterFilter@23e1f56c, org.springframework.web.filter.CorsFilter@5bce4595, org.springframework.security.web.authentication.logout.LogoutFilter@688e79fd, com.huang.store.security.JwtAuthenticationTokenFilter@bbf06cf, com.huang.store.security.CustomAuthenticationFilter@72a0572e, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@4103506b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@603b69e1, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4cddaa1f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1dd48f4f, org.springframework.security.web.session.SessionManagementFilter@6898db73, org.springframework.security.web.access.ExceptionTranslationFilter@4636938b, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@37805312]
2025-07-04 11:03:49.914 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-07-04 11:03:49.923 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-07-04 11:03:49.925 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-07-04 11:03:49.928 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 开始检查超时订单...
2025-07-04 11:03:49.928 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.668 seconds (JVM running for 4053.795)
2025-07-04 11:03:49.929 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==>  Preparing: SELECT * FROM order_config WHERE config_key = ?
2025-07-04 11:03:49.929 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 11:03:49.929 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM order_config WHERE config_key = ? ::: DataSources: slave
2025-07-04 11:03:49.929 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - ==> Parameters: normal_payment_timeout(String)
2025-07-04 11:03:49.930 [scheduling-1] DEBUG com.huang.store.mapper.OrderConfigMapper.getByKey - <==      Total: 1
2025-07-04 11:03:49.930 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 使用配置的超时时间: 50分钟
2025-07-04 11:03:49.932 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==>  Preparing: SELECT * FROM bookorder WHERE orderStatus = '待付款' AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ? ORDER BY orderTime ASC
2025-07-04 11:03:49.932 [scheduling-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-07-04 11:03:49.932 [scheduling-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM bookorder
        WHERE orderStatus = '待付款'
        AND TIMESTAMPDIFF(MINUTE, orderTime, NOW()) > ?
        ORDER BY orderTime ASC ::: DataSources: slave
2025-07-04 11:03:49.933 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - ==> Parameters: 50(Integer)
2025-07-04 11:03:49.934 [scheduling-1] DEBUG c.h.s.mapper.OrderMapper.findTimeoutPendingOrders - <==      Total: 0
2025-07-04 11:03:49.934 [scheduling-1] DEBUG com.huang.store.service.OrderTimeoutService - 没有发现超时订单
