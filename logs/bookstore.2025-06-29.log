2025-06-29 20:02:12.138 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-29 20:02:12.153 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 22512 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-29 20:02:12.154 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-29 20:02:12.155 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-29 20:02:12.283 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 20:02:12.284 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 20:02:12.708 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:02:12.710 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:02:12.734 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-29 20:02:12.908 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$ef29038c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:02:12.920 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:02:13.296 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-29 20:02:13.297 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-29 20:02:13.297 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-29 20:02:13.297 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-29 20:02:13.301 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-29 20:02:13.308 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:02:13.310 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:02:13.310 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-29 20:02:13.370 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:02:13.370 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1086 ms
2025-06-29 20:02:13.374 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-29 20:02:13.973 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-29 20:02:14.002 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-29 20:02:14.261 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-29 20:02:14.261 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-29 20:02:14.612 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-29 20:02:14.726 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5bbb6e40, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@661c5e72, org.springframework.security.web.context.SecurityContextPersistenceFilter@143a8cbc, org.springframework.security.web.header.HeaderWriterFilter@7d2652c5, org.springframework.web.filter.CorsFilter@118a5729, org.springframework.security.web.authentication.logout.LogoutFilter@1108ec37, com.huang.store.security.JwtAuthenticationTokenFilter@345a38cf, com.huang.store.security.CustomAuthenticationFilter@183008e9, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@2940f07, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@71bdda44, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5421259d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1a94dc93, org.springframework.security.web.session.SessionManagementFilter@6e85e7be, org.springframework.security.web.access.ExceptionTranslationFilter@3b4aa14d, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6e4ae488]
2025-06-29 20:02:14.958 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-29 20:02:14.976 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 20:02:14.999 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-29 20:02:15.011 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.161 seconds (JVM running for 3.417)
2025-06-29 20:02:31.295 [http-nio-8080-exec-4] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 20:02:31.295 [http-nio-8080-exec-4] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 20:02:31.296 [http-nio-8080-exec-4] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-29 20:02:31.360 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:02:31.360 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:02:31.360 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:02:31.360 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:02:31.360 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:02:31.360 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:02:31.386 [http-nio-8080-exec-4] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-29 20:02:31.407 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-29 20:02:31.407 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-29 20:02:31.407 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-29 20:02:31.407 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:02:31.407 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:02:31.407 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:02:31.423 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:02:31.424 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:02:31.424 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:02:31.424 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:02:31.425 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:02:31.423 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:02:31.423 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:02:31.425 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-29 20:02:31.424 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:02:31.425 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:02:31.425 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-29 20:02:31.425 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:02:31.533 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:02:31.534 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-29 20:02:31.534 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:02:31.534 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-29 20:02:31.534 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:02:31.534 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-29 20:02:31.552 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-29 20:02:31.552 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 0
2025-06-29 20:02:31.552 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 0
2025-06-29 20:02:31.552 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 0
2025-06-29 20:02:31.553 [http-nio-8080-exec-5] ERROR druid.sql.Statement - {conn-110004, pstmt-120005} execute error. select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t )
java.sql.SQLSyntaxErrorException: Table 'bookstore.newproduct' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3409)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:619)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:498)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at jdk.proxy4/jdk.proxy4.$Proxy114.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at jdk.proxy2/jdk.proxy2.$Proxy78.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:144)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at jdk.proxy3/jdk.proxy3.$Proxy83.getNewProductsByPage(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy84.getNewProductsByPage(Unknown Source)
	at com.huang.store.service.BookServiceImp.getNewProductsByPage(BookServiceImp.java:306)
	at com.huang.store.controller.BookController.getRecBook(BookController.java:307)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-29 20:02:31.557 [http-nio-8080-exec-2] ERROR druid.sql.Statement - {conn-110001, pstmt-120001} execute error. select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t )
java.sql.SQLSyntaxErrorException: Table 'bookstore.recommend' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3409)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:619)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:498)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at jdk.proxy4/jdk.proxy4.$Proxy114.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at jdk.proxy2/jdk.proxy2.$Proxy78.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:144)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at jdk.proxy3/jdk.proxy3.$Proxy83.getRecommendsByPage(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy84.getRecommendsByPage(Unknown Source)
	at com.huang.store.service.BookServiceImp.getRecommendsByPage(BookServiceImp.java:274)
	at com.huang.store.controller.BookController.getRecBook(BookController.java:304)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-29 20:02:31.558 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:02:31.558 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-29 20:02:31.564 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:02:31.564 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:02:31.564 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:02:31.564 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-29 20:02:31.565 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:02:31.565 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-29 20:02:31.567 [http-nio-8080-exec-7] ERROR druid.sql.Statement - {conn-110001, pstmt-120006} execute error. select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t )
java.sql.SQLSyntaxErrorException: Table 'bookstore.newproduct' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3409)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:619)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:498)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at jdk.proxy4/jdk.proxy4.$Proxy114.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at jdk.proxy2/jdk.proxy2.$Proxy78.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:144)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at jdk.proxy3/jdk.proxy3.$Proxy83.getNewProductsByPage(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy84.getNewProductsByPage(Unknown Source)
	at com.huang.store.service.BookServiceImp.getNewProductsByPage(BookServiceImp.java:306)
	at com.huang.store.controller.BookController.getRecBook(BookController.java:315)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-29 20:02:31.568 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-29 20:02:31.603 [http-nio-8080-exec-7] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Table 'bookstore.newproduct' doesn't exist
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select * from book where id in          (select t.bookId from (select * from newproduct limit ?,?)as t )
### Cause: java.sql.SQLSyntaxErrorException: Table 'bookstore.newproduct' doesn't exist
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Table 'bookstore.newproduct' doesn't exist
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:88)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)
	at jdk.proxy2/jdk.proxy2.$Proxy78.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:144)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at jdk.proxy3/jdk.proxy3.$Proxy83.getNewProductsByPage(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy84.getNewProductsByPage(Unknown Source)
	at com.huang.store.service.BookServiceImp.getNewProductsByPage(BookServiceImp.java:306)
	at com.huang.store.controller.BookController.getRecBook(BookController.java:315)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Table 'bookstore.newproduct' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3409)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:619)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:498)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at jdk.proxy4/jdk.proxy4.$Proxy114.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	... 130 common frames omitted
2025-06-29 20:02:31.603 [http-nio-8080-exec-2] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Table 'bookstore.recommend' doesn't exist
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select * from book where id in          (select t.bookId from (select * from recommend limit ?,?)as t )
### Cause: java.sql.SQLSyntaxErrorException: Table 'bookstore.recommend' doesn't exist
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Table 'bookstore.recommend' doesn't exist
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:88)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)
	at jdk.proxy2/jdk.proxy2.$Proxy78.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:144)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at jdk.proxy3/jdk.proxy3.$Proxy83.getRecommendsByPage(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy84.getRecommendsByPage(Unknown Source)
	at com.huang.store.service.BookServiceImp.getRecommendsByPage(BookServiceImp.java:274)
	at com.huang.store.controller.BookController.getRecBook(BookController.java:304)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Table 'bookstore.recommend' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3409)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:619)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:498)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at jdk.proxy4/jdk.proxy4.$Proxy114.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	... 130 common frames omitted
2025-06-29 20:02:31.603 [http-nio-8080-exec-5] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Table 'bookstore.newproduct' doesn't exist
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select * from book where id in          (select t.bookId from (select * from newproduct limit ?,?)as t )
### Cause: java.sql.SQLSyntaxErrorException: Table 'bookstore.newproduct' doesn't exist
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Table 'bookstore.newproduct' doesn't exist
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:236)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:88)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)
	at jdk.proxy2/jdk.proxy2.$Proxy78.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:144)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at jdk.proxy3/jdk.proxy3.$Proxy83.getNewProductsByPage(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy84.getNewProductsByPage(Unknown Source)
	at com.huang.store.service.BookServiceImp.getNewProductsByPage(BookServiceImp.java:306)
	at com.huang.store.controller.BookController.getRecBook(BookController.java:307)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLSyntaxErrorException: Table 'bookstore.newproduct' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3409)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:619)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:498)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at jdk.proxy4/jdk.proxy4.$Proxy114.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	... 130 common frames omitted
2025-06-29 20:02:31.645 [http-nio-8080-exec-7] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Table 'bookstore.newproduct' doesn't exist<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select * from book where id in          (select t.bookId from (select * from newproduct limit ?,?)as t )<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Table 'bookstore.newproduct' doesn't exist<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Table 'bookstore.newproduct' doesn't exist]
2025-06-29 20:02:31.645 [http-nio-8080-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Table 'bookstore.recommend' doesn't exist<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select * from book where id in          (select t.bookId from (select * from recommend limit ?,?)as t )<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Table 'bookstore.recommend' doesn't exist<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Table 'bookstore.recommend' doesn't exist]
2025-06-29 20:02:31.645 [http-nio-8080-exec-5] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.jdbc.BadSqlGrammarException: <EOL><EOL>### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Table 'bookstore.newproduct' doesn't exist<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]<EOL><EOL>### The error may involve defaultParameterMap<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: select * from book where id in          (select t.bookId from (select * from newproduct limit ?,?)as t )<EOL><EOL>### Cause: java.sql.SQLSyntaxErrorException: Table 'bookstore.newproduct' doesn't exist<EOL>; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Table 'bookstore.newproduct' doesn't exist]
2025-06-29 20:06:30.903 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-29 20:06:30.918 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 8820 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-29 20:06:30.919 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-29 20:06:30.919 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-29 20:06:31.043 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 20:06:31.043 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 20:06:31.565 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:06:31.567 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:06:31.605 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 0 Redis repository interfaces.
2025-06-29 20:06:31.831 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$74a95cde] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:06:31.850 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:06:32.274 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-29 20:06:32.275 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-29 20:06:32.275 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-29 20:06:32.275 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-29 20:06:32.279 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-29 20:06:32.286 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:06:32.287 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:06:32.287 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-29 20:06:32.341 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:06:32.341 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1297 ms
2025-06-29 20:06:32.345 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-29 20:06:32.865 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-29 20:06:32.898 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-29 20:06:33.173 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-29 20:06:33.173 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-29 20:06:33.602 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-29 20:06:33.777 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@cc8898e, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@321a66ae, org.springframework.security.web.context.SecurityContextPersistenceFilter@5a2b57d6, org.springframework.security.web.header.HeaderWriterFilter@6a7ceef9, org.springframework.web.filter.CorsFilter@64288671, org.springframework.security.web.authentication.logout.LogoutFilter@1274deca, com.huang.store.security.JwtAuthenticationTokenFilter@3c30127e, com.huang.store.security.CustomAuthenticationFilter@3d476277, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@9d89f10, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1ccb7335, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7d37f352, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@36123406, org.springframework.security.web.session.SessionManagementFilter@393798d8, org.springframework.security.web.access.ExceptionTranslationFilter@7b6afa50, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@574fc98a]
2025-06-29 20:06:34.084 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-29 20:06:34.102 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 20:06:34.114 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-29 20:06:34.123 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.557 seconds (JVM running for 4.029)
2025-06-29 20:06:55.189 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-06-29 20:06:55.190 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-06-29 20:06:59.151 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-29 20:06:59.163 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 16124 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-29 20:06:59.163 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-29 20:06:59.164 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-29 20:06:59.267 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 20:06:59.268 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 20:06:59.682 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:06:59.683 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:06:59.702 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-29 20:06:59.859 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$96c1a63f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:06:59.871 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:07:00.173 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-29 20:07:00.179 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-29 20:07:00.180 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-29 20:07:00.180 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-29 20:07:00.183 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-29 20:07:00.192 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:07:00.192 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:07:00.192 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-29 20:07:00.234 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:07:00.234 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 966 ms
2025-06-29 20:07:00.237 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-29 20:07:00.647 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-29 20:07:00.665 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-29 20:07:00.893 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-29 20:07:00.893 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-29 20:07:01.286 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-29 20:07:01.408 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4bdf8809, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@74cc1fe2, org.springframework.security.web.context.SecurityContextPersistenceFilter@23bf6d17, org.springframework.security.web.header.HeaderWriterFilter@78d862d4, org.springframework.web.filter.CorsFilter@c90af6e, org.springframework.security.web.authentication.logout.LogoutFilter@8ef9a79, com.huang.store.security.JwtAuthenticationTokenFilter@219fca0e, com.huang.store.security.CustomAuthenticationFilter@2e80e959, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@47d4af71, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4f0c7830, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@66faee96, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@24ec4c0a, org.springframework.security.web.session.SessionManagementFilter@24c26788, org.springframework.security.web.access.ExceptionTranslationFilter@20381c7e, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@61e06ec4]
2025-06-29 20:07:01.651 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-29 20:07:01.672 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 20:07:01.688 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-29 20:07:01.696 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 2.826 seconds (JVM running for 3.264)
2025-06-29 20:07:27.990 [http-nio-8080-exec-3] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 20:07:27.990 [http-nio-8080-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 20:07:27.991 [http-nio-8080-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-29 20:07:28.087 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:07:28.088 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:07:28.086 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:07:28.087 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:07:28.087 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:07:28.086 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:07:28.126 [http-nio-8080-exec-3] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-29 20:07:28.151 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-29 20:07:28.151 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-29 20:07:28.151 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:07:28.151 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:07:28.151 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-29 20:07:28.151 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:07:28.178 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:28.178 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:28.178 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:28.178 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:28.178 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:07:28.178 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-29 20:07:28.178 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:07:28.178 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:07:28.178 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:28.179 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-29 20:07:28.178 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:28.179 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:07:28.337 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:07:28.338 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:07:28.338 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-29 20:07:28.338 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-29 20:07:28.338 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-29 20:07:28.338 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:07:28.359 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-29 20:07:28.359 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:07:28.359 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-29 20:07:28.361 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-29 20:07:28.362 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:07:28.364 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-29 20:07:28.365 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:07:28.365 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:07:28.365 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:07:28.365 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:28.365 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:07:28.365 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:28.365 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:07:28.365 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-29 20:07:28.365 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:07:28.365 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:28.365 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:28.365 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:07:28.366 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-29 20:07:28.366 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:07:28.365 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:28.366 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:07:28.366 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:07:28.367 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-29 20:07:28.367 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:07:28.367 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:07:28.368 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:07:28.369 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-29 20:07:28.369 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:07:28.371 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:07:28.371 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:07:28.371 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:28.371 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:07:28.371 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:07:28.372 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:07:28.373 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:07:28.374 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:28.374 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:07:28.375 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:07:28.376 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:07:28.376 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:28.376 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:07:28.376 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:07:28.378 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:07:28.379 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:07:28.379 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:28.379 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:07:28.379 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:07:28.381 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-29 20:07:28.381 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:07:28.384 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:07:28.384 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:07:28.384 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:28.385 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:07:28.385 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-29 20:07:28.387 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:07:28.388 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:07:28.388 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:28.388 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:07:28.388 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-29 20:07:28.390 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:07:28.390 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:07:28.391 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:28.391 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:07:28.391 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:07:28.393 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:07:28.394 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:07:28.395 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:28.395 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:07:28.395 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:07:28.397 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:07:49.956 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:07:49.956 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:07:49.958 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:07:49.958 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:49.958 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:07:49.960 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:07:49.961 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:07:49.961 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:49.961 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:07:49.962 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 3(Integer)
2025-06-29 20:07:49.963 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:07:49.964 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:07:49.964 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:07:49.964 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:49.964 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:07:49.964 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:07:49.964 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:49.964 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:07:49.965 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:07:49.967 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 教育(String), 教育(String)
2025-06-29 20:07:49.967 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:07:49.968 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:07:49.968 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:49.968 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:07:49.968 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:07:49.968 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:07:49.969 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:07:49.970 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:07:49.970 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:49.970 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:07:49.970 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:07:49.973 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:07:49.974 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:07:49.974 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:49.974 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:07:49.974 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:07:49.976 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:07:49.989 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:07:49.990 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:49.990 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:07:49.992 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 10(Integer), 11(Integer), 3(Integer), 0(Integer), 10(Integer)
2025-06-29 20:07:49.995 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-29 20:07:49.995 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:07:49.995 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:49.995 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:07:49.996 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 教育(String), 教育(String)
2025-06-29 20:07:49.997 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:07:49.999 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-29 20:07:49.999 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:49.999 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:07:50.001 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 10(Integer), 11(Integer), 3(Integer)
2025-06-29 20:07:50.002 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:07:54.005 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:07:54.006 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-29 20:07:54.006 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:07:54.007 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:54.007 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-29 20:07:54.009 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:07:54.009 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:07:54.009 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:07:54.010 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:07:54.010 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:54.008 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-29 20:07:54.010 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:07:54.010 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:54.010 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-29 20:07:54.011 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:07:54.010 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-29 20:07:54.011 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:54.011 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:07:54.008 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-29 20:07:54.011 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:07:54.012 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:07:54.012 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:07:54.012 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:07:54.012 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:54.012 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:07:54.012 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:07:54.013 [http-nio-8080-exec-4] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-29 20:07:54.013 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:07:54.013 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:54.013 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:07:54.013 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-29 20:07:54.014 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:07:54.014 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-29 20:07:54.015 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:07:54.015 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-29 20:07:54.015 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-29 20:07:54.016 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:07:54.016 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:54.016 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:07:54.016 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:07:54.016 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:54.016 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:07:54.016 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:07:54.017 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-29 20:07:54.017 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:07:54.017 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:07:54.018 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:07:54.018 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:54.018 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:07:54.018 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-29 20:07:54.019 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-29 20:07:54.019 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:54.019 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-29 20:07:54.019 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-29 20:07:54.019 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-29 20:07:54.010 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:07:54.020 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:54.020 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:07:54.020 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-29 20:07:54.020 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:07:54.021 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:07:54.021 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:54.021 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:07:54.021 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-29 20:07:54.022 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:07:54.023 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:07:54.023 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:07:54.023 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:54.023 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:07:54.024 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-29 20:07:54.024 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:07:54.025 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:07:54.025 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:54.025 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:07:54.025 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:07:54.025 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:07:54.025 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:07:54.026 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:54.026 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:07:54.026 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:07:54.027 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:07:54.027 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:07:54.027 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:07:54.028 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:54.028 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:07:54.028 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:07:54.028 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:07:54.028 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:54.028 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:07:54.029 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:07:54.030 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:07:54.030 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:07:54.030 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:54.030 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:07:54.031 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:07:54.031 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:07:54.032 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:07:54.033 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:07:54.033 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:54.033 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:07:54.033 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:07:54.035 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:07:59.152 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:07:59.152 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:07:59.153 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:07:59.153 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:07:59.153 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:59.153 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:59.153 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:07:59.154 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 4(Integer)
2025-06-29 20:07:59.153 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:07:59.154 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:07:59.155 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:07:59.155 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:07:59.155 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:07:59.156 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:59.156 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:07:59.156 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:07:59.156 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:59.156 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:07:59.156 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:07:59.156 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-29 20:07:59.157 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:07:59.158 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:07:59.158 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:07:59.158 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:59.158 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:07:59.158 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:07:59.158 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:07:59.158 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:59.158 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:07:59.159 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 4(Integer), 12(Integer), 13(Integer), 0(Integer), 10(Integer)
2025-06-29 20:07:59.160 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:07:59.161 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:07:59.161 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-29 20:07:59.161 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:59.161 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:07:59.161 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:07:59.161 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:07:59.161 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:59.161 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:07:59.161 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-29 20:07:59.162 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:07:59.163 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:07:59.163 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-29 20:07:59.163 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:59.163 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:07:59.163 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 4(Integer), 12(Integer), 13(Integer)
2025-06-29 20:07:59.163 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:07:59.163 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:07:59.163 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:07:59.163 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:07:59.164 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:07:59.165 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:00.200 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:00.201 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-29 20:08:00.201 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:00.201 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-29 20:08:00.201 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:00.201 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-29 20:08:00.202 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:00.204 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-29 20:08:00.204 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:00.204 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:08:00.205 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:00.205 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-29 20:08:00.205 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:08:00.205 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:00.205 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:08:00.205 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:08:00.205 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:08:02.765 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:02.765 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:08:02.766 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:08:00.206 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:08:02.766 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:08:02.767 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:02.767 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:02.767 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:02.767 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-29 20:08:02.767 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:08:02.768 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:02.768 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-29 20:08:02.768 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:02.768 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:02.768 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:02.768 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:02.768 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:02.768 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:02.768 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-29 20:08:00.206 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:02.769 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:02.770 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:02.770 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:02.770 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:02.770 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:02.768 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:08:02.771 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:02.771 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:08:02.771 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-29 20:08:02.771 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:08:00.207 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-29 20:08:02.768 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:08:02.772 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:02.772 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-29 20:08:02.772 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:08:02.772 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:02.773 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:02.773 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:02.773 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:02.773 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:08:02.773 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:08:02.773 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:02.773 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:02.773 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:02.774 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:08:02.774 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:02.775 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:02.775 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:02.775 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:02.775 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:08:02.775 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:02.776 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:02.776 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:02.776 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:02.776 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:02.776 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:08:02.771 [http-nio-8080-exec-1] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-29 20:08:02.778 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:08:02.776 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-29 20:08:02.777 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:08:02.779 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:02.779 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:08:02.779 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-29 20:08:02.780 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-29 20:08:02.780 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:02.780 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-29 20:08:02.780 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-29 20:08:02.780 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:02.780 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:02.780 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:02.780 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:02.781 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:08:02.781 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-29 20:08:02.781 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:08:02.778 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:02.781 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:02.782 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:08:02.783 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:08:02.783 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:02.783 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:08:02.783 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:08:02.781 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:08:02.783 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-29 20:08:02.784 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:08:02.785 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-29 20:08:27.741 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:27.742 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:08:27.742 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:27.744 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:27.744 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:08:27.744 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:08:27.745 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:08:27.745 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:27.745 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:08:27.745 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 4(Integer)
2025-06-29 20:08:27.745 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:08:27.746 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:27.746 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:27.746 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:27.746 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:08:27.746 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:08:27.746 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:08:27.746 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:27.746 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:08:27.746 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-29 20:08:27.747 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:08:27.747 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:08:27.747 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:27.747 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:27.747 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:27.747 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:08:27.747 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:08:27.747 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:27.747 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:08:27.747 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 4(Integer), 12(Integer), 13(Integer), 0(Integer), 10(Integer)
2025-06-29 20:08:27.748 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:27.748 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-29 20:08:27.749 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:27.749 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:27.749 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:27.749 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:08:27.749 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:27.749 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:08:27.749 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:08:27.750 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-29 20:08:27.750 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:27.751 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:27.751 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:27.751 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:27.751 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:08:27.751 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:08:27.751 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-29 20:08:27.751 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:27.751 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:08:27.752 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 4(Integer), 12(Integer), 13(Integer)
2025-06-29 20:08:27.752 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:27.753 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:08:30.210 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:30.210 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:30.211 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:08:30.211 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:30.211 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:08:30.211 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:08:30.211 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:30.211 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:08:30.211 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:08:30.211 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-29 20:08:30.212 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:08:30.213 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:08:30.213 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:30.213 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:30.213 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:30.213 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:08:30.213 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:30.213 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:08:30.213 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:08:30.213 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:08:30.214 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:08:30.214 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:08:30.215 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:30.215 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:30.215 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:30.215 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:08:30.215 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:30.215 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:08:30.215 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:08:30.216 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-29 20:08:30.216 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:30.217 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:30.217 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:30.217 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:30.217 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:08:30.218 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:30.218 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:30.219 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:30.219 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:30.219 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:08:30.220 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:30.220 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-29 20:08:30.220 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:08:30.220 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:30.220 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:08:30.221 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:08:30.221 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:08:30.222 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-29 20:08:30.222 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:30.222 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:08:30.223 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-29 20:08:30.224 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:08:30.225 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:30.225 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:30.225 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:30.225 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:08:30.226 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:30.226 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:30.226 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:30.226 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:30.226 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:08:30.227 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:31.846 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:31.846 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:31.848 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:08:31.848 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:31.848 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:08:31.848 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:08:31.848 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:08:31.848 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:31.848 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:08:31.848 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-29 20:08:31.849 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:08:31.850 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:08:31.850 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:31.850 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:08:31.850 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:08:31.850 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-29 20:08:31.851 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:31.851 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:31.851 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:31.851 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:08:31.851 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:08:31.852 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:08:31.852 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:08:31.852 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:31.852 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:08:31.853 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-29 20:08:31.853 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:31.853 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:31.853 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:31.853 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:08:31.854 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:31.855 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:31.855 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:31.855 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:31.855 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:08:31.855 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-29 20:08:31.856 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:08:31.856 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:31.856 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:08:31.856 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-29 20:08:31.857 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:31.857 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:31.857 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:31.857 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:31.858 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:08:31.858 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:08:31.859 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-29 20:08:31.859 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:31.859 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:08:31.859 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-29 20:08:31.859 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:31.860 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:08:31.861 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:31.861 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:31.861 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:31.861 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-29 20:08:31.863 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:31.864 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:31.864 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:31.864 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:31.864 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-29 20:08:31.865 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:31.866 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:31.866 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:31.866 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:31.867 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-29 20:08:31.869 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:34.347 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:34.348 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:34.348 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:08:34.348 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:34.349 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:08:34.349 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:08:34.349 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:08:34.349 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:34.349 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:08:34.350 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 3(Integer)
2025-06-29 20:08:34.351 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:08:34.351 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:08:34.351 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:34.351 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:08:34.351 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:34.351 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:34.351 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:34.351 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:08:34.351 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:08:34.351 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 教育(String), 教育(String)
2025-06-29 20:08:34.352 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:08:34.353 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:08:34.353 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:34.353 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:34.353 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:34.353 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:08:34.353 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:34.353 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:08:34.353 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:08:34.354 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 10(Integer), 11(Integer), 3(Integer), 0(Integer), 10(Integer)
2025-06-29 20:08:34.354 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:34.354 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:34.354 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:34.354 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:34.354 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:08:34.355 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-29 20:08:34.355 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:08:34.356 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:34.356 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:08:34.356 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:34.356 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 教育(String), 教育(String)
2025-06-29 20:08:34.356 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:34.356 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:34.356 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:34.356 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:08:34.356 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:08:34.356 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:34.356 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-29 20:08:34.356 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:34.356 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:08:34.357 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 10(Integer), 11(Integer), 3(Integer)
2025-06-29 20:08:34.358 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:08:35.305 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:35.305 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:35.307 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:08:35.308 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:35.308 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:08:35.308 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:08:35.308 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:35.308 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:08:35.308 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:08:35.308 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 4(Integer)
2025-06-29 20:08:35.310 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:08:35.310 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:08:35.310 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:35.310 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:08:35.310 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:35.310 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:35.310 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:35.310 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:08:35.311 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:08:35.311 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-29 20:08:35.312 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:08:35.312 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:08:35.313 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:35.313 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:35.313 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:08:35.313 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:35.313 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:35.313 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:08:35.313 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:08:35.313 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 4(Integer), 12(Integer), 13(Integer), 0(Integer), 10(Integer)
2025-06-29 20:08:35.315 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-29 20:08:35.315 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:35.316 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:08:35.316 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:35.316 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:35.316 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:35.316 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:08:35.316 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:35.316 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:08:35.316 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-29 20:08:35.318 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:08:35.319 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:35.319 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:35.319 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-29 20:08:35.320 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:35.320 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:35.320 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:35.320 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:08:35.320 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:08:35.320 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 4(Integer), 12(Integer), 13(Integer)
2025-06-29 20:08:35.322 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:08:35.325 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:35.987 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:35.988 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:35.992 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:08:35.992 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:35.992 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:08:35.992 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:08:35.992 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:08:35.992 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:35.992 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:08:35.993 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-29 20:08:35.994 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:08:35.995 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:08:35.995 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:08:35.995 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:35.995 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:08:35.995 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:35.995 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:35.996 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:35.996 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:08:35.996 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:08:35.997 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:08:35.997 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:08:35.998 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:08:35.998 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:35.998 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:08:35.999 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:35.999 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:35.999 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-29 20:08:35.999 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:35.999 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:08:36.000 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:36.001 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:36.001 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-29 20:08:36.001 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:36.001 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:36.001 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:08:36.001 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:08:36.001 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:36.001 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:08:36.002 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:08:36.002 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:36.002 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:36.002 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:36.002 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:36.002 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:08:36.002 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:08:36.003 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-29 20:08:36.003 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:36.003 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:08:36.003 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-29 20:08:36.004 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:36.005 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:08:36.006 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:36.007 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:36.007 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:36.007 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:08:36.010 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:36.011 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:36.011 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:36.011 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:36.011 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:08:36.013 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:39.244 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:39.245 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:08:39.245 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:39.245 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:08:39.246 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:08:39.246 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:39.247 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:08:39.247 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:08:39.247 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:39.247 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:08:39.247 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:39.247 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:39.247 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-29 20:08:39.247 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:39.247 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:08:39.249 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:08:39.249 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:08:39.249 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:39.249 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:08:39.249 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:39.249 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:39.249 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:08:39.249 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:39.249 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:08:39.249 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-29 20:08:39.249 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:08:39.249 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:39.249 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:39.249 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:39.250 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:39.250 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:08:39.250 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:08:39.250 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:39.250 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:08:39.250 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-29 20:08:39.251 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:39.251 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:39.251 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:39.251 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:39.251 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:08:39.252 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-29 20:08:39.252 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:08:39.252 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:39.252 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:08:39.253 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-29 20:08:39.253 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:39.254 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:08:39.255 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-29 20:08:39.255 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:39.255 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:08:39.255 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-29 20:08:39.257 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:08:39.258 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:39.258 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:39.258 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:39.258 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-29 20:08:39.260 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:39.260 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:39.260 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:39.260 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:39.260 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-29 20:08:39.261 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:39.262 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:39.262 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:39.262 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:39.262 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-29 20:08:39.263 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:40.173 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:40.173 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:40.175 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:08:40.175 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.175 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:08:40.175 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:08:40.175 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:08:40.175 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.175 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:08:40.175 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-29 20:08:40.177 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:08:40.177 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:08:40.177 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:40.177 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:08:40.178 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.178 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.178 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:40.178 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:08:40.178 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:08:40.178 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:08:40.179 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:08:40.179 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:08:40.180 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:40.180 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.180 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:40.180 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:08:40.180 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:08:40.180 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.180 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:08:40.181 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-29 20:08:40.181 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:40.182 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:40.182 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.182 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:40.182 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:08:40.183 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-29 20:08:40.183 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:40.183 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:08:40.183 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.183 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:08:40.184 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:08:40.184 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:40.184 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.184 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:40.184 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:08:40.185 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:08:40.185 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:40.186 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-29 20:08:40.186 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.186 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:08:40.187 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-29 20:08:40.189 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:08:40.189 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:40.190 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.190 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:40.190 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:08:40.191 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:40.191 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:40.191 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.191 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:40.191 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:08:40.192 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:40.899 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:40.899 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:40.900 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:08:40.900 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.900 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:08:40.900 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:08:40.900 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:08:40.900 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.900 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:08:40.900 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-29 20:08:40.901 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:08:40.901 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:08:40.901 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:08:40.902 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:40.902 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.902 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.902 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:08:40.902 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:40.902 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-29 20:08:40.902 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:08:40.903 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:08:40.903 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:08:40.904 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:40.904 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.904 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:40.904 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:08:40.904 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:08:40.904 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.904 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:08:40.904 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-29 20:08:40.905 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:40.906 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:40.906 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.906 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:40.906 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:08:40.907 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-29 20:08:40.907 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:08:40.907 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.907 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:08:40.907 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:40.907 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-29 20:08:40.908 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:40.908 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.908 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:40.908 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:08:40.909 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:08:40.909 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-29 20:08:40.910 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:40.910 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.910 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:08:40.910 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-29 20:08:40.911 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:08:40.912 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:40.912 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.912 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:40.912 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-29 20:08:40.913 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:40.914 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:40.914 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.914 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:40.914 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-29 20:08:40.916 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:40.916 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:40.916 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:40.916 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:40.917 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-29 20:08:40.918 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:41.508 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:41.508 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:41.509 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:08:41.509 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:41.509 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:08:41.509 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:08:41.509 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:08:41.509 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:41.509 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:08:41.509 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 4(Integer)
2025-06-29 20:08:41.510 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:08:41.510 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:08:41.510 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:41.510 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:08:41.510 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:41.510 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:41.510 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:41.510 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:08:41.510 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:08:41.510 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-29 20:08:41.511 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:08:41.512 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:08:41.512 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:41.512 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:41.512 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:41.512 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:08:41.513 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:08:41.513 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:41.513 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:08:41.513 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 4(Integer), 12(Integer), 13(Integer), 0(Integer), 10(Integer)
2025-06-29 20:08:41.513 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:41.514 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:41.514 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:41.514 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:41.514 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:08:41.514 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-29 20:08:41.515 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:08:41.515 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:41.515 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:08:41.515 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-29 20:08:41.515 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:41.516 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:41.516 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:41.516 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:41.516 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:08:41.516 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:08:41.517 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-29 20:08:41.517 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:41.517 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:41.517 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:08:41.518 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 4(Integer), 12(Integer), 13(Integer)
2025-06-29 20:08:41.519 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:08:42.685 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:42.685 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:42.686 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:08:42.686 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:08:42.686 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:42.686 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:08:42.686 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:42.686 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:08:42.686 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:08:42.687 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-29 20:08:42.687 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:08:42.687 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:08:42.687 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:08:42.687 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:42.688 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:42.688 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:42.688 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:42.688 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:08:42.688 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:08:42.688 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-29 20:08:42.689 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:08:42.689 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:08:42.689 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:42.689 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:42.689 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:42.689 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:08:42.689 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:08:42.689 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:42.689 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:08:42.690 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-29 20:08:42.690 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:42.691 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:42.691 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:42.691 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:42.691 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:08:42.691 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-29 20:08:42.692 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:08:42.692 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:42.692 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:08:42.692 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-29 20:08:42.692 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:42.693 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:42.693 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:42.693 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:42.693 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:08:42.693 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:08:42.694 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:42.694 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-29 20:08:42.694 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:42.694 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:08:42.694 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-29 20:08:42.695 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:08:42.696 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:42.696 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:42.696 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:42.696 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-29 20:08:42.697 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:42.698 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:42.698 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:42.698 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:42.698 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-29 20:08:42.699 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:42.700 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:42.700 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:42.700 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:42.700 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-29 20:08:42.701 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:52.239 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:52.239 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:52.239 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:52.239 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:52.239 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:52.240 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:08:52.240 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-29 20:08:52.240 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:08:52.240 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-29 20:08:52.240 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:52.240 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-29 20:08:52.240 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:08:52.240 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:08:52.240 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:52.240 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:08:52.240 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:52.240 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:52.240 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-29 20:08:52.240 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:08:52.240 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:08:52.240 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:08:52.240 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-29 20:08:52.240 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-29 20:08:52.240 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:52.240 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:08:52.240 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:52.240 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-29 20:08:52.240 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:08:52.241 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-29 20:08:52.241 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:08:52.241 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:08:52.241 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-29 20:08:52.241 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:08:52.242 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-29 20:08:52.242 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:52.242 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-29 20:08:52.242 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:08:52.242 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-29 20:08:52.242 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-29 20:08:52.242 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:52.242 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:52.242 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:52.242 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:08:52.242 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:52.242 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-29 20:08:52.242 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-29 20:08:52.242 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:08:52.242 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:08:52.242 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:52.242 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:08:52.242 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:08:52.242 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:08:52.242 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:52.242 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:08:52.242 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:08:52.243 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-29 20:08:52.243 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-29 20:08:52.243 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:08:52.243 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:08:52.243 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:08:52.243 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:08:52.243 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:52.243 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:52.243 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:52.244 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:08:52.244 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:08:52.245 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:52.245 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:52.245 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:52.245 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-29 20:08:52.246 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:52.246 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:52.246 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:52.246 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:52.246 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:52.246 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:52.246 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:52.246 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:52.246 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-29 20:08:52.246 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:08:52.247 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:52.247 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:52.248 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:08:52.248 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:52.248 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:52.248 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:52.248 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:08:52.248 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:52.248 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:08:52.248 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-29 20:08:52.249 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:52.249 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:08:52.249 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:52.249 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:52.249 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:52.250 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:08:52.251 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:08:52.252 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:08:52.252 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:08:52.252 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:08:52.252 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:08:52.254 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:09:00.531 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:09:00.531 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:09:00.532 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:09:00.532 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:00.532 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:09:00.533 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:09:00.534 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:09:00.535 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:00.535 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:00.535 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:00.536 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:09:00.537 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:09:00.538 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:00.538 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:00.538 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:00.538 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:09:00.539 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:09:00.539 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:00.539 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:00.539 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:00.539 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:09:00.539 [http-nio-8080-exec-4] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-29 20:09:00.540 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:09:00.541 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:00.541 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:00.541 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:00.541 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:09:00.542 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:09:00.548 [http-nio-8080-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-29 20:09:03.788 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:09:03.788 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:09:03.789 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:09:03.789 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:03.789 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:09:03.789 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 4(Integer)
2025-06-29 20:09:03.790 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:09:03.790 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:03.790 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:09:03.790 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:09:03.790 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:09:03.791 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:09:03.791 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:03.791 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:09:03.791 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:09:03.791 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-29 20:09:03.791 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:03.792 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:03.792 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:03.792 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:09:03.792 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:09:03.792 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:09:03.793 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:03.793 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:03.793 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:03.793 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:09:03.793 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:09:03.793 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:03.793 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:09:03.794 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:09:03.794 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 4(Integer), 12(Integer), 13(Integer), 0(Integer), 10(Integer)
2025-06-29 20:09:03.794 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:03.794 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:03.794 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:03.795 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:09:03.795 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-29 20:09:03.795 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:09:03.796 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:09:03.796 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:03.796 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:09:03.796 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:03.796 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:03.796 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:03.796 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-29 20:09:03.796 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:09:03.796 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:09:03.797 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:09:03.797 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-29 20:09:03.797 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:03.797 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:09:03.799 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 4(Integer), 12(Integer), 13(Integer)
2025-06-29 20:09:03.800 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:09:05.248 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:09:05.249 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:09:05.249 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:09:05.249 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:05.249 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:09:05.249 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:09:05.251 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:09:05.251 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:05.251 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:09:05.251 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:09:05.251 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 3(Integer)
2025-06-29 20:09:05.251 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:05.252 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:05.252 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:05.252 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:09:05.252 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:09:05.253 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:09:05.253 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:09:05.253 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:05.253 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:09:05.253 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 教育(String), 教育(String)
2025-06-29 20:09:05.262 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:05.263 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:05.263 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:05.263 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:09:05.263 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:09:05.265 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:09:05.265 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:09:05.265 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:05.265 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:09:05.265 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:05.265 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:05.265 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:05.266 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 10(Integer), 11(Integer), 3(Integer), 0(Integer), 10(Integer)
2025-06-29 20:09:05.266 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:09:05.266 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-29 20:09:05.266 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:09:05.267 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:05.267 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:09:05.267 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:05.267 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:05.267 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:05.267 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:09:05.267 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:09:05.267 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 教育(String), 教育(String)
2025-06-29 20:09:05.267 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:09:05.268 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:09:05.268 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-29 20:09:05.268 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:05.268 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:09:05.269 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 10(Integer), 11(Integer), 3(Integer)
2025-06-29 20:09:05.271 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:09:06.073 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:09:06.073 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:09:06.074 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:09:06.074 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:06.074 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:09:06.075 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:09:06.075 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:09:06.075 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:06.075 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:09:06.075 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-29 20:09:06.076 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:09:06.077 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:09:06.077 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:06.077 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:06.077 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:06.077 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:09:06.078 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:09:06.078 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:06.078 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:09:06.078 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-29 20:09:06.079 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:09:06.079 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:09:06.079 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:06.080 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:06.080 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:06.080 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:09:06.080 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:09:06.080 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:06.080 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:09:06.080 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-29 20:09:06.081 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:09:06.081 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:06.081 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:06.081 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:06.081 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:09:06.082 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:09:06.082 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-29 20:09:06.083 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:06.083 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:09:06.083 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:06.083 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:06.083 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:06.083 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:09:06.083 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:09:06.083 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-29 20:09:06.084 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:09:06.086 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:09:06.089 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-29 20:09:06.090 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:06.090 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:09:06.090 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-29 20:09:06.091 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:09:06.092 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:09:06.092 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:06.092 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:09:06.093 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-29 20:09:06.096 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:09:06.097 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:09:06.098 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:06.098 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:09:06.098 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-29 20:09:06.099 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:09:06.100 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:09:06.100 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:06.100 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:09:06.101 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-29 20:09:06.101 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:09:11.163 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:09:11.163 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:09:11.164 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:09:11.164 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:11.164 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:09:11.165 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:09:11.165 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:11.165 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:09:11.165 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-29 20:09:11.165 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:09:11.168 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:09:11.168 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:09:11.169 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:09:11.169 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:11.169 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:11.169 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:11.169 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:09:11.169 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:11.169 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:09:11.169 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:09:11.171 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:09:11.172 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:11.172 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:11.172 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:11.172 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:09:11.173 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:09:11.174 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:09:11.175 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:11.175 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:09:11.175 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:11.175 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:11.175 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:11.175 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:09:11.175 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:09:11.177 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:09:11.177 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:11.177 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:11.177 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:11.178 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-29 20:09:11.178 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:09:11.179 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:09:11.180 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-29 20:09:11.180 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:09:11.180 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:11.180 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:09:11.181 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:09:11.182 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:09:11.184 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-29 20:09:11.184 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:11.184 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:09:11.185 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-29 20:09:11.188 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:09:11.189 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:09:11.189 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:11.189 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:09:11.189 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:09:11.191 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:09:11.192 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:09:11.192 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:11.192 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:09:11.192 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:09:11.194 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:09:15.436 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:09:15.438 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-29 20:09:15.438 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:15.438 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-29 20:09:15.438 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:09:15.439 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-29 20:09:15.438 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:09:15.440 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:09:15.440 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:15.440 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:09:15.440 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:09:15.440 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-29 20:09:15.441 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-29 20:09:15.441 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:15.441 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-29 20:09:15.441 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:09:15.441 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-29 20:09:15.441 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:09:15.440 [http-nio-8080-exec-10] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-29 20:09:15.442 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-29 20:09:15.442 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:15.442 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:09:15.442 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-29 20:09:15.442 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:09:15.442 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:15.442 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:09:15.442 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:09:15.443 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:09:15.443 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:09:15.444 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:09:15.444 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:09:15.444 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:15.444 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:09:15.445 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:09:15.445 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:15.445 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:09:15.445 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:09:15.445 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-29 20:09:15.446 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:09:15.447 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-29 20:09:15.447 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:09:15.447 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:15.447 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:09:15.447 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:09:15.448 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-29 20:09:15.448 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:09:15.449 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:15.449 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:15.449 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:15.449 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:09:15.449 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:09:15.452 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:09:15.452 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:15.452 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:15.452 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:15.453 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:09:15.453 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-29 20:09:15.453 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:15.453 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-29 20:09:15.454 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-29 20:09:15.454 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:09:15.454 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:15.455 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:15.455 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:15.455 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:09:15.456 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-29 20:09:15.456 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:09:15.456 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:09:15.456 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:09:15.456 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:15.456 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:15.456 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:09:15.456 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:09:15.456 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:09:15.456 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:09:15.457 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:09:15.457 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:09:15.458 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:09:15.458 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:15.458 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:09:15.458 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-29 20:09:15.460 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:09:15.461 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:09:15.461 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:15.461 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:09:15.461 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-29 20:09:15.462 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:09:15.462 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:09:15.462 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:15.462 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:09:15.462 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-29 20:09:15.463 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:09:15.463 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:09:15.463 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:15.463 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:09:15.463 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:09:15.465 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:09:15.466 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:09:15.466 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:09:15.466 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:09:15.466 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:09:15.467 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:11:13.514 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:11:13.592 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:11:13.592 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:11:13.592 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:11:13.594 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: user2@example.com(String)
2025-06-29 20:11:13.596 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-29 20:11:13.601 [http-nio-8080-exec-6] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:user2@example.com    数据库密码:$2a$10$N.zmdr9k7uOCQb376NoUnuTJ8iAt6Z5EHsM8lE9lBOsl7iKTVEFDi
2025-06-29 20:11:17.563 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:11:17.563 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:11:17.563 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:11:17.563 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:11:17.563 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: user2@example.com(String)
2025-06-29 20:11:17.565 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-29 20:11:17.566 [http-nio-8080-exec-7] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:user2@example.com    数据库密码:$2a$10$N.zmdr9k7uOCQb376NoUnuTJ8iAt6Z5EHsM8lE9lBOsl7iKTVEFDi
2025-06-29 20:11:25.456 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:11:25.457 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:11:25.457 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:11:25.457 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:11:25.457 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: user2@example.com(String)
2025-06-29 20:11:25.458 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-29 20:11:25.459 [http-nio-8080-exec-9] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:user2@example.com    数据库密码:$2a$10$N.zmdr9k7uOCQb376NoUnuTJ8iAt6Z5EHsM8lE9lBOsl7iKTVEFDi
2025-06-29 20:12:39.359 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:12:39.360 [http-nio-8080-exec-2] INFO  com.huang.store.controller.UserController - 验证账号是否已注册: 2545059634@qq.com
2025-06-29 20:12:39.362 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:12:39.363 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:12:39.363 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:12:39.365 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:12:39.366 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 0
2025-06-29 20:12:39.366 [http-nio-8080-exec-2] INFO  com.huang.store.controller.UserController - 账号可以注册: 2545059634@qq.com
2025-06-29 20:12:42.401 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:12:42.402 [http-nio-8080-exec-1] INFO  com.huang.store.controller.UserController - 验证账号是否已注册: 2545059634@qq.com
2025-06-29 20:12:42.402 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:12:42.402 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:12:42.402 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:12:42.402 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:12:42.403 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 0
2025-06-29 20:12:42.404 [http-nio-8080-exec-1] INFO  com.huang.store.controller.UserController - 账号可以注册: 2545059634@qq.com
2025-06-29 20:12:42.419 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:12:42.419 [http-nio-8080-exec-5] ERROR com.huang.store.exception.GlobalExceptionHandler - 系统异常
org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:260)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:442)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:383)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:125)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:67)
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:498)
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1266)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1048)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-29 20:12:42.420 [http-nio-8080-exec-5] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2025-06-29 20:14:13.871 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:14:13.871 [Thread-7] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-29 20:14:13.872 [Thread-7] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-06-29 20:14:13.879 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-956990256] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-29 20:14:13.880 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-956990256] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-29 20:14:13.881 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-397698501] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-29 20:14:13.881 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-397698501] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-29 20:14:13.882 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-29 20:14:13.884 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-29 20:14:13.911 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-06-29 20:14:13.913 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-06-29 20:14:14.031 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 16124 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-29 20:14:14.031 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-29 20:14:14.031 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-29 20:14:14.415 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:14:14.415 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:14:14.420 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-06-29 20:14:14.496 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.huang.store.mapper]' package. Please check your configuration.
2025-06-29 20:14:14.631 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-29 20:14:14.632 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-29 20:14:14.632 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-29 20:14:14.636 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-29 20:14:14.637 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-29 20:14:14.639 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:14:14.641 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:14:14.641 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-29 20:14:14.685 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:14:14.685 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 647 ms
2025-06-29 20:14:14.858 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-29 20:14:14.988 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} inited
2025-06-29 20:14:15.009 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} inited
2025-06-29 20:14:15.050 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is java.lang.ClassFormatError: Truncated class file
2025-06-29 20:14:15.050 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closed
2025-06-29 20:14:15.051 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closed
2025-06-29 20:14:15.052 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-29 20:14:15.059 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-29 20:14:15.093 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is java.lang.ClassFormatError: Truncated class file
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is java.lang.ClassFormatError: Truncated class file
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 24 common frames omitted
Caused by: java.lang.ClassFormatError: Truncated class file
	at java.base/java.lang.ClassLoader.defineClass1(Native Method)
	at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1012)
	at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:150)
	at java.base/java.net.URLClassLoader.defineClass(URLClassLoader.java:524)
	at java.base/java.net.URLClassLoader$1.run(URLClassLoader.java:427)
	at java.base/java.net.URLClassLoader$1.run(URLClassLoader.java:421)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.base/java.net.URLClassLoader.findClass(URLClassLoader.java:420)
	at org.springframework.boot.devtools.restart.classloader.RestartClassLoader.findClass(RestartClassLoader.java:159)
	at org.springframework.boot.devtools.restart.classloader.RestartClassLoader.loadClass(RestartClassLoader.java:141)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:467)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:186)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:102)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:137)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:130)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:120)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:593)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:475)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:615)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:180)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9116b49e.CGLIB$sqlSessionFactory$1(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9116b49e$$FastClassBySpringCGLIB$$66e34dc9.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9116b49e.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
2025-06-29 20:14:16.680 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 16124 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-29 20:14:16.680 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-29 20:14:16.680 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-29 20:14:16.988 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:14:16.988 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:14:17.014 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25 ms. Found 0 Redis repository interfaces.
2025-06-29 20:14:17.116 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$96c1a63f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:14:17.129 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:14:17.246 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-29 20:14:17.246 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-29 20:14:17.246 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-29 20:14:17.246 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-29 20:14:17.247 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-29 20:14:17.248 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:14:17.248 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:14:17.249 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-29 20:14:17.284 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-1].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:14:17.284 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 601 ms
2025-06-29 20:14:17.289 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-29 20:14:17.426 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} inited
2025-06-29 20:14:17.451 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} inited
2025-06-29 20:14:17.636 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-29 20:14:17.636 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-29 20:14:17.944 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-29 20:14:18.126 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@2c9faebf, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2a804bbe, org.springframework.security.web.context.SecurityContextPersistenceFilter@a463731, org.springframework.security.web.header.HeaderWriterFilter@2c711a09, org.springframework.web.filter.CorsFilter@42a13565, org.springframework.security.web.authentication.logout.LogoutFilter@6db7eca2, com.huang.store.security.JwtAuthenticationTokenFilter@14a4d846, com.huang.store.security.CustomAuthenticationFilter@21d54149, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@4742a0bf, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6d07d5f1, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@49823b0a, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@24aec3f, org.springframework.security.web.session.SessionManagementFilter@4391faf8, org.springframework.security.web.access.ExceptionTranslationFilter@26c82dcd, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1bb6db68]
2025-06-29 20:14:18.399 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-29 20:14:18.418 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 20:14:18.421 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-29 20:14:18.426 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 1.816 seconds (JVM running for 439.994)
2025-06-29 20:14:34.339 [http-nio-8080-exec-2] INFO  o.a.c.c.ContainerBase.[Tomcat-1].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 20:14:34.339 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 20:14:34.341 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-29 20:14:34.346 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:14:34.349 [http-nio-8080-exec-2] INFO  com.huang.store.controller.UserController - 验证账号是否已注册: 2545059634@qq.com
2025-06-29 20:14:34.351 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:14:34.351 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:34.351 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:14:34.352 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:14:34.353 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 0
2025-06-29 20:14:34.353 [http-nio-8080-exec-2] INFO  com.huang.store.controller.UserController - 账号可以注册: 2545059634@qq.com
2025-06-29 20:14:34.366 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:14:34.366 [http-nio-8080-exec-1] INFO  com.huang.store.controller.UserController - 开始用户注册: 2545059634@qq.com
2025-06-29 20:14:34.366 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:14:34.366 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:34.366 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:14:34.366 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:14:34.367 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 0
2025-06-29 20:14:34.455 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.addUser - ==>  Preparing: insert into user(account,password,name,gender,imgUrl,info,manage,enable,registerTime) values(?,?,?,?,?,?,?,?,?) 
2025-06-29 20:14:34.456 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:34.456 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: insert into user(account,password,name,gender,imgUrl,info,manage,enable,registerTime)
         values(?,?,?,?,?,?,?,?,?) ::: DataSources: master
2025-06-29 20:14:34.492 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.addUser - ==> Parameters: 2545059634@qq.com(String), $2a$10$w8zNNUSDq3MCiLDDuAhYXedA0QGva1Z4.6UxO61Njhsrlo8voc01G(String), null, null, null, null, false(Boolean), true(Boolean), 2025-06-29 20:14:34.454(Timestamp)
2025-06-29 20:14:34.501 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.addUser - <==    Updates: 1
2025-06-29 20:14:34.502 [http-nio-8080-exec-1] INFO  com.huang.store.controller.UserController - 用户注册成功: 2545059634@qq.com
2025-06-29 20:14:37.250 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTM4MTgwMzUsImV4cCI6MTc1MTE5NTYxOH0.nkAmz9GZDAbsZ-vBi85Ta_oPYXy04CBMTcuW4GJQZSadRvx0RNZTiRACLSlc9a61y1uByl29K8gWSL80Ef8dmg
2025-06-29 20:14:37.370 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:14:37.370 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:37.370 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:14:37.371 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:14:37.371 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-29 20:14:37.381 [http-nio-8080-exec-3] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:2545059634@qq.com    数据库密码:$2a$10$w8zNNUSDq3MCiLDDuAhYXedA0QGva1Z4.6UxO61Njhsrlo8voc01G
2025-06-29 20:14:37.513 [http-nio-8080-exec-3] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=2545059634@qq.com, password=$2a$10$w8zNNUSDq3MCiLDDuAhYXedA0QGva1Z4.6UxO61Njhsrlo8voc01G, enabled=true, roles=[ROLE_USER]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_USER]]
2025-06-29 20:14:37.533 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:14:37.533 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:37.533 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:14:37.533 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:14:37.535 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-29 20:14:37.815 [http-nio-8080-exec-3] WARN  org.apache.catalina.util.SessionIdGeneratorBase - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [155] milliseconds.
2025-06-29 20:14:38.905 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:14:38.905 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:38.905 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:14:38.906 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:14:38.908 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-29 20:14:40.777 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-29 20:14:40.777 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:40.777 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-29 20:14:40.777 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:14:40.777 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:40.777 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:14:40.777 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-29 20:14:40.779 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-29 20:14:40.779 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-29 20:14:40.779 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:40.779 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-29 20:14:40.780 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:14:40.781 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:14:40.782 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:14:40.782 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:40.782 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:14:40.782 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-29 20:14:40.782 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-29 20:14:40.782 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:40.782 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-29 20:14:40.783 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:14:40.783 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:40.783 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:14:40.782 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-29 20:14:40.783 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-29 20:14:40.784 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:40.784 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:14:40.784 [http-nio-8080-exec-9] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-29 20:14:40.785 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:14:40.787 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:14:40.788 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:14:40.787 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:14:40.788 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:40.788 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:14:40.788 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:40.788 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:14:40.789 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-29 20:14:40.790 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-29 20:14:40.791 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:14:40.791 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:40.791 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:14:40.794 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:14:40.796 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:14:40.796 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:14:40.796 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:40.796 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:14:40.797 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:14:40.798 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-29 20:14:40.799 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:14:40.799 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:40.799 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:14:40.799 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:14:40.802 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:14:40.802 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:14:40.802 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:40.802 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:14:40.803 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:14:40.803 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-29 20:14:40.803 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-29 20:14:40.804 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:14:40.804 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:14:40.805 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:14:40.805 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:14:40.805 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:40.805 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:14:40.805 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:14:40.806 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-29 20:14:40.808 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:14:40.809 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:14:40.809 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:14:40.809 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:14:40.809 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:40.809 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:14:40.809 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-29 20:14:40.810 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:14:40.810 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:14:40.810 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:14:40.810 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:40.810 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:14:40.810 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:14:40.810 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:40.810 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:14:40.810 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:14:40.811 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-29 20:14:40.811 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:14:40.812 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:14:40.812 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:14:40.812 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:40.812 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:14:40.812 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:14:40.814 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:14:40.814 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:14:40.814 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:14:40.814 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:14:40.814 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:14:40.816 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:15:25.870 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:15:25.870 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:15:25.870 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:15:25.871 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:15:25.872 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-29 20:15:26.760 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:15:26.761 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:15:26.761 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:15:26.763 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 2545059634@qq.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:15:26.766 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:15:26.767 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-29 20:15:26.767 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:15:26.767 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:15:26.767 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 2545059634@qq.com(String), false(Boolean)
2025-06-29 20:15:26.768 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:15:27.417 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:15:27.417 [Thread-9] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-29 20:15:27.417 [Thread-9] INFO  o.a.c.c.ContainerBase.[Tomcat-1].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-06-29 20:15:27.429 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-355173073] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-29 20:15:27.429 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-355173073] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-29 20:15:27.429 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-201757929] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-29 20:15:27.429 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-201757929] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-29 20:15:27.429 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-29 20:15:27.431 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-29 20:15:27.434 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closed
2025-06-29 20:15:27.436 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closed
2025-06-29 20:15:27.516 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 16124 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-29 20:15:27.516 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-29 20:15:27.517 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-29 20:15:27.736 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:15:27.736 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:15:27.747 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-29 20:15:27.788 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$96c1a63f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:15:27.794 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:15:27.841 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-29 20:15:27.841 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-29 20:15:27.841 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-29 20:15:27.842 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-29 20:15:27.842 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-29 20:15:27.842 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:15:27.842 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:15:27.842 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-29 20:15:27.855 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-1].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:15:27.855 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 337 ms
2025-06-29 20:15:27.857 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-29 20:15:27.924 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-7} inited
2025-06-29 20:15:27.937 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-8} inited
2025-06-29 20:15:28.015 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-29 20:15:28.015 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-29 20:15:28.112 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-29 20:15:28.171 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@7e7e77f3, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@73c99dff, org.springframework.security.web.context.SecurityContextPersistenceFilter@77729f23, org.springframework.security.web.header.HeaderWriterFilter@a8ac90f, org.springframework.web.filter.CorsFilter@63d65c42, org.springframework.security.web.authentication.logout.LogoutFilter@28ed83d2, com.huang.store.security.JwtAuthenticationTokenFilter@63c5fee3, com.huang.store.security.CustomAuthenticationFilter@6109ead, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@492b6c63, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@28442bfa, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@745a5d4c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@c878961, org.springframework.security.web.session.SessionManagementFilter@434f95f4, org.springframework.security.web.access.ExceptionTranslationFilter@68f6f3e4, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4d677927]
2025-06-29 20:15:28.303 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-29 20:15:28.318 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 20:15:28.322 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-29 20:15:28.324 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.843 seconds (JVM running for 509.892)
2025-06-29 20:15:30.664 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat-1].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 20:15:30.664 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 20:15:30.665 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-29 20:15:30.671 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,put,num,addTime,account from book join cart on book.id = cart.id where account=? limit ?,? 
2025-06-29 20:15:30.671 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:15:30.671 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,put,num,addTime,account
         from book join cart on book.id = cart.id
         where account=? limit ?,? ::: DataSources: slave
2025-06-29 20:15:30.672 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==> Parameters: 2545059634@qq.com(String), 0(Integer), 10(Integer)
2025-06-29 20:15:30.674 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - <==      Total: 0
2025-06-29 20:15:33.927 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:15:33.927 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:15:33.927 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:15:33.930 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 2545059634@qq.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:15:33.932 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:15:33.933 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-29 20:15:33.933 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:15:33.933 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:15:33.934 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 2545059634@qq.com(String), false(Boolean)
2025-06-29 20:15:33.935 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:15:35.875 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:15:35.875 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:15:35.875 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:15:35.877 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:15:35.879 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-29 20:15:42.005 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:15:42.005 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:15:42.005 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:15:42.005 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 2545059634@qq.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:15:42.007 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:15:42.007 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-29 20:15:42.007 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:15:42.007 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:15:42.008 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 2545059634@qq.com(String), false(Boolean)
2025-06-29 20:15:42.009 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:15:42.648 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:15:42.648 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:15:42.648 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:15:42.649 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:15:42.651 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-29 20:15:44.267 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:15:44.267 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:15:44.267 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:15:44.268 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 2545059634@qq.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:15:44.269 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:15:44.270 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-29 20:15:44.270 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:15:44.270 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:15:44.270 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 2545059634@qq.com(String), false(Boolean)
2025-06-29 20:15:44.271 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:15:57.071 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:15:57.072 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:15:57.072 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:15:57.073 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 2545059634@qq.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:15:57.075 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:15:57.077 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-29 20:15:57.077 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:15:57.077 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:15:57.078 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 2545059634@qq.com(String), false(Boolean)
2025-06-29 20:15:57.080 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:15:57.698 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:15:57.698 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:15:57.698 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:15:57.698 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:15:57.700 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-29 20:16:44.794 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-29 20:16:44.794 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:16:44.794 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-29 20:16:44.795 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-29 20:16:44.795 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:16:44.795 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:16:44.795 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:16:44.794 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-29 20:16:44.795 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:16:44.795 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-29 20:16:44.795 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:16:44.795 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:16:44.795 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:16:44.795 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-29 20:16:44.795 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:16:44.795 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:16:44.796 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-29 20:16:44.797 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-29 20:16:44.797 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:16:44.797 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-29 20:16:44.797 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:16:44.801 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:16:44.802 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:16:44.802 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:16:44.802 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:16:44.803 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:16:44.805 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-29 20:16:44.806 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:16:44.806 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:16:44.806 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:16:44.807 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-29 20:16:44.809 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-29 20:16:44.809 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:16:44.809 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:16:44.809 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:16:44.810 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:16:44.812 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:16:44.814 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-29 20:16:44.814 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:16:44.814 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:16:44.814 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:16:44.814 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-29 20:16:44.815 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:16:44.817 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:16:44.817 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:16:44.818 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:16:44.819 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:16:44.820 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:16:44.820 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:16:44.820 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:16:44.820 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:16:44.821 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:16:44.822 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:16:44.823 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:16:44.823 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-29 20:16:44.823 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:16:44.823 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:16:44.823 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:16:44.824 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:16:44.824 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:16:44.824 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:16:44.824 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:16:44.824 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:16:44.824 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:16:44.824 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:16:44.824 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:16:44.825 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-29 20:16:44.825 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:16:44.825 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:16:44.825 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:16:44.826 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:16:44.826 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:16:44.826 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:16:44.826 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:16:44.826 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:16:44.826 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:16:44.826 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-29 20:16:44.826 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:16:44.827 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:16:44.827 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:16:44.827 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:16:44.828 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:16:44.828 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:16:44.829 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:16:44.830 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:16:44.831 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:16:44.831 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:16:44.831 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:16:44.831 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:16:44.832 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:16:44.847 [http-nio-8080-exec-2] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-29 20:16:44.847 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:16:44.847 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:16:44.847 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:16:44.849 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-29 20:16:44.850 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-29 20:17:47.533 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:17:47.533 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:47.533 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:17:47.537 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 2545059634@qq.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:17:47.538 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:17:47.539 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-29 20:17:47.539 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:47.539 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:17:47.539 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 2545059634@qq.com(String), false(Boolean)
2025-06-29 20:17:47.540 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:17:48.204 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,put,num,addTime,account from book join cart on book.id = cart.id where account=? limit ?,? 
2025-06-29 20:17:48.204 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:48.204 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,put,num,addTime,account
         from book join cart on book.id = cart.id
         where account=? limit ?,? ::: DataSources: slave
2025-06-29 20:17:48.205 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==> Parameters: 2545059634@qq.com(String), 0(Integer), 10(Integer)
2025-06-29 20:17:48.206 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - <==      Total: 0
2025-06-29 20:17:49.475 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-29 20:17:49.475 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:17:49.475 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:49.475 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:49.475 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:17:49.475 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:17:49.475 [http-nio-8080-exec-1] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-29 20:17:49.475 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:17:49.475 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:17:49.475 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:49.475 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:17:49.475 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-29 20:17:49.475 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:49.475 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-29 20:17:49.476 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:17:49.476 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:49.476 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:17:49.476 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-29 20:17:49.476 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:49.476 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-29 20:17:49.478 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-29 20:17:49.478 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:17:49.478 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-29 20:17:49.479 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:17:49.479 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:49.479 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:17:49.479 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:17:49.481 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-29 20:17:49.481 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-29 20:17:49.483 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:17:49.483 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:49.483 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:17:49.483 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:17:49.483 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-29 20:17:49.484 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:17:49.484 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:17:49.484 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:49.484 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:17:49.484 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:17:49.484 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:49.484 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:17:49.484 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:17:49.484 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-29 20:17:49.484 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:17:49.485 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:17:49.485 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:17:49.486 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:17:49.486 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:17:49.486 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:49.486 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:17:49.486 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-29 20:17:49.487 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:17:49.488 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:17:49.489 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-29 20:17:49.489 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:49.489 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-29 20:17:49.489 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:17:49.489 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:49.489 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:17:49.489 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-29 20:17:49.489 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:17:49.489 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:17:49.490 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-29 20:17:49.490 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-29 20:17:49.490 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:17:49.491 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:17:49.492 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:17:49.492 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:49.492 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:17:49.492 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:17:49.492 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:49.492 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:17:49.492 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:17:49.492 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-29 20:17:49.493 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:17:49.493 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:17:49.493 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:17:49.493 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:17:49.493 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:49.493 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:49.493 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:17:49.493 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:17:49.493 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-29 20:17:49.493 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:17:49.494 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:17:49.494 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:17:49.494 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:49.494 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:17:49.495 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:17:49.495 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:17:49.496 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:17:49.496 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:17:49.496 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:49.496 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:17:49.497 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:17:49.497 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:17:52.840 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:17:52.840 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:52.840 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:17:52.843 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 2545059634@qq.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:17:52.845 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:17:52.846 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-29 20:17:52.846 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:52.846 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:17:52.848 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 2545059634@qq.com(String), false(Boolean)
2025-06-29 20:17:52.849 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:17:54.840 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:17:54.840 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:17:54.840 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:17:54.841 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:17:54.843 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-29 20:18:26.712 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-29 20:18:26.712 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:26.712 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-29 20:18:26.712 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:18:26.712 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:26.712 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:18:26.712 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-29 20:18:26.712 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:18:26.717 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-29 20:18:26.718 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:18:26.718 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:26.718 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:18:26.718 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-29 20:18:26.714 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-29 20:18:26.719 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-29 20:18:26.719 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:26.719 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-29 20:18:26.719 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-29 20:18:26.719 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-29 20:18:26.720 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-29 20:18:26.712 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-29 20:18:26.721 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:26.721 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-29 20:18:26.715 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:18:26.721 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:26.721 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:18:26.721 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-29 20:18:26.721 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:18:26.722 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:18:26.723 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:18:26.723 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:26.723 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:18:26.723 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-29 20:18:26.723 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:18:26.723 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:18:26.723 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:26.723 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:18:26.724 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:18:26.724 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:18:26.724 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:18:26.725 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:18:26.725 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:26.725 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:18:26.725 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-29 20:18:26.717 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:18:26.726 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:18:26.726 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:18:26.726 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:26.726 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:18:26.726 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:18:26.726 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:26.726 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:18:26.726 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-29 20:18:26.726 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:18:26.715 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-29 20:18:26.726 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:26.726 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:18:26.727 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:18:26.727 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:18:26.727 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:18:26.728 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:26.728 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:18:26.727 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:18:26.728 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:26.728 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:18:26.728 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:18:26.728 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-29 20:18:26.729 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:18:26.729 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:18:26.729 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:18:26.729 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:26.729 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:18:26.729 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:18:26.727 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:18:26.729 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:18:26.730 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:26.730 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:18:26.730 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:18:26.731 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:18:26.731 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:18:26.731 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:26.731 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:18:26.731 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:18:26.731 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-29 20:18:26.731 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:18:26.732 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:18:26.747 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:18:26.747 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:26.747 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:18:26.747 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:18:26.747 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:18:26.747 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:26.747 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:18:26.748 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:18:26.748 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:18:26.749 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:18:42.277 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,put,num,addTime,account from book join cart on book.id = cart.id where account=? limit ?,? 
2025-06-29 20:18:42.278 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:42.278 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,put,num,addTime,account
         from book join cart on book.id = cart.id
         where account=? limit ?,? ::: DataSources: slave
2025-06-29 20:18:42.280 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==> Parameters: 2545059634@qq.com(String), 0(Integer), 10(Integer)
2025-06-29 20:18:42.283 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - <==      Total: 0
2025-06-29 20:18:43.680 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:18:43.680 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:43.680 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:18:43.682 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 2545059634@qq.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:18:43.684 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:18:43.685 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-29 20:18:43.685 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:43.685 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:18:43.685 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 2545059634@qq.com(String), false(Boolean)
2025-06-29 20:18:43.686 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:18:44.150 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:18:44.150 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:44.150 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:18:44.150 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:18:44.151 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-29 20:18:45.470 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:18:45.470 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:45.470 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:18:45.470 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 2545059634@qq.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:18:45.472 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:18:45.473 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-29 20:18:45.474 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:45.474 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:18:45.474 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 2545059634@qq.com(String), false(Boolean)
2025-06-29 20:18:45.475 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:18:50.105 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,put,num,addTime,account from book join cart on book.id = cart.id where account=? limit ?,? 
2025-06-29 20:18:50.105 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:50.105 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,put,num,addTime,account
         from book join cart on book.id = cart.id
         where account=? limit ?,? ::: DataSources: slave
2025-06-29 20:18:50.105 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==> Parameters: 2545059634@qq.com(String), 0(Integer), 10(Integer)
2025-06-29 20:18:50.106 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - <==      Total: 0
2025-06-29 20:18:51.492 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:18:51.492 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:51.492 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:18:51.492 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 2545059634@qq.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:18:51.494 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:18:51.494 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-29 20:18:51.494 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:51.494 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:18:51.495 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 2545059634@qq.com(String), false(Boolean)
2025-06-29 20:18:51.496 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:18:53.129 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,put,num,addTime,account from book join cart on book.id = cart.id where account=? limit ?,? 
2025-06-29 20:18:53.129 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:53.129 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,put,num,addTime,account
         from book join cart on book.id = cart.id
         where account=? limit ?,? ::: DataSources: slave
2025-06-29 20:18:53.129 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==> Parameters: 2545059634@qq.com(String), 0(Integer), 10(Integer)
2025-06-29 20:18:53.130 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - <==      Total: 0
2025-06-29 20:18:57.143 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:18:57.143 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:18:57.143 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:18:57.143 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:18:57.145 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-29 20:19:03.594 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:19:03.595 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:03.595 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:19:03.595 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 2545059634@qq.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:19:03.596 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:19:03.596 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-29 20:19:03.596 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:03.596 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:19:03.596 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 2545059634@qq.com(String), false(Boolean)
2025-06-29 20:19:03.598 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:19:04.222 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:19:04.222 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:04.222 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:19:04.222 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:19:04.224 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-29 20:19:13.366 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:19:13.366 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:13.366 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:19:13.366 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 2545059634@qq.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:19:13.368 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:19:13.369 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-29 20:19:13.369 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:13.369 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:19:13.369 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 2545059634@qq.com(String), false(Boolean)
2025-06-29 20:19:13.371 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:19:14.180 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:19:14.180 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:14.180 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:19:14.183 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 133@qq.com(String), 已收货(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:19:14.184 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:19:14.185 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ? 
2025-06-29 20:19:14.185 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:14.185 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:19:14.186 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 133@qq.com(String), 已收货(String), false(Boolean)
2025-06-29 20:19:14.187 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:19:18.198 [http-nio-8080-exec-10] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 2545059634@qq.com
2025-06-29 20:19:18.198 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false 
2025-06-29 20:19:18.198 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:18.198 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-06-29 20:19:18.199 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:19:18.200 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 0
2025-06-29 20:19:18.200 [http-nio-8080-exec-10] DEBUG com.huang.store.controller.UserController - 找到0个地址
2025-06-29 20:19:26.700 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,put,num,addTime,account from book join cart on book.id = cart.id where account=? limit ?,? 
2025-06-29 20:19:26.700 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:26.700 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,put,num,addTime,account
         from book join cart on book.id = cart.id
         where account=? limit ?,? ::: DataSources: slave
2025-06-29 20:19:26.700 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==> Parameters: 2545059634@qq.com(String), 0(Integer), 10(Integer)
2025-06-29 20:19:26.701 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - <==      Total: 0
2025-06-29 20:19:29.318 [http-nio-8080-exec-9] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-29 20:19:29.319 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:19:29.319 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:29.319 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:19:29.319 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-29 20:19:29.321 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-29 20:19:29.321 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:19:29.321 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:29.321 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:19:29.321 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:19:29.323 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:19:29.324 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:19:29.324 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:29.324 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:19:29.324 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:19:29.325 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:19:29.326 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-29 20:19:29.326 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:29.326 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-29 20:19:29.326 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-29 20:19:29.329 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-29 20:19:29.329 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-29 20:19:29.329 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:29.329 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-29 20:19:29.329 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-29 20:19:29.330 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-29 20:19:29.330 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:19:29.330 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:29.330 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:19:29.331 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:19:29.331 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-29 20:19:29.331 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:29.331 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:19:29.332 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:19:29.332 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:19:29.332 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:29.332 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:19:29.332 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:19:29.333 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:19:29.334 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:19:29.334 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:29.334 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:19:29.335 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:19:29.335 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:19:29.336 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-29 20:19:29.336 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:19:29.336 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:19:29.336 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:29.336 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:19:29.336 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:19:29.336 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:29.336 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:19:29.336 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:19:29.336 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:19:29.337 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:19:29.338 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:19:29.338 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:19:29.338 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:29.338 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:19:29.338 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:19:29.339 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:19:29.348 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-29 20:19:29.348 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:29.348 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-29 20:19:29.349 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-29 20:19:29.357 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-29 20:19:29.357 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:19:29.357 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:29.357 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:19:29.357 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:19:29.358 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:19:29.360 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:19:29.360 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:29.360 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:19:29.360 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-29 20:19:29.361 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:19:29.361 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:19:29.361 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:29.361 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:19:29.362 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-29 20:19:29.363 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:19:29.363 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:19:29.363 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:29.363 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:19:29.363 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-29 20:19:29.364 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:19:29.364 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:19:29.364 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:29.364 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:19:29.364 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:19:29.365 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:19:29.366 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:19:29.366 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:29.366 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:19:29.366 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:19:29.366 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:19:40.434 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:19:40.435 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:40.435 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:19:40.435 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:19:40.436 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-29 20:19:48.037 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-29 20:19:48.038 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:48.038 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-29 20:19:48.040 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:19:48.040 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:48.040 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:19:48.040 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:19:48.040 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-29 20:19:48.040 [http-nio-8080-exec-2] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-29 20:19:48.041 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:19:48.041 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:19:48.042 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:19:48.043 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:48.043 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:19:48.043 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-29 20:19:48.043 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:19:48.044 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:19:48.044 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:48.044 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:19:48.044 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:19:48.044 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:19:48.045 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:19:48.045 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:48.045 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:19:48.045 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-29 20:19:48.045 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:19:48.045 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:48.045 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:19:48.045 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-29 20:19:48.039 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-29 20:19:48.046 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:48.046 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-29 20:19:48.046 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-29 20:19:48.046 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:19:48.046 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:19:48.047 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:48.047 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:19:48.047 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-29 20:19:48.048 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:19:48.048 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:19:48.048 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:48.048 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:19:48.048 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-29 20:19:48.050 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:19:48.051 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:19:48.051 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:48.051 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:19:48.051 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:19:48.052 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:19:48.052 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:19:48.052 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:48.052 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:19:48.052 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:19:48.052 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:48.052 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:19:48.052 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:19:48.053 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:19:48.053 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-29 20:19:48.053 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:19:48.054 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:19:48.054 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-29 20:19:48.054 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:19:48.054 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:48.054 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:19:48.054 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-29 20:19:48.054 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:48.054 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-29 20:19:48.054 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:19:48.054 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-29 20:19:48.055 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-29 20:19:48.056 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:19:48.057 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:19:48.057 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:48.057 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:19:48.058 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:19:48.059 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:19:48.059 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:19:48.059 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:48.059 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:19:48.060 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:19:48.060 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-29 20:19:48.060 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:48.060 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:19:48.060 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:19:48.061 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:19:48.061 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:19:48.062 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:48.062 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:19:48.062 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-29 20:19:48.062 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:19:48.062 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:19:48.062 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:19:48.063 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:19:48.063 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:19:48.064 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:19:48.064 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:20:10.779 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:20:10.780 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:10.780 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:20:10.780 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:20:10.782 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:20:10.782 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:20:10.783 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:10.783 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:20:10.782 [http-nio-8080-exec-1] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-29 20:20:10.783 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:20:10.784 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:20:10.785 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:20:10.785 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:10.785 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:20:10.785 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:20:10.787 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:20:10.788 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:20:10.788 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:10.788 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:20:10.788 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:20:10.789 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:20:10.789 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:20:10.789 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:10.789 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:20:10.790 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:20:10.790 [http-nio-8080-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-29 20:20:10.792 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:20:16.592 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:20:16.592 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:16.592 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:20:16.593 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-29 20:20:16.594 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:20:16.595 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:16.595 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:16.595 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:16.595 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:20:16.596 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:20:16.597 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:20:16.597 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:16.597 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:20:16.599 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-29 20:20:16.601 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-29 20:20:16.601 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:16.601 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:16.602 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:16.602 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:20:16.603 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:20:16.603 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-29 20:20:16.604 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:16.604 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:20:16.606 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-29 20:20:16.608 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:20:16.609 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:16.609 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:16.609 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:16.609 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:20:16.610 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:16.610 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:16.610 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:16.610 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:16.610 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:20:16.611 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:18.213 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:20:18.213 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:18.213 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:20:18.213 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-29 20:20:18.214 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:20:18.214 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:18.214 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:18.214 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:18.214 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-29 20:20:18.215 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:20:18.216 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:20:18.216 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:18.216 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:20:18.217 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-29 20:20:18.219 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-29 20:20:18.219 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:18.219 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:18.219 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:18.219 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-29 20:20:18.220 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:20:18.220 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-29 20:20:18.221 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:18.221 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:20:18.221 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-29 20:20:18.222 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:20:18.224 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:18.224 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:18.224 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:18.224 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-29 20:20:18.225 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:18.225 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:18.225 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:18.225 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:18.225 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-29 20:20:18.226 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:18.226 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:18.227 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:18.227 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:18.227 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-29 20:20:18.227 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:19.087 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:20:19.087 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:19.087 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:20:19.089 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 3(Integer)
2025-06-29 20:20:19.092 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:20:19.092 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:19.092 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:19.092 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:19.092 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 教育(String), 教育(String)
2025-06-29 20:20:19.093 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:20:19.094 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:20:19.094 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:19.094 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:20:19.094 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 10(Integer), 11(Integer), 3(Integer), 0(Integer), 10(Integer)
2025-06-29 20:20:19.095 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-29 20:20:19.095 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:19.095 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:19.095 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:19.095 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 教育(String), 教育(String)
2025-06-29 20:20:19.096 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:20:19.097 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-29 20:20:19.097 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:19.097 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:20:19.097 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 10(Integer), 11(Integer), 3(Integer)
2025-06-29 20:20:19.098 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:20:20.141 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:20:20.141 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:20.141 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:20:20.141 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 4(Integer)
2025-06-29 20:20:20.142 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:20:20.142 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:20.142 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:20.142 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:20.142 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-29 20:20:20.143 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:20:20.143 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:20:20.143 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:20.143 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:20:20.143 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 4(Integer), 12(Integer), 13(Integer), 0(Integer), 10(Integer)
2025-06-29 20:20:20.144 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-29 20:20:20.145 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:20.145 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:20.145 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:20.145 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-29 20:20:20.145 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-29 20:20:20.146 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-29 20:20:20.146 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:20.146 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:20:20.146 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 4(Integer), 12(Integer), 13(Integer)
2025-06-29 20:20:20.147 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:20:21.441 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:20:21.441 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:21.441 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:20:21.441 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-29 20:20:21.442 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:20:21.443 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:21.443 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:21.443 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:21.443 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:20:21.444 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:20:21.446 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:20:21.446 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:21.446 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:20:21.446 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-29 20:20:21.448 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-29 20:20:21.449 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:21.449 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:21.449 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:21.449 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:20:21.450 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:20:21.451 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-29 20:20:21.451 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:21.451 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:20:21.451 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-29 20:20:21.452 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:20:21.453 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:21.453 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:21.453 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:21.453 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:20:21.454 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:21.454 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:21.454 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:21.454 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:21.455 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:20:21.455 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:49.125 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:20:49.125 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:49.125 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:20:49.125 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-29 20:20:49.127 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:20:49.127 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:49.127 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:49.127 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:49.128 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:20:49.129 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:20:49.130 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:20:49.130 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:49.130 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:20:49.130 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-29 20:20:49.132 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-29 20:20:49.133 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:49.133 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:49.133 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:49.133 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:20:49.134 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:20:49.135 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-29 20:20:49.135 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:49.135 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:20:49.136 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-29 20:20:49.137 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:20:49.137 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:49.138 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:49.138 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:49.138 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:20:49.139 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:49.139 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:49.139 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:49.140 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:49.140 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:20:49.141 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:50.787 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:20:50.787 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:50.787 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:20:50.787 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-29 20:20:50.789 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:20:50.789 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:50.789 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:50.789 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:50.789 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:20:50.790 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:20:50.791 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:20:50.791 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:50.791 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:20:50.791 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-29 20:20:50.793 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-29 20:20:50.793 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:50.794 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:50.794 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:50.794 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:20:50.795 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:20:50.796 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-29 20:20:50.796 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:50.796 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:20:50.796 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-29 20:20:50.797 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:20:50.798 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:50.798 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:50.798 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:50.798 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:20:50.799 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:50.799 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:50.799 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:50.799 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:50.799 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:20:50.800 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:52.350 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:20:52.350 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:52.350 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:20:52.350 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-29 20:20:52.352 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:20:52.352 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:52.352 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:52.352 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:52.353 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:20:52.353 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:20:52.354 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:20:52.354 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:52.354 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:20:52.354 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-29 20:20:52.356 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-29 20:20:52.357 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:52.357 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:52.357 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:52.357 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:20:52.358 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:20:52.358 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-29 20:20:52.358 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:52.358 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:20:52.359 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-29 20:20:52.359 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:20:52.360 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:52.360 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:52.360 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:52.360 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:20:52.362 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:52.364 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:52.364 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:52.364 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:52.364 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:20:52.364 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:52.949 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:20:52.950 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:52.950 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:20:52.950 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-29 20:20:52.951 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:20:52.951 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:52.951 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:52.951 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:52.952 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:20:52.953 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:20:52.954 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:20:52.954 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:52.954 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:20:52.954 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-29 20:20:52.956 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-29 20:20:52.956 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:52.957 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:52.957 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:52.958 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:20:52.959 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:20:52.960 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-29 20:20:52.960 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:52.960 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:20:52.960 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-29 20:20:52.961 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:20:52.962 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:52.962 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:52.962 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:52.962 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:20:52.963 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:52.963 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:52.963 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:52.963 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:52.963 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:20:52.964 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:54.013 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:20:54.013 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:54.013 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:20:54.013 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-29 20:20:54.015 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:20:54.017 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:54.017 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:54.017 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:54.017 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:20:54.019 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:20:54.020 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:20:54.020 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:54.020 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:20:54.021 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-29 20:20:54.022 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-29 20:20:54.023 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:54.023 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:54.023 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:54.023 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:20:54.024 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:20:54.024 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-29 20:20:54.024 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:54.024 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:20:54.025 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-29 20:20:54.025 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:20:54.026 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:54.026 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:54.026 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:54.026 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:20:54.026 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:54.027 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:54.027 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:54.027 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:54.027 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:20:54.027 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:55.356 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:20:55.357 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:55.357 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:20:55.357 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-29 20:20:55.357 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:20:55.358 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:55.358 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:55.358 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:55.358 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:20:55.359 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:20:55.359 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:20:55.359 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:55.359 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:20:55.359 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-29 20:20:55.361 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-29 20:20:55.361 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:55.361 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:55.361 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:55.361 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:20:55.363 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:20:55.363 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-29 20:20:55.363 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:55.363 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:20:55.363 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-29 20:20:55.364 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:20:55.364 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:55.364 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:55.364 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:55.364 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:20:55.365 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:55.365 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:55.365 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:55.365 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:55.365 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:20:55.365 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:55.990 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:20:55.990 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:55.990 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:20:55.990 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-29 20:20:55.991 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:20:55.991 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:55.992 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:55.992 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:55.992 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:20:55.993 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:20:55.993 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:20:55.993 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:55.993 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:20:55.994 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-29 20:20:55.996 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-29 20:20:55.996 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:55.996 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:55.996 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:55.996 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:20:55.997 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:20:55.998 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-29 20:20:55.998 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:55.998 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:20:55.998 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-29 20:20:55.998 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:20:55.999 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:55.999 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:55.999 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:55.999 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:20:55.999 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:56.000 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:56.000 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:56.000 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:56.000 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:20:56.001 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:56.567 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:20:56.567 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:56.567 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:20:56.568 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-29 20:20:56.568 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:20:56.568 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:56.568 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:56.568 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:56.569 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:20:56.569 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:20:56.570 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:20:56.570 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:56.570 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:20:56.570 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-29 20:20:56.572 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-29 20:20:56.572 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:56.572 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:56.572 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:56.572 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:20:56.573 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:20:56.573 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-29 20:20:56.573 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:56.573 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:20:56.573 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-29 20:20:56.574 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:20:56.574 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:56.574 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:56.574 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:56.574 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:20:56.575 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:56.575 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:56.575 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:56.575 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:56.575 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:20:56.576 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:56.860 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:20:56.860 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:56.860 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:20:56.860 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-29 20:20:56.861 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:20:56.861 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:56.861 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:56.861 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:56.861 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:20:56.862 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:20:56.863 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:20:56.863 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:56.863 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:20:56.863 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-29 20:20:56.864 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-29 20:20:56.865 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:20:56.865 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:56.865 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:20:56.865 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:20:56.865 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:20:56.866 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-29 20:20:56.866 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:56.866 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:20:56.866 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-29 20:20:56.867 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:20:56.867 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:56.867 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:56.867 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:56.867 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:20:56.868 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:20:56.869 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:20:56.869 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:20:56.869 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:20:56.869 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:20:56.870 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:21:00.120 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:21:00.120 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:00.121 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:21:00.121 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:21:00.123 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:21:00.123 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:00.123 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:00.123 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:00.123 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:21:00.124 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:21:00.124 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:00.124 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:00.124 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:00.124 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:21:00.125 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:21:00.126 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:00.126 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:00.126 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:00.126 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:21:00.127 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:21:00.128 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:00.128 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:00.128 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:00.128 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:21:00.130 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:21:00.800 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-29 20:21:00.801 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:00.801 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-29 20:21:00.801 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-29 20:21:00.802 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-29 20:21:00.803 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-29 20:21:00.803 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:00.803 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-29 20:21:00.803 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-29 20:21:00.804 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-29 20:21:00.804 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-29 20:21:00.804 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:00.804 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-29 20:21:00.805 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-29 20:21:00.806 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-29 20:21:04.664 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:21:04.664 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:04.664 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:21:04.665 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:21:04.665 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:21:04.665 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:04.665 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:21:04.666 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:21:04.666 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:04.666 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:04.666 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:04.666 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:21:04.668 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:21:04.669 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:04.669 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:04.669 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:04.669 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:21:04.670 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:21:04.671 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:04.671 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:04.671 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:04.671 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:21:04.671 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-29 20:21:04.672 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:21:04.672 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:21:04.672 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:04.673 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:04.673 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:04.673 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:21:04.673 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:21:04.673 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:04.673 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:21:04.673 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:21:04.674 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:21:04.674 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:21:04.674 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:21:04.674 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:04.674 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:21:04.674 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-29 20:21:04.676 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-29 20:21:04.676 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:21:04.676 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:04.676 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:21:04.677 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:21:04.678 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:21:04.678 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-29 20:21:04.678 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:04.678 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:21:04.678 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-29 20:21:04.679 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:21:04.679 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:21:04.679 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:04.679 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:21:04.679 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:21:04.680 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:21:04.680 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:21:04.680 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:04.681 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:21:04.681 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:21:04.682 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:21:11.104 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:21:11.104 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:11.104 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:21:11.104 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:21:11.107 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:21:11.108 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:11.108 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:11.108 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:11.108 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:21:11.109 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:21:11.109 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:11.109 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:11.109 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:11.109 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:21:11.110 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:21:11.111 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:11.111 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:11.111 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:11.111 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:21:11.113 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:21:11.114 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:11.114 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:11.114 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:11.114 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:21:11.116 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:21:11.118 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-29 20:21:11.118 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:11.119 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-29 20:21:11.119 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-29 20:21:11.121 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-29 20:21:11.122 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-29 20:21:11.122 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:11.122 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-29 20:21:11.122 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-29 20:21:11.124 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-29 20:21:11.124 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-29 20:21:11.124 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:11.124 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-29 20:21:11.124 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-29 20:21:11.125 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-29 20:21:21.332 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:21:21.332 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:21.332 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:21:21.332 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-29 20:21:21.332 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:21:21.332 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:21.332 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-29 20:21:21.333 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-29 20:21:21.333 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:21:21.334 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:21.334 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:21.334 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:21.334 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:21:21.334 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:21:21.334 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:21.334 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:21:21.335 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:21:21.335 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:21.335 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:21.335 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:21.335 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:21:21.332 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-29 20:21:21.336 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:21.336 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:21:21.336 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-29 20:21:21.336 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:21:21.337 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-29 20:21:21.338 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:21.338 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-29 20:21:21.338 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:21.338 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:21.338 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:21.342 [http-nio-8080-exec-9] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-29 20:21:21.342 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:21:21.342 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:21:21.342 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:21.342 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:21:21.344 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:21:21.345 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:21:21.346 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:21:21.347 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-29 20:21:21.344 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-29 20:21:21.342 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:21.348 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:21:21.349 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:21:21.349 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:21:21.349 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:21.349 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:21:21.349 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:21.349 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:21:21.350 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-29 20:21:21.350 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:21:21.350 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:21:21.351 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-29 20:21:21.351 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:21:21.351 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:21.351 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-29 20:21:21.351 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-29 20:21:21.352 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:21:21.352 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:21:21.352 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:21:21.352 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:21.352 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:21:21.352 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:21.352 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:21:21.352 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:21.352 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:21.353 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-29 20:21:21.353 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:21:21.353 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:21:21.353 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-29 20:21:21.353 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-29 20:21:21.354 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:21:21.355 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:21:21.355 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-29 20:21:21.355 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:21:21.357 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:21.357 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:21:21.358 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-29 20:21:21.358 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:21:21.363 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:21:21.363 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:21:21.363 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:21.363 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:21:21.364 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-29 20:21:21.364 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:21:21.365 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:21:21.365 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:21.365 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:21:21.365 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:21:21.366 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:21:21.366 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:21:21.367 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:21.367 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:21:21.367 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:21:21.367 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:21:38.600 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:21:38.600 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:38.600 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:21:38.600 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-29 20:21:38.600 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:38.600 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:21:38.601 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:21:38.601 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:21:38.601 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:38.601 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-29 20:21:38.601 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:21:38.601 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:38.601 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-29 20:21:38.601 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:21:38.601 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-29 20:21:38.601 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:21:38.601 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:21:38.602 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:21:38.602 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:21:38.602 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:38.602 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:21:38.602 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:38.602 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:38.602 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:21:38.602 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:38.602 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:21:38.602 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-29 20:21:38.602 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:38.602 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-29 20:21:38.603 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-29 20:21:38.603 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:21:38.603 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:21:38.604 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-29 20:21:38.604 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:21:38.604 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:38.605 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:38.605 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:38.605 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:38.605 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:21:38.605 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:21:38.605 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:38.605 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:21:38.605 [http-nio-8080-exec-10] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-29 20:21:38.605 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:21:38.605 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:38.605 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:21:38.606 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:21:38.606 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:21:38.606 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:21:38.608 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:21:38.608 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:21:38.608 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:21:38.610 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-29 20:21:38.610 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-29 20:21:38.610 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:38.610 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:38.610 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:38.610 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:21:38.610 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:38.610 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:21:38.610 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:21:38.611 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-29 20:21:38.611 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-29 20:21:38.611 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-29 20:21:38.611 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-29 20:21:38.612 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:38.612 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-29 20:21:38.612 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:21:38.612 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:38.612 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:38.612 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:38.612 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-29 20:21:38.612 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:21:38.613 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:21:38.614 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:21:38.614 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:38.614 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:21:38.614 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-29 20:21:38.615 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-29 20:21:38.615 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:21:38.616 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:21:38.617 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:21:38.617 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:38.617 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:21:38.617 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-29 20:21:38.618 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:21:38.618 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:21:38.619 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:38.619 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:21:38.619 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:21:38.621 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:21:38.621 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:21:38.621 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:38.621 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:21:38.621 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:21:38.622 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:21:51.130 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:21:51.130 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:51.130 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:21:51.130 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:21:51.130 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:51.130 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:21:51.130 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:21:51.130 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-29 20:21:51.131 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:21:51.131 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:21:51.132 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:21:51.132 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:51.132 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:51.132 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:21:51.132 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:51.132 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:51.132 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:21:51.133 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:21:51.133 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:21:51.133 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:21:51.133 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:51.133 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:51.133 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:51.134 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:21:51.134 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:21:51.134 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:51.134 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:21:51.134 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-29 20:21:51.135 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:21:51.135 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:51.135 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:51.135 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:51.135 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:21:51.136 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-29 20:21:51.136 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:21:51.136 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:21:51.136 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:21:51.136 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:51.136 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:51.136 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:21:51.136 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:21:51.136 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:21:51.136 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:21:51.137 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:21:51.137 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:21:51.138 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-29 20:21:51.138 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:51.138 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:21:51.139 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-29 20:21:51.140 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:21:51.141 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:21:51.141 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:51.141 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:21:51.141 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:21:51.142 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:21:51.142 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:21:51.142 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:21:51.142 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:21:51.142 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:21:51.143 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:33:16.841 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:33:16.842 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:33:16.842 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:33:16.842 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:33:16.842 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:33:16.842 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:33:16.843 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:33:16.844 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:33:16.845 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:33:16.845 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:33:16.845 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:33:16.845 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:33:16.845 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-29 20:33:16.845 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-29 20:33:16.845 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:33:16.845 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:33:16.845 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:33:16.845 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:33:16.845 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:33:16.846 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:33:16.846 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:33:16.846 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:33:16.846 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:33:16.846 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:33:16.846 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:33:16.846 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:33:16.846 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:33:16.846 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:33:16.846 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:33:16.846 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-29 20:33:16.847 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:33:16.847 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-29 20:33:16.847 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-29 20:33:16.847 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:33:16.847 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:33:16.847 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:33:16.847 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:33:16.847 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:33:16.848 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:33:16.848 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-29 20:33:16.849 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-29 20:33:16.849 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:33:16.849 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-29 20:33:16.849 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-29 20:33:16.850 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-29 20:33:16.850 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-29 20:33:16.850 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:33:16.850 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-29 20:33:16.850 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-29 20:33:16.852 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-29 20:33:16.852 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:33:16.852 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:33:16.852 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:33:16.853 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:33:16.854 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:33:16.855 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:33:16.855 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:33:16.855 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:33:16.855 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:33:16.856 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:38:34.958 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:38:34.959 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:38:34.959 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:38:34.964 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:38:34.967 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-29 20:39:11.170 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:39:11.170 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:39:11.170 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:39:11.170 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:39:11.171 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-29 20:39:21.666 [http-nio-8080-exec-10] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 2545059634@qq.com
2025-06-29 20:39:21.667 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false 
2025-06-29 20:39:21.667 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:39:21.667 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-06-29 20:39:21.668 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:39:21.671 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 0
2025-06-29 20:39:21.671 [http-nio-8080-exec-10] DEBUG com.huang.store.controller.UserController - 找到0个地址
2025-06-29 20:39:24.941 [http-nio-8080-exec-8] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 2545059634@qq.com
2025-06-29 20:39:24.941 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false 
2025-06-29 20:39:24.941 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:39:24.941 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-06-29 20:39:24.941 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:39:24.942 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 0
2025-06-29 20:39:24.942 [http-nio-8080-exec-8] DEBUG com.huang.store.controller.UserController - 找到0个地址
2025-06-29 20:39:27.154 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:39:27.154 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:39:27.154 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:39:27.155 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 2545059634@qq.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:39:27.157 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:39:27.158 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-29 20:39:27.158 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:39:27.158 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:39:27.158 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 2545059634@qq.com(String), false(Boolean)
2025-06-29 20:39:27.159 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:39:28.609 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:39:28.609 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:39:28.609 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:39:28.609 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 2545059634@qq.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:39:28.610 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:39:28.610 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-29 20:39:28.610 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:39:28.610 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:39:28.611 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 2545059634@qq.com(String), false(Boolean)
2025-06-29 20:39:28.611 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:39:38.117 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:39:38.117 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:39:38.117 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:39:38.117 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:39:38.119 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-29 20:39:40.176 [http-nio-8080-exec-6] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 2545059634@qq.com
2025-06-29 20:39:40.176 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false 
2025-06-29 20:39:40.176 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:39:40.176 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-06-29 20:39:40.176 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:39:40.178 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 0
2025-06-29 20:39:40.178 [http-nio-8080-exec-6] DEBUG com.huang.store.controller.UserController - 找到0个地址
2025-06-29 20:39:44.291 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:39:44.291 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:39:44.291 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:39:44.292 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 2545059634@qq.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:39:44.293 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:39:44.293 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-29 20:39:44.293 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:39:44.293 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:39:44.294 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 2545059634@qq.com(String), false(Boolean)
2025-06-29 20:39:44.295 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:39:45.958 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:39:45.958 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:39:45.958 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:39:45.958 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 2545059634@qq.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:39:45.959 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:39:45.960 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-29 20:39:45.960 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:39:45.960 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:39:45.961 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 2545059634@qq.com(String), false(Boolean)
2025-06-29 20:39:45.962 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:39:46.823 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:39:46.823 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:39:46.823 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:39:46.823 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 2545059634@qq.com(String), 已发货(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:39:46.824 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:39:46.825 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ? 
2025-06-29 20:39:46.825 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:39:46.825 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:39:46.825 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 2545059634@qq.com(String), 已发货(String), false(Boolean)
2025-06-29 20:39:46.829 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:39:47.214 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:39:47.215 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:39:47.215 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:39:47.215 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 2545059634@qq.com(String), true(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:39:47.216 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:39:47.217 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-29 20:39:47.217 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:39:47.217 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:39:47.217 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 2545059634@qq.com(String), true(Boolean)
2025-06-29 20:39:47.219 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:39:48.896 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:39:48.896 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:39:48.896 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:39:48.896 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 133@qq.com(String), 已收货(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:39:48.898 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:39:48.898 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ? 
2025-06-29 20:39:48.898 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:39:48.898 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:39:48.899 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 133@qq.com(String), 已收货(String), false(Boolean)
2025-06-29 20:39:48.900 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:45:02.281 [Thread-20] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:45:02.281 [Thread-20] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-29 20:45:02.283 [Thread-20] INFO  o.a.c.c.ContainerBase.[Tomcat-1].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-06-29 20:45:02.296 [Thread-20] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-210964707] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-29 20:45:02.297 [Thread-20] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-210964707] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-29 20:45:02.297 [Thread-20] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-2131169176] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-29 20:45:02.297 [Thread-20] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-2131169176] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-29 20:45:02.298 [Thread-20] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-nioEventLoop-8-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/sun.nio.ch.WEPoll.wait(Native Method)
 java.base@17.0.8/sun.nio.ch.WEPollSelectorImpl.doSelect(WEPollSelectorImpl.java:111)
 java.base@17.0.8/sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:129)
 java.base@17.0.8/sun.nio.ch.SelectorImpl.select(SelectorImpl.java:146)
 app//io.netty.channel.nio.SelectedSelectionKeySetSelector.select(SelectedSelectionKeySetSelector.java:68)
 app//io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:879)
 app//io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:526)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-29 20:45:02.299 [Thread-20] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-6-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-29 20:45:02.300 [Thread-20] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-6-2] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-29 20:45:02.300 [Thread-20] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-6-3] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-29 20:45:02.301 [Thread-20] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-6-4] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-29 20:45:02.303 [Thread-20] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-29 20:45:02.305 [Thread-20] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-29 20:45:02.447 [Thread-20] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-7} closed
2025-06-29 20:45:02.449 [Thread-20] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-8} closed
2025-06-29 20:45:02.612 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 16124 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-29 20:45:02.612 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-29 20:45:02.612 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-29 20:45:02.784 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:45:02.784 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:45:02.793 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-06-29 20:45:02.846 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$96c1a63f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:45:02.851 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:45:02.930 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-29 20:45:02.930 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-29 20:45:02.930 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-29 20:45:02.930 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-29 20:45:02.932 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-29 20:45:02.933 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:45:02.933 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:45:02.933 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-29 20:45:02.950 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-1].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:45:02.950 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 334 ms
2025-06-29 20:45:02.953 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-29 20:45:03.083 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-9} inited
2025-06-29 20:45:03.101 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-10} inited
2025-06-29 20:45:03.183 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-29 20:45:03.183 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-29 20:45:03.287 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-29 20:45:03.352 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@49826b5f, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@46eded01, org.springframework.security.web.context.SecurityContextPersistenceFilter@5e650470, org.springframework.security.web.header.HeaderWriterFilter@10a2b027, org.springframework.web.filter.CorsFilter@6ef7d9ae, org.springframework.security.web.authentication.logout.LogoutFilter@110a5abd, com.huang.store.security.JwtAuthenticationTokenFilter@23406fb, com.huang.store.security.CustomAuthenticationFilter@1a645e56, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@ab5e03d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6d09d3cf, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@68af65c1, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@57f5fc78, org.springframework.security.web.session.SessionManagementFilter@3e724ff0, org.springframework.security.web.access.ExceptionTranslationFilter@17c48370, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@66b8004e]
2025-06-29 20:45:03.444 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-29 20:45:03.451 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 20:45:03.453 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-29 20:45:03.456 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.879 seconds (JVM running for 2285.024)
2025-06-29 20:46:35.218 [Thread-26] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:46:35.219 [Thread-26] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-29 20:46:35.222 [Thread-26] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1965624742] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-29 20:46:35.222 [Thread-26] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1965624742] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-29 20:46:35.222 [Thread-26] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-513100260] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-29 20:46:35.223 [Thread-26] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-513100260] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-29 20:46:35.223 [Thread-26] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-29 20:46:35.224 [Thread-26] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-29 20:46:35.228 [Thread-26] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-9} closed
2025-06-29 20:46:35.228 [Thread-26] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-10} closed
2025-06-29 20:46:35.305 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 16124 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-29 20:46:35.305 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-29 20:46:35.305 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-29 20:46:35.455 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:46:35.455 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:46:35.465 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-29 20:46:35.501 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$96c1a63f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:46:35.505 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:46:35.561 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-29 20:46:35.561 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-29 20:46:35.561 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-29 20:46:35.561 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-29 20:46:35.562 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-29 20:46:35.562 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:46:35.562 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:46:35.562 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-29 20:46:35.574 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-1].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:46:35.574 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 267 ms
2025-06-29 20:46:35.575 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-29 20:46:35.649 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-11} inited
2025-06-29 20:46:35.666 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-12} inited
2025-06-29 20:46:35.748 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-29 20:46:35.748 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-29 20:46:35.847 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-29 20:46:35.903 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5cb5cc4b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@799ddcc5, org.springframework.security.web.context.SecurityContextPersistenceFilter@490bba62, org.springframework.security.web.header.HeaderWriterFilter@26d46dcc, org.springframework.web.filter.CorsFilter@1e04e057, org.springframework.security.web.authentication.logout.LogoutFilter@44c229b6, com.huang.store.security.JwtAuthenticationTokenFilter@45352b0b, com.huang.store.security.CustomAuthenticationFilter@2ac81195, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@6bc42c1c, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@622df7f1, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@67924c75, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@100b3291, org.springframework.security.web.session.SessionManagementFilter@7a79ba42, org.springframework.security.web.access.ExceptionTranslationFilter@1f86816b, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@7cdf68b7]
2025-06-29 20:46:36.029 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-29 20:46:36.045 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 20:46:36.049 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-29 20:46:36.055 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.779 seconds (JVM running for 2377.622)
2025-06-29 20:47:04.453 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat-1].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 20:47:04.453 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 20:47:04.456 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-06-29 20:47:04.465 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTkyNzc1MTMsImV4cCI6MTc1MTIwMTA3N30.er-E4vT4kFExblnlttimTZpmvJc-FH1YmpphEhc1uQQ7cuVH_HtC6-VN7y4VDD1xbpoLI66-vQ6rpys_Hrsm4Q
2025-06-29 20:47:04.477 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:47:04.477 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:47:04.478 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:47:04.479 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 2545059634@qq.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:47:04.486 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:47:04.486 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-29 20:47:04.487 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:47:04.487 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:47:04.487 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 2545059634@qq.com(String), false(Boolean)
2025-06-29 20:47:04.489 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:47:05.118 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTkyNzc1MTMsImV4cCI6MTc1MTIwMTA3N30.er-E4vT4kFExblnlttimTZpmvJc-FH1YmpphEhc1uQQ7cuVH_HtC6-VN7y4VDD1xbpoLI66-vQ6rpys_Hrsm4Q
2025-06-29 20:47:05.119 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:47:05.119 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:47:05.119 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:47:05.121 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:47:05.123 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-29 20:47:10.396 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTkyNzc1MTMsImV4cCI6MTc1MTIwMTA3N30.er-E4vT4kFExblnlttimTZpmvJc-FH1YmpphEhc1uQQ7cuVH_HtC6-VN7y4VDD1xbpoLI66-vQ6rpys_Hrsm4Q
2025-06-29 20:47:10.398 [http-nio-8080-exec-4] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 2545059634@qq.com
2025-06-29 20:47:10.399 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false 
2025-06-29 20:47:10.399 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:47:10.399 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-06-29 20:47:10.400 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:47:10.403 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 0
2025-06-29 20:47:10.403 [http-nio-8080-exec-4] DEBUG com.huang.store.controller.UserController - 找到0个地址
2025-06-29 20:47:12.969 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTkyNzc1MTMsImV4cCI6MTc1MTIwMTA3N30.er-E4vT4kFExblnlttimTZpmvJc-FH1YmpphEhc1uQQ7cuVH_HtC6-VN7y4VDD1xbpoLI66-vQ6rpys_Hrsm4Q
2025-06-29 20:47:12.971 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:47:12.971 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:47:12.971 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:47:12.971 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 2545059634@qq.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:47:12.975 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:47:12.975 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-29 20:47:12.976 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:47:12.976 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:47:12.976 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 2545059634@qq.com(String), false(Boolean)
2025-06-29 20:47:12.977 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:47:13.740 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTkyNzc1MTMsImV4cCI6MTc1MTIwMTA3N30.er-E4vT4kFExblnlttimTZpmvJc-FH1YmpphEhc1uQQ7cuVH_HtC6-VN7y4VDD1xbpoLI66-vQ6rpys_Hrsm4Q
2025-06-29 20:47:13.741 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:47:13.741 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:47:13.741 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:47:13.743 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 133@qq.com(String), 已收货(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:47:13.744 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:47:13.744 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ? 
2025-06-29 20:47:13.744 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:47:13.744 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:47:13.746 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 133@qq.com(String), 已收货(String), false(Boolean)
2025-06-29 20:47:13.747 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:47:16.937 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTkyNzc1MTMsImV4cCI6MTc1MTIwMTA3N30.er-E4vT4kFExblnlttimTZpmvJc-FH1YmpphEhc1uQQ7cuVH_HtC6-VN7y4VDD1xbpoLI66-vQ6rpys_Hrsm4Q
2025-06-29 20:47:16.938 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:47:16.938 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:47:16.938 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:47:16.938 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 2545059634@qq.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:47:16.940 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:47:16.941 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-29 20:47:16.941 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:47:16.941 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:47:16.941 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 2545059634@qq.com(String), false(Boolean)
2025-06-29 20:47:16.942 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:47:20.660 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTkyNzc1MTMsImV4cCI6MTc1MTIwMTA3N30.er-E4vT4kFExblnlttimTZpmvJc-FH1YmpphEhc1uQQ7cuVH_HtC6-VN7y4VDD1xbpoLI66-vQ6rpys_Hrsm4Q
2025-06-29 20:47:20.663 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-29 20:47:20.663 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:47:20.663 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-29 20:47:20.663 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-29 20:47:20.664 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-29 20:47:24.207 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTkyNzc1MTMsImV4cCI6MTc1MTIwMTA3N30.er-E4vT4kFExblnlttimTZpmvJc-FH1YmpphEhc1uQQ7cuVH_HtC6-VN7y4VDD1xbpoLI66-vQ6rpys_Hrsm4Q
2025-06-29 20:47:24.208 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-29 20:47:24.208 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:47:24.208 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-29 20:47:24.208 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 2545059634@qq.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-29 20:47:24.209 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-29 20:47:24.209 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-29 20:47:24.209 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:47:24.209 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-29 20:47:24.211 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 2545059634@qq.com(String), false(Boolean)
2025-06-29 20:47:24.211 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-29 20:47:29.372 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTkyNzc1MTMsImV4cCI6MTc1MTIwMTA3N30.er-E4vT4kFExblnlttimTZpmvJc-FH1YmpphEhc1uQQ7cuVH_HtC6-VN7y4VDD1xbpoLI66-vQ6rpys_Hrsm4Q
2025-06-29 20:47:29.378 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,put,num,addTime,account from book join cart on book.id = cart.id where account=? limit ?,? 
2025-06-29 20:47:29.378 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:47:29.378 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,put,num,addTime,account
         from book join cart on book.id = cart.id
         where account=? limit ?,? ::: DataSources: slave
2025-06-29 20:47:29.380 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==> Parameters: 2545059634@qq.com(String), 0(Integer), 10(Integer)
2025-06-29 20:47:29.385 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - <==      Total: 0
2025-06-29 20:47:58.022 [Thread-32] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:47:58.022 [Thread-32] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-29 20:47:58.022 [Thread-32] INFO  o.a.c.c.ContainerBase.[Tomcat-1].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-06-29 20:47:58.025 [Thread-32] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-372732174] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-29 20:47:58.026 [Thread-32] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-372732174] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-29 20:47:58.026 [Thread-32] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1908169649] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-29 20:47:58.026 [Thread-32] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1908169649] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-29 20:47:58.026 [Thread-32] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-29 20:47:58.027 [Thread-32] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-29 20:47:58.031 [Thread-32] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-11} closed
2025-06-29 20:47:58.032 [Thread-32] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-12} closed
2025-06-29 20:47:58.094 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 16124 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-29 20:47:58.094 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-29 20:47:58.094 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-29 20:47:58.247 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:47:58.247 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:47:58.255 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-06-29 20:47:58.306 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$96c1a63f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:47:58.311 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:47:58.383 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-29 20:47:58.383 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-29 20:47:58.383 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-29 20:47:58.383 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-29 20:47:58.383 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-29 20:47:58.384 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:47:58.384 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:47:58.384 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-29 20:47:58.396 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-1].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:47:58.396 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 301 ms
2025-06-29 20:47:58.398 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-29 20:47:58.466 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-13} inited
2025-06-29 20:47:58.484 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-14} inited
2025-06-29 20:47:58.521 [restartedMain] ERROR o.s.boot.web.embedded.tomcat.TomcatStarter - Error starting Tomcat context. Exception: org.springframework.beans.factory.UnsatisfiedDependencyException. Message: Error creating bean with name 'securityConfig': Unsatisfied dependency expressed through field 'myUserDetailService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'myUserDetailService': Unsatisfied dependency expressed through field 'userService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'firstUser': Unsatisfied dependency expressed through field 'userMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\UserMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.order.Order'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.order.Order
2025-06-29 20:47:58.524 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-29 20:47:58.526 [restartedMain] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1960759229] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-29 20:47:58.526 [restartedMain] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1960759229] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-29 20:47:58.526 [restartedMain] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-268414474] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-29 20:47:58.526 [restartedMain] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-268414474] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-29 20:47:58.527 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat
2025-06-29 20:47:58.527 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-13} closed
2025-06-29 20:47:58.527 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-14} closed
2025-06-29 20:47:58.530 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-29 20:47:58.532 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:165)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:585)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:142)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:481)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:211)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:184)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	... 13 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'securityConfig': Unsatisfied dependency expressed through field 'myUserDetailService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'myUserDetailService': Unsatisfied dependency expressed through field 'userService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'firstUser': Unsatisfied dependency expressed through field 'userMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\UserMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.order.Order'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.order.Order
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:405)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:213)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:213)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:176)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:171)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:156)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:87)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:262)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:236)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:53)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4904)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:794)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:248)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:489)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	... 18 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'myUserDetailService': Unsatisfied dependency expressed through field 'userService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'firstUser': Unsatisfied dependency expressed through field 'userMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\UserMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.order.Order'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.order.Order
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1391)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 69 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'firstUser': Unsatisfied dependency expressed through field 'userMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\UserMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.order.Order'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.order.Order
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1391)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 83 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\UserMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.order.Order'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.order.Order
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1534)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1417)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1391)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 97 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.order.Order'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.order.Order
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1391)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1519)
	... 108 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.order.Order'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.order.Order
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 121 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.order.Order'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.order.Order
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:595)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:475)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:615)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:180)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9116b49e.CGLIB$sqlSessionFactory$1(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9116b49e$$FastClassBySpringCGLIB$$66e34dc9.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9116b49e.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 122 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.order.Order'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.order.Order
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:122)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:593)
	... 135 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.order.Order'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.order.Order
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:76)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:137)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:130)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:120)
	... 137 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.order.Order'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.order.Order
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:120)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 141 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.order.Order
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:200)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	... 143 common frames omitted
2025-06-29 20:48:04.150 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 16124 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-29 20:48:04.153 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-29 20:48:04.153 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-29 20:48:04.373 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:48:04.374 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:48:04.377 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2025-06-29 20:48:04.421 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.huang.store.mapper]' package. Please check your configuration.
2025-06-29 20:48:04.488 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-29 20:48:04.489 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-29 20:48:04.489 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-29 20:48:04.489 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-29 20:48:04.490 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-29 20:48:04.490 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:48:04.490 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:48:04.490 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-29 20:48:04.523 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-2].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:48:04.523 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 367 ms
2025-06-29 20:48:04.533 [restartedMain] ERROR org.apache.catalina.session.StandardManager - Exception loading sessions from persistent storage
java.lang.ClassNotFoundException: com.huang.store.entity.user.SecurityUser
	at org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader.loadClass(TomcatEmbeddedWebappClassLoader.java:72)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1141)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:467)
	at org.apache.catalina.util.CustomObjectInputStream.resolveClass(CustomObjectInputStream.java:158)
	at java.base/java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:2045)
	at java.base/java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1909)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2235)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:514)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:472)
	at org.apache.catalina.session.StandardSession.doReadObject(StandardSession.java:1530)
	at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:1000)
	at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:210)
	at org.apache.catalina.session.StandardManager.load(StandardManager.java:156)
	at org.apache.catalina.session.StandardManager.startInternal(StandardManager.java:346)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4931)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:794)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:248)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:489)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:481)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:211)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:184)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:585)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2025-06-29 20:48:04.595 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-29 20:48:04.667 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-15} inited
2025-06-29 20:48:04.686 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-16} inited
2025-06-29 20:48:04.722 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
2025-06-29 20:48:04.723 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-15} closed
2025-06-29 20:48:04.723 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-16} closed
2025-06-29 20:48:04.724 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-29 20:48:04.729 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-29 20:48:04.733 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 24 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:595)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:475)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:615)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:180)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9116b49e.CGLIB$sqlSessionFactory$1(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9116b49e$$FastClassBySpringCGLIB$$66e34dc9.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9116b49e.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:122)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:593)
	... 38 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:76)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:137)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:130)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:120)
	... 40 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:120)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 44 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:200)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	... 46 common frames omitted
2025-06-29 20:48:06.293 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 16124 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-29 20:48:06.293 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-29 20:48:06.293 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-29 20:48:06.478 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:48:06.478 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:48:06.487 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-06-29 20:48:06.531 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$96c1a63f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:48:06.536 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:48:06.575 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-29 20:48:06.575 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-29 20:48:06.575 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-29 20:48:06.575 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-29 20:48:06.576 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-29 20:48:06.576 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:48:06.576 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:48:06.576 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-29 20:48:06.595 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-3].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:48:06.595 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 300 ms
2025-06-29 20:48:06.657 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-17} inited
2025-06-29 20:48:06.675 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-18} inited
2025-06-29 20:48:06.740 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'cartController': Unsatisfied dependency expressed through field 'bookService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.huang.store.service.imp.BookService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true), @org.springframework.beans.factory.annotation.Qualifier("firstVersion")}
2025-06-29 20:48:06.741 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-17} closed
2025-06-29 20:48:06.742 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-18} closed
2025-06-29 20:48:06.742 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-29 20:48:06.749 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-29 20:48:06.759 [restartedMain] ERROR o.s.b.diagnostics.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field bookService in com.huang.store.controller.CartController required a bean of type 'com.huang.store.service.imp.BookService' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)
	- @org.springframework.beans.factory.annotation.Qualifier("firstVersion")


Action:

Consider defining a bean of type 'com.huang.store.service.imp.BookService' in your configuration.

2025-06-29 20:48:43.635 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 16124 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-29 20:48:43.635 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-29 20:48:43.635 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-29 20:48:43.870 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:48:43.871 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:48:43.873 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
2025-06-29 20:48:43.924 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.huang.store.mapper]' package. Please check your configuration.
2025-06-29 20:48:43.990 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-29 20:48:43.990 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-29 20:48:43.990 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-29 20:48:43.990 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-29 20:48:43.991 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-29 20:48:43.991 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:48:43.991 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:48:43.991 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-29 20:48:44.015 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-4].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:48:44.015 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 377 ms
2025-06-29 20:48:44.116 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-29 20:48:44.186 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-19} inited
2025-06-29 20:48:44.206 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-20} inited
2025-06-29 20:48:44.228 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
2025-06-29 20:48:44.229 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-19} closed
2025-06-29 20:48:44.230 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-20} closed
2025-06-29 20:48:44.230 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-29 20:48:44.239 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-29 20:48:44.244 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 24 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:595)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:475)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:615)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:180)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9116b49e.CGLIB$sqlSessionFactory$1(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9116b49e$$FastClassBySpringCGLIB$$66e34dc9.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9116b49e.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:122)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:593)
	... 38 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:76)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:137)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:130)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:120)
	... 40 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:120)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 44 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:200)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	... 46 common frames omitted
2025-06-29 20:48:46.248 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 16124 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-29 20:48:46.248 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-29 20:48:46.248 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-29 20:48:46.631 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:48:46.631 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:48:46.659 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 27 ms. Found 0 Redis repository interfaces.
2025-06-29 20:48:46.734 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$96c1a63f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:48:46.742 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:48:46.847 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-29 20:48:46.847 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-29 20:48:46.847 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-29 20:48:46.847 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-29 20:48:46.848 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-29 20:48:46.850 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:48:46.850 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:48:46.850 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-29 20:48:46.875 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-5].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:48:46.875 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 626 ms
2025-06-29 20:48:46.879 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-29 20:48:47.027 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-21} inited
2025-06-29 20:48:47.046 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-22} inited
2025-06-29 20:48:47.175 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-29 20:48:47.175 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-29 20:48:47.411 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-29 20:48:47.543 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@bf77e3f, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@dc54fb9, org.springframework.security.web.context.SecurityContextPersistenceFilter@63229bfd, org.springframework.security.web.header.HeaderWriterFilter@2ba3f697, org.springframework.web.filter.CorsFilter@404f128, org.springframework.security.web.authentication.logout.LogoutFilter@15e0756b, com.huang.store.security.JwtAuthenticationTokenFilter@7daed769, com.huang.store.security.CustomAuthenticationFilter@145a905b, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@4111c424, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@e5b2173, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3a786961, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@474f20c2, org.springframework.security.web.session.SessionManagementFilter@7b946bc5, org.springframework.security.web.access.ExceptionTranslationFilter@7e8262c8, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@40582b83]
2025-06-29 20:48:47.790 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-29 20:48:47.857 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 20:48:47.896 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-29 20:48:47.910 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 1.728 seconds (JVM running for 2509.478)
2025-06-29 20:48:51.924 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat-5].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 20:48:51.924 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 20:48:51.927 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-06-29 20:48:51.934 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTkyNzc1MTMsImV4cCI6MTc1MTIwMTA3N30.er-E4vT4kFExblnlttimTZpmvJc-FH1YmpphEhc1uQQ7cuVH_HtC6-VN7y4VDD1xbpoLI66-vQ6rpys_Hrsm4Q
2025-06-29 20:48:51.942 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTkyNzc1MTMsImV4cCI6MTc1MTIwMTA3N30.er-E4vT4kFExblnlttimTZpmvJc-FH1YmpphEhc1uQQ7cuVH_HtC6-VN7y4VDD1xbpoLI66-vQ6rpys_Hrsm4Q
2025-06-29 20:48:51.945 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:48:51.945 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:51.945 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:48:51.945 [http-nio-8080-exec-1] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-29 20:48:51.950 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:48:51.952 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:48:51.952 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:48:51.952 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:51.952 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:48:51.952 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:48:51.954 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:48:51.954 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:48:51.954 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:51.954 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:48:51.954 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:48:51.954 [http-nio-8080-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-29 20:48:51.955 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:48:51.955 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:48:51.955 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:51.955 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:48:51.955 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:48:51.956 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:48:51.956 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:48:51.956 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:51.956 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:48:51.956 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:48:51.957 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:48:53.489 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTkyNzc1MTMsImV4cCI6MTc1MTIwMTA3N30.er-E4vT4kFExblnlttimTZpmvJc-FH1YmpphEhc1uQQ7cuVH_HtC6-VN7y4VDD1xbpoLI66-vQ6rpys_Hrsm4Q
2025-06-29 20:48:53.491 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTkyNzc1MTMsImV4cCI6MTc1MTIwMTA3N30.er-E4vT4kFExblnlttimTZpmvJc-FH1YmpphEhc1uQQ7cuVH_HtC6-VN7y4VDD1xbpoLI66-vQ6rpys_Hrsm4Q
2025-06-29 20:48:53.491 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:48:53.491 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:53.491 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:48:53.491 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:48:53.491 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTkyNzc1MTMsImV4cCI6MTc1MTIwMTA3N30.er-E4vT4kFExblnlttimTZpmvJc-FH1YmpphEhc1uQQ7cuVH_HtC6-VN7y4VDD1xbpoLI66-vQ6rpys_Hrsm4Q
2025-06-29 20:48:53.492 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-29 20:48:53.492 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:53.492 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-29 20:48:53.493 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-29 20:48:53.493 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:53.493 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-29 20:48:53.494 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:48:53.497 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTkyNzc1MTMsImV4cCI6MTc1MTIwMTA3N30.er-E4vT4kFExblnlttimTZpmvJc-FH1YmpphEhc1uQQ7cuVH_HtC6-VN7y4VDD1xbpoLI66-vQ6rpys_Hrsm4Q
2025-06-29 20:48:53.499 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTkyNzc1MTMsImV4cCI6MTc1MTIwMTA3N30.er-E4vT4kFExblnlttimTZpmvJc-FH1YmpphEhc1uQQ7cuVH_HtC6-VN7y4VDD1xbpoLI66-vQ6rpys_Hrsm4Q
2025-06-29 20:48:53.499 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:48:53.499 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:53.499 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:48:53.499 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-29 20:48:53.499 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:53.499 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:48:53.500 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:48:53.500 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:53.500 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:48:53.500 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:48:53.502 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTkyNzc1MTMsImV4cCI6MTc1MTIwMTA3N30.er-E4vT4kFExblnlttimTZpmvJc-FH1YmpphEhc1uQQ7cuVH_HtC6-VN7y4VDD1xbpoLI66-vQ6rpys_Hrsm4Q
2025-06-29 20:48:53.504 [http-nio-8080-exec-8] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-29 20:48:53.504 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:48:53.504 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:53.504 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:48:53.506 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:48:53.506 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:48:53.506 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:53.506 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:48:53.506 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-29 20:48:53.508 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-29 20:48:53.508 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-29 20:48:53.508 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:53.508 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-29 20:48:53.508 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:48:53.510 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-29 20:48:53.510 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:48:53.510 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:53.510 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:48:53.511 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-29 20:48:53.512 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-29 20:48:53.512 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:48:53.512 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:48:53.512 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:53.512 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:48:53.513 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:48:53.513 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:48:53.513 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:53.513 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:48:53.513 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-29 20:48:53.514 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-29 20:48:53.514 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:48:53.514 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:48:53.517 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-29 20:48:53.517 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:48:53.520 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-29 20:48:53.520 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:48:53.520 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:48:53.520 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:48:53.521 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:48:53.521 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:48:53.521 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:53.521 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:48:53.524 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-29 20:48:53.524 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:48:53.525 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:48:53.525 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:53.525 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:48:53.525 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:48:53.525 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:48:53.525 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:48:53.525 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:53.525 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:48:53.525 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-29 20:48:53.526 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:48:53.526 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:48:53.526 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:53.526 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:48:53.526 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:48:53.526 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:48:53.526 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:48:53.526 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:53.526 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:48:53.526 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-29 20:48:53.527 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:48:53.527 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:48:53.527 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:53.527 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:48:53.527 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:48:53.528 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:48:53.528 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:48:53.528 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:48:53.529 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:48:53.529 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:48:53.529 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:48:53.530 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:48:59.708 [Thread-38] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:48:59.708 [Thread-38] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-29 20:48:59.708 [Thread-38] INFO  o.a.c.c.ContainerBase.[Tomcat-5].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-06-29 20:48:59.710 [Thread-38] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1622595880] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-29 20:48:59.711 [Thread-38] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1622595880] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-29 20:48:59.711 [Thread-38] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1364774823] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-29 20:48:59.711 [Thread-38] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1364774823] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-29 20:48:59.711 [Thread-38] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-29 20:48:59.712 [Thread-38] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-29 20:48:59.716 [Thread-38] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-21} closed
2025-06-29 20:48:59.718 [Thread-38] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-22} closed
2025-06-29 20:48:59.819 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 16124 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-29 20:48:59.819 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-29 20:48:59.819 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-29 20:49:00.116 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:49:00.116 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:49:00.132 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-06-29 20:49:00.204 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$96c1a63f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:49:00.211 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:49:00.297 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-29 20:49:00.297 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-29 20:49:00.297 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-29 20:49:00.297 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-29 20:49:00.298 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-29 20:49:00.299 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:49:00.299 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:49:00.299 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-29 20:49:00.323 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-5].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:49:00.323 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 501 ms
2025-06-29 20:49:00.326 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-29 20:49:00.484 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-23} inited
2025-06-29 20:49:00.507 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-24} inited
2025-06-29 20:49:00.537 [restartedMain] ERROR o.s.boot.web.embedded.tomcat.TomcatStarter - Error starting Tomcat context. Exception: org.springframework.beans.factory.UnsatisfiedDependencyException. Message: Error creating bean with name 'securityConfig': Unsatisfied dependency expressed through field 'myUserDetailService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'myUserDetailService': Unsatisfied dependency expressed through field 'userService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'firstUser': Unsatisfied dependency expressed through field 'userMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\UserMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.book.Book'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.book.Book
2025-06-29 20:49:00.538 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-29 20:49:00.540 [restartedMain] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1639045963] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-29 20:49:00.540 [restartedMain] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1639045963] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-29 20:49:00.540 [restartedMain] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-2091313442] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-29 20:49:00.540 [restartedMain] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-2091313442] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-29 20:49:00.541 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat
2025-06-29 20:49:00.541 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-23} closed
2025-06-29 20:49:00.542 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-24} closed
2025-06-29 20:49:00.547 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-29 20:49:00.552 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:165)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:585)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:142)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:481)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:211)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:184)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	... 13 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'securityConfig': Unsatisfied dependency expressed through field 'myUserDetailService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'myUserDetailService': Unsatisfied dependency expressed through field 'userService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'firstUser': Unsatisfied dependency expressed through field 'userMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\UserMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.book.Book'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.book.Book
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:405)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:213)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:213)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:176)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:171)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:156)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:87)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:262)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:236)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:53)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4904)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:794)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:248)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:489)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	... 18 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'myUserDetailService': Unsatisfied dependency expressed through field 'userService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'firstUser': Unsatisfied dependency expressed through field 'userMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\UserMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.book.Book'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.book.Book
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1391)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 69 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'firstUser': Unsatisfied dependency expressed through field 'userMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\UserMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.book.Book'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.book.Book
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1391)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 83 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\UserMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.book.Book'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.book.Book
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1534)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1417)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1391)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 97 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.book.Book'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.book.Book
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1391)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1519)
	... 108 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.book.Book'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.book.Book
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 121 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.book.Book'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.book.Book
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:595)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:475)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:615)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:180)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9116b49e.CGLIB$sqlSessionFactory$1(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9116b49e$$FastClassBySpringCGLIB$$66e34dc9.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9116b49e.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 122 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\BookMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.book.Book'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.book.Book
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:122)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:593)
	... 135 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.book.Book'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.book.Book
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:76)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:137)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:130)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:120)
	... 137 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.book.Book'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.book.Book
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:120)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 141 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.book.Book
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:200)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	... 143 common frames omitted
2025-06-29 20:49:08.312 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 16124 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-29 20:49:08.312 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-29 20:49:08.312 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-29 20:49:08.413 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:49:08.414 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:49:08.420 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-06-29 20:49:08.450 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$96c1a63f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:49:08.453 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:49:08.492 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-29 20:49:08.492 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-29 20:49:08.492 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-29 20:49:08.492 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-29 20:49:08.493 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-29 20:49:08.493 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:49:08.493 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:49:08.493 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-29 20:49:08.506 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-6].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:49:08.506 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 193 ms
2025-06-29 20:49:08.509 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-29 20:49:08.565 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-25} inited
2025-06-29 20:49:08.582 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-26} inited
2025-06-29 20:49:08.654 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-29 20:49:08.654 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-29 20:49:08.741 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-29 20:49:08.796 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4354049c, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@259837d5, org.springframework.security.web.context.SecurityContextPersistenceFilter@75c87b37, org.springframework.security.web.header.HeaderWriterFilter@cc779e0, org.springframework.web.filter.CorsFilter@39f879b4, org.springframework.security.web.authentication.logout.LogoutFilter@6841bbc0, com.huang.store.security.JwtAuthenticationTokenFilter@7243ecd4, com.huang.store.security.CustomAuthenticationFilter@5a9f70c2, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@33b160aa, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6933f750, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5e8c9bef, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1ffb1681, org.springframework.security.web.session.SessionManagementFilter@67ace8de, org.springframework.security.web.access.ExceptionTranslationFilter@6d8e3d3b, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@2066c30f]
2025-06-29 20:49:08.885 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-29 20:49:08.892 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 20:49:08.894 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-29 20:49:08.896 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.603 seconds (JVM running for 2530.464)
2025-06-29 20:49:20.506 [Thread-64] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:49:20.506 [Thread-64] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-29 20:49:20.507 [Thread-64] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1564106972] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-29 20:49:20.507 [Thread-64] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1564106972] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-29 20:49:20.507 [Thread-64] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-325476792] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-29 20:49:20.507 [Thread-64] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-325476792] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-29 20:49:20.508 [Thread-64] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-29 20:49:20.508 [Thread-64] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-29 20:49:20.511 [Thread-64] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-25} closed
2025-06-29 20:49:20.512 [Thread-64] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-26} closed
2025-06-29 20:49:20.580 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 16124 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-29 20:49:20.580 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-29 20:49:20.580 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-29 20:49:20.709 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:49:20.709 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:49:20.721 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 12 ms. Found 0 Redis repository interfaces.
2025-06-29 20:49:20.760 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$96c1a63f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:49:20.764 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:49:20.823 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-29 20:49:20.823 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-29 20:49:20.823 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-29 20:49:20.823 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-29 20:49:20.823 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-29 20:49:20.824 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:49:20.824 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:49:20.824 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-29 20:49:20.844 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-6].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:49:20.844 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 263 ms
2025-06-29 20:49:20.846 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-29 20:49:20.925 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-27} inited
2025-06-29 20:49:20.939 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-28} inited
2025-06-29 20:49:20.955 [restartedMain] ERROR o.s.boot.web.embedded.tomcat.TomcatStarter - Error starting Tomcat context. Exception: org.springframework.beans.factory.UnsatisfiedDependencyException. Message: Error creating bean with name 'securityConfig': Unsatisfied dependency expressed through field 'myUserDetailService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'myUserDetailService': Unsatisfied dependency expressed through field 'userService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'firstUser': Unsatisfied dependency expressed through field 'userMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\UserMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
2025-06-29 20:49:20.956 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-29 20:49:20.957 [restartedMain] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1089062791] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-29 20:49:20.957 [restartedMain] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1089062791] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-29 20:49:20.957 [restartedMain] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1029514892] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-29 20:49:20.957 [restartedMain] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1029514892] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-29 20:49:20.957 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat
2025-06-29 20:49:20.957 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-27} closed
2025-06-29 20:49:20.958 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-28} closed
2025-06-29 20:49:20.960 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-29 20:49:20.962 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:165)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:585)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:142)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:481)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:211)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:184)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	... 13 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'securityConfig': Unsatisfied dependency expressed through field 'myUserDetailService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'myUserDetailService': Unsatisfied dependency expressed through field 'userService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'firstUser': Unsatisfied dependency expressed through field 'userMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\UserMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:405)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:213)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:213)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:176)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:171)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:156)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:87)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:262)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:236)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:53)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4904)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:794)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:248)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:489)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	... 18 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'myUserDetailService': Unsatisfied dependency expressed through field 'userService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'firstUser': Unsatisfied dependency expressed through field 'userMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\UserMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1391)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 69 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'firstUser': Unsatisfied dependency expressed through field 'userMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\UserMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1391)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 83 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\UserMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1534)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1417)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1391)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 97 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1391)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1519)
	... 108 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 121 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:595)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:475)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:615)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:180)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9116b49e.CGLIB$sqlSessionFactory$1(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9116b49e$$FastClassBySpringCGLIB$$66e34dc9.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9116b49e.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 122 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:122)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:593)
	... 135 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:76)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:137)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:130)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:120)
	... 137 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:120)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 141 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:200)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	... 143 common frames omitted
2025-06-29 20:50:00.518 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 16124 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-29 20:50:00.519 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-29 20:50:00.519 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-29 20:50:00.631 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:50:00.631 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:50:00.638 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-06-29 20:50:00.714 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-29 20:50:00.714 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-29 20:50:00.714 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-29 20:50:00.714 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-29 20:50:00.714 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-29 20:50:00.714 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:50:00.714 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:50:00.714 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-29 20:50:00.733 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-7].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:50:00.733 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 214 ms
2025-06-29 20:50:00.785 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-29 20:50:00.836 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-29} inited
2025-06-29 20:50:00.849 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-30} inited
2025-06-29 20:50:00.873 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
2025-06-29 20:50:00.874 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-29} closed
2025-06-29 20:50:00.874 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-30} closed
2025-06-29 20:50:00.875 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-29 20:50:00.879 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-29 20:50:00.881 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 24 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:595)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:475)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:615)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:180)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9116b49e.CGLIB$sqlSessionFactory$1(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9116b49e$$FastClassBySpringCGLIB$$66e34dc9.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9116b49e.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:122)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:593)
	... 38 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:76)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:137)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:130)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:120)
	... 40 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:120)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 44 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:200)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	... 46 common frames omitted
2025-06-29 20:50:02.389 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 16124 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-29 20:50:02.389 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-29 20:50:02.389 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-29 20:50:02.497 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:50:02.497 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:50:02.503 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-06-29 20:50:02.534 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$96c1a63f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:50:02.540 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-29 20:50:02.576 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-29 20:50:02.576 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-29 20:50:02.576 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-29 20:50:02.576 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-29 20:50:02.576 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-29 20:50:02.576 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:50:02.576 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:50:02.576 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-29 20:50:02.589 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-8].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:50:02.589 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 199 ms
2025-06-29 20:50:02.591 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-29 20:50:02.644 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-31} inited
2025-06-29 20:50:02.655 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-32} inited
2025-06-29 20:50:02.721 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-29 20:50:02.721 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-29 20:50:02.814 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-29 20:50:02.860 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@60d9b607, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@119d4229, org.springframework.security.web.context.SecurityContextPersistenceFilter@7c03e54, org.springframework.security.web.header.HeaderWriterFilter@7fab7d20, org.springframework.web.filter.CorsFilter@47213e2e, org.springframework.security.web.authentication.logout.LogoutFilter@3ebf3b51, com.huang.store.security.JwtAuthenticationTokenFilter@60b82503, com.huang.store.security.CustomAuthenticationFilter@249401d3, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@eef78fb, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4fdecebb, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6bb8f81d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3ce847b3, org.springframework.security.web.session.SessionManagementFilter@a0b3d75, org.springframework.security.web.access.ExceptionTranslationFilter@51232eb1, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6cf6a88d]
2025-06-29 20:50:02.950 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-29 20:50:02.958 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 20:50:02.962 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-29 20:50:02.965 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.612 seconds (JVM running for 2584.533)
2025-06-29 20:50:10.221 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat-8].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 20:50:10.221 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 20:50:10.222 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-29 20:50:10.226 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTExOTkyNzc1MTMsImV4cCI6MTc1MTIwMTA3N30.er-E4vT4kFExblnlttimTZpmvJc-FH1YmpphEhc1uQQ7cuVH_HtC6-VN7y4VDD1xbpoLI66-vQ6rpys_Hrsm4Q
2025-06-29 20:50:14.121 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-29 20:50:14.121 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-29 20:50:14.121 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:50:14.121 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-29 20:50:14.121 [http-nio-8080-exec-6] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-29 20:50:14.121 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:50:14.121 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-29 20:50:14.121 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-29 20:50:14.121 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:50:14.122 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-29 20:50:14.122 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:50:14.122 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-29 20:50:14.122 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:50:14.122 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:50:14.122 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:50:14.122 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:50:14.122 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-29 20:50:14.122 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-29 20:50:14.122 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:50:14.122 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-29 20:50:14.125 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-29 20:50:14.125 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-29 20:50:14.125 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:50:14.125 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-29 20:50:14.126 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-29 20:50:14.128 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-29 20:50:14.129 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:50:14.129 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:50:14.129 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:50:14.129 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-29 20:50:14.130 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-29 20:50:14.130 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:50:14.132 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:50:14.132 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:50:14.132 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:50:14.132 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:50:14.132 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:50:14.133 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-29 20:50:14.133 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-29 20:50:14.135 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:50:14.135 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:50:14.135 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:50:14.135 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-29 20:50:14.136 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-29 20:50:14.136 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-29 20:50:14.136 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-29 20:50:14.136 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:50:14.136 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-29 20:50:14.136 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:50:14.136 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-29 20:50:14.137 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-29 20:50:14.137 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:50:14.137 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:50:14.137 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:50:14.137 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:50:14.138 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:50:14.138 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:50:14.138 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-29 20:50:14.138 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-29 20:50:14.139 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-29 20:50:14.139 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:50:14.139 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:50:14.139 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:50:14.139 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:50:14.139 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:50:14.139 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:50:14.139 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:50:14.139 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-29 20:50:14.139 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-29 20:50:14.140 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:50:14.140 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-29 20:50:14.140 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:50:14.140 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-29 20:50:14.140 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-29 20:50:14.140 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-29 20:50:14.141 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:50:14.141 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:50:14.141 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:50:14.141 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:50:14.142 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-29 20:50:14.143 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:50:14.143 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:50:14.143 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:50:14.143 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:50:14.143 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-29 20:50:14.144 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:50:14.144 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:50:14.144 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:50:14.144 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:50:14.144 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-29 20:50:14.145 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-29 20:50:14.145 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-29 20:50:14.145 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-29 20:50:14.145 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-29 20:50:14.145 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-29 20:50:14.145 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
