2025-06-30 10:47:30.228 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 10:47:30.250 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 24392 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 10:47:30.250 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 10:47:30.251 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 10:47:30.400 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 10:47:30.401 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 10:47:30.904 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 10:47:30.905 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 10:47:30.926 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-30 10:47:31.113 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$af18f191] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 10:47:31.134 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 10:47:31.537 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 10:47:31.538 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 10:47:31.539 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 10:47:31.539 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 10:47:31.543 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 10:47:31.550 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 10:47:31.551 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 10:47:31.551 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 10:47:31.609 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 10:47:31.609 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1208 ms
2025-06-30 10:47:31.613 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 10:47:32.206 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 10:47:32.235 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 10:47:32.529 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 10:47:32.529 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 10:47:32.927 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 10:47:33.033 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@503c7a76, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2ef5f3c2, org.springframework.security.web.context.SecurityContextPersistenceFilter@39e1eea4, org.springframework.security.web.header.HeaderWriterFilter@5ddefa8d, org.springframework.web.filter.CorsFilter@6102538, org.springframework.security.web.authentication.logout.LogoutFilter@7a2857db, com.huang.store.security.JwtAuthenticationTokenFilter@4474d758, com.huang.store.security.CustomAuthenticationFilter@49a15fb9, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@6a102c5f, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1037cd97, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4b182fdc, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@79b55a7b, org.springframework.security.web.session.SessionManagementFilter@5650387, org.springframework.security.web.access.ExceptionTranslationFilter@1ad8491a, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@244846df]
2025-06-30 10:47:33.279 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 10:47:33.300 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 10:47:33.315 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 10:47:33.322 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.54 seconds (JVM running for 4.305)
2025-06-30 11:11:46.934 [http-nio-8080-exec-8] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 11:11:46.934 [http-nio-8080-exec-8] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 11:11:46.935 [http-nio-8080-exec-8] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-30 11:11:47.023 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:11:47.022 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:11:47.022 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:11:47.021 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:11:47.021 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:11:47.021 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:11:47.055 [http-nio-8080-exec-1] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 11:11:47.091 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 11:11:47.091 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:11:47.091 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:11:47.091 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:11:47.091 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 11:11:47.091 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 11:11:47.113 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.114 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.114 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.114 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:11:47.114 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.114 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:11:47.114 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.114 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:11:47.114 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.115 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:11:47.114 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 11:11:47.114 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 11:11:47.299 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:11:47.302 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 11:11:47.302 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:11:47.302 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 11:11:47.302 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:11:47.303 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 11:11:47.332 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 11:11:47.332 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:11:47.333 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 11:11:47.335 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 11:11:47.336 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:11:47.338 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 11:11:47.340 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:11:47.340 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 11:11:47.340 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.340 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:11:47.340 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 11:11:47.340 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.340 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:11:47.340 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:11:47.340 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.341 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:11:47.341 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:11:47.341 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.341 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:11:47.341 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:11:47.341 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 11:11:47.341 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:11:47.342 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:11:47.342 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:11:47.342 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.342 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:11:47.342 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:11:47.342 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:11:47.342 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.342 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:11:47.343 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:11:47.345 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 11:11:47.346 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:11:47.347 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 11:11:47.349 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:11:47.350 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:11:47.350 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:11:47.350 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.350 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:11:47.350 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:11:47.350 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.350 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:11:47.351 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:11:47.351 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 11:11:47.352 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:11:47.352 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:11:47.352 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.352 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:11:47.352 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:11:47.353 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 11:11:47.353 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:11:47.353 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.353 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:11:47.353 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:11:47.354 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:11:47.355 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:11:47.355 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.355 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:11:47.355 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:11:47.356 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:11:47.356 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:11:47.356 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:11:47.356 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.356 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:11:47.356 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:11:47.357 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:11:47.357 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.357 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:11:47.357 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:11:47.358 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:11:47.358 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:12:24.725 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:12:24.728 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:12:24.729 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 11:12:24.729 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.729 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 11:12:24.730 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 11:12:24.730 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.730 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 11:12:24.731 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 11:12:24.731 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 11:12:24.732 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:12:24.733 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 11:12:24.733 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:12:24.733 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.734 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:12:24.734 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 11:12:24.734 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.734 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 11:12:24.734 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 11:12:24.736 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 11:12:24.736 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 11:12:24.737 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:12:24.737 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.737 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:12:24.737 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:12:24.737 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:12:24.740 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:12:24.741 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:12:24.741 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 11:12:24.741 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.741 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:12:24.741 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:12:24.741 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.741 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:12:24.742 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:12:24.742 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 11:12:24.742 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:12:24.743 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:12:24.744 [http-nio-8080-exec-6] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 11:12:24.744 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:12:24.744 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:12:24.744 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.744 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:12:24.744 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 11:12:24.744 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:12:24.744 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.744 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:12:24.745 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:12:24.743 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 11:12:24.745 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:12:24.736 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:12:24.746 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:12:24.746 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.746 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:12:24.746 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 11:12:24.746 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:12:24.746 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:12:24.746 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.746 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:12:24.747 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:12:24.747 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.747 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:12:24.747 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:12:24.749 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:12:24.750 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:12:24.750 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:12:24.750 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.752 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:12:24.753 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:12:24.744 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.745 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:12:24.754 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:12:24.746 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:12:24.751 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:12:24.755 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.755 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:12:24.755 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:12:24.756 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:12:24.754 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.757 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:12:24.757 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:12:24.758 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:12:24.759 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:12:24.759 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:12:24.760 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:12:24.760 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:12:24.761 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.761 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:12:24.761 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 11:12:24.762 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:12:24.763 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 11:12:24.763 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:12:24.763 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:12:24.763 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.763 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:12:24.764 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:12:24.766 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:12:24.766 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:12:24.766 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.766 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:12:24.766 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:12:24.769 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:12:29.312 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:12:29.420 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 11:12:29.420 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:29.420 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 11:12:29.421 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-30 11:12:29.435 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 11:12:29.446 [http-nio-8080-exec-1] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:2545059634@qq.com    数据库密码:$2a$10$w8zNNUSDq3MCiLDDuAhYXedA0QGva1Z4.6UxO61Njhsrlo8voc01G
2025-06-30 11:12:29.551 [http-nio-8080-exec-1] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=2545059634@qq.com, password=$2a$10$w8zNNUSDq3MCiLDDuAhYXedA0QGva1Z4.6UxO61Njhsrlo8voc01G, enabled=true, roles=[ROLE_ADMIN]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]
2025-06-30 11:12:29.566 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 11:12:29.566 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:29.566 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 11:12:29.566 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-30 11:12:29.568 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 11:12:29.864 [http-nio-8080-exec-1] WARN  org.apache.catalina.util.SessionIdGeneratorBase - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [136] milliseconds.
2025-06-30 11:12:36.776 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:12:36.776 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.777 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:12:36.778 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:12:36.780 [http-nio-8080-exec-10] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 11:12:36.781 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:12:36.781 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:12:36.784 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:12:36.784 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.784 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:12:36.785 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:12:36.787 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 11:12:36.787 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.787 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 11:12:36.788 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:12:36.788 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 11:12:36.781 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 11:12:36.788 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.788 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 11:12:36.789 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 11:12:36.792 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 11:12:36.793 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 11:12:36.793 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.793 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 11:12:36.794 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 11:12:36.784 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:12:36.795 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.796 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 11:12:36.796 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:12:36.797 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:12:36.797 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.797 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:12:36.797 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:12:36.797 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:12:36.784 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.796 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 11:12:36.798 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:12:36.799 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:12:36.800 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:12:36.800 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:12:36.800 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.800 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:12:36.800 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 11:12:36.800 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:12:36.801 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.801 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:12:36.802 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:12:36.802 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 11:12:36.803 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:12:36.805 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 11:12:36.805 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:12:36.805 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.805 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:12:36.805 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 11:12:36.805 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:12:36.806 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:12:36.806 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.806 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:12:36.806 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:12:36.807 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:12:36.808 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:12:36.808 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:12:36.808 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.808 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:12:36.796 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 11:12:36.808 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.808 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:12:36.808 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 11:12:36.809 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:12:36.809 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.809 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:12:36.809 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:12:36.810 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:12:36.811 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:12:36.812 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:12:36.812 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 11:12:36.813 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:12:36.813 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.813 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:12:36.813 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:12:36.813 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:12:36.812 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.813 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:12:36.814 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:12:36.814 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:12:36.814 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.814 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:12:36.814 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:12:36.815 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:12:36.816 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:12:36.817 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:12:36.817 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.817 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:12:36.817 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:12:36.818 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:12:36.821 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:09.108 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:20:09.108 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.108 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:09.108 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 11:20:09.108 [http-nio-8080-exec-2] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 11:20:09.108 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.108 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 11:20:09.108 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.108 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 11:20:09.108 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:20:09.108 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.108 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:09.108 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:09.108 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 11:20:09.109 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.109 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 11:20:09.108 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:20:09.109 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.109 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:20:09.114 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 11:20:09.115 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:20:09.116 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:20:09.116 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:09.116 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:09.116 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:09.117 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.117 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:09.118 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:09.118 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 11:20:09.118 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:09.119 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 11:20:09.119 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:09.119 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.119 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:09.119 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.119 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:09.119 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 11:20:09.120 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 11:20:09.120 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 11:20:09.120 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:09.120 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:20:09.120 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 11:20:09.120 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.120 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 11:20:09.120 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 11:20:09.121 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:09.121 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:09.121 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.121 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:09.121 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:09.121 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:20:09.122 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 11:20:09.122 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:09.122 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:09.122 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:09.122 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.122 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:09.122 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:20:09.122 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 11:20:09.123 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:09.123 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:09.123 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:09.123 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.123 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:09.123 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:09.123 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.123 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:09.123 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 11:20:09.123 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:20:09.124 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:09.124 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:09.125 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:09.125 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.125 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:09.125 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:09.125 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.125 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 11:20:09.125 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:09.125 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:20:09.126 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:09.127 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:09.127 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:09.127 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.127 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:09.127 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 11:20:09.128 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:09.129 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:09.129 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.129 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:09.129 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:20:09.130 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:09.131 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:09.131 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.131 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:09.131 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:20:09.133 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:12.861 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:20:12.861 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:12.861 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:20:12.861 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:20:12.864 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:20:12.865 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:12.865 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:12.865 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:12.865 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:20:12.866 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:20:12.867 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:12.867 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:12.867 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:12.867 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:20:12.868 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:12.869 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:12.869 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:12.869 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:12.869 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:20:12.870 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:12.870 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:12.870 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:12.870 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:12.870 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:20:12.871 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:13.222 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 11:20:13.222 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:13.222 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 11:20:13.223 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-30 11:20:13.225 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-30 11:20:13.226 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 11:20:13.226 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:13.226 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 11:20:13.226 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 11:20:13.228 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 11:20:13.229 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 11:20:13.230 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:13.230 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 11:20:13.232 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 11:20:13.233 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 11:20:18.191 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 11:20:18.191 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 11:20:18.191 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 11:20:18.191 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:20:18.191 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 11:20:18.191 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:18.191 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:20:18.191 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:20:18.192 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:18.192 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 11:20:18.192 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 11:20:18.193 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 11:20:18.193 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 11:20:18.193 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:20:18.193 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 11:20:18.193 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:18.193 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.193 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 11:20:18.193 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.193 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 11:20:18.193 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:18.193 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:18.193 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 11:20:18.193 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.194 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:18.193 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:18.195 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 11:20:18.195 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 11:20:18.195 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 11:20:18.195 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:18.195 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:18.196 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:18.196 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.196 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:18.196 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:18.196 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:18.196 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.196 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:18.196 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:20:18.196 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:18.197 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:18.197 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:18.197 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:18.198 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:20:18.198 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:18.198 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.198 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:18.198 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:18.199 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.199 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:18.199 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 11:20:18.199 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:20:18.200 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:18.200 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:18.201 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:18.201 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:18.201 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.201 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.201 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:18.201 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:18.201 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 11:20:18.201 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:20:18.202 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:18.203 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:18.203 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:18.203 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:18.203 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.203 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.203 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:18.203 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:18.203 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 11:20:18.203 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:20:18.205 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:18.205 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:18.205 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:18.205 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.205 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:18.207 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:20:18.209 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:18.209 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:18.210 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.210 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:18.210 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:20:18.211 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:37.868 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 11:20:37.868 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:37.868 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 11:20:37.869 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 11:20:37.871 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 11:20:37.872 [http-nio-8080-exec-10] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 11:20:38.120 [http-nio-8080-exec-10] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=56464ff@456.com, password=$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy, enabled=true, roles=[ROLE_USER]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=0CDAB2BC8F0675223391E8A4D8F6E4C6], Granted Authorities=[ROLE_USER]]
2025-06-30 11:20:38.122 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 11:20:38.122 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:38.122 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 11:20:38.122 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 11:20:38.123 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 11:20:39.183 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 11:20:39.183 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.183 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 11:20:39.184 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 11:20:39.184 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 11:20:39.184 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.184 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 11:20:39.185 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.185 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 11:20:39.185 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 11:20:39.186 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 11:20:39.186 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 11:20:39.186 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.186 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 11:20:39.187 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 11:20:39.187 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:20:39.188 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.188 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:20:39.188 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:39.188 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.188 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 11:20:39.188 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:39.188 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:39.188 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 11:20:39.188 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:39.188 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.188 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:39.188 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:20:39.189 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:39.191 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:20:39.192 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:39.192 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:39.192 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.192 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:39.184 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:39.192 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:20:39.189 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:39.192 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:39.192 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.193 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:39.193 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 11:20:39.193 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:39.193 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.193 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:39.193 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:39.194 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:39.194 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:20:39.194 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:39.194 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:39.194 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 11:20:39.194 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.194 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.194 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:39.194 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:39.195 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:20:39.195 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 11:20:39.195 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:20:39.195 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:39.196 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:39.199 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.200 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:20:39.200 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 11:20:39.201 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:39.201 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.201 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:39.202 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 11:20:39.202 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 11:20:39.204 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:39.204 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:39.204 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.204 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:39.196 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:39.204 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:20:39.196 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:39.205 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:39.205 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.205 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:39.205 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:20:39.206 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:39.206 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 11:20:39.206 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:39.206 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:39.206 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.206 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:39.206 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:39.206 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.206 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:39.206 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:39.206 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:39.209 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:39.210 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.210 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:39.210 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:20:39.210 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:20:39.212 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:39.212 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:41.720 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:20:41.720 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:41.720 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:20:41.720 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:20:41.723 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:20:41.723 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:41.723 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:41.723 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:41.724 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:20:41.726 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:20:41.727 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:41.727 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:41.727 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:41.727 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:20:41.728 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 11:20:41.730 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:41.730 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 11:20:41.730 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:41.731 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:41.731 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-30 11:20:41.731 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:41.731 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:41.731 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:20:41.733 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-30 11:20:41.734 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:41.734 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 11:20:41.734 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:41.734 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 11:20:41.734 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:41.734 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 11:20:41.734 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:41.734 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:41.735 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:20:41.738 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 11:20:41.738 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 11:20:41.739 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:41.739 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 11:20:41.739 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 11:20:41.740 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:41.740 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 11:20:52.670 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:20:52.670 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:52.670 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:20:52.670 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:20:52.672 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:20:52.672 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:52.672 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:52.672 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:52.672 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:20:52.673 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:20:52.674 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:52.674 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:52.674 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:52.674 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:20:52.675 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:52.675 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:52.675 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:52.675 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:52.676 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:20:52.677 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:52.677 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:52.677 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:52.677 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:52.677 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:20:52.678 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:52.682 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 11:20:52.683 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:52.683 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 11:20:52.683 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-30 11:20:52.684 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-30 11:20:52.684 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 11:20:52.684 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:52.685 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 11:20:52.685 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 11:20:52.686 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 11:20:52.686 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 11:20:52.686 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:52.686 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 11:20:52.686 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 11:20:52.687 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 11:20:56.099 [http-nio-8080-exec-8] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 11:20:56.099 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 11:20:56.099 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:20:56.099 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:20:56.099 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.099 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.099 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 11:20:56.100 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 11:20:56.099 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.101 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:20:56.101 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 11:20:56.102 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 11:20:56.102 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 11:20:56.103 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 11:20:56.103 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.103 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 11:20:56.104 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 11:20:56.105 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 11:20:56.108 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 11:20:56.108 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.108 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:56.109 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:56.099 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:20:56.109 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:56.109 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.110 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:20:56.110 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 11:20:56.110 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.110 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 11:20:56.111 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 11:20:56.109 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:56.111 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 11:20:56.111 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:56.112 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:56.112 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.112 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:56.112 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:56.112 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:20:56.112 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:56.113 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.113 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:56.113 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 11:20:56.113 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:20:56.113 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:56.113 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.113 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:56.113 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:56.113 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:56.113 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:56.114 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:56.114 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.114 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:56.114 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:56.114 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:20:56.114 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:56.114 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.114 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:56.114 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:20:56.115 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:56.115 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:56.115 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.115 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:56.115 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 11:20:56.115 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:56.116 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:56.117 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:56.117 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:56.117 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.117 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:56.117 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:56.117 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.117 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:56.118 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 11:20:56.118 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:20:56.118 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:56.119 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:56.119 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:56.119 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:56.119 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.119 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.119 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:56.119 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:56.120 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 11:20:56.120 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:20:56.122 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:56.122 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:56.122 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:56.122 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.122 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:56.123 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:20:56.124 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:56.125 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:56.125 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.125 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:56.126 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:20:56.127 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:58.501 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:20:58.501 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:58.501 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:20:58.504 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:20:58.507 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:20:58.508 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:58.508 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:58.508 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:58.508 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:20:58.511 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:20:58.513 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:58.513 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:58.513 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:58.514 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:20:58.518 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:58.519 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:58.519 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:58.519 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:58.519 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:20:58.522 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:58.524 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:58.524 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:58.524 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:58.524 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:20:58.526 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:58.534 [http-nio-8080-exec-4] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 11:20:58.549 [http-nio-8080-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 11:21:00.019 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:21:00.019 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:00.019 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:21:00.019 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 11:21:00.023 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 11:21:00.023 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:21:00.023 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:00.023 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:21:00.026 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:21:00.028 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:21:00.061 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 11:21:00.061 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:00.061 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 11:21:00.064 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 11:21:00.066 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 11:21:00.067 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:21:00.067 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:00.067 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:21:00.067 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:21:00.068 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:21:00.070 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 11:21:00.070 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:00.070 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 11:21:00.071 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 11:21:00.073 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 11:21:00.073 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:21:00.074 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:00.074 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:21:00.074 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:21:00.074 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:21:00.075 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:21:00.075 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:00.075 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:21:00.075 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:21:00.076 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:21:01.420 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:21:01.420 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:01.420 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:21:01.420 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:21:01.423 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:21:01.424 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:01.424 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:01.424 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:01.425 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:21:01.428 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:21:01.429 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:01.429 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:01.429 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:01.429 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:21:01.431 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 11:21:01.431 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:01.431 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 11:21:01.431 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-30 11:21:01.431 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:01.431 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:01.432 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:01.432 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:01.432 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:21:01.432 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-30 11:21:01.433 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 11:21:01.433 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:01.433 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 11:21:01.433 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 11:21:01.434 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:01.434 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:01.434 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:01.434 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:01.435 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 11:21:01.435 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:21:01.435 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 11:21:01.435 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:01.435 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 11:21:01.435 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 11:21:01.436 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:01.437 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 11:21:03.943 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:21:03.944 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.944 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:21:03.944 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:21:03.944 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.944 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:21:03.944 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:21:03.944 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 11:21:03.946 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 11:21:03.946 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:21:03.946 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:03.946 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:21:03.946 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.946 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.946 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:21:03.946 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:03.946 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:21:03.946 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:21:03.947 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:21:03.948 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:21:03.948 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:03.948 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.948 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:03.948 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 11:21:03.948 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.948 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 11:21:03.949 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 11:21:03.949 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:21:03.951 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:03.952 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:03.952 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 11:21:03.952 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.952 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:03.952 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:21:03.952 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:21:03.952 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.952 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:21:03.952 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:21:03.953 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:03.953 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:21:03.953 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:03.953 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.953 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:03.953 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:21:03.953 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 11:21:03.954 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.954 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 11:21:03.955 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:03.957 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 11:21:03.958 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 11:21:03.959 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:21:03.959 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.959 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:21:03.959 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:21:03.961 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:21:03.961 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:21:03.961 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.961 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:21:03.962 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:21:03.963 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:21:05.318 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:21:05.318 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:05.318 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:21:05.318 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:21:05.319 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 11:21:05.319 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:05.320 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 11:21:05.321 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 5(Integer)
2025-06-30 11:21:05.321 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:21:05.323 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:05.323 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:05.323 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:05.323 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:21:05.325 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 11:21:05.325 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:21:05.326 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 11:21:05.326 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:05.326 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 11:21:05.326 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002214(String)
2025-06-30 11:21:05.326 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:05.326 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:05.326 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:05.326 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:21:05.327 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 1
2025-06-30 11:21:05.329 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:05.329 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 11:21:05.329 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:05.329 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 11:21:05.329 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:05.329 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:05.329 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:05.329 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:21:05.329 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 5(Integer)
2025-06-30 11:21:05.330 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 11:21:05.330 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:05.331 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 11:21:05.331 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:05.331 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 11:21:05.331 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:05.331 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:05.331 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:05.331 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 11:21:05.331 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:21:05.333 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 11:21:05.333 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:06.781 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:21:06.781 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.781 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:21:06.781 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:21:06.781 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:21:06.782 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.782 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:21:06.782 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 11:21:06.783 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 11:21:06.784 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:21:06.784 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:06.784 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:21:06.785 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.785 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:06.785 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.785 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:21:06.785 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:21:06.786 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:21:06.787 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:21:06.787 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:21:06.787 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:06.787 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.787 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:06.787 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:21:06.787 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 11:21:06.787 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.787 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 11:21:06.790 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:06.790 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 11:21:06.790 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:06.790 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.790 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:06.790 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:21:06.791 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:06.792 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 11:21:06.792 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:06.793 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.793 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:06.793 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:21:06.793 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:21:06.793 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.793 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:21:06.794 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:21:06.795 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:21:06.795 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:06.796 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 11:21:06.796 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.796 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 11:21:06.797 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 11:21:06.799 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 11:21:06.799 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:21:06.799 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.799 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:21:06.800 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:21:06.801 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:21:06.801 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:21:06.802 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.802 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:21:06.802 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:21:06.803 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:21:07.914 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:21:07.915 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:07.915 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:21:07.915 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:21:07.917 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:21:07.917 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:07.917 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:07.917 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:07.917 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:21:07.919 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:21:07.919 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:07.920 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:07.920 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:07.920 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:21:07.921 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 11:21:07.921 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:07.921 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 11:21:07.921 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-30 11:21:07.921 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:07.922 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:07.922 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:07.922 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:07.922 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-30 11:21:07.922 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:21:07.922 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 11:21:07.923 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:07.923 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 11:21:07.923 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 11:21:07.923 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:07.924 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 11:21:07.924 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:07.924 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:07.924 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:07.924 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:21:07.924 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 11:21:07.924 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:07.924 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 11:21:07.924 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 11:21:07.925 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 11:21:07.925 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:09.256 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:21:09.256 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.256 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:21:09.256 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:21:09.256 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:21:09.256 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.256 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:21:09.256 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 11:21:09.257 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:21:09.258 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 11:21:09.258 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:09.258 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.258 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:09.258 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:21:09.258 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:21:09.258 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.258 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:21:09.258 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:21:09.259 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:21:09.259 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:21:09.259 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:09.259 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.259 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:09.259 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:21:09.259 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 11:21:09.259 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.259 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 11:21:09.260 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 11:21:09.260 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:09.260 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:09.261 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.261 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:09.261 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:21:09.261 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 11:21:09.262 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:21:09.262 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.262 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:21:09.262 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:09.262 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:21:09.262 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:09.262 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.263 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:09.263 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:21:09.264 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:09.264 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:21:09.265 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 11:21:09.265 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.265 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 11:21:09.265 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 11:21:09.266 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 11:21:09.267 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:21:09.267 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.267 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:21:09.267 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:21:09.268 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:21:09.269 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:21:09.269 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.269 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:21:09.269 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:21:09.270 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:24:18.806 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:24:18.806 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:24:18.806 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:24:18.808 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:24:18.809 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:24:18.810 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:24:18.810 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:24:18.810 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:24:18.810 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 11:24:18.810 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:24:18.810 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 11:24:18.810 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:24:18.811 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:24:18.811 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:24:18.811 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:24:18.811 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:24:18.811 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:24:18.812 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-30 11:24:18.812 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:24:18.813 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:24:18.813 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:24:18.813 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:24:18.813 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:24:18.813 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-30 11:24:18.814 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 11:24:18.814 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:24:18.814 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 11:24:18.814 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:24:18.814 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 11:24:18.814 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:24:18.814 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:24:18.814 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:24:18.814 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:24:18.815 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 11:24:18.815 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:24:18.815 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 11:24:18.815 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:24:18.815 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 11:24:18.815 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 11:24:18.816 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 11:25:00.147 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:25:00.147 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.147 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:25:00.147 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:25:00.148 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.148 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:25:00.148 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:25:00.148 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 11:25:00.149 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 11:25:00.149 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:25:00.149 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:00.149 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:25:00.149 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.149 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.149 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:00.149 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:25:00.149 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:25:00.149 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:25:00.151 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:25:00.151 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:25:00.151 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:00.151 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.151 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:00.151 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 11:25:00.151 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:25:00.151 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.151 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 11:25:00.152 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 11:25:00.153 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:00.153 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 11:25:00.153 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:00.153 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.153 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:00.153 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:25:00.153 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.153 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:25:00.154 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:25:00.154 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:25:00.154 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:25:00.154 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:00.154 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 11:25:00.154 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:00.154 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.154 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.154 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:00.154 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 11:25:00.154 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:25:00.154 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 11:25:00.155 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 11:25:00.155 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:00.156 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:25:00.156 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.156 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:25:00.156 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:25:00.157 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:25:00.157 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:25:00.158 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.158 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:25:00.158 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:25:00.159 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:25:06.744 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:25:06.744 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:06.744 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:25:06.744 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:25:06.746 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:25:06.746 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:06.746 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:06.746 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:06.747 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:25:06.748 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:25:06.749 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:06.749 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:06.749 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:06.749 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:25:06.750 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:06.751 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:06.751 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:06.751 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:06.751 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:25:06.753 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:06.754 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:06.754 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:06.754 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:06.755 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:25:06.756 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 11:25:06.756 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:06.757 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:06.758 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 11:25:06.758 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-30 11:25:06.760 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-30 11:25:06.761 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 11:25:06.761 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:06.761 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 11:25:06.761 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 11:25:06.765 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 11:25:06.766 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 11:25:06.766 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:06.766 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 11:25:06.766 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 11:25:06.769 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 11:25:08.124 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:25:08.124 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.124 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:25:08.124 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:25:08.124 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.124 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:25:08.124 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:25:08.125 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 11:25:08.126 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:25:08.126 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 11:25:08.127 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:08.127 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:25:08.127 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.127 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.127 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:08.127 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:25:08.128 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:25:08.128 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:25:08.129 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:25:08.129 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:25:08.129 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:08.129 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.129 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:08.130 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:25:08.130 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 11:25:08.130 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.130 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 11:25:08.130 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 11:25:08.131 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:08.132 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:08.132 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.132 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:08.133 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:25:08.133 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 11:25:08.133 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:25:08.133 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.133 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:25:08.134 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:25:08.134 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:08.135 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:08.135 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.135 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:08.135 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:25:08.135 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:25:08.136 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 11:25:08.136 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:08.136 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.136 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 11:25:08.136 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 11:25:08.138 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 11:25:08.139 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:25:08.139 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.139 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:25:08.140 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:25:08.142 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:25:08.143 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:25:08.144 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.144 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:25:08.144 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:25:08.146 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:25:09.069 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:25:09.069 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:09.069 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:25:09.070 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:25:09.072 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:25:09.076 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:09.077 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:09.077 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:09.077 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:25:09.084 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:25:09.085 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:09.085 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:09.085 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:09.085 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:25:09.086 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 11:25:09.086 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:09.086 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 11:25:09.086 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 5(Integer)
2025-06-30 11:25:09.087 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:09.087 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:09.087 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:09.087 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:09.088 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:25:09.088 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 11:25:09.088 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 11:25:09.088 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:09.088 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 11:25:09.088 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002214(String)
2025-06-30 11:25:09.088 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:09.089 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:09.089 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:09.089 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:09.089 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:25:09.091 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 1
2025-06-30 11:25:09.092 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 11:25:09.092 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:09.092 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 11:25:09.092 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 5(Integer)
2025-06-30 11:25:09.092 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:09.093 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 11:25:09.095 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 11:25:09.095 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:09.095 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 11:25:09.095 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 11:25:09.097 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 16:14:51.414 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 16:14:51.429 [Thread-7] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 16:14:51.440 [Thread-7] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-06-30 16:14:51.495 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-268930409] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 16:14:51.496 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-268930409] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 16:14:51.496 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-109802217] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 16:14:51.496 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-109802217] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 16:14:51.498 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-nioEventLoop-4-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/sun.nio.ch.WEPoll.wait(Native Method)
 java.base@17.0.8/sun.nio.ch.WEPollSelectorImpl.doSelect(WEPollSelectorImpl.java:111)
 java.base@17.0.8/sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:129)
 java.base@17.0.8/sun.nio.ch.SelectorImpl.select(SelectorImpl.java:146)
 app//io.netty.channel.nio.SelectedSelectionKeySetSelector.select(SelectedSelectionKeySetSelector.java:68)
 app//io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:879)
 app//io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:526)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.499 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.500 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-2] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.500 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-3] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.500 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-4] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.500 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-5] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.501 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-6] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.501 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-7] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.501 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-8] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.501 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-9] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.502 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-10] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.502 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-11] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.503 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-12] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.508 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 16:14:51.515 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 16:14:51.707 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-06-30 16:14:51.714 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-06-30 16:14:51.927 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 24392 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 16:14:51.927 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 16:14:51.927 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 16:14:52.128 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 16:14:52.128 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 16:14:52.137 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-30 16:14:52.201 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$af18f191] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 16:14:52.209 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 16:14:52.283 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 16:14:52.283 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 16:14:52.283 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 16:14:52.283 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 16:14:52.283 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 16:14:52.285 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 16:14:52.285 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 16:14:52.285 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 16:14:52.297 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 16:14:52.297 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 363 ms
2025-06-30 16:14:52.299 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 16:14:52.388 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} inited
2025-06-30 16:14:52.403 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} inited
2025-06-30 16:14:52.496 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 16:14:52.496 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 16:14:52.594 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 16:14:52.661 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5aef3cf6, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3bd22062, org.springframework.security.web.context.SecurityContextPersistenceFilter@2247493f, org.springframework.security.web.header.HeaderWriterFilter@76c63d7e, org.springframework.web.filter.CorsFilter@5df0503c, org.springframework.security.web.authentication.logout.LogoutFilter@4b0dab33, com.huang.store.security.JwtAuthenticationTokenFilter@bdbe518, com.huang.store.security.CustomAuthenticationFilter@2d5f3b55, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@41cb88f3, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@68728b6c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2f1876d1, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4dbd3ae0, org.springframework.security.web.session.SessionManagementFilter@2955306a, org.springframework.security.web.access.ExceptionTranslationFilter@7bb62922, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@eead1ab]
2025-06-30 16:14:52.779 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 16:14:52.792 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 16:14:52.794 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 16:14:52.799 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.923 seconds (JVM running for 19643.809)
2025-06-30 16:53:22.499 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 16:53:22.499 [Thread-9] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 16:53:22.501 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-198522594] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 16:53:22.501 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-198522594] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 16:53:22.501 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1940084265] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 16:53:22.501 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1940084265] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 16:53:22.502 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 16:53:22.503 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 16:53:22.506 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closed
2025-06-30 16:53:22.507 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closed
2025-06-30 16:53:22.609 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 24392 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 16:53:22.609 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 16:53:22.609 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 16:53:22.816 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 16:53:22.816 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 16:53:22.827 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-30 16:53:22.882 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$af18f191] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 16:53:22.889 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 16:53:22.954 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 16:53:22.954 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 16:53:22.954 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 16:53:22.955 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 16:53:22.955 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 16:53:22.956 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 16:53:22.956 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 16:53:22.956 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 16:53:22.969 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 16:53:22.969 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 354 ms
2025-06-30 16:53:22.971 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 16:53:23.051 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} inited
2025-06-30 16:53:23.068 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} inited
2025-06-30 16:53:23.140 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 16:53:23.141 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 16:53:23.226 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 16:53:23.288 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@49a7af4e, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@26a74ae, org.springframework.security.web.context.SecurityContextPersistenceFilter@5998191, org.springframework.security.web.header.HeaderWriterFilter@5486d900, org.springframework.web.filter.CorsFilter@3ee7fdc7, org.springframework.security.web.authentication.logout.LogoutFilter@3f72a046, com.huang.store.security.JwtAuthenticationTokenFilter@7dfbf95b, com.huang.store.security.CustomAuthenticationFilter@2e5a5de3, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@20c0c05b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2c0f737a, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4ea3e122, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@32cc19a6, org.springframework.security.web.session.SessionManagementFilter@25394311, org.springframework.security.web.access.ExceptionTranslationFilter@1697e515, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1686549]
2025-06-30 16:53:23.382 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 16:53:23.390 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 16:53:23.393 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 16:53:23.395 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.835 seconds (JVM running for 21954.405)
2025-06-30 16:55:32.378 [http-nio-8080-exec-4] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 16:55:32.379 [http-nio-8080-exec-4] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 16:55:32.379 [http-nio-8080-exec-4] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-06-30 16:55:32.387 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjUzNjM4MTIwLCJleHAiOjE3NTEyNTU0Mzh9.4wWGiVq3wUj1coW2QLEsOV8xeFEs2JzAq44V7n6SPr2xhNWSIk92Rx1FFFD8e46kJm3LkbF6EQSG1V2SX1h9mw
2025-06-30 16:55:32.387 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjUzNjM4MTIwLCJleHAiOjE3NTEyNTU0Mzh9.4wWGiVq3wUj1coW2QLEsOV8xeFEs2JzAq44V7n6SPr2xhNWSIk92Rx1FFFD8e46kJm3LkbF6EQSG1V2SX1h9mw
2025-06-30 16:55:32.387 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjUzNjM4MTIwLCJleHAiOjE3NTEyNTU0Mzh9.4wWGiVq3wUj1coW2QLEsOV8xeFEs2JzAq44V7n6SPr2xhNWSIk92Rx1FFFD8e46kJm3LkbF6EQSG1V2SX1h9mw
2025-06-30 16:55:32.387 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjUzNjM4MTIwLCJleHAiOjE3NTEyNTU0Mzh9.4wWGiVq3wUj1coW2QLEsOV8xeFEs2JzAq44V7n6SPr2xhNWSIk92Rx1FFFD8e46kJm3LkbF6EQSG1V2SX1h9mw
2025-06-30 16:55:32.387 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjUzNjM4MTIwLCJleHAiOjE3NTEyNTU0Mzh9.4wWGiVq3wUj1coW2QLEsOV8xeFEs2JzAq44V7n6SPr2xhNWSIk92Rx1FFFD8e46kJm3LkbF6EQSG1V2SX1h9mw
2025-06-30 16:55:32.387 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjUzNjM4MTIwLCJleHAiOjE3NTEyNTU0Mzh9.4wWGiVq3wUj1coW2QLEsOV8xeFEs2JzAq44V7n6SPr2xhNWSIk92Rx1FFFD8e46kJm3LkbF6EQSG1V2SX1h9mw
2025-06-30 16:55:32.392 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 16:55:32.392 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 16:55:32.392 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.392 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 16:55:32.393 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 16:55:32.393 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 16:55:32.393 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.393 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.393 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 16:55:32.393 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 16:55:32.393 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 16:55:32.393 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.393 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 16:55:32.394 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 16:55:32.394 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.394 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 16:55:32.394 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:55:32.394 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.394 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:55:32.398 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 16:55:32.403 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 16:55:32.403 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 16:55:32.403 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.403 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 16:55:32.405 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 16:55:32.411 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 16:55:32.411 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 16:55:32.411 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.411 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 16:55:32.412 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 16:55:32.412 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 16:55:32.414 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 16:55:32.415 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 16:55:32.416 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 16:55:32.416 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.416 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 16:55:32.416 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:55:32.416 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 16:55:32.418 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 16:55:32.418 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 16:55:32.418 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.418 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 16:55:32.419 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:55:32.419 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 16:55:32.420 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:55:32.420 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.420 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:55:32.420 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 16:55:32.421 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 16:55:32.421 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 16:55:32.422 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 16:55:32.424 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 16:55:32.425 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:55:32.425 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.425 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:55:32.425 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 16:55:32.425 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:55:32.426 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 16:55:32.426 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:55:32.426 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:55:32.426 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.426 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:55:32.426 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:55:32.427 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 16:55:32.428 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:55:32.428 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:55:32.428 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.428 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:55:32.428 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:55:32.429 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:55:32.429 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:55:32.429 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:55:32.429 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:55:32.429 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.429 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.429 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:55:32.429 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:55:32.430 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:55:32.430 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 16:55:32.431 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:55:32.432 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:55:32.432 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:55:32.432 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.432 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:55:32.432 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 16:55:32.433 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:55:32.433 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:55:32.433 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.433 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:55:32.433 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 16:55:32.434 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:55:32.434 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:55:32.434 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.434 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:55:32.435 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 16:55:32.436 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:25.598 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjUzNjM4MTIwLCJleHAiOjE3NTEyNTU0Mzh9.4wWGiVq3wUj1coW2QLEsOV8xeFEs2JzAq44V7n6SPr2xhNWSIk92Rx1FFFD8e46kJm3LkbF6EQSG1V2SX1h9mw
2025-06-30 16:56:25.670 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 16:56:25.670 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:25.671 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 16:56:25.672 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 16:56:25.673 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 16:56:25.679 [http-nio-8080-exec-7] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 16:56:25.751 [http-nio-8080-exec-7] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=56464ff@456.com, password=$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy, enabled=true, roles=[ROLE_USER]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_USER]]
2025-06-30 16:56:25.753 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 16:56:25.753 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:25.753 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 16:56:25.753 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 16:56:25.754 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 16:56:26.823 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 16:56:26.823 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:56:26.823 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 16:56:26.823 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:56:26.823 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 16:56:26.823 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 16:56:26.823 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 16:56:26.823 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-1] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 16:56:26.823 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 16:56:26.823 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 16:56:26.824 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 16:56:26.825 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 16:56:26.825 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 16:56:26.825 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.825 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 16:56:26.826 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 16:56:26.827 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 16:56:26.827 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 16:56:26.828 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.828 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 16:56:26.828 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 16:56:26.828 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.828 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 16:56:26.828 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:56:26.828 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 16:56:26.828 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 16:56:26.828 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 16:56:26.828 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:26.828 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.828 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:26.829 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 16:56:26.829 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 16:56:26.830 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 16:56:26.830 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 16:56:26.830 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 16:56:26.830 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:56:26.830 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 16:56:26.830 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.830 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 16:56:26.830 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 16:56:26.831 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:56:26.831 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 16:56:26.831 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:26.831 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.831 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:26.831 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:56:26.831 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 16:56:26.832 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 16:56:26.832 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:26.832 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:26.832 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:26.832 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.832 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.832 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:26.832 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:26.832 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 16:56:26.832 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:56:26.834 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:26.834 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:26.834 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:26.834 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:26.834 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.834 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:26.834 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.834 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:26.835 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 16:56:26.835 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:56:26.836 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:26.836 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:26.836 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:26.836 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.836 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:26.836 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 16:56:26.837 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:26.837 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:26.838 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.838 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:26.838 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 16:56:26.838 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:26.839 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:26.839 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.839 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:26.839 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 16:56:26.839 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:33.642 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:56:33.643 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:33.643 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:56:33.644 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:56:33.646 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 16:56:33.647 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:33.647 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 16:56:33.647 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 4(Integer)
2025-06-30 16:56:33.648 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:56:33.648 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 16:56:33.648 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:33.648 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:33.648 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:33.648 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:56:33.648 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:33.648 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:33.649 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:33.649 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:56:33.650 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-30 16:56:33.650 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:33.650 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:33.650 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:33.650 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:56:33.650 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 16:56:33.651 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:33.652 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:33.652 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:33.652 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:33.652 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:56:33.652 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 16:56:33.652 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:33.652 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 16:56:33.653 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:33.653 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:33.653 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 4(Integer), 12(Integer), 13(Integer), 0(Integer), 10(Integer)
2025-06-30 16:56:33.653 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:33.653 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:33.654 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:56:33.655 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:33.656 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-30 16:56:33.656 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:33.656 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:33.656 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:33.657 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-30 16:56:33.658 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 16:56:33.659 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 16:56:33.659 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:33.659 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 16:56:33.660 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 4(Integer), 12(Integer), 13(Integer)
2025-06-30 16:56:33.661 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 16:56:36.622 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 16:56:36.622 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:36.622 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 16:56:36.624 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 3(Integer)
2025-06-30 16:56:36.625 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 16:56:36.625 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:36.625 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:36.625 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:36.626 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 教育(String), 教育(String)
2025-06-30 16:56:36.628 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 16:56:36.629 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 16:56:36.629 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:36.629 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 16:56:36.630 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 10(Integer), 11(Integer), 3(Integer), 0(Integer), 10(Integer)
2025-06-30 16:56:36.631 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-30 16:56:36.632 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:36.632 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:36.632 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:36.632 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 教育(String), 教育(String)
2025-06-30 16:56:36.634 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 16:56:36.636 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 16:56:36.636 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:36.636 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 16:56:36.636 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 10(Integer), 11(Integer), 3(Integer)
2025-06-30 16:56:36.637 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 16:56:37.488 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 16:56:37.488 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:37.488 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 16:56:37.488 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-30 16:56:37.490 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 16:56:37.491 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:37.491 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:37.491 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:37.491 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 16:56:37.492 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 16:56:37.493 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 16:56:37.493 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:37.493 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 16:56:37.493 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-30 16:56:37.496 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-30 16:56:37.496 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:37.496 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:37.496 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:37.496 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 16:56:37.497 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 16:56:37.498 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 16:56:37.498 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:37.498 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 16:56:37.498 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-30 16:56:37.499 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 16:56:37.499 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:37.499 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:37.499 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:37.500 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 16:56:37.501 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:37.501 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:37.501 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:37.501 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:37.502 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 16:56:37.503 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:37.504 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:37.504 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:37.504 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:37.504 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 16:56:37.505 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:38.652 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 16:56:38.652 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:38.652 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 16:56:38.652 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 16:56:38.652 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 16:56:38.653 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:38.653 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:38.653 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:38.653 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 16:56:38.655 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 16:56:38.657 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 16:56:38.657 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:38.657 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 16:56:38.658 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 16:56:38.661 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 16:56:38.662 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:38.662 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:38.662 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:38.662 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 16:56:38.663 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 16:56:38.664 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 16:56:38.665 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:38.665 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 16:56:38.665 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 16:56:38.666 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 16:56:38.666 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:38.666 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:38.666 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:38.668 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 16:56:38.669 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:38.670 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:38.670 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:38.670 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:38.670 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 16:56:38.671 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:50.527 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:56:50.527 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:50.527 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:56:50.527 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:56:50.528 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:56:50.528 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:50.528 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:50.528 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:50.528 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:56:50.530 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:56:50.530 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:50.530 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:50.531 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:50.531 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:56:50.532 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:50.532 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:50.532 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:50.532 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:50.532 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:56:50.534 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:50.534 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:50.534 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:50.534 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:50.534 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:56:50.536 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:50.588 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 16:56:50.589 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:50.589 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 16:56:50.589 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-30 16:56:50.590 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-30 16:56:50.591 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 16:56:50.591 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:50.591 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 16:56:50.591 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 16:56:50.593 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 16:56:50.594 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 16:56:50.594 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:50.594 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 16:56:50.595 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 16:56:50.596 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 16:56:52.351 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:56:52.351 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.351 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:56:52.351 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:56:52.352 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:56:52.352 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:52.352 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.352 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:52.354 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:56:52.354 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 16:56:52.354 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.354 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 16:56:52.354 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 16:56:52.355 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 16:56:52.355 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:56:52.355 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:52.356 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.356 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:52.357 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 16:56:52.357 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:52.357 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.357 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:52.357 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:56:52.358 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 16:56:52.359 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:52.359 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 16:56:52.359 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.359 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 16:56:52.359 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 16:56:52.360 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:52.360 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.360 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:52.360 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:56:52.362 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:52.362 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:52.362 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.362 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:52.364 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:56:52.364 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 16:56:52.364 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:52.364 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.364 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:52.364 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 16:56:52.365 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:52.366 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 16:56:52.366 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 16:56:52.366 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.366 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 16:56:52.366 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 16:56:52.369 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 16:56:52.370 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:52.370 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.370 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:52.370 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 16:56:52.371 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:52.372 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:52.372 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.372 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:52.372 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 16:56:52.373 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:54.062 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:56:54.062 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:54.062 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:56:54.062 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:56:54.064 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:56:54.065 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:54.065 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:54.065 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:54.065 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:56:54.066 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:56:54.067 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:54.067 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:54.067 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:54.067 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:56:54.070 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:54.080 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:54.080 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:54.080 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:54.080 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:56:54.081 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:54.082 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:54.082 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:54.082 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:54.083 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:56:54.081 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 16:56:54.085 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:54.086 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:54.086 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 16:56:54.087 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-30 16:56:54.088 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-30 16:56:54.088 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 16:56:54.088 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:54.088 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 16:56:54.088 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 16:56:54.090 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 16:56:54.091 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 16:56:54.092 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:54.092 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 16:56:54.092 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 16:56:54.097 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 16:56:56.540 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:56:56.540 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.540 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:56:56.540 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:56:56.542 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:56:56.544 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:56.544 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.544 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:56.544 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:56:56.546 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:56:56.546 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:56.546 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.546 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:56.547 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:56:56.550 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:56.552 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:56.556 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.556 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:56.557 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:56:56.560 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:56.560 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:56.560 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.560 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:56.560 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:56:56.562 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:56.568 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 16:56:56.568 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.568 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 16:56:56.568 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 16:56:56.570 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 16:56:56.570 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:56.570 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.570 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:56.572 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 16:56:56.576 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 16:56:56.578 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 16:56:56.578 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.578 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 16:56:56.578 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 16:56:56.580 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 16:56:56.581 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:56.581 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.581 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:56.581 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 16:56:56.581 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 16:56:56.582 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 16:56:56.582 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.582 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 16:56:56.582 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 16:56:56.582 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 16:56:56.582 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:56.582 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.582 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:56.584 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 16:56:56.585 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:56.586 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:56.586 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.586 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:56.586 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 16:56:56.587 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:57.907 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:56:57.907 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:57.907 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:56:57.907 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:56:57.909 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:56:57.909 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:57.909 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:57.909 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:57.909 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:56:57.910 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 16:56:57.910 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:57.910 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 16:56:57.910 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 5(Integer)
2025-06-30 16:56:57.911 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:56:57.912 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 16:56:57.913 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 16:56:57.913 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:57.913 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 16:56:57.914 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002214(String)
2025-06-30 16:56:57.914 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:57.914 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:57.914 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:57.914 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:56:57.915 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:57.916 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 1
2025-06-30 16:56:57.917 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 16:56:57.917 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:57.917 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:57.917 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 16:56:57.917 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:57.917 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:57.917 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:56:57.917 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 5(Integer)
2025-06-30 16:56:57.921 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:57.921 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 16:56:57.922 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:57.922 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:57.922 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:57.922 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:56:57.922 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 16:56:57.922 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:57.922 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 16:56:57.923 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 16:56:57.923 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:57.923 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 16:56:58.866 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:56:58.866 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.866 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:56:58.866 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:56:58.866 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 16:56:58.866 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.866 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 16:56:58.866 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 16:56:58.867 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:56:58.868 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:58.869 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.869 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:58.869 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:56:58.870 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 16:56:58.871 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:58.871 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.871 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:58.871 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:56:58.872 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 16:56:58.872 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:58.872 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.872 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:58.872 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:56:58.872 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 16:56:58.872 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:58.872 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:58.872 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.872 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:58.872 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:56:58.873 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 16:56:58.873 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.873 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 16:56:58.873 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 16:56:58.873 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:58.873 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:58.873 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.873 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:58.873 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 16:56:58.873 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:56:58.874 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:58.874 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.874 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:58.874 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 16:56:58.875 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:58.875 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 16:56:58.876 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 16:56:58.876 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.876 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 16:56:58.876 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 16:56:58.878 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 16:56:58.878 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:58.878 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.878 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:58.878 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 16:56:58.879 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:58.879 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:58.879 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.879 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:58.879 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 16:56:58.880 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:57:00.369 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:57:00.369 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:00.369 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:57:00.369 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:57:00.371 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:57:00.371 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:57:00.371 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:00.371 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:57:00.372 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:57:00.373 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:57:00.374 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:57:00.374 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:00.374 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:57:00.374 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:57:00.375 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:57:00.375 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 16:57:00.375 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:57:00.376 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:00.376 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:00.376 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 16:57:00.376 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:57:00.376 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:57:00.376 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-30 16:57:00.376 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-30 16:57:00.377 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:57:00.377 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:57:00.377 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 16:57:00.377 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:00.377 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:57:00.377 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:00.377 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:57:00.377 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 16:57:00.377 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 16:57:00.379 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:57:00.379 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 16:57:00.379 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 16:57:00.379 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:00.380 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 16:57:00.380 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 16:57:00.381 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 16:57:04.749 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:57:04.749 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.749 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:57:04.749 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:57:04.751 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:57:04.752 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:57:04.752 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.752 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:57:04.752 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:57:04.753 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:57:04.754 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:57:04.754 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.754 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:57:04.754 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:57:04.756 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:57:04.756 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:57:04.756 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.756 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:57:04.756 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 16:57:04.756 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.756 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 16:57:04.756 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:57:04.756 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 16:57:04.758 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 16:57:04.758 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:57:04.758 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:57:04.758 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.758 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:57:04.758 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:57:04.758 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.758 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:57:04.758 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:57:04.759 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 16:57:04.760 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 16:57:04.760 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:57:04.761 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 16:57:04.761 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.761 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 16:57:04.763 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 16:57:04.766 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 16:57:04.769 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:57:04.769 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.769 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:57:04.770 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 16:57:04.771 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 16:57:04.771 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 16:57:04.771 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.771 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 16:57:04.772 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 16:57:04.773 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 16:57:04.774 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:57:04.774 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.774 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:57:04.774 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 16:57:04.775 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:57:04.776 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:57:04.776 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.776 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:57:04.776 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 16:57:04.777 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:59:47.400 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:59:47.400 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:59:47.400 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:59:47.403 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:59:47.403 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:59:47.404 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:59:47.404 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:59:47.404 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:59:47.405 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:59:47.405 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 16:59:47.405 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:59:47.405 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 16:59:47.405 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:59:47.406 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:59:47.406 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:59:47.406 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:59:47.406 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:59:47.407 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:59:47.407 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:59:47.407 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:59:47.407 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:59:47.408 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:59:47.408 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-30 16:59:47.408 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-30 16:59:47.408 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:59:47.409 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 16:59:47.409 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:59:47.409 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:59:47.409 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:59:47.409 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 16:59:47.409 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:59:47.409 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:59:47.409 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 16:59:47.410 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:59:47.410 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 16:59:47.410 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 16:59:47.410 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:59:47.410 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 16:59:47.410 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 16:59:47.412 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:01:33.256 [Thread-15] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 17:01:33.256 [Thread-15] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 17:01:33.256 [Thread-15] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-06-30 17:01:33.267 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1952084954] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 17:01:33.267 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1952084954] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 17:01:33.267 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1358475596] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 17:01:33.268 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1358475596] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 17:01:33.268 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-nioEventLoop-9-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/sun.nio.ch.WEPoll.wait(Native Method)
 java.base@17.0.8/sun.nio.ch.WEPollSelectorImpl.doSelect(WEPollSelectorImpl.java:111)
 java.base@17.0.8/sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:129)
 java.base@17.0.8/sun.nio.ch.SelectorImpl.select(SelectorImpl.java:146)
 app//io.netty.channel.nio.SelectedSelectionKeySetSelector.select(SelectedSelectionKeySetSelector.java:68)
 app//io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:879)
 app//io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:526)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:01:33.268 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-7-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:01:33.269 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-7-2] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:01:33.269 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-7-3] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:01:33.269 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-7-4] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:01:33.270 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-7-5] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:01:33.270 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-7-6] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:01:33.270 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-7-7] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:01:33.271 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-7-8] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:01:33.271 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-7-9] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:01:33.271 [Thread-15] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 17:01:33.274 [Thread-15] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 17:01:33.394 [Thread-15] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closed
2025-06-30 17:01:33.396 [Thread-15] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closed
2025-06-30 17:01:33.526 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 24392 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 17:01:33.526 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 17:01:33.526 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 17:01:33.913 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 17:01:33.914 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 17:01:33.921 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-06-30 17:01:34.009 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.huang.store.mapper]' package. Please check your configuration.
2025-06-30 17:01:34.124 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 17:01:34.124 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 17:01:34.124 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 17:01:34.124 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 17:01:34.125 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 17:01:34.127 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 17:01:34.128 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 17:01:34.128 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 17:01:34.166 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 17:01:34.166 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 632 ms
2025-06-30 17:01:34.185 [restartedMain] ERROR org.apache.catalina.session.StandardManager - Exception loading sessions from persistent storage
java.lang.ClassNotFoundException: com.huang.store.entity.user.SecurityUser
	at org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader.loadClass(TomcatEmbeddedWebappClassLoader.java:72)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1141)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:467)
	at org.apache.catalina.util.CustomObjectInputStream.resolveClass(CustomObjectInputStream.java:158)
	at java.base/java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:2045)
	at java.base/java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1909)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2235)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:514)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:472)
	at org.apache.catalina.session.StandardSession.doReadObject(StandardSession.java:1530)
	at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:1000)
	at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:210)
	at org.apache.catalina.session.StandardManager.load(StandardManager.java:156)
	at org.apache.catalina.session.StandardManager.startInternal(StandardManager.java:346)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4931)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:794)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:248)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:489)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:481)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:211)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:184)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:585)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2025-06-30 17:01:34.285 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 17:01:34.372 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-7} inited
2025-06-30 17:01:34.418 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-8} inited
2025-06-30 17:01:34.465 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
2025-06-30 17:01:34.466 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-7} closed
2025-06-30 17:01:34.468 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-8} closed
2025-06-30 17:01:34.469 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 17:01:34.476 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-30 17:01:34.506 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 24 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:595)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:475)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:615)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:180)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$a96dfff0.CGLIB$sqlSessionFactory$2(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$a96dfff0$$FastClassBySpringCGLIB$$5457315e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$a96dfff0.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:122)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:593)
	... 38 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:76)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:137)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:130)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:120)
	... 40 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:120)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 44 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:200)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	... 46 common frames omitted
2025-06-30 17:01:37.528 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 17:01:37.563 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 13044 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 17:01:37.565 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 17:01:37.566 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 17:01:37.715 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 17:01:37.715 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 17:01:38.209 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 17:01:38.212 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 17:01:38.237 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-30 17:01:38.439 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$ef29038c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:01:38.452 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:01:38.891 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 17:01:38.892 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 17:01:38.892 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 17:01:38.893 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 17:01:38.897 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 17:01:38.904 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 17:01:38.906 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 17:01:38.907 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 17:01:38.961 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 17:01:38.962 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1246 ms
2025-06-30 17:01:38.965 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 17:01:39.579 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 17:01:39.610 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 17:01:39.905 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 17:01:39.908 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 17:01:40.370 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 17:01:40.493 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@713476bc, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7206760d, org.springframework.security.web.context.SecurityContextPersistenceFilter@4fbb4972, org.springframework.security.web.header.HeaderWriterFilter@bdcae6d, org.springframework.web.filter.CorsFilter@79bc908, org.springframework.security.web.authentication.logout.LogoutFilter@2c591d34, com.huang.store.security.JwtAuthenticationTokenFilter@435ab919, com.huang.store.security.CustomAuthenticationFilter@7841f6d3, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@74448a2e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@55c32192, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7734309e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@119581e4, org.springframework.security.web.session.SessionManagementFilter@ab6e2f, org.springframework.security.web.access.ExceptionTranslationFilter@18acab8d, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@204add9c]
2025-06-30 17:01:40.725 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 17:01:40.741 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 17:01:40.756 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 17:01:40.762 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.638 seconds (JVM running for 3.964)
2025-06-30 17:07:33.285 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 17:07:33.300 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 24036 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 17:07:33.300 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 17:07:33.300 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 17:07:33.412 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 17:07:33.412 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 17:07:33.928 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 17:07:33.929 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 17:07:33.956 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17 ms. Found 0 Redis repository interfaces.
2025-06-30 17:07:34.145 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$8d8e8a63] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:07:34.160 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:07:34.491 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 17:07:34.491 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 17:07:34.491 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 17:07:34.491 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 17:07:34.496 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 17:07:34.501 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 17:07:34.502 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 17:07:34.502 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 17:07:34.548 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 17:07:34.548 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1136 ms
2025-06-30 17:07:34.552 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 17:07:35.039 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 17:07:35.065 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 17:07:35.325 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 17:07:35.325 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 17:07:35.785 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 17:07:35.922 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@50b4788a, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@e74fa10, org.springframework.security.web.context.SecurityContextPersistenceFilter@23bf6d17, org.springframework.security.web.header.HeaderWriterFilter@78d862d4, org.springframework.web.filter.CorsFilter@1debef66, org.springframework.security.web.authentication.logout.LogoutFilter@8ef9a79, com.huang.store.security.JwtAuthenticationTokenFilter@2e80e959, com.huang.store.security.CustomAuthenticationFilter@3a60ccbe, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@47d4af71, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4f0c7830, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@66faee96, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@53a6aa7, org.springframework.security.web.session.SessionManagementFilter@24c26788, org.springframework.security.web.access.ExceptionTranslationFilter@20381c7e, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@61e06ec4]
2025-06-30 17:07:36.222 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 17:07:36.263 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 17:07:36.275 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.354 seconds (JVM running for 3.876)
2025-06-30 17:07:36.311 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-06-30 17:07:36.312 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-06-30 17:08:15.056 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 17:08:15.071 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 15344 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 17:08:15.072 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 17:08:15.073 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 17:08:15.186 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 17:08:15.186 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 17:08:15.588 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 17:08:15.590 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 17:08:15.614 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.
2025-06-30 17:08:15.781 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$1211d8ee] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:08:15.794 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:08:16.155 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 17:08:16.156 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 17:08:16.157 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 17:08:16.157 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 17:08:16.160 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 17:08:16.168 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 17:08:16.170 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 17:08:16.170 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 17:08:16.218 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 17:08:16.218 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1031 ms
2025-06-30 17:08:16.221 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 17:08:16.686 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 17:08:16.710 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 17:08:16.943 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 17:08:16.943 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 17:08:17.298 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 17:08:17.409 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@8e8c5f9, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5dfa3226, org.springframework.security.web.context.SecurityContextPersistenceFilter@143a8cbc, org.springframework.security.web.header.HeaderWriterFilter@7d2652c5, org.springframework.web.filter.CorsFilter@77a11508, org.springframework.security.web.authentication.logout.LogoutFilter@1108ec37, com.huang.store.security.JwtAuthenticationTokenFilter@6671a6c9, com.huang.store.security.CustomAuthenticationFilter@5301dfe8, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@2940f07, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@71bdda44, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5421259d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@220c69a0, org.springframework.security.web.session.SessionManagementFilter@6e85e7be, org.springframework.security.web.access.ExceptionTranslationFilter@3b4aa14d, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6e4ae488]
2025-06-30 17:08:17.628 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 17:08:17.642 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 17:08:17.656 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 17:08:17.663 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 2.908 seconds (JVM running for 3.187)
2025-06-30 17:10:44.965 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 17:10:44.979 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 13648 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 17:10:44.979 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 17:10:44.980 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 17:10:45.087 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 17:10:45.087 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 17:10:45.509 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 17:10:45.511 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 17:10:45.534 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 12 ms. Found 0 Redis repository interfaces.
2025-06-30 17:10:45.712 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$ff816297] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:10:45.726 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:10:46.114 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 17:10:46.114 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 17:10:46.114 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 17:10:46.116 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 17:10:46.119 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 17:10:46.127 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 17:10:46.128 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 17:10:46.129 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 17:10:46.186 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 17:10:46.186 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1099 ms
2025-06-30 17:10:46.190 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 17:10:46.680 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 17:10:46.703 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 17:10:46.979 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 17:10:46.979 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 17:10:47.352 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 17:10:47.491 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@522ce90f, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@61c1cf2f, org.springframework.security.web.context.SecurityContextPersistenceFilter@68c4a838, org.springframework.security.web.header.HeaderWriterFilter@143a8cbc, org.springframework.web.filter.CorsFilter@7bd8d44a, org.springframework.security.web.authentication.logout.LogoutFilter@ea7da61, com.huang.store.security.JwtAuthenticationTokenFilter@5301dfe8, com.huang.store.security.CustomAuthenticationFilter@2cb509ed, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@2e1466f5, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5421259d, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@34391fb, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1a00e86c, org.springframework.security.web.session.SessionManagementFilter@71bdda44, org.springframework.security.web.access.ExceptionTranslationFilter@4483c5, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@79d23c16]
2025-06-30 17:10:47.732 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 17:10:47.747 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 17:10:47.763 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 17:10:47.770 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.11 seconds (JVM running for 3.365)
2025-06-30 17:12:46.329 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 17:12:46.329 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 17:12:46.331 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-30 17:12:57.735 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 17:12:57.735 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 17:12:57.765 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:12:57.768 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 17:12:57.765 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:12:57.769 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 17:12:57.963 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 17:12:57.963 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 17:12:57.991 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 17:12:57.991 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 17:12:58.011 [http-nio-8080-exec-4] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 17:12:58.022 [http-nio-8080-exec-3] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 17:12:58.169 [http-nio-8080-exec-4] WARN  org.apache.catalina.util.SessionIdGeneratorBase - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [113] milliseconds.
2025-06-30 17:12:58.169 [http-nio-8080-exec-3] WARN  org.apache.catalina.util.SessionIdGeneratorBase - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [113] milliseconds.
2025-06-30 17:12:58.174 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:12:58.175 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:12:58.176 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:12:58.182 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:12:58.187 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:12:58.192 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:12:58.192 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:12:58.192 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:12:58.192 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:12:58.192 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:12:58.195 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:12:58.195 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:12:58.199 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:12:58.200 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:12:58.201 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:12:58.205 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:12:58.207 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:12:58.207 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:12:58.209 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:12:58.209 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:12:58.210 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:12:58.212 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:12:58.214 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:12:58.215 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:12:58.216 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:12:58.218 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:12:58.219 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:12:58.221 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:12:58.221 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:12:58.222 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:12:58.222 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:12:58.222 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:12:58.224 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:12:58.224 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:12:58.224 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:12:58.224 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:12:58.226 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:12:58.227 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:12:58.228 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:12:58.229 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:12:58.231 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:12:58.232 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:12:58.232 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:12:58.234 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:12:58.236 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:13:10.309 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:13:10.315 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:10.317 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:13:10.317 [http-nio-8080-exec-6] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 17:13:10.318 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:13:10.333 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:13:10.338 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:10.341 [http-nio-8080-exec-6] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 17:13:10.344 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:10.345 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:10.345 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:13:10.347 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:13:10.348 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:10.349 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:10.351 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:10.351 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:13:10.353 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:13:10.353 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:10.353 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:10.354 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:10.354 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:13:10.356 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:13:10.359 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:10.359 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:10.359 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:10.360 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:13:10.362 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:13:11.637 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:13:11.638 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:11.638 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:13:11.638 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:13:11.641 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:13:11.642 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:13:11.644 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:11.644 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:13:11.648 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:13:11.651 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:13:11.673 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:13:11.673 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:11.674 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:13:11.679 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:13:11.684 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:13:11.688 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:13:11.692 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:11.693 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:13:11.694 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:13:11.696 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:13:11.698 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:13:11.699 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:11.699 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:13:11.701 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:13:11.703 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:13:11.704 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:13:11.705 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:11.705 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:13:11.706 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:13:11.708 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:13:11.708 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:13:11.708 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:11.709 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:13:11.709 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:13:11.712 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:13:14.047 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:13:14.051 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:14.055 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:13:14.055 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:13:14.061 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:13:14.063 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:13:14.066 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:14.069 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:14.070 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:14.070 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:13:14.070 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:14.075 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 5(Integer)
2025-06-30 17:13:14.076 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:13:14.083 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:13:14.084 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:13:14.086 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:13:14.087 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:14.087 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:14.088 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:14.088 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:13:14.089 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:14.093 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002214(String)
2025-06-30 17:13:14.096 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:13:14.097 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 1
2025-06-30 17:13:14.097 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:13:14.098 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:14.101 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:14.101 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:14.100 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:13:14.101 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:13:14.101 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:14.102 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:13:14.103 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 5(Integer)
2025-06-30 17:13:14.103 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:13:14.104 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:14.106 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:13:14.109 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:13:14.107 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:14.115 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:14.115 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:14.115 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:13:14.115 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:13:14.116 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:13:14.117 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:13:14.118 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:13:16.500 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:13:16.513 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:16.514 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:13:16.513 [http-nio-8080-exec-1] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 17:13:16.516 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:13:16.535 [http-nio-8080-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 17:13:16.541 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:13:16.545 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:16.547 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:16.547 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:16.547 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:13:16.550 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:13:16.552 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:16.552 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:16.552 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:16.553 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:13:16.554 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:13:16.555 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:16.556 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:16.556 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:16.560 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:13:16.561 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:13:16.562 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:16.562 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:16.563 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:16.565 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:13:16.567 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:13:17.701 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:13:17.702 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:17.703 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:13:17.706 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:13:17.708 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:13:17.709 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:13:17.715 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:17.715 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:13:17.717 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:13:17.719 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:13:17.721 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:13:17.722 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:17.722 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:13:17.724 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:13:17.727 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:13:17.728 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:13:17.728 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:17.728 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:13:17.728 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:13:17.730 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:13:17.731 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:13:17.732 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:17.732 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:13:17.734 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:13:17.736 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:13:17.736 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:13:17.737 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:17.738 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:13:17.739 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:13:17.743 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:13:17.744 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:13:17.744 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:17.745 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:13:17.747 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:13:17.749 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:13:19.113 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:13:19.114 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:19.115 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:13:19.117 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:13:19.118 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:13:19.122 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:13:19.124 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:19.125 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:13:19.126 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:19.126 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:19.128 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:19.130 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:13:19.126 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:13:19.133 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:13:19.133 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:13:19.137 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:19.138 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:19.138 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:13:19.138 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:19.138 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:19.139 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:13:19.139 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:13:19.139 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:13:19.141 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:13:19.142 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:13:19.144 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:19.145 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:13:19.146 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:19.146 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:13:19.146 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:19.146 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:19.146 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:13:19.147 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:13:19.150 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:13:19.150 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:13:19.152 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:19.152 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:13:19.152 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:19.152 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:13:19.152 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:19.153 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:19.153 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:13:19.153 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:13:19.155 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:13:19.155 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:17:23.752 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-06-30 17:17:23.754 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-06-30 17:17:34.445 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 17:17:34.459 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 3932 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 17:17:34.459 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 17:17:34.459 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 17:17:34.560 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 17:17:34.560 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 17:17:34.960 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 17:17:34.961 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 17:17:34.981 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-30 17:17:35.141 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$278026a1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:17:35.152 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:17:35.453 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 17:17:35.458 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 17:17:35.458 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 17:17:35.459 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 17:17:35.461 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 17:17:35.469 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 17:17:35.470 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 17:17:35.470 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 17:17:35.512 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 17:17:35.512 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 952 ms
2025-06-30 17:17:35.515 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 17:17:35.954 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 17:17:35.977 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 17:17:36.240 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 17:17:36.240 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 17:17:36.608 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 17:17:36.710 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4bdf8809, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@74cc1fe2, org.springframework.security.web.context.SecurityContextPersistenceFilter@66faee96, org.springframework.security.web.header.HeaderWriterFilter@4f0c7830, org.springframework.web.filter.CorsFilter@c90af6e, org.springframework.security.web.authentication.logout.LogoutFilter@4c9a8b3a, com.huang.store.security.JwtAuthenticationTokenFilter@291639f6, com.huang.store.security.CustomAuthenticationFilter@87c2545, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@62763de5, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4a98c10c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@68e44f99, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@24ec4c0a, org.springframework.security.web.session.SessionManagementFilter@5f697c01, org.springframework.security.web.access.ExceptionTranslationFilter@23bf6d17, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@2b11e31b]
2025-06-30 17:17:36.953 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 17:17:36.967 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 17:17:36.979 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 17:17:36.986 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 2.814 seconds (JVM running for 3.285)
2025-06-30 17:17:42.366 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 17:17:42.366 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 17:17:42.367 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-30 17:18:10.877 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 17:18:10.890 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:10.892 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 17:18:10.989 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 17:18:11.005 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 17:18:11.014 [http-nio-8080-exec-3] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 17:18:11.094 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 17:18:11.094 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:11.094 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 17:18:11.095 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 17:18:11.096 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 17:18:11.096 [http-nio-8080-exec-3] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 17:18:11.164 [http-nio-8080-exec-3] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=56464ff@456.com, password=$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy, enabled=true, roles=[ROLE_USER]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=A67F80F7B1F0AC22176DBA6D6314DBAE], Granted Authorities=[ROLE_USER]]
2025-06-30 17:18:11.189 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 17:18:11.189 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:11.189 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 17:18:11.190 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 17:18:11.192 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 17:18:12.296 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:18:12.296 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.296 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:18:12.298 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:18:12.301 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:18:12.301 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:12.301 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.302 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:12.302 [http-nio-8080-exec-8] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:18:12.302 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:18:12.302 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.302 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:18:12.302 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:18:12.302 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.302 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:18:12.302 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:18:12.303 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:18:12.304 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:12.304 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.304 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:12.305 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:18:12.307 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:18:12.307 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.307 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:18:12.308 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:18:12.307 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:18:12.308 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.308 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.308 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:18:12.308 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:18:12.308 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:18:12.310 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:18:12.312 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:18:12.312 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:18:12.314 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:18:12.314 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.314 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:18:12.316 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:18:12.316 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:12.316 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.316 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:12.318 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:18:12.322 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:18:12.323 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:18:12.324 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:18:12.324 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.324 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:18:12.324 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:18:12.325 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:18:12.325 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:18:12.325 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:18:12.326 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.326 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:18:12.326 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:18:12.326 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:18:12.326 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.326 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:18:12.326 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:18:12.328 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:18:12.328 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:18:12.329 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:18:12.329 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:12.329 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.329 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:12.329 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:18:12.330 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:18:12.330 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:18:12.331 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:18:12.331 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:18:12.331 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.331 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:18:12.331 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:18:12.334 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:18:12.334 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:18:12.336 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:18:12.339 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:18:12.340 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:18:12.340 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.340 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:18:12.341 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:18:12.343 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:18:12.343 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:18:12.343 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.343 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:18:12.343 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:18:12.344 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:18:12.344 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:18:12.344 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.344 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:18:12.344 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:18:12.346 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:18:12.346 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:18:12.346 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.346 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:18:12.346 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:18:12.347 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:18:23.471 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:18:23.471 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:23.471 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:18:23.476 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:18:23.484 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:18:23.484 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:23.485 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:23.485 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:23.485 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:18:23.489 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:18:23.490 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:23.491 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:23.491 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:23.491 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:18:23.495 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:18:23.496 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:23.496 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:23.496 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:23.496 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:18:23.499 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:18:23.499 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:23.499 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:23.500 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:23.500 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:18:23.503 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:18:24.077 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:18:24.077 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:24.077 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:18:24.077 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:18:24.080 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:18:24.081 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:18:24.081 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:24.081 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:18:24.082 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:18:24.083 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:18:24.083 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:18:24.083 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:24.083 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:18:24.084 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:18:24.086 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:18:24.086 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:18:24.087 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:24.087 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:18:24.087 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:18:24.087 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:18:26.082 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:18:26.082 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:26.082 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:18:26.082 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:18:26.084 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:18:26.084 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:26.084 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:26.084 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:26.085 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:18:26.087 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:18:26.087 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:26.087 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:26.088 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:26.088 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:18:26.090 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:18:26.090 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:26.089 [http-nio-8080-exec-8] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 17:18:26.090 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:26.091 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:26.091 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:18:26.093 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:18:26.093 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:26.093 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:26.093 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:26.093 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:18:26.094 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:18:26.097 [http-nio-8080-exec-8] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 17:25:57.129 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:25:57.129 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:25:57.129 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:25:57.135 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:25:57.138 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:25:57.139 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:25:57.139 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:25:57.139 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:25:57.142 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:25:57.144 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:25:57.172 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:25:57.172 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:25:57.172 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:25:57.175 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:25:57.179 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:25:57.179 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:25:57.179 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:25:57.179 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:25:57.180 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:25:57.181 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:25:57.183 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:25:57.183 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:25:57.183 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:25:57.184 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:25:57.186 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:25:57.187 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:25:57.187 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:25:57.187 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:25:57.187 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:25:57.188 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:25:57.189 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:25:57.189 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:25:57.189 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:25:57.189 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:25:57.190 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:01.275 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:01.275 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:01.275 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:01.275 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:01.277 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:01.278 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:01.278 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:01.278 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:01.278 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:01.281 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:01.282 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:01.283 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:01.283 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:01.283 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:26:01.283 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:01.283 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:26:01.283 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:01.286 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:01.287 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:01.287 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:01.287 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:01.288 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:01.288 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:26:01.290 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:01.290 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:26:01.291 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:01.291 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:01.291 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:26:01.291 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:01.291 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:01.291 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:26:01.292 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:01.292 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:26:01.294 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:26:01.294 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:01.294 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:26:01.294 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:01.294 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:26:01.295 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:26:01.297 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:26:01.297 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:26:01.298 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:01.298 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:26:01.298 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:26:01.301 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:26:02.767 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:02.768 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.768 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:02.769 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:02.772 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:02.772 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:02.772 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.772 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:02.773 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:02.775 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:02.776 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:02.776 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.776 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:02.776 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:02.778 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:02.778 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:02.778 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.778 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:02.779 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:02.780 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:26:02.780 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.780 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:26:02.780 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:26:02.780 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:02.780 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:02.780 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.780 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:02.780 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:02.781 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:26:02.781 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:02.781 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.781 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:02.781 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:02.781 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:02.783 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:02.785 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:26:02.785 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.785 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:26:02.785 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:26:02.787 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:26:02.787 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:02.787 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.787 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:02.787 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:02.789 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:02.789 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:26:02.789 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.789 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:26:02.790 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:26:02.791 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:26:02.792 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:02.792 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.792 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:02.792 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:26:02.793 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:02.794 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:02.794 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.794 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:02.794 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:26:02.796 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:16.310 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:16.310 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:16.310 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:16.310 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:16.312 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:26:16.312 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:16.312 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:26:16.312 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:26:16.313 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:16.313 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:16.313 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:16.313 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:16.314 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:16.314 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:26:16.315 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:26:16.315 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:16.315 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:26:16.315 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:26:16.316 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:16.316 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:16.316 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:16.316 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:16.317 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:16.319 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:26:16.319 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:16.320 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:16.320 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:26:16.320 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:16.320 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:16.320 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:26:16.320 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:16.320 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:26:16.320 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:16.322 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:26:16.322 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:16.324 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:26:16.324 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:16.324 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:16.324 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:16.324 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:26:16.324 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:16.324 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:16.324 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:26:16.325 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:26:16.325 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:19.730 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:19.730 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.730 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:19.730 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:19.730 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:26:19.730 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.730 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:26:19.730 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:26:19.732 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:26:19.732 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:19.732 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:19.732 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:19.732 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.732 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.732 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:19.732 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:19.732 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:19.733 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:19.734 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:19.734 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:19.734 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:19.735 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.735 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:19.735 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:26:19.735 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:19.735 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.735 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:26:19.737 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:26:19.738 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:19.738 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:19.738 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.738 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:19.738 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:19.740 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:19.740 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:19.740 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:26:19.740 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.740 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:19.741 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:19.741 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:19.741 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.741 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:19.741 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:19.742 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:19.742 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:19.743 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:26:19.743 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.743 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:26:19.744 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:26:19.745 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:26:19.746 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:19.746 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.746 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:19.746 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:26:19.747 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:19.747 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:19.747 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.747 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:19.747 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:26:19.749 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:20.844 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:20.844 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:20.844 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:20.844 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:20.848 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:20.849 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:20.850 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:20.850 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:20.850 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:20.851 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:26:20.851 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:20.851 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:26:20.851 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 5(Integer)
2025-06-30 17:26:20.852 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:20.853 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:20.854 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:20.854 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:20.854 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:20.855 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:26:20.855 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:26:20.855 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:20.855 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:26:20.856 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002214(String)
2025-06-30 17:26:20.856 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:20.857 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:20.857 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:20.857 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:20.857 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:20.857 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 1
2025-06-30 17:26:20.858 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:26:20.858 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:20.858 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:26:20.858 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 5(Integer)
2025-06-30 17:26:20.859 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:20.860 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:20.860 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:26:20.860 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:20.861 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:20.861 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:20.861 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:26:20.861 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:20.861 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:26:20.861 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:26:20.863 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:26:20.863 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:24.404 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:24.404 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.404 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:24.404 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:24.405 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:26:24.405 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.406 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:26:24.406 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:26:24.406 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:24.407 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:24.407 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.407 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:24.407 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:24.407 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:26:24.407 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:24.407 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.407 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:24.408 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:24.408 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:24.409 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:24.409 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.409 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:24.409 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:24.410 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:24.410 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:24.410 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:24.410 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:26:24.410 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.410 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.410 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:26:24.410 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:24.411 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:24.411 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:26:24.412 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:24.413 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:24.413 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.413 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:24.413 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:24.415 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:24.418 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:26:24.419 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:24.419 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.419 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:24.419 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:24.421 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:24.421 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:26:24.421 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.421 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:26:24.422 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:26:24.423 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:26:24.424 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:24.424 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.424 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:24.424 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:26:24.425 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:24.425 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:24.425 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.426 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:24.426 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:26:24.427 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:27.021 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:27.021 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:27.021 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:27.022 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:27.023 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:27.024 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:27.024 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:27.024 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:27.024 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:27.025 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:26:27.025 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:27.025 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:26:27.025 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:27.025 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:26:27.026 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:27.026 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:27.026 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:27.026 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:27.028 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:26:27.029 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:27.029 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:26:27.030 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:27.030 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:26:27.030 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:26:27.030 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:27.030 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:27.030 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:27.030 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:27.031 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:26:27.032 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:26:27.032 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:27.032 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:26:27.032 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:26:27.032 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:27.033 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:27.033 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:27.033 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:27.033 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:27.034 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:26:27.036 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:26:27.036 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:27.036 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:26:27.036 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:26:27.037 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:27.038 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:26:33.188 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:33.189 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.189 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:33.189 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:26:33.189 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.189 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:26:33.189 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:33.189 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:26:33.192 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:26:33.192 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:33.193 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:33.193 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:33.193 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.193 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:33.194 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:33.193 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.195 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:33.195 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:33.195 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:33.196 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:33.196 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:26:33.196 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:33.196 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.196 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.196 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:33.196 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:26:33.196 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:33.196 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:26:33.198 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:33.198 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:26:33.198 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:33.198 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.198 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:33.198 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:33.198 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:33.198 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.198 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:33.198 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:33.199 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:33.199 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:33.199 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:33.199 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.199 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:33.199 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:33.199 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:26:33.199 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.199 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:26:33.200 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:26:33.200 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:33.202 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:26:33.202 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:33.202 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.202 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:33.202 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:26:33.203 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:33.204 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:33.204 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.204 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:33.204 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:26:33.205 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:34.950 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:34.951 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:34.951 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:34.952 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:34.954 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:34.955 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:26:34.955 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:34.955 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:34.955 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:34.956 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:34.956 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:34.956 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:26:34.957 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:26:34.963 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:34.963 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:26:34.964 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:26:34.964 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:34.964 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:26:34.966 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:26:34.967 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:34.967 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:34.967 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:34.967 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:34.968 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:26:34.969 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:26:34.969 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:34.969 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:26:34.969 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:34.969 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:26:34.969 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:34.969 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:34.969 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:34.969 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:34.970 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:26:34.971 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:34.971 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:34.971 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:26:34.971 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:34.971 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:26:34.972 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:26:34.971 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:34.973 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:34.974 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:34.974 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:26:34.975 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:36.349 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:36.350 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.350 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:36.350 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:36.350 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:26:36.350 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.350 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:26:36.350 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:26:36.352 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:26:36.352 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:36.352 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:36.352 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:36.352 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.352 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.352 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:36.352 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:36.352 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:36.352 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:36.353 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:36.353 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:36.353 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:36.353 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.353 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:36.354 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:36.354 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:26:36.354 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.354 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:26:36.354 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:26:36.355 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:36.356 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:36.356 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.357 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:26:36.357 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:36.357 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:36.357 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:36.357 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.357 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:36.357 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:36.358 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:36.359 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:36.359 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:36.359 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.359 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:36.360 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:36.360 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:26:36.360 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.360 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:26:36.360 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:26:36.364 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:36.366 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:26:36.367 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:36.367 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.367 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:36.368 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:26:36.369 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:36.370 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:36.370 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.370 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:36.370 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:26:36.372 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:37.647 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:37.647 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:37.647 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:37.648 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:37.649 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:37.649 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:26:37.649 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:37.649 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:26:37.649 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:37.649 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:26:37.649 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:37.649 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:37.650 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:37.651 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:37.651 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:26:37.651 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:37.651 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:26:37.651 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:37.651 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:37.651 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:26:37.651 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:37.651 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:37.651 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:26:37.653 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:37.653 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:26:37.653 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:37.653 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:37.653 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:26:37.653 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:37.653 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:37.653 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:26:37.654 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:26:37.654 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:37.655 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:26:37.655 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:37.655 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:26:37.655 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:37.655 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:37.655 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:37.655 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:26:37.655 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:37.656 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:26:37.656 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:37.657 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:26:37.657 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:38.954 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:38.954 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.954 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:38.954 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:38.954 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:26:38.955 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.955 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:26:38.955 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:26:38.956 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:38.957 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:38.957 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.957 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:38.957 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:38.957 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:26:38.959 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:38.959 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.959 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:38.959 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:38.959 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:38.960 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:38.960 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.960 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:38.960 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:38.960 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:38.962 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:38.962 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:26:38.962 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.962 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:26:38.962 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:38.962 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.962 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:38.962 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:38.963 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:26:38.964 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:38.965 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:38.965 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.965 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:38.965 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:38.966 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:26:38.966 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:38.966 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.966 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:38.966 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:38.967 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:38.968 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:38.969 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:26:38.970 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.970 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:26:38.970 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:26:38.974 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:26:38.974 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:38.974 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.974 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:38.975 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:26:38.976 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:38.977 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:38.977 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.977 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:38.977 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:26:38.979 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:27:59.767 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:27:59.767 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:27:59.767 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:27:59.768 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:27:59.768 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:27:59.768 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:27:59.771 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:27:59.772 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:27:59.772 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:27:59.772 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:27:59.772 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:27:59.772 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:27:59.772 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:27:59.773 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:27:59.773 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:27:59.773 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:27:59.773 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:27:59.774 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:27:59.773 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:27:59.774 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:27:59.774 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:27:59.774 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:27:59.774 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:27:59.776 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:27:59.776 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:27:59.777 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:27:59.777 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:27:59.777 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:27:59.777 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:27:59.777 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:27:59.777 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:27:59.777 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:27:59.777 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:27:59.779 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:27:59.779 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:27:59.780 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:27:59.780 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:27:59.780 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:27:59.780 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:27:59.780 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:27:59.780 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:27:59.780 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:27:59.780 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:27:59.781 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:27:59.781 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:28:00.831 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:28:00.832 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.832 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:28:00.832 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:28:00.833 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:28:00.833 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:00.833 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.833 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:00.834 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:28:00.835 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:28:00.835 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:28:00.835 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:00.835 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.835 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.835 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:00.835 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:28:00.835 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:28:00.836 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:28:00.837 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:28:00.837 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:28:00.837 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:00.837 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:28:00.837 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.837 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.837 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:28:00.837 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:00.838 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:28:00.838 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:28:00.839 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:28:00.839 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:28:00.839 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:00.839 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.839 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:00.840 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:28:00.840 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:28:00.840 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.840 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:28:00.840 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:28:00.841 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:28:00.842 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:28:00.842 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:28:00.842 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.842 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:28:00.843 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:28:00.844 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:28:00.845 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:28:00.845 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.845 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:28:00.846 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:28:00.847 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:28:00.847 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:00.847 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.847 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:00.848 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:28:00.849 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:00.849 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:00.849 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.849 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:00.849 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:28:00.850 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:02.347 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:28:02.347 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.347 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:28:02.348 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-30 17:28:02.349 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:28:02.349 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:28:02.349 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.349 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:28:02.350 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:28:02.351 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:28:02.351 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:28:02.351 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.351 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:28:02.353 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-30 17:28:02.354 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-30 17:28:02.355 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:28:02.355 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.355 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:28:02.355 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:28:02.355 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:28:02.356 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 17:28:02.356 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.356 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:28:02.357 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-30 17:28:02.358 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:28:02.359 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:02.359 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.359 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:02.359 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:28:02.360 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:02.360 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:02.360 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.360 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:02.361 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:28:02.361 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:02.362 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:02.362 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.362 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:02.362 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:28:02.363 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:02.844 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:28:02.844 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.844 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:28:02.844 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:28:02.846 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:28:02.847 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:28:02.847 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.847 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:28:02.847 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:28:02.849 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:28:02.850 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:28:02.850 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.850 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:28:02.851 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:28:02.854 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:28:02.854 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:28:02.854 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.854 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:28:02.855 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:28:02.856 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:28:02.857 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:28:02.857 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.857 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:28:02.857 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:28:02.859 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:28:02.860 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:02.860 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.860 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:02.860 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:28:02.862 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:02.862 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:02.862 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.862 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:02.863 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:28:02.864 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:06.834 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:28:06.834 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:06.834 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:28:06.834 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-30 17:28:06.835 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:28:06.836 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:28:06.836 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:06.836 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:28:06.836 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:28:06.837 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:28:06.839 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:28:06.839 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:06.839 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:28:06.840 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-30 17:28:06.842 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-30 17:28:06.842 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:28:06.842 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:06.842 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:28:06.843 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:28:06.843 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:28:06.845 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 17:28:06.845 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:06.845 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:28:06.845 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-30 17:28:06.847 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:28:06.847 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:06.847 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:06.847 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:06.848 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:28:06.848 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:06.848 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:06.848 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:06.848 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:06.849 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:28:06.849 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:06.849 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:06.849 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:06.849 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:06.850 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:28:06.850 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:07.571 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:28:07.572 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:07.572 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:28:07.572 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:28:07.573 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:28:07.573 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:28:07.573 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:07.573 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:28:07.574 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:28:07.576 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:28:07.577 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:28:07.577 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:07.577 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:28:07.577 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:28:07.579 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:28:07.579 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:28:07.579 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:07.579 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:28:07.579 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:28:07.581 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:28:07.582 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:28:07.583 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:07.583 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:28:07.583 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:28:07.584 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:28:07.585 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:07.585 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:07.585 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:07.585 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:28:07.585 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:07.586 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:07.586 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:07.586 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:07.586 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:28:07.590 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:08.161 [http-nio-8080-exec-10] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 17:28:08.164 [http-nio-8080-exec-10] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 17:28:09.384 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:28:09.384 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.384 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:28:09.384 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:28:09.387 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:28:09.388 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:28:09.388 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.388 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:28:09.388 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:28:09.390 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:28:09.395 [http-nio-8080-exec-9] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:28:09.395 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:28:09.395 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:28:09.395 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.395 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.395 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:28:09.395 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:28:09.396 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:28:09.396 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:28:09.396 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.396 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:28:09.396 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:28:09.399 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:28:09.400 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:28:09.400 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.400 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:28:09.401 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:28:09.401 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:28:09.401 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.401 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:28:09.395 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:28:09.402 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:28:09.402 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:28:09.403 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:09.403 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.403 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:09.403 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:28:09.404 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:28:09.404 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:28:09.404 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.404 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:28:09.405 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:28:09.404 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:09.405 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:09.405 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.405 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:09.406 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:28:09.406 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:28:09.406 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:28:09.407 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:09.408 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:09.408 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.408 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:09.408 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:28:09.409 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:28:09.409 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:09.409 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:28:09.409 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.409 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:28:09.410 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:28:09.410 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:09.410 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.410 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:09.410 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:28:09.411 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:28:09.411 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:09.411 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:09.411 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.411 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:09.412 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:28:09.412 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:28:09.412 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.412 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:28:09.413 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:28:09.414 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:09.415 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:28:09.416 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:09.416 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.416 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:09.416 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:28:09.417 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:28:09.417 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:09.418 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.418 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:09.418 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:28:09.419 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:28:09.419 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:09.419 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.419 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:09.419 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:28:09.421 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:28:09.421 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:09.421 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.421 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:09.422 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:28:09.423 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:28:11.385 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:28:11.386 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:11.387 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:28:11.388 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:28:11.389 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:28:11.389 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:28:11.389 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:11.389 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:28:11.390 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:11.390 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:11.390 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:11.390 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:28:11.390 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:28:11.391 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:28:11.391 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:28:11.392 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:28:11.392 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:11.392 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:11.392 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:11.392 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:28:11.392 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:11.392 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:28:11.393 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:28:11.395 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:28:11.396 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:28:11.396 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:28:11.396 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:11.396 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:28:11.396 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:28:11.396 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:11.396 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:11.396 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:11.396 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:28:11.397 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:28:11.397 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:28:11.398 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:11.398 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:28:11.398 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:11.398 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:11.398 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:28:11.398 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:11.398 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:28:11.398 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:28:11.399 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:28:11.399 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:29:14.950 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:29:14.951 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.951 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:29:14.953 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:29:14.954 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:29:14.954 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:29:14.954 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.954 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:29:14.954 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.954 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:29:14.954 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:29:14.955 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:29:14.955 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.955 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:29:14.955 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:29:14.956 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:29:14.957 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:29:14.958 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:29:14.959 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:29:14.959 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.959 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:29:14.959 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:29:14.959 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:29:14.961 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:29:14.962 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:29:14.963 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:29:14.963 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.963 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:29:14.963 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:29:14.963 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:29:14.964 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.954 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:29:14.964 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:29:14.964 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:29:14.964 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:29:14.965 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:29:14.965 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.965 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:29:14.965 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:29:14.965 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:29:14.965 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:29:14.965 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.965 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:29:14.965 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:29:14.966 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.966 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:29:14.966 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:29:14.966 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:29:14.966 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:29:14.966 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:29:14.966 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:29:14.966 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.966 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:29:14.966 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.967 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:29:14.967 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:29:14.967 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:29:14.967 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:29:14.967 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:29:14.967 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:29:14.968 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:29:14.968 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.968 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:29:14.968 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:29:14.968 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:29:14.968 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:29:14.969 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.969 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.969 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:29:14.969 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:29:14.969 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:29:14.969 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:29:14.970 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:29:14.970 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:29:14.970 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:29:14.970 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:29:14.970 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:29:14.970 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.970 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.970 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:29:14.970 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:29:14.970 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:29:14.970 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:29:14.971 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:29:14.971 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:29:14.971 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:29:14.971 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.971 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:29:14.972 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:29:14.973 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:29:14.973 [http-nio-8080-exec-2] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:29:14.973 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:29:14.973 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.973 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:29:14.973 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:29:14.974 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:31:51.597 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:31:51.597 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:51.597 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:31:51.602 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:31:51.604 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:31:51.604 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:51.604 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:51.604 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:51.605 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:31:51.605 [http-nio-8080-exec-7] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 17:31:51.607 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:31:51.607 [http-nio-8080-exec-7] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 17:31:51.607 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:51.607 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:51.607 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:51.608 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:31:51.609 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:31:51.609 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:51.609 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:51.609 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:51.609 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:31:51.611 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:31:51.611 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:51.611 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:51.611 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:51.611 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:31:51.613 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:31:52.844 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:31:52.844 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:52.844 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:31:52.844 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:31:52.845 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:31:52.846 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:31:52.846 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:52.846 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:31:52.846 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:31:52.847 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:31:52.848 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:31:52.848 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:52.848 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:31:52.848 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:31:52.851 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:31:52.852 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:31:52.852 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:52.852 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:31:52.852 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:31:52.853 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:31:52.854 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:31:52.854 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:52.854 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:31:52.854 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:31:52.855 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:31:52.856 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:52.856 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:52.856 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:52.856 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:31:52.857 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:52.857 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:52.857 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:52.857 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:52.857 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:31:52.859 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:55.459 [http-nio-8080-exec-10] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 17:31:55.461 [http-nio-8080-exec-10] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 17:31:56.256 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:31:56.256 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.256 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:31:56.257 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:31:56.257 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:31:56.257 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.257 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:31:56.258 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:31:56.259 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:31:56.259 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.259 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:31:56.259 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:31:56.260 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:31:56.264 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:31:56.267 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:31:56.267 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:31:56.267 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.268 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:31:56.268 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:31:56.268 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.268 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:31:56.268 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:31:56.268 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:31:56.269 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:31:56.269 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:31:56.269 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:56.269 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.269 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:56.269 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:31:56.269 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:31:56.269 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.269 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:31:56.270 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:31:56.270 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:31:56.270 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:56.270 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:56.271 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.271 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:56.271 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:31:56.272 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:56.273 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:56.273 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.273 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:56.273 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:31:56.275 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:56.276 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:56.276 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.276 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:56.276 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:31:56.277 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:56.278 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:56.278 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.278 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:56.279 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:31:56.279 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:31:56.279 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.279 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:31:56.279 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:31:56.279 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:56.280 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:31:56.282 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:31:56.282 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.282 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:31:56.282 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:31:56.284 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:31:56.287 [http-nio-8080-exec-8] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:31:56.287 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:31:56.287 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.287 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:31:56.287 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:31:56.288 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:31:56.289 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:31:56.289 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.289 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:31:56.289 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:31:56.290 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:31:56.290 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:56.290 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.290 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:56.291 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:31:56.292 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:31:56.292 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:56.292 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.292 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:56.292 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:31:56.294 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:31:56.294 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:56.294 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.294 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:56.295 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:31:56.296 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:31:56.297 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:56.297 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.297 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:56.297 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:31:56.298 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:31:57.746 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:31:57.747 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:57.747 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:31:57.747 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:31:57.748 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:31:57.748 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:31:57.748 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:57.749 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:31:57.749 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:57.749 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:57.749 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:57.749 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:31:57.749 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:31:57.750 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:31:57.751 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:31:57.751 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:57.751 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:57.751 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:57.751 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:31:57.752 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:57.752 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:31:57.752 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:31:57.752 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:31:57.753 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:31:57.753 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:31:57.754 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:57.754 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:57.754 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:57.754 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:31:57.754 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:31:57.754 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:57.754 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:31:57.754 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:31:57.755 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:31:57.755 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:31:57.755 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:31:57.755 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:57.755 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:57.755 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:57.755 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:31:57.755 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:57.755 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:31:57.755 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:31:57.757 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:31:57.761 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:31:59.539 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:31:59.540 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.540 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:31:59.540 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:31:59.540 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:31:59.540 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.540 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:31:59.541 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:31:59.542 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:31:59.542 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:31:59.542 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.542 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:31:59.542 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:31:59.542 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:31:59.543 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:31:59.543 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.543 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:31:59.543 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:31:59.544 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:31:59.539 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:31:59.545 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.545 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:31:59.545 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:31:59.547 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:31:59.548 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:31:59.548 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.548 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:31:59.548 [http-nio-8080-exec-8] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:31:59.548 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:31:59.548 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:31:59.545 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:31:59.542 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:31:59.549 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.549 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:31:59.549 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:59.549 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.549 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:59.549 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:31:59.550 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:31:59.551 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:59.552 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:59.552 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.552 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:59.552 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:31:59.553 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:31:59.555 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:31:59.553 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:59.548 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.556 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:31:59.556 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:31:59.556 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.556 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:31:59.556 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:31:59.556 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:31:59.555 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:31:59.556 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:59.556 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.556 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:59.557 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:31:59.557 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:31:59.557 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:31:59.558 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:59.559 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:59.560 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.560 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:59.560 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:31:59.556 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.561 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:31:59.561 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:59.562 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:31:59.562 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:59.562 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.562 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:59.562 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:31:59.562 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:31:59.562 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:59.563 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:59.563 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.563 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:59.563 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:31:59.565 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:31:59.566 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:59.566 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.566 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:59.566 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:31:59.567 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:31:59.568 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:59.568 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.568 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:59.568 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:31:59.569 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:31:59.569 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:59.569 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.569 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:59.570 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:31:59.571 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:38:17.101 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:38:17.101 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:17.102 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:38:17.103 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:38:17.103 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:17.103 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:38:17.105 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:38:17.107 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:38:17.107 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:38:17.107 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:17.107 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:17.107 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:17.107 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:38:17.108 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:38:17.108 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:38:17.108 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:38:17.108 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:17.108 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:38:17.109 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:17.109 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:17.109 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:17.109 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:38:17.109 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:38:17.110 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:38:17.110 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:38:17.110 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:17.110 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:38:17.110 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:17.110 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:17.110 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:17.110 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:38:17.110 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:38:17.111 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:38:17.112 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:38:17.113 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:17.113 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:17.113 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:17.114 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:38:17.114 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:38:17.115 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:38:17.115 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:17.115 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:38:17.115 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:38:17.116 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:38:17.116 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:38:18.509 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:38:18.510 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.510 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:38:18.510 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.510 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:38:18.510 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:38:18.512 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:38:18.512 [http-nio-8080-exec-2] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:38:18.512 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:38:18.512 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:38:18.512 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:38:18.512 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.512 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:38:18.512 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.512 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:38:18.512 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:38:18.512 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:38:18.513 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:38:18.513 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.513 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:38:18.510 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:38:18.513 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:38:18.513 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:38:18.512 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.513 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:38:18.515 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:38:18.516 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:38:18.517 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:38:18.517 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:38:18.517 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.517 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:38:18.517 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:38:18.517 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.517 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:38:18.518 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:38:18.518 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:38:18.518 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:38:18.518 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:38:18.518 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.518 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:38:18.519 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:38:18.519 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:38:18.519 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:38:18.520 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:38:18.520 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:38:18.520 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.520 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:38:18.520 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:18.520 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.520 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:18.520 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:38:18.520 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:38:18.521 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:38:18.522 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:38:18.522 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:38:18.522 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:18.523 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.523 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:18.523 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:38:18.523 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:38:18.523 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:18.523 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.523 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:18.523 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:38:18.524 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:18.524 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:38:18.524 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:18.524 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.524 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:18.524 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:38:18.524 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:18.524 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.524 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:18.524 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:38:18.525 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:18.525 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:38:18.526 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:18.526 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:18.526 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.526 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.526 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:18.526 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:18.526 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:38:18.526 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:38:18.526 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:18.526 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:38:18.526 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:18.526 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.526 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:18.526 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:38:18.528 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:18.529 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:18.529 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.529 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:18.529 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:38:18.530 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:20.114 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:38:20.114 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:20.114 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:38:20.115 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:38:20.116 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:38:20.116 [http-nio-8080-exec-5] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 17:38:20.117 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:20.117 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:20.117 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:20.118 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:38:20.120 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:38:20.120 [http-nio-8080-exec-5] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 17:38:20.120 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:20.120 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:20.120 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:20.121 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:38:20.122 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:38:20.122 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:20.123 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:20.123 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:20.123 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:38:20.124 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:38:20.124 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:20.124 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:20.124 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:20.125 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:38:20.126 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:38:21.235 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:38:21.235 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:21.235 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:38:21.236 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:38:21.239 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:38:21.239 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:38:21.240 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:21.240 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:38:21.240 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:38:21.241 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:38:21.242 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:38:21.242 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:21.242 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:38:21.243 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:38:21.246 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:38:21.246 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:38:21.246 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:21.246 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:38:21.247 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:38:21.248 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:38:21.249 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:38:21.249 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:21.249 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:38:21.250 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:38:21.251 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:38:21.252 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:21.252 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:21.252 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:21.253 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:38:21.253 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:21.253 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:21.253 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:21.253 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:21.253 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:38:21.255 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:25.706 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:38:25.706 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:25.706 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:38:25.706 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-30 17:38:25.707 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:38:25.708 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:38:25.708 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:25.708 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:38:25.708 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:38:25.710 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:38:25.711 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:38:25.711 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:25.711 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:38:25.711 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-30 17:38:25.713 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-30 17:38:25.713 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:38:25.713 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:25.714 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:38:25.714 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:38:25.716 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:38:25.717 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 17:38:25.717 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:25.717 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:38:25.718 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-30 17:38:25.719 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:38:25.720 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:25.720 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:25.720 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:25.720 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:38:25.721 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:25.722 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:25.722 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:25.722 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:25.723 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:38:25.725 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:25.725 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:25.725 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:25.725 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:25.726 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:38:25.727 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:26.601 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:38:26.601 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:26.601 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:38:26.602 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:38:26.602 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:38:26.603 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:38:26.603 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:26.603 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:38:26.603 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:38:26.604 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:38:26.604 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:38:26.605 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:26.605 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:38:26.605 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:38:26.607 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:38:26.608 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:38:26.608 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:26.608 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:38:26.608 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:38:26.609 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:38:26.610 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:38:26.610 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:26.610 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:38:26.610 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:38:26.611 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:38:26.611 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:26.611 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:26.612 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:26.612 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:38:26.612 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:26.613 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:26.613 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:26.613 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:26.613 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:38:26.614 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:59.158 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:38:59.158 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.158 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:38:59.158 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-30 17:38:59.159 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:38:59.160 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:38:59.160 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.160 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:38:59.160 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:38:59.161 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:38:59.162 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:38:59.162 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.162 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:38:59.162 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-30 17:38:59.164 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-30 17:38:59.165 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:38:59.165 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.165 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:38:59.165 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:38:59.167 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:38:59.168 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 17:38:59.168 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.168 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:38:59.169 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-30 17:38:59.170 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:38:59.171 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:59.171 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.171 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:59.172 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:38:59.173 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:59.176 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:59.176 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.176 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:59.176 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:38:59.178 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:59.179 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:59.179 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.179 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:59.179 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:38:59.181 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:59.684 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:38:59.684 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.684 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:38:59.685 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:38:59.686 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:38:59.687 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:38:59.687 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.687 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:38:59.688 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:38:59.690 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:38:59.692 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:38:59.693 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.693 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:38:59.693 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:38:59.697 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:38:59.698 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:38:59.699 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.699 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:38:59.699 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:38:59.702 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:38:59.705 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:38:59.705 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.705 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:38:59.705 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:38:59.707 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:38:59.708 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:59.708 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.708 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:59.708 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:38:59.710 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:59.710 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:59.710 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.710 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:59.710 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:38:59.712 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:00.777 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:39:00.777 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:00.777 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:39:00.778 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-30 17:39:00.780 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:39:00.780 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:39:00.780 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:00.780 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:39:00.780 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:39:00.781 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:39:00.782 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:39:00.782 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:00.782 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:39:00.782 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-30 17:39:00.784 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-30 17:39:00.784 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:39:00.785 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:00.786 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:39:00.786 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:39:00.788 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:39:00.788 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 17:39:00.789 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:00.789 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:39:00.789 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-30 17:39:00.790 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:39:00.790 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:00.791 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:00.791 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:00.791 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:39:00.791 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:00.794 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:00.794 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:00.794 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:00.794 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:39:00.796 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:00.797 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:00.797 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:00.797 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:00.797 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:39:00.798 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:01.426 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:39:01.427 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:01.427 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:39:01.427 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:39:01.429 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:39:01.429 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:39:01.429 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:01.429 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:39:01.429 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:39:01.431 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:39:01.432 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:39:01.432 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:01.432 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:39:01.432 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:39:01.435 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:39:01.436 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:39:01.436 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:01.436 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:39:01.436 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:39:01.437 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:39:01.438 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:39:01.438 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:01.438 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:39:01.439 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:39:01.440 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:39:01.440 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:01.440 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:01.440 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:01.440 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:39:01.441 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:01.442 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:01.442 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:01.442 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:01.442 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:39:01.442 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:02.009 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:39:02.010 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.010 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:39:02.010 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-30 17:39:02.011 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:39:02.011 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:39:02.011 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.011 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:39:02.011 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:39:02.012 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:39:02.012 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:39:02.012 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.012 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:39:02.012 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-30 17:39:02.013 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-30 17:39:02.013 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:39:02.014 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.014 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:39:02.014 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:39:02.015 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:39:02.016 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 17:39:02.016 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.016 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:39:02.016 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-30 17:39:02.017 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:39:02.018 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:02.018 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.018 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:02.018 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:39:02.018 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:02.019 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:02.019 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.019 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:02.019 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:39:02.019 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:02.020 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:02.020 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.020 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:02.020 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:39:02.020 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:02.486 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:39:02.487 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.487 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:39:02.487 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:39:02.489 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:39:02.489 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:39:02.489 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.489 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:39:02.489 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:39:02.490 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:39:02.491 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:39:02.491 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.491 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:39:02.491 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:39:02.493 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:39:02.493 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:39:02.494 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.494 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:39:02.494 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:39:02.495 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:39:02.496 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:39:02.496 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.496 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:39:02.496 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:39:02.497 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:39:02.497 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:02.497 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.497 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:02.497 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:39:02.498 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:02.498 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:02.498 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.498 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:02.498 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:39:02.499 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:03.481 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:03.481 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.481 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:03.482 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:03.482 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:39:03.482 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.482 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:39:03.482 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:39:03.483 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:03.483 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:03.483 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.483 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:03.483 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:03.483 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:39:03.483 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:39:03.483 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.483 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:39:03.484 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:39:03.484 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:03.484 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:03.484 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.484 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:03.484 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:03.485 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:03.485 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:03.485 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.485 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:03.485 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:39:03.486 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:39:03.486 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:39:03.486 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.486 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:39:03.486 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:39:03.488 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:03.488 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:39:03.488 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:03.488 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.488 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:03.488 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:39:03.488 [http-nio-8080-exec-7] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:39:03.488 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:39:03.488 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.488 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:39:03.488 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:39:03.488 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.488 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:03.488 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:39:03.489 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:03.489 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:03.489 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:03.489 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:39:03.489 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.490 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:03.490 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:39:03.490 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:39:03.490 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:03.490 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.490 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:03.490 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:03.491 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:03.491 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:03.491 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:03.491 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.491 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:03.491 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:39:03.492 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:39:03.492 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.492 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:39:03.492 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:39:03.492 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:03.492 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:03.492 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.492 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:03.492 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:39:03.493 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:39:03.494 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:03.494 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.494 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:03.494 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:39:03.494 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:03.495 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:39:03.495 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:03.495 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.495 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:03.495 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:39:03.496 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:03.496 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:03.496 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.496 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:03.496 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:39:03.497 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:03.497 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:03.498 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.498 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:03.498 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:39:03.498 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:08.993 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:39:08.993 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:08.993 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:39:08.994 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:39:08.998 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:39:08.998 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:08.998 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:08.998 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:08.998 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:08.999 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:08.999 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:08.999 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:08.999 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:08.999 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:39:09.000 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:09.000 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:09.000 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:09.000 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:09.000 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:39:09.001 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:09.001 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:09.001 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:09.001 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:09.001 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:39:09.002 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:09.002 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:09.002 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:09.002 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:09.003 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:39:09.003 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:09.003 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:09.003 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:09.003 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:09.003 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:39:09.004 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:11.122 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:39:11.122 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:39:11.122 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.122 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:39:11.122 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:39:11.122 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.122 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:39:11.122 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:39:11.122 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:39:11.122 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.122 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:39:11.122 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:39:11.123 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:39:11.123 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:11.124 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.124 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:11.124 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:39:11.126 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:39:11.126 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:11.126 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.126 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:11.126 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:39:11.126 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:39:11.126 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:39:11.126 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.126 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:39:11.127 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:39:11.127 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:39:11.127 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:11.127 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.127 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:11.127 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:11.127 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:39:11.127 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:11.127 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.127 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:11.127 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:39:11.128 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:11.128 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:11.128 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:11.128 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.128 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:11.128 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:39:11.129 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:11.129 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:11.129 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:11.129 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.129 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:11.129 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:39:11.130 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:11.130 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:11.130 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.130 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:11.130 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:39:11.130 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:11.130 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.130 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:11.130 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:11.130 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:11.131 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:11.131 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.131 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:11.131 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:39:11.131 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:11.131 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:11.131 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.132 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:11.132 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:11.132 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:11.133 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:11.133 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.133 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:11.133 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:39:11.133 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:11.135 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:11.135 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:11.135 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.135 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:11.135 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:39:11.136 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:11.137 [http-nio-8080-exec-7] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:39:11.137 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:39:11.137 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.137 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:39:11.137 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:39:11.137 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:39:11.141 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:39:11.141 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.141 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:11.141 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:11.142 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:39:11.142 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:11.143 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.143 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:11.143 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:11.144 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:15.394 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:39:15.394 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:15.394 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:39:15.394 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:39:15.395 [http-nio-8080-exec-4] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 17:39:15.396 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:39:15.396 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:15.396 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:15.396 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:15.396 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:39:15.396 [http-nio-8080-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 17:39:15.398 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:39:15.398 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:15.398 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:15.398 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:15.398 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:39:15.399 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:15.399 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:15.399 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:15.399 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:15.400 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:39:15.401 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:15.401 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:15.401 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:15.401 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:15.401 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:39:15.402 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:16.562 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:39:16.562 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:16.562 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:39:16.563 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:39:16.564 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:39:16.564 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:39:16.565 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:16.565 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:39:16.565 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:39:16.566 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:39:16.566 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:39:16.566 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:16.566 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:39:16.566 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:39:16.568 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:39:16.568 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:39:16.568 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:16.568 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:39:16.568 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:39:16.569 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:39:16.569 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:39:16.569 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:16.569 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:39:16.570 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:39:16.571 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:39:16.571 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:16.571 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:16.571 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:16.572 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:39:16.572 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:16.572 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:16.573 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:16.573 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:16.573 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:39:16.573 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:17.447 [http-nio-8080-exec-8] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 17:39:17.448 [http-nio-8080-exec-8] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 17:39:18.087 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:39:18.087 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.087 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:39:18.087 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:39:18.089 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:39:18.089 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:39:18.089 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.089 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:39:18.089 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:39:18.089 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:39:18.089 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.089 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:39:18.089 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:39:18.090 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:39:18.090 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:39:18.091 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:18.091 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.091 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:18.092 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:18.093 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:18.093 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:18.094 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.094 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:18.094 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:39:18.094 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:18.094 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:18.095 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.095 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:18.095 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:39:18.096 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:18.096 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:18.096 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.096 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:18.096 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:39:18.096 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:39:18.096 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.096 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:39:18.096 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:39:18.097 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:18.097 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:18.097 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.097 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:18.097 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:39:18.098 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:39:18.098 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:18.098 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.098 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:18.099 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:39:18.099 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:18.099 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.099 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:18.099 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:18.099 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:18.099 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:18.099 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.099 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:18.100 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:39:18.100 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:39:18.100 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:18.101 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.100 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:18.100 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:18.101 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:18.101 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:39:18.101 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:18.101 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.101 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:18.101 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:18.102 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:39:18.102 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.102 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:18.102 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:18.102 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:18.102 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:18.102 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.102 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:18.102 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:18.102 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:39:18.106 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:39:18.106 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:18.106 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.106 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:18.106 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:18.107 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:18.107 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:18.107 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.107 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:18.107 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:39:18.108 [http-nio-8080-exec-6] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:39:18.108 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:39:18.108 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.108 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:39:18.108 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:39:18.108 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:18.108 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:39:18.108 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:23.027 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:39:23.032 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.032 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:23.032 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:23.031 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:39:23.033 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.031 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:39:23.033 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:39:23.033 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.033 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:39:23.033 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:39:23.033 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:39:23.034 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:39:23.034 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:23.034 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.034 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:23.034 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:23.035 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:39:23.035 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:39:23.035 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:39:23.035 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.035 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:39:23.035 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:39:23.035 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:23.037 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:23.038 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.038 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:23.038 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:23.038 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:39:23.039 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:23.039 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:23.039 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.039 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:23.039 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:39:23.040 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:23.041 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:23.041 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.041 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:23.041 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:39:23.043 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:23.043 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:23.043 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.043 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:23.043 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:39:23.044 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:39:23.044 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.044 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:39:23.044 [http-nio-8080-exec-3] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:39:23.044 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:39:23.044 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:39:23.044 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.044 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:39:23.044 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:39:23.044 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:23.044 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:39:23.045 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:23.045 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.045 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:23.045 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:39:23.046 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:23.046 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.046 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:23.046 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:23.046 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:39:23.049 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:39:23.051 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:23.051 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.051 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:23.051 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:39:23.054 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:23.055 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.055 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:23.055 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:39:23.058 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:23.063 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:23.063 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.063 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:23.064 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:39:23.067 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:23.068 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:23.045 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:23.068 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:23.073 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.076 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.076 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:23.073 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:39:23.076 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:23.076 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:39:23.076 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:23.077 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:23.077 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:23.078 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:23.078 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.078 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:23.078 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:23.088 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:53.419 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:39:53.419 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:53.419 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:39:53.419 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:39:53.421 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:39:53.421 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:53.421 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:53.421 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:53.421 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:53.422 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:53.423 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:53.423 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:53.423 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:53.423 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:39:53.424 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:53.424 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:53.424 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:53.424 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:53.424 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:39:53.425 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:53.426 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:53.426 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:53.426 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:53.426 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:39:53.427 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:53.427 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:53.427 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:53.427 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:53.427 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:39:53.427 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:53.428 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:53.428 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:53.428 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:53.428 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:39:53.428 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:40:06.817 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:40:06.817 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:06.817 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:40:06.817 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:40:06.819 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:40:06.820 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:06.820 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:06.820 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:06.821 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:40:06.822 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:40:06.822 [http-nio-8080-exec-6] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 17:40:06.823 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:06.823 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:06.823 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:06.823 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:40:06.824 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:40:06.825 [http-nio-8080-exec-6] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 17:40:06.825 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:06.825 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:06.825 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:06.825 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:40:06.828 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:40:06.828 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:06.828 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:06.828 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:06.828 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:40:06.831 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:40:08.026 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:40:08.026 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:08.026 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:40:08.026 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:40:08.027 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:40:08.028 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:40:08.028 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:08.028 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:40:08.028 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:40:08.029 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:40:08.030 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:40:08.030 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:08.030 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:40:08.030 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:40:08.032 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:40:08.033 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:40:08.033 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:08.033 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:40:08.033 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:40:08.033 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:40:08.034 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:40:08.034 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:08.034 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:40:08.034 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:40:08.034 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:40:08.035 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:40:08.035 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:08.035 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:40:08.035 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:40:08.036 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:40:08.036 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:40:08.036 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:08.036 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:40:08.037 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:40:08.037 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:40:12.836 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:40:12.837 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.837 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:40:12.837 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:40:12.838 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:40:12.838 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.838 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:40:12.838 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:40:12.838 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:40:12.838 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:40:12.838 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.838 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:40:12.838 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:40:12.838 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:40:12.838 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.838 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:40:12.838 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:40:12.838 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:40:12.838 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:40:12.839 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:40:12.839 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.839 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:40:12.839 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:40:12.839 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:40:12.839 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:40:12.839 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.839 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:40:12.839 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:40:12.839 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:40:12.840 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:40:12.843 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:40:12.843 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:40:12.843 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.843 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:40:12.843 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:40:12.844 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:40:12.844 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.844 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:40:12.844 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:40:12.844 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:40:12.844 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.844 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:40:12.844 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:40:12.844 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:40:12.844 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:40:12.844 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:12.844 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.844 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:12.844 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:40:12.845 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:40:12.845 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:40:12.845 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.845 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:40:12.845 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:40:12.846 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:40:12.846 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:12.846 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.846 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:12.847 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:40:12.848 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:40:12.849 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:40:12.849 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.849 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:40:12.849 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:40:12.849 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:40:12.849 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:12.849 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.849 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:12.849 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:40:12.850 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:40:12.850 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:40:12.850 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:40:12.850 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.850 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:40:12.850 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:12.851 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.851 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:12.850 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:40:12.851 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:40:12.852 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:40:12.852 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:40:12.852 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:40:12.852 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.852 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:40:12.852 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:40:12.852 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:40:12.852 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:40:12.852 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.852 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:40:12.853 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:40:12.853 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:40:12.854 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:40:12.854 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.854 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:40:12.855 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:40:12.856 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:40:25.412 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:40:25.412 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:25.412 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:40:25.412 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:40:25.412 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:40:25.412 [http-nio-8080-exec-10] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 17:40:25.412 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:25.412 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:25.412 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:25.412 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:40:25.413 [http-nio-8080-exec-10] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 17:40:25.413 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:40:25.413 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:25.413 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:25.413 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:25.414 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:40:25.414 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:40:25.415 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:25.415 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:25.415 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:25.415 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:40:25.415 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:40:25.415 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:25.415 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:25.415 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:25.415 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:40:25.416 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:40:26.491 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:40:26.491 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:26.491 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:40:26.491 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:40:26.492 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:40:26.492 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:40:26.492 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:26.493 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:40:26.493 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:40:26.494 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:40:26.495 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:40:26.495 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:26.495 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:40:26.496 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:40:26.501 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:40:26.501 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:40:26.501 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:26.501 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:40:26.501 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:40:26.503 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:40:26.504 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:40:26.504 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:26.504 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:40:26.505 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:40:26.506 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:40:26.506 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:40:26.506 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:26.506 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:40:26.506 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:40:26.507 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:40:26.507 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:40:26.507 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:26.507 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:40:26.508 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:40:26.509 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:41:10.329 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:41:10.329 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.330 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:41:10.330 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:41:10.330 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:41:10.330 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.330 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:41:10.330 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:41:10.331 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:41:10.331 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:41:10.331 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:41:10.331 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:41:10.331 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.331 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.331 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:41:10.331 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:41:10.332 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:41:10.332 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:41:10.333 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:41:10.333 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:41:10.333 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:41:10.333 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.333 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:41:10.333 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:41:10.333 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:41:10.333 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.333 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:41:10.333 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:41:10.334 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:41:10.335 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:41:10.335 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.335 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:41:10.335 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:41:10.336 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:41:10.336 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:41:10.336 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:41:10.336 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.336 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:41:10.336 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:41:10.336 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:41:10.336 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.336 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:41:10.336 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:41:10.336 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:41:10.337 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:41:10.337 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:41:10.337 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.337 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:41:10.337 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:41:10.338 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:41:10.338 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:41:10.338 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.338 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:41:10.339 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:41:10.340 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:41:10.340 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:41:10.340 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.340 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:41:10.340 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:41:10.341 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:42:04.591 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:42:04.591 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.591 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:42:04.591 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:42:04.592 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:42:04.592 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.592 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:42:04.592 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:42:04.593 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:42:04.593 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:42:04.593 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:42:04.593 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.593 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:42:04.593 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:42:04.593 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.593 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:42:04.593 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:42:04.593 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:42:04.594 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:42:04.594 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:42:04.594 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:42:04.594 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.594 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:42:04.594 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:42:04.594 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:42:04.594 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.594 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:42:04.595 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:42:04.595 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:42:04.595 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:42:04.595 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.595 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:42:04.595 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:42:04.596 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:42:04.596 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:42:04.596 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.596 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:42:04.596 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:42:04.596 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:42:04.596 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:42:04.596 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.596 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:42:04.596 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:42:04.597 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:42:04.597 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:42:04.597 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:42:04.597 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.597 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:42:04.597 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:42:04.599 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:42:04.599 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:42:04.599 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.599 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:42:04.599 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:42:04.601 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:42:04.601 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:42:04.601 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.601 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:42:04.601 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:42:04.602 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:44:14.098 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:44:14.098 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.098 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:44:14.100 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:44:14.100 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.100 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:44:14.101 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:44:14.101 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:44:14.102 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:44:14.102 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.102 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:44:14.102 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:44:14.102 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:44:14.102 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.102 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:44:14.102 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:44:14.103 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:44:14.105 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:44:14.105 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:44:14.105 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.105 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:44:14.107 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:44:14.108 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:44:14.108 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:44:14.108 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.108 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:44:14.108 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:44:14.108 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:44:14.108 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:44:14.108 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.108 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:44:14.108 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:44:14.108 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:44:14.109 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:44:14.109 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:44:14.109 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.109 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:44:14.109 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:44:14.113 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:44:14.113 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.113 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:44:14.113 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:44:14.113 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:44:14.114 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:44:14.114 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.114 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:44:14.114 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:44:14.114 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:44:14.114 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:44:14.114 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:44:14.114 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.114 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:44:14.114 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:44:14.114 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:44:14.115 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.115 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:44:14.116 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:44:14.116 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:44:14.116 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:44:14.116 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.116 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:44:14.116 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:44:14.116 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:44:14.116 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:44:14.118 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:44:14.118 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.119 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:44:14.119 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:44:14.119 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:44:14.119 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.119 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:44:14.119 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.119 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:44:14.119 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:44:14.119 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:44:14.120 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:44:14.120 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:44:14.120 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:44:14.120 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:44:14.120 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:44:14.120 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.120 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:44:14.120 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:44:14.121 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:44:14.121 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:44:14.121 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:44:14.121 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.121 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:44:14.121 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:44:14.122 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:44:14.122 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:44:14.122 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:44:14.122 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.122 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:44:14.122 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:44:14.124 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:44:49.412 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:44:49.412 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:49.412 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:44:49.412 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:44:49.414 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:44:49.414 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:44:49.414 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:49.414 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:44:49.414 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:44:49.414 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:49.414 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:44:49.414 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:44:49.414 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:44:49.416 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:44:49.416 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:44:49.416 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:44:49.416 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:49.416 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:44:49.416 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:44:49.417 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:44:49.417 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:49.417 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:44:49.417 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:44:49.418 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:44:49.418 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:44:49.418 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:44:49.418 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:49.418 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:44:49.418 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:44:49.418 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:49.418 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:44:49.418 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:44:49.419 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:44:49.419 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:44:49.419 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:44:49.419 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:49.419 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:44:49.419 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:44:49.420 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:44:49.420 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:44:49.420 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:44:49.420 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:49.420 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:44:49.420 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:44:49.421 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:44:50.328 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 17:44:50.328 [Thread-7] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 17:44:50.329 [Thread-7] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-06-30 17:44:50.338 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1482513760] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 17:44:50.338 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1482513760] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 17:44:50.339 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1124765806] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 17:44:50.339 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1124765806] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 17:44:50.339 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-nioEventLoop-4-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/sun.nio.ch.WEPoll.wait(Native Method)
 java.base@17.0.8/sun.nio.ch.WEPollSelectorImpl.doSelect(WEPollSelectorImpl.java:111)
 java.base@17.0.8/sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:129)
 java.base@17.0.8/sun.nio.ch.SelectorImpl.select(SelectorImpl.java:146)
 app//io.netty.channel.nio.SelectedSelectionKeySetSelector.select(SelectedSelectionKeySetSelector.java:68)
 app//io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:879)
 app//io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:526)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.340 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.340 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-2] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.340 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-3] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.340 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-4] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.341 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-5] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.341 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-6] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.341 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-7] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.341 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-8] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.341 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-9] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.342 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-10] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.342 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-11] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.342 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-12] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.342 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 17:44:50.344 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 17:44:50.459 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-06-30 17:44:50.460 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-06-30 17:44:50.543 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 3932 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 17:44:50.543 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 17:44:50.543 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 17:44:50.773 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 17:44:50.773 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 17:44:50.781 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-06-30 17:44:50.824 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$278026a1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:44:50.830 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:44:50.896 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 17:44:50.896 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 17:44:50.896 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 17:44:50.896 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 17:44:50.897 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 17:44:50.897 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 17:44:50.897 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 17:44:50.897 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 17:44:50.912 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 17:44:50.912 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 363 ms
2025-06-30 17:44:50.913 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 17:44:50.987 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} inited
2025-06-30 17:44:51.000 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} inited
2025-06-30 17:44:51.089 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 17:44:51.089 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 17:44:51.184 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 17:44:51.240 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@cad3db, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@43fb9dc7, org.springframework.security.web.context.SecurityContextPersistenceFilter@6a5a4738, org.springframework.security.web.header.HeaderWriterFilter@406a3d09, org.springframework.web.filter.CorsFilter@69b31937, org.springframework.security.web.authentication.logout.LogoutFilter@7418553d, com.huang.store.security.JwtAuthenticationTokenFilter@63398891, com.huang.store.security.CustomAuthenticationFilter@57aa0ddd, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@3adbd40e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7e86e7de, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6f151f72, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@a92629, org.springframework.security.web.session.SessionManagementFilter@7ccbe7d5, org.springframework.security.web.access.ExceptionTranslationFilter@5e23558, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5852874f]
2025-06-30 17:44:51.352 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 17:44:51.359 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 17:44:51.361 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 17:44:51.364 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.862 seconds (JVM running for 1637.664)
2025-06-30 17:44:51.691 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 17:44:51.691 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 17:44:51.691 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-06-30 17:59:39.168 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 17:59:39.173 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 17:59:39.173 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:39.173 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 17:59:39.178 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 17:59:39.180 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 17:59:42.122 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 17:59:42.122 [http-nio-8080-exec-7] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-06-30 17:59:42.123 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false 
2025-06-30 17:59:42.123 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:42.123 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-06-30 17:59:42.124 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-06-30 17:59:42.138 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 0
2025-06-30 17:59:42.138 [http-nio-8080-exec-7] DEBUG com.huang.store.controller.UserController - 找到0个地址
2025-06-30 17:59:43.676 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 17:59:43.695 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 17:59:43.695 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:43.695 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 17:59:43.699 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 17:59:43.704 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 17:59:43.704 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 17:59:43.704 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:43.704 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 17:59:43.705 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 17:59:43.707 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 17:59:45.353 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 17:59:45.355 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 17:59:45.355 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:45.355 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 17:59:45.356 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 17:59:45.357 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 17:59:45.358 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 17:59:45.358 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:45.358 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 17:59:45.358 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 17:59:45.358 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 17:59:46.144 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 17:59:46.146 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 17:59:46.146 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:46.146 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 17:59:46.149 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 17:59:46.151 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 17:59:46.151 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ? 
2025-06-30 17:59:46.152 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:46.152 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 17:59:46.153 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-06-30 17:59:46.154 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 17:59:46.573 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 17:59:46.575 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 17:59:46.575 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:46.575 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 17:59:46.576 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), true(Boolean), 0(Integer), 5(Integer)
2025-06-30 17:59:46.577 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 17:59:46.577 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 17:59:46.577 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:46.577 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 17:59:46.578 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), true(Boolean)
2025-06-30 17:59:46.578 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 17:59:47.443 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 17:59:47.444 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 17:59:47.444 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:47.444 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 17:59:47.445 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 17:59:47.446 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 17:59:47.446 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 17:59:47.446 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:47.446 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 17:59:47.446 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 17:59:47.447 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 17:59:49.052 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 17:59:49.053 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 17:59:49.053 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:49.053 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 17:59:49.053 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 133@qq.com(String), 已收货(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 17:59:49.054 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 17:59:49.054 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ? 
2025-06-30 17:59:49.054 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:49.054 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 17:59:49.054 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 133@qq.com(String), 已收货(String), false(Boolean)
2025-06-30 17:59:49.056 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:00:06.548 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:00:06.549 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:00:06.550 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:00:06.550 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:00:06.550 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:00:06.551 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:00:08.079 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:00:08.080 [http-nio-8080-exec-2] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-06-30 18:00:08.080 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false 
2025-06-30 18:00:08.080 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:00:08.080 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-06-30 18:00:08.080 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:00:08.081 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 0
2025-06-30 18:00:08.081 [http-nio-8080-exec-2] DEBUG com.huang.store.controller.UserController - 找到0个地址
2025-06-30 18:00:14.023 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:00:14.024 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:00:14.025 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:00:14.025 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:00:14.025 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:00:14.025 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:00:28.025 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:00:28.026 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:00:28.026 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:00:28.027 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:00:28.027 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:00:28.028 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:10:48.453 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:48.454 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:48.455 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:10:48.455 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:48.455 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:10:48.458 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:10:48.459 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:10:48.460 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:10:48.460 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:48.460 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:10:48.460 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:10:48.462 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:10:48.463 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:48.469 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:48.471 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:48.475 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:48.476 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:10:48.476 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:48.476 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:10:48.478 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:10:48.481 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:10:48.482 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:10:48.482 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:48.482 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:10:48.482 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:10:48.483 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:10:48.484 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:10:48.484 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:48.484 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:10:48.484 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:10:48.484 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:10:48.485 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:10:48.485 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:48.485 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:10:48.485 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:10:48.486 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:10:48.486 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:10:48.486 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:48.486 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:10:48.486 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:10:48.487 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:10:55.069 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:55.069 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:55.069 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:55.071 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:10:55.071 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:55.071 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:10:55.071 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:10:55.072 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:10:55.072 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:10:55.072 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:55.072 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:10:55.072 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:10:55.073 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:10:55.076 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:55.076 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:55.077 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:10:55.078 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:55.078 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:10:55.077 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:55.078 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:10:55.082 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:10:55.082 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:10:55.082 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:55.082 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:10:55.082 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:10:55.083 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:10:55.084 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:10:55.084 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:55.084 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:10:55.084 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:10:55.085 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:10:55.086 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:10:55.086 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:55.086 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:10:55.086 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:10:55.087 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:10:55.087 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:10:55.087 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:55.087 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:10:55.087 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:10:55.088 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:22.849 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:22.850 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:11:22.850 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:22.850 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:11:22.850 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:11:22.851 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:11:22.851 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:11:22.851 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:22.851 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:11:22.851 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:11:22.851 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:11:22.852 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:22.852 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:22.854 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:22.855 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:22.855 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:22.855 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:11:22.855 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:22.855 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:11:22.855 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:11:22.856 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:11:22.857 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:22.857 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:22.857 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:22.857 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:11:22.858 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:11:22.858 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:22.858 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:22.858 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:22.858 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:11:22.859 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:22.859 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:22.859 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:22.859 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:22.859 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:11:22.860 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:22.860 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:22.860 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:22.860 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:22.860 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:11:22.861 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:23.781 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:23.781 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:23.782 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:11:23.782 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:23.782 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:11:23.782 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:11:23.783 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:11:23.783 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:11:23.783 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:23.783 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:11:23.783 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:11:23.784 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:11:23.786 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:23.786 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:23.787 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:23.789 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:23.790 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:11:23.790 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:23.790 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:11:23.790 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:11:23.791 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:11:23.791 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:23.791 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:23.791 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:23.791 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:11:23.792 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:11:23.792 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:23.792 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:23.792 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:23.792 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:11:23.794 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:23.794 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:23.794 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:23.794 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:23.794 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:11:23.795 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:23.796 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:23.796 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:23.796 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:23.796 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:11:23.796 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:24.518 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:24.519 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:11:24.519 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:24.519 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:11:24.519 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:11:24.520 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:11:24.520 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:24.520 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:24.520 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:11:24.520 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:24.520 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:11:24.520 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:11:24.521 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:11:24.524 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:24.525 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:24.525 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:11:24.525 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:24.525 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:11:24.525 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:11:24.526 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:11:24.526 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:24.526 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:24.526 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:24.526 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:11:24.524 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:24.527 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:11:24.527 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:24.527 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:24.527 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:24.527 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:11:24.528 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:24.528 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:24.529 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:24.529 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:24.529 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:11:24.530 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:24.530 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:24.530 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:24.530 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:24.530 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:11:24.531 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:36.110 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:36.113 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:36.113 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:36.115 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:36.117 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:36.117 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:11:36.117 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:36.117 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:11:36.117 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:11:36.118 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:36.118 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:11:36.118 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:11:36.118 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:36.118 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:11:36.118 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:11:36.118 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:36.118 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:11:36.119 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:11:36.120 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:11:36.121 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:11:36.121 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:36.121 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:36.121 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:36.121 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:11:36.122 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:11:36.123 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:11:36.123 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:36.123 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:36.123 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:36.123 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:11:36.124 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:36.124 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:36.124 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:36.124 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:36.124 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:11:36.125 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:36.125 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:36.125 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:36.125 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:36.125 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:11:36.126 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:12:35.411 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:12:35.411 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:12:35.411 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:12:35.411 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:12:35.411 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:12:35.411 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:12:35.411 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:12:35.411 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:12:35.411 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:12:35.411 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:12:35.411 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:12:35.411 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:12:35.412 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:12:35.412 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:12:35.412 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:12:35.413 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:12:35.413 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:12:35.413 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:12:35.413 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:12:35.413 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:12:35.414 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:12:35.414 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:12:35.414 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:12:35.414 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:12:35.415 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:12:35.415 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:12:35.415 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:12:35.415 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:12:35.415 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:12:35.415 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:12:35.416 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:12:35.416 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:12:35.416 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:12:35.416 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:12:35.416 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:12:35.416 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:12:35.417 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:12:35.417 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:12:35.417 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:12:35.417 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:12:35.417 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:13:29.940 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:13:30.010 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:13:30.010 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:30.010 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:13:30.011 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:13:30.013 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:13:30.019 [http-nio-8080-exec-6] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 18:13:30.089 [http-nio-8080-exec-6] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=56464ff@456.com, password=$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy, enabled=true, roles=[ROLE_USER]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=A67F80F7B1F0AC22176DBA6D6314DBAE], Granted Authorities=[ROLE_USER]]
2025-06-30 18:13:30.090 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:13:30.090 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:30.090 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:13:30.090 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:13:30.091 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:13:31.141 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:13:31.141 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:31.141 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:13:31.141 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:13:31.141 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:13:31.141 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:31.141 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:13:31.141 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:13:31.142 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:13:31.142 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:13:31.142 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:31.142 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:13:31.142 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:13:31.143 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:13:31.143 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:13:31.143 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:31.143 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:13:31.143 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:13:31.144 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:13:31.144 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:13:31.144 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:31.144 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:13:31.144 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:13:31.144 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:13:31.144 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:13:31.144 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:31.144 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:13:31.145 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:13:31.145 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:13:31.145 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:13:31.145 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:13:31.145 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:31.145 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:13:31.145 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:13:31.146 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:13:56.178 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:13:56.178 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:56.178 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:13:56.178 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:13:56.180 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:13:56.180 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:13:56.180 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:56.180 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:13:56.180 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:13:56.180 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:13:56.180 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:56.180 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:13:56.180 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:13:56.181 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:13:56.181 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:13:56.181 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:13:56.181 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:13:56.181 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:56.181 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:13:56.181 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:56.181 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:13:56.181 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:13:56.181 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:13:56.181 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:13:56.181 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:13:56.181 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:13:56.181 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:56.181 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:13:56.182 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:13:56.182 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:13:56.182 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:13:56.182 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:56.182 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:13:56.183 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:13:56.183 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:14:16.526 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:14:16.526 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:14:16.526 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:14:16.526 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:14:16.527 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:14:20.552 [http-nio-8080-exec-5] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-06-30 18:14:20.552 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false 
2025-06-30 18:14:20.552 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:14:20.552 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-06-30 18:14:20.553 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:14:20.554 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 0
2025-06-30 18:14:20.554 [http-nio-8080-exec-5] DEBUG com.huang.store.controller.UserController - 找到0个地址
2025-06-30 18:14:21.207 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:14:21.207 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:14:21.207 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:14:21.208 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:14:21.211 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 18:14:21.211 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 18:14:21.211 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:14:21.211 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:14:21.212 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 18:14:21.212 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:14:50.791 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:14:50.791 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:14:50.791 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:14:50.791 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:14:50.793 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:14:50.793 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:14:50.793 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:14:50.793 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:14:50.793 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:14:50.794 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:14:50.795 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:14:50.795 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:14:50.795 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:14:50.795 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:14:50.795 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:14:50.795 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:14:50.795 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:14:50.795 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:14:50.796 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:14:50.796 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:14:50.796 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:14:50.796 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:14:50.796 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:14:50.796 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:14:50.796 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:14:50.796 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:14:50.796 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:14:50.796 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:14:50.797 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:14:50.797 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:14:50.797 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:14:50.797 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:14:50.797 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:14:50.797 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:14:50.798 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:15:21.455 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:15:21.455 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:21.455 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:15:21.455 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:15:21.456 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:15:21.456 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:15:21.456 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:21.456 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:15:21.456 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:15:21.456 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:15:21.456 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:21.456 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:15:21.457 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:15:21.457 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:15:21.457 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:15:21.457 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:21.457 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:15:21.457 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:15:21.458 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:15:21.458 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:15:21.458 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:21.458 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:15:21.458 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:15:21.459 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:15:21.459 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:15:21.459 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:21.459 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:15:21.459 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:15:21.459 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:15:21.459 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:21.459 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:15:21.459 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:15:21.459 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:15:21.460 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:15:21.461 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:15:52.004 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:15:52.006 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:52.006 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:15:52.006 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:15:52.007 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:15:52.007 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:15:52.007 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:52.007 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:15:52.007 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:15:52.007 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:15:52.007 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:15:52.008 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:52.008 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:15:52.008 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:15:52.008 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:15:52.009 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:15:52.009 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:52.009 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:15:52.009 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:15:52.009 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:15:52.009 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:52.009 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:15:52.009 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:15:52.009 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:15:52.009 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:15:52.009 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:52.009 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:15:52.010 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:15:52.010 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:15:52.010 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:15:52.010 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:15:52.010 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:52.010 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:15:52.010 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:15:52.012 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:17:34.260 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 18:17:34.260 [Thread-9] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 18:17:34.260 [Thread-9] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-06-30 18:17:34.264 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1872175085] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 18:17:34.264 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1872175085] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 18:17:34.265 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-2017692725] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 18:17:34.265 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-2017692725] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 18:17:34.265 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 18:17:34.266 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 18:17:34.270 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closed
2025-06-30 18:17:34.271 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closed
2025-06-30 18:17:34.350 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 3932 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 18:17:34.350 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 18:17:34.350 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 18:17:34.473 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 18:17:34.473 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 18:17:34.475 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 1 ms. Found 0 Redis repository interfaces.
2025-06-30 18:17:34.515 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.huang.store.mapper]' package. Please check your configuration.
2025-06-30 18:17:34.568 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 18:17:34.569 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 18:17:34.569 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 18:17:34.569 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 18:17:34.569 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 18:17:34.569 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 18:17:34.569 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 18:17:34.569 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 18:17:34.582 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 18:17:34.582 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 227 ms
2025-06-30 18:17:34.588 [restartedMain] ERROR org.apache.catalina.session.StandardManager - Exception loading sessions from persistent storage
java.lang.ClassNotFoundException: com.huang.store.entity.user.SecurityUser
	at org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader.loadClass(TomcatEmbeddedWebappClassLoader.java:72)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1141)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:467)
	at org.apache.catalina.util.CustomObjectInputStream.resolveClass(CustomObjectInputStream.java:158)
	at java.base/java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:2045)
	at java.base/java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1909)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2235)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:514)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:472)
	at org.apache.catalina.session.StandardSession.doReadObject(StandardSession.java:1530)
	at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:1000)
	at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:210)
	at org.apache.catalina.session.StandardManager.load(StandardManager.java:156)
	at org.apache.catalina.session.StandardManager.startInternal(StandardManager.java:346)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4931)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:794)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:248)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:489)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:481)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:211)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:184)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:585)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2025-06-30 18:17:34.626 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 18:17:34.669 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} inited
2025-06-30 18:17:34.683 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} inited
2025-06-30 18:17:34.705 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
2025-06-30 18:17:34.706 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closed
2025-06-30 18:17:34.707 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closed
2025-06-30 18:17:34.707 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 18:17:34.714 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-30 18:17:34.741 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 24 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:595)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:475)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:615)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:180)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$21d53500.CGLIB$sqlSessionFactory$2(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$21d53500$$FastClassBySpringCGLIB$$e69ec8e0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$21d53500.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:122)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:593)
	... 38 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:76)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:137)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:130)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:120)
	... 40 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:120)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 44 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:200)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	... 46 common frames omitted
2025-06-30 18:19:30.949 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 18:19:30.960 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 18208 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 18:19:30.961 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 18:19:30.961 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 18:19:31.084 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 18:19:31.084 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 18:19:31.518 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 18:19:31.519 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 18:19:31.540 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-30 18:19:31.744 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$e71df6c3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 18:19:31.766 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 18:19:32.182 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 18:19:32.183 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 18:19:32.183 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 18:19:32.183 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 18:19:32.188 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 18:19:32.195 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 18:19:32.196 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 18:19:32.196 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 18:19:32.255 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 18:19:32.256 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1172 ms
2025-06-30 18:19:32.261 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 18:19:32.891 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 18:19:32.920 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 18:19:33.237 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 18:19:33.237 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 18:19:33.637 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 18:19:33.758 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@54bd5a3b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7174e20e, org.springframework.security.web.context.SecurityContextPersistenceFilter@393798d8, org.springframework.security.web.header.HeaderWriterFilter@25bb537b, org.springframework.web.filter.CorsFilter@19596634, org.springframework.security.web.authentication.logout.LogoutFilter@3a766d46, com.huang.store.security.JwtAuthenticationTokenFilter@eb81e89, com.huang.store.security.CustomAuthenticationFilter@463025cd, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@574fc98a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@55455450, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@63c63d73, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@cc8898e, org.springframework.security.web.session.SessionManagementFilter@6e91f081, org.springframework.security.web.access.ExceptionTranslationFilter@13f0d3d7, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@27db2288]
2025-06-30 18:19:34.013 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 18:19:34.029 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 18:19:34.042 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 18:19:34.051 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.407 seconds (JVM running for 3.892)
2025-06-30 18:19:47.384 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 18:19:47.384 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 18:19:47.385 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-30 18:19:47.472 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:19:47.472 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:19:47.472 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:19:47.472 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:19:47.472 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:19:47.472 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:19:47.483 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.483 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.483 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.483 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.483 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.484 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:19:47.484 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:19:47.484 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:19:47.484 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:19:47.483 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.484 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:19:47.484 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:19:47.578 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:19:47.578 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:19:47.578 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:19:47.578 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:19:47.578 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:19:47.578 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:19:47.596 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:19:47.596 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:19:47.596 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:19:47.597 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:19:47.596 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:19:47.597 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:19:47.614 [http-nio-8080-exec-7] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 18:19:47.614 [http-nio-8080-exec-1] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 18:19:47.614 [http-nio-8080-exec-10] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 18:19:47.614 [http-nio-8080-exec-6] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 18:19:47.614 [http-nio-8080-exec-5] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 18:19:47.615 [http-nio-8080-exec-2] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 18:19:47.691 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:19:47.691 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.691 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:19:47.693 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:19:47.695 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:19:47.695 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 18:19:47.695 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:19:47.695 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:19:47.695 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.695 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.696 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:19:47.696 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:19:47.696 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:19:47.696 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.696 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:19:47.696 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:19:47.697 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 18:19:47.698 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:19:47.698 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:19:47.698 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 18:19:47.699 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:19:47.699 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:19:47.699 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.699 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:19:47.699 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:19:47.699 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 18:19:47.699 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:19:47.699 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 18:19:47.699 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.699 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:19:47.699 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.699 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:19:47.699 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.699 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:19:47.699 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.699 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:19:47.699 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 18:19:47.700 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:19:47.701 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:19:47.701 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:19:47.701 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.701 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:19:47.701 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:19:47.702 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:19:47.702 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:19:47.702 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 18:19:47.703 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:19:47.703 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.703 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:19:47.704 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:19:47.704 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:19:47.704 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:19:47.705 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:19:47.706 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 18:19:47.706 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:19:47.706 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.706 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:19:47.706 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 18:19:47.706 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:19:47.707 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:19:47.707 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:19:47.707 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.707 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:19:47.707 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:19:47.707 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.707 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:19:47.707 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:19:47.708 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:19:47.708 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:19:47.708 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:19:47.709 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:19:47.709 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.709 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:19:47.710 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:19:47.710 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:19:47.712 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:19:47.712 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:19:47.712 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.712 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:19:47.712 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:19:47.712 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:19:47.713 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:19:47.713 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.713 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:19:47.713 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:19:47.714 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:19:47.714 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:19:47.714 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.715 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:19:47.715 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:19:47.716 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:19:47.716 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:19:47.716 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.716 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:19:47.716 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:19:47.717 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:33.674 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:21:33.675 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.675 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:21:33.676 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:33.676 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.676 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:33.679 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:21:33.680 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-30 18:21:33.683 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:21:33.684 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:21:33.684 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:33.684 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.684 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:33.685 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:33.685 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.685 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:33.685 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:21:33.686 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 18:21:33.687 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:33.687 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:21:33.687 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:33.688 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.688 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:33.688 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:21:33.689 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:33.690 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:33.690 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.690 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:33.690 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:21:33.692 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:33.693 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:33.693 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.693 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:33.693 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:21:33.694 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:33.703 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:21:33.703 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.703 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:21:33.704 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-30 18:21:33.707 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-30 18:21:33.708 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:33.708 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.708 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:33.708 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 18:21:33.709 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:33.710 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 18:21:33.710 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.710 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:21:33.711 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-30 18:21:33.713 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:21:33.713 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:33.713 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.713 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:33.713 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:21:33.714 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:33.714 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:33.714 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.714 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:33.714 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:21:33.715 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:33.716 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:33.716 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.716 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:33.716 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:21:33.717 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:35.886 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:21:35.886 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.886 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:21:35.886 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:21:35.886 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:21:35.886 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.887 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:21:35.887 [http-nio-8080-exec-9] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 18:21:35.887 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:35.887 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.887 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:35.887 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 18:21:35.887 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.887 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:21:35.887 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 18:21:35.887 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.887 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:21:35.887 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:21:35.888 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:21:35.889 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 18:21:35.890 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:21:35.891 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:21:35.891 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.891 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:21:35.894 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:21:35.894 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.894 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:21:35.895 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 18:21:35.895 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.895 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:21:35.896 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 18:21:35.896 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:21:35.897 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 18:21:35.898 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:21:35.898 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:21:35.898 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.898 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:21:35.898 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:21:35.898 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 18:21:35.899 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:21:35.899 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:35.899 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.899 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:35.899 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:21:35.899 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:21:35.899 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:21:35.902 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:21:35.903 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:21:35.903 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 18:21:35.903 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:35.903 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.903 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:35.904 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:21:35.904 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.904 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:21:35.904 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:21:35.904 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:21:35.905 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:21:35.905 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:21:35.905 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:35.905 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.905 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:35.905 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:21:35.905 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:35.906 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:35.906 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.906 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:35.906 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:21:35.906 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:21:35.906 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:35.906 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:35.906 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.906 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:35.907 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:21:35.907 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:35.907 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:35.907 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.907 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:35.908 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:21:35.908 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:35.908 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:35.908 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.908 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:35.908 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:21:35.909 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:35.909 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:35.909 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:35.909 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.909 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:35.909 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:21:35.911 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:35.911 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:35.911 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.911 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:35.911 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:21:35.912 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:37.376 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:21:37.376 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:37.376 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:37.376 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:21:37.376 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:37.376 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:37.377 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 4(Integer)
2025-06-30 18:21:37.377 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:21:37.378 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:21:37.379 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:21:37.379 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:37.379 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:37.379 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:37.379 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:37.379 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:37.379 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:37.380 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:21:37.380 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-30 18:21:37.382 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:21:37.382 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:37.382 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:37.382 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:37.382 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:37.383 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:21:37.383 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:21:37.384 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:37.384 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:21:37.384 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:37.385 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 4(Integer), 12(Integer), 13(Integer), 0(Integer), 10(Integer)
2025-06-30 18:21:37.385 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:37.385 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:37.385 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:37.385 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:21:37.386 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-30 18:21:37.387 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:37.387 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:37.387 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:37.387 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:37.388 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-30 18:21:37.388 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:37.388 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:37.388 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:37.389 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:21:37.389 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:37.390 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:37.390 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 18:21:37.390 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:37.390 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:21:37.390 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 4(Integer), 12(Integer), 13(Integer)
2025-06-30 18:21:37.392 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:21:38.606 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:38.606 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:38.606 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:38.607 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 18:21:38.608 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:21:38.608 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:38.608 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:38.608 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:38.608 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 18:21:38.609 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 18:21:38.609 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:21:38.609 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:38.609 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:21:38.610 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 18:21:38.612 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 18:21:38.612 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:38.613 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:38.613 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:38.613 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 18:21:38.613 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 18:21:38.614 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 18:21:38.614 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:38.614 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:21:38.614 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 18:21:38.615 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:21:38.615 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:38.615 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:38.615 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:38.615 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:21:38.616 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:38.616 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:38.616 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:38.616 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:38.616 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:21:38.616 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:40.372 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:40.372 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:40.372 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:40.373 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-30 18:21:40.373 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:21:40.374 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:40.374 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:40.374 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:40.374 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 18:21:40.376 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:40.376 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:21:40.376 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:40.377 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:21:40.377 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-30 18:21:40.380 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-30 18:21:40.380 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:40.380 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:40.380 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:40.380 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 18:21:40.381 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:40.381 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 18:21:40.381 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:40.381 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:21:40.381 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-30 18:21:40.382 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:21:40.383 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:40.383 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:40.383 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:40.383 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:21:40.384 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:40.384 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:40.384 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:40.384 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:40.384 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:21:40.385 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:40.385 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:40.385 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:40.385 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:40.385 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:21:40.385 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:42.171 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:42.172 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:42.172 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:42.172 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 3(Integer)
2025-06-30 18:21:42.172 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:21:42.173 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:42.173 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:42.173 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:42.173 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 教育(String), 教育(String)
2025-06-30 18:21:42.174 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:42.175 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:21:42.175 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:42.175 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:21:42.175 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 10(Integer), 11(Integer), 3(Integer), 0(Integer), 10(Integer)
2025-06-30 18:21:42.176 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-30 18:21:42.176 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:42.176 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:42.176 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:42.176 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 教育(String), 教育(String)
2025-06-30 18:21:42.177 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:42.177 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 18:21:42.177 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:42.177 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:21:42.177 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 10(Integer), 11(Integer), 3(Integer)
2025-06-30 18:21:42.178 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:21:43.270 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:43.270 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:43.271 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:43.271 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 4(Integer)
2025-06-30 18:21:43.273 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:21:43.274 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:43.274 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:43.274 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:43.274 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-30 18:21:43.275 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:43.276 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:21:43.276 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:43.276 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:21:43.277 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 4(Integer), 12(Integer), 13(Integer), 0(Integer), 10(Integer)
2025-06-30 18:21:43.280 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-30 18:21:43.281 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:43.281 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:43.281 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:43.281 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-30 18:21:43.282 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:43.283 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 18:21:43.283 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:43.283 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:21:43.283 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 4(Integer), 12(Integer), 13(Integer)
2025-06-30 18:21:43.284 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:21:44.551 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:44.551 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:44.551 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:44.552 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 3(Integer)
2025-06-30 18:21:44.554 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:21:44.554 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:44.554 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:44.554 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:44.555 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 教育(String), 教育(String)
2025-06-30 18:21:44.557 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:44.558 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:21:44.558 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:44.558 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:21:44.559 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 10(Integer), 11(Integer), 3(Integer), 0(Integer), 10(Integer)
2025-06-30 18:21:44.560 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-30 18:21:44.560 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:44.560 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:44.560 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:44.560 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 教育(String), 教育(String)
2025-06-30 18:21:44.561 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:44.561 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 18:21:44.561 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:44.561 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:21:44.562 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 10(Integer), 11(Integer), 3(Integer)
2025-06-30 18:21:44.563 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:21:45.256 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:45.256 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:45.256 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:45.256 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-30 18:21:45.257 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:21:45.258 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:45.258 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:45.258 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:45.258 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 18:21:45.259 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:45.260 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:21:45.260 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:45.260 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:21:45.260 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-30 18:21:45.261 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-30 18:21:45.261 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:45.261 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:45.261 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:45.261 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 18:21:45.262 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:45.262 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 18:21:45.262 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:45.262 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:21:45.262 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-30 18:21:45.263 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:21:45.263 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:45.263 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:45.263 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:45.263 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:21:45.263 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:45.264 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:45.264 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:45.264 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:45.264 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:21:45.265 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:45.265 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:45.265 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:45.265 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:45.266 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:21:45.266 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:46.268 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:46.268 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.268 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:46.268 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 18:21:46.270 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:21:46.271 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:46.271 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.271 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:46.271 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 18:21:46.272 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 18:21:46.273 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:21:46.273 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.273 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:21:46.273 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 18:21:46.274 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 18:21:46.274 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:46.275 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.275 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:46.275 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 18:21:46.276 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 18:21:46.277 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 18:21:46.277 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.277 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:21:46.277 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 18:21:46.278 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:21:46.279 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:46.279 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.279 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:46.279 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:21:46.280 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:46.280 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:46.280 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.280 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:46.280 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:21:46.281 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:46.803 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:46.803 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.803 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:46.803 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 4(Integer)
2025-06-30 18:21:46.804 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:21:46.805 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:46.805 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.805 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:46.805 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-30 18:21:46.806 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:46.807 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:21:46.807 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.807 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:21:46.807 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 4(Integer), 12(Integer), 13(Integer), 0(Integer), 10(Integer)
2025-06-30 18:21:46.808 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-30 18:21:46.809 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:46.809 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.809 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:46.809 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-30 18:21:46.810 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:46.810 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 18:21:46.810 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.810 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:21:46.810 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 4(Integer), 12(Integer), 13(Integer)
2025-06-30 18:21:46.811 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:21:48.575 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 18:21:48.575 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 18:21:48.575 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:21:48.575 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.575 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.575 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:21:48.575 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:21:48.575 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.575 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:21:48.575 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.575 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:21:48.575 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:21:48.575 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 18:21:48.575 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:21:48.575 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.575 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:21:48.575 [http-nio-8080-exec-8] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 18:21:48.575 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:21:48.576 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:48.576 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.576 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:48.576 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:21:48.576 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 18:21:48.577 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:21:48.577 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:48.577 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.577 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:48.577 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:21:48.578 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:21:48.578 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 18:21:48.578 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:21:48.578 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 18:21:48.578 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 18:21:48.578 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.578 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:21:48.578 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:21:48.578 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.578 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:21:48.578 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:21:48.578 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.578 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:21:48.578 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:21:48.578 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:21:48.579 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 18:21:48.579 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:21:48.579 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:21:48.579 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:21:48.579 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:21:48.579 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:21:48.579 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:21:48.579 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.579 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:21:48.579 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:48.580 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.580 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:48.580 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:21:48.580 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:21:48.580 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:21:48.581 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:21:48.581 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:48.581 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.581 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:48.581 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:21:48.581 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:21:48.581 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:48.582 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:48.582 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.582 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:48.582 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:21:48.583 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:48.584 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:48.584 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:48.584 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:48.584 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.584 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.584 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:48.584 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:48.584 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:21:48.584 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:21:48.585 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:48.585 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:48.586 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:48.586 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.586 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:48.586 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:21:48.587 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:48.588 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:48.588 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.588 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:48.588 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:21:48.589 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:48.590 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:48.590 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.590 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:48.591 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:21:48.592 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:13.479 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:22:13.479 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.479 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:22:13.480 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:22:13.482 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:22:13.483 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:13.483 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.483 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:13.484 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:22:13.486 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:22:13.487 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:13.487 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.487 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:13.487 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:22:13.487 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:22:13.487 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.487 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:22:13.487 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-30 18:22:13.488 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:13.488 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:13.488 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.488 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:13.488 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:22:13.488 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:22:13.488 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:22:13.489 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.489 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:22:13.489 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 18:22:13.489 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:13.489 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:13.489 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.489 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:13.489 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:22:13.489 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:22:13.490 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:22:13.490 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.490 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:22:13.490 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:13.490 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-30 18:22:13.491 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-30 18:22:13.491 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:22:13.491 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.491 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:22:13.492 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 18:22:13.492 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:22:13.493 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 18:22:13.493 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.493 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:22:13.493 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-30 18:22:13.493 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:22:13.494 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:13.494 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.494 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:13.494 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:22:13.495 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:13.495 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:13.496 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.496 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:13.496 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:22:13.496 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:13.497 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:13.497 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.497 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:13.497 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:22:13.498 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:18.485 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:22:18.485 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 18:22:18.485 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.485 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 18:22:18.485 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.485 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.485 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:22:18.485 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:22:18.485 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.485 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:22:18.485 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:22:18.485 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:22:18.486 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:22:18.486 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.486 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:22:18.486 [http-nio-8080-exec-4] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 18:22:18.486 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:22:18.486 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:22:18.486 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.486 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:22:18.486 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:22:18.486 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 18:22:18.485 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 18:22:18.486 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:22:18.486 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 18:22:18.486 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 18:22:18.487 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:22:18.487 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:22:18.487 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:22:18.487 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.487 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:22:18.487 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:22:18.487 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.487 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:22:18.487 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:18.487 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.487 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:18.487 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:22:18.487 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:22:18.487 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:22:18.487 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:22:18.487 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:22:18.487 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 18:22:18.488 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.488 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:22:18.488 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:22:18.489 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:22:18.489 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:22:18.489 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:22:18.489 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:18.489 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:22:18.489 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.489 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:18.490 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:22:18.491 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 18:22:18.491 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:22:18.492 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:18.492 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.492 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:22:18.492 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:22:18.492 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:18.492 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.492 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:18.492 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:22:18.493 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:22:18.493 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:18.493 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:18.493 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:18.493 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.493 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.493 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:18.493 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:18.493 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:22:18.493 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:22:18.493 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:18.493 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:18.493 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:18.494 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.494 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:18.494 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:22:18.495 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:18.495 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:18.496 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.496 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:18.496 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:22:18.497 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:18.497 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:18.497 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.497 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:18.497 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:22:18.498 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:18.499 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:18.499 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.499 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:18.499 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:22:18.500 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:22.482 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:22:22.482 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:22.482 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:22:22.483 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:22:22.485 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:22:22.486 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:22.486 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:22.486 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:22.486 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:22:22.488 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:22:22.489 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:22.489 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:22.489 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:22.490 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:22:22.492 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:22.492 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:22.492 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:22.492 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:22.492 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:22:22.494 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:22.495 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:22.495 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:22:22.495 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:22.495 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:22.495 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:22.495 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:22:22.495 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:22:22.496 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 4(Integer)
2025-06-30 18:22:22.497 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:22.497 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:22:22.498 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:22:22.498 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:22.498 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:22:22.498 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-30 18:22:22.499 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:22:22.500 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:22:22.500 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:22.500 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:22:22.501 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 4(Integer), 12(Integer), 13(Integer), 0(Integer), 10(Integer)
2025-06-30 18:22:22.502 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-30 18:22:22.502 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:22:22.502 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:22.502 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:22:22.502 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-30 18:22:22.502 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:22:22.502 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 18:22:22.502 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:22.502 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:22:22.503 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 4(Integer), 12(Integer), 13(Integer)
2025-06-30 18:22:22.503 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:22:26.916 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 18:22:26.916 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:22:26.916 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 18:22:26.916 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.916 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.916 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.916 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 18:22:26.916 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:22:26.916 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:22:26.916 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:22:26.916 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.916 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:22:26.917 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:22:26.917 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:22:26.917 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:22:26.917 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 18:22:26.918 [http-nio-8080-exec-4] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 18:22:26.918 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 18:22:26.918 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:22:26.918 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:22:26.918 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.918 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:22:26.918 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:22:26.918 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 18:22:26.918 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:22:26.918 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:22:26.918 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.919 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:22:26.919 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:22:26.919 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.919 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:22:26.919 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.919 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:22:26.919 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:22:26.919 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.919 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:22:26.919 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:22:26.919 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:22:26.919 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:22:26.919 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 18:22:26.919 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:22:26.919 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:22:26.920 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.920 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:22:26.920 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:22:26.920 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 18:22:26.920 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:22:26.920 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:22:26.920 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:22:26.920 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:22:26.920 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:26.920 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.920 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:26.920 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:22:26.921 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:22:26.921 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:22:26.922 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:26.922 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:26.922 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.922 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:26.922 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.922 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:26.922 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:22:26.923 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:22:26.924 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:26.924 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:26.924 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:26.924 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:26.924 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.924 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.924 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:26.924 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:26.924 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:22:26.924 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:22:26.926 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:26.926 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:26.926 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:26.926 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:26.926 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.926 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.926 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:26.926 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:26.926 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:22:26.926 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:22:26.927 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:26.927 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:26.928 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:26.928 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.928 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:26.928 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:22:26.929 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:26.930 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:26.930 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.930 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:26.930 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:22:26.931 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
