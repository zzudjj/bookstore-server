2025-06-30 10:47:30.228 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 10:47:30.250 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 24392 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 10:47:30.250 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 10:47:30.251 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 10:47:30.400 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 10:47:30.401 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 10:47:30.904 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 10:47:30.905 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 10:47:30.926 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-30 10:47:31.113 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$af18f191] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 10:47:31.134 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 10:47:31.537 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 10:47:31.538 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 10:47:31.539 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 10:47:31.539 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 10:47:31.543 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 10:47:31.550 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 10:47:31.551 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 10:47:31.551 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 10:47:31.609 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 10:47:31.609 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1208 ms
2025-06-30 10:47:31.613 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 10:47:32.206 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 10:47:32.235 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 10:47:32.529 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 10:47:32.529 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 10:47:32.927 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 10:47:33.033 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@503c7a76, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2ef5f3c2, org.springframework.security.web.context.SecurityContextPersistenceFilter@39e1eea4, org.springframework.security.web.header.HeaderWriterFilter@5ddefa8d, org.springframework.web.filter.CorsFilter@6102538, org.springframework.security.web.authentication.logout.LogoutFilter@7a2857db, com.huang.store.security.JwtAuthenticationTokenFilter@4474d758, com.huang.store.security.CustomAuthenticationFilter@49a15fb9, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@6a102c5f, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1037cd97, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4b182fdc, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@79b55a7b, org.springframework.security.web.session.SessionManagementFilter@5650387, org.springframework.security.web.access.ExceptionTranslationFilter@1ad8491a, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@244846df]
2025-06-30 10:47:33.279 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 10:47:33.300 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 10:47:33.315 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 10:47:33.322 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.54 seconds (JVM running for 4.305)
2025-06-30 11:11:46.934 [http-nio-8080-exec-8] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 11:11:46.934 [http-nio-8080-exec-8] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 11:11:46.935 [http-nio-8080-exec-8] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-30 11:11:47.023 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:11:47.022 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:11:47.022 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:11:47.021 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:11:47.021 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:11:47.021 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:11:47.055 [http-nio-8080-exec-1] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 11:11:47.091 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 11:11:47.091 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:11:47.091 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:11:47.091 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:11:47.091 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 11:11:47.091 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 11:11:47.113 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.114 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.114 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.114 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:11:47.114 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.114 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:11:47.114 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.114 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:11:47.114 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.115 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:11:47.114 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 11:11:47.114 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 11:11:47.299 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:11:47.302 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 11:11:47.302 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:11:47.302 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 11:11:47.302 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:11:47.303 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 11:11:47.332 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 11:11:47.332 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:11:47.333 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 11:11:47.335 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 11:11:47.336 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:11:47.338 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 11:11:47.340 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:11:47.340 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 11:11:47.340 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.340 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:11:47.340 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 11:11:47.340 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.340 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:11:47.340 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:11:47.340 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.341 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:11:47.341 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:11:47.341 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.341 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:11:47.341 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:11:47.341 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 11:11:47.341 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:11:47.342 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:11:47.342 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:11:47.342 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.342 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:11:47.342 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:11:47.342 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:11:47.342 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.342 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:11:47.343 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:11:47.345 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 11:11:47.346 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:11:47.347 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 11:11:47.349 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:11:47.350 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:11:47.350 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:11:47.350 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.350 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:11:47.350 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:11:47.350 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.350 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:11:47.351 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:11:47.351 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 11:11:47.352 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:11:47.352 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:11:47.352 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.352 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:11:47.352 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:11:47.353 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 11:11:47.353 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:11:47.353 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.353 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:11:47.353 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:11:47.354 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:11:47.355 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:11:47.355 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.355 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:11:47.355 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:11:47.356 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:11:47.356 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:11:47.356 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:11:47.356 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.356 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:11:47.356 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:11:47.357 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:11:47.357 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:11:47.357 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:11:47.357 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:11:47.358 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:11:47.358 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:12:24.725 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:12:24.728 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:12:24.729 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 11:12:24.729 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.729 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 11:12:24.730 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 11:12:24.730 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.730 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 11:12:24.731 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 11:12:24.731 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 11:12:24.732 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:12:24.733 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 11:12:24.733 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:12:24.733 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.734 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:12:24.734 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 11:12:24.734 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.734 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 11:12:24.734 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 11:12:24.736 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 11:12:24.736 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 11:12:24.737 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:12:24.737 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.737 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:12:24.737 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:12:24.737 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:12:24.740 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:12:24.741 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:12:24.741 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 11:12:24.741 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.741 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:12:24.741 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:12:24.741 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.741 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:12:24.742 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:12:24.742 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 11:12:24.742 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:12:24.743 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:12:24.744 [http-nio-8080-exec-6] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 11:12:24.744 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:12:24.744 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:12:24.744 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.744 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:12:24.744 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 11:12:24.744 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:12:24.744 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.744 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:12:24.745 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:12:24.743 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 11:12:24.745 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:12:24.736 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:12:24.746 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:12:24.746 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.746 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:12:24.746 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 11:12:24.746 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:12:24.746 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:12:24.746 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.746 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:12:24.747 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:12:24.747 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.747 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:12:24.747 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:12:24.749 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:12:24.750 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:12:24.750 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:12:24.750 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.752 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:12:24.753 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:12:24.744 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.745 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:12:24.754 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:12:24.746 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:12:24.751 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:12:24.755 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.755 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:12:24.755 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:12:24.756 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:12:24.754 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.757 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:12:24.757 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:12:24.758 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:12:24.759 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:12:24.759 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:12:24.760 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:12:24.760 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:12:24.761 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.761 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:12:24.761 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 11:12:24.762 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:12:24.763 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 11:12:24.763 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:12:24.763 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:12:24.763 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.763 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:12:24.764 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:12:24.766 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:12:24.766 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:12:24.766 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:24.766 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:12:24.766 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:12:24.769 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:12:29.312 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDE2NDg2NDgsImV4cCI6MTc1MTIwMzQ0OH0.E-GNKww1T-zzZzwqy8eXv3GF-QoBtpJrqhONOvhg10AmxXOyGUxi880WOFCat_Kw9taI9w8lQHbz2NdJh3uvGg
2025-06-30 11:12:29.420 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 11:12:29.420 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:29.420 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 11:12:29.421 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-30 11:12:29.435 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 11:12:29.446 [http-nio-8080-exec-1] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:2545059634@qq.com    数据库密码:$2a$10$w8zNNUSDq3MCiLDDuAhYXedA0QGva1Z4.6UxO61Njhsrlo8voc01G
2025-06-30 11:12:29.551 [http-nio-8080-exec-1] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=2545059634@qq.com, password=$2a$10$w8zNNUSDq3MCiLDDuAhYXedA0QGva1Z4.6UxO61Njhsrlo8voc01G, enabled=true, roles=[ROLE_ADMIN]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]
2025-06-30 11:12:29.566 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 11:12:29.566 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:29.566 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 11:12:29.566 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-30 11:12:29.568 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 11:12:29.864 [http-nio-8080-exec-1] WARN  org.apache.catalina.util.SessionIdGeneratorBase - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [136] milliseconds.
2025-06-30 11:12:36.776 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:12:36.776 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.777 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:12:36.778 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:12:36.780 [http-nio-8080-exec-10] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 11:12:36.781 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:12:36.781 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:12:36.784 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:12:36.784 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.784 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:12:36.785 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:12:36.787 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 11:12:36.787 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.787 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 11:12:36.788 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:12:36.788 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 11:12:36.781 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 11:12:36.788 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.788 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 11:12:36.789 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 11:12:36.792 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 11:12:36.793 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 11:12:36.793 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.793 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 11:12:36.794 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 11:12:36.784 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:12:36.795 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.796 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 11:12:36.796 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:12:36.797 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:12:36.797 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.797 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:12:36.797 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:12:36.797 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:12:36.784 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.796 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 11:12:36.798 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:12:36.799 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:12:36.800 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:12:36.800 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:12:36.800 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.800 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:12:36.800 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 11:12:36.800 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:12:36.801 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.801 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:12:36.802 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:12:36.802 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 11:12:36.803 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:12:36.805 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 11:12:36.805 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:12:36.805 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.805 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:12:36.805 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 11:12:36.805 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:12:36.806 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:12:36.806 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.806 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:12:36.806 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:12:36.807 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:12:36.808 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:12:36.808 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:12:36.808 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.808 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:12:36.796 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 11:12:36.808 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.808 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:12:36.808 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 11:12:36.809 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:12:36.809 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.809 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:12:36.809 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:12:36.810 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:12:36.811 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:12:36.812 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:12:36.812 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 11:12:36.813 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:12:36.813 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.813 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:12:36.813 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:12:36.813 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:12:36.812 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.813 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:12:36.814 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:12:36.814 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:12:36.814 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.814 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:12:36.814 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:12:36.815 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:12:36.816 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:12:36.817 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:12:36.817 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:12:36.817 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:12:36.817 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:12:36.818 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:12:36.821 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:09.108 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:20:09.108 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.108 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:09.108 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 11:20:09.108 [http-nio-8080-exec-2] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 11:20:09.108 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.108 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 11:20:09.108 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.108 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 11:20:09.108 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:20:09.108 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.108 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:09.108 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:09.108 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 11:20:09.109 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.109 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 11:20:09.108 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:20:09.109 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.109 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:20:09.114 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 11:20:09.115 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:20:09.116 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:20:09.116 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:09.116 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:09.116 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:09.117 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.117 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:09.118 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:09.118 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 11:20:09.118 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:09.119 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 11:20:09.119 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:09.119 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.119 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:09.119 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.119 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:09.119 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 11:20:09.120 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 11:20:09.120 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 11:20:09.120 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:09.120 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:20:09.120 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 11:20:09.120 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.120 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 11:20:09.120 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 11:20:09.121 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:09.121 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:09.121 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.121 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:09.121 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:09.121 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:20:09.122 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 11:20:09.122 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:09.122 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:09.122 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:09.122 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.122 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:09.122 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:20:09.122 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 11:20:09.123 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:09.123 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:09.123 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:09.123 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.123 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:09.123 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:09.123 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.123 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:09.123 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 11:20:09.123 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:20:09.124 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:09.124 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:09.125 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:09.125 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.125 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:09.125 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:09.125 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.125 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 11:20:09.125 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:09.125 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:20:09.126 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:09.127 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:09.127 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:09.127 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.127 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:09.127 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 11:20:09.128 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:09.129 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:09.129 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.129 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:09.129 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:20:09.130 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:09.131 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:09.131 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:09.131 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:09.131 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:20:09.133 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:12.861 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:20:12.861 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:12.861 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:20:12.861 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:20:12.864 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:20:12.865 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:12.865 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:12.865 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:12.865 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:20:12.866 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:20:12.867 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:12.867 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:12.867 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:12.867 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:20:12.868 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:12.869 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:12.869 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:12.869 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:12.869 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:20:12.870 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:12.870 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:12.870 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:12.870 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:12.870 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:20:12.871 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:13.222 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 11:20:13.222 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:13.222 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 11:20:13.223 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-30 11:20:13.225 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-30 11:20:13.226 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 11:20:13.226 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:13.226 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 11:20:13.226 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 11:20:13.228 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 11:20:13.229 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 11:20:13.230 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:13.230 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 11:20:13.232 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 11:20:13.233 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 11:20:18.191 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 11:20:18.191 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 11:20:18.191 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 11:20:18.191 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:20:18.191 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 11:20:18.191 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:18.191 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:20:18.191 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:20:18.191 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:20:18.192 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:18.192 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 11:20:18.192 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 11:20:18.193 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 11:20:18.193 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 11:20:18.193 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:20:18.193 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 11:20:18.193 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:18.193 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.193 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 11:20:18.193 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.193 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 11:20:18.193 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:18.193 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:18.193 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 11:20:18.193 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.194 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:18.193 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:18.195 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 11:20:18.195 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 11:20:18.195 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 11:20:18.195 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:18.195 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:18.196 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:18.196 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.196 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:18.196 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:18.196 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:18.196 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.196 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:18.196 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:20:18.196 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:18.197 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:18.197 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:18.197 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:18.198 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:20:18.198 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:18.198 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.198 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:18.198 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:18.199 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.199 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:18.199 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 11:20:18.199 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:20:18.200 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:18.200 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:18.201 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:18.201 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:18.201 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.201 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.201 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:18.201 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:18.201 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 11:20:18.201 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:20:18.202 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:18.203 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:18.203 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:18.203 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:18.203 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.203 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.203 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:18.203 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:18.203 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 11:20:18.203 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:20:18.205 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:18.205 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:18.205 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:18.205 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.205 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:18.207 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:20:18.209 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:18.209 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:18.210 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:18.210 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:18.210 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:20:18.211 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:37.868 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 11:20:37.868 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:37.868 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 11:20:37.869 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 11:20:37.871 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 11:20:37.872 [http-nio-8080-exec-10] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 11:20:38.120 [http-nio-8080-exec-10] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=56464ff@456.com, password=$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy, enabled=true, roles=[ROLE_USER]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=0CDAB2BC8F0675223391E8A4D8F6E4C6], Granted Authorities=[ROLE_USER]]
2025-06-30 11:20:38.122 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 11:20:38.122 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:38.122 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 11:20:38.122 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 11:20:38.123 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 11:20:39.183 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 11:20:39.183 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.183 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 11:20:39.184 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 11:20:39.184 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 11:20:39.184 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.184 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 11:20:39.185 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.185 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 11:20:39.185 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 11:20:39.186 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 11:20:39.186 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 11:20:39.186 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.186 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 11:20:39.187 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 11:20:39.187 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:20:39.188 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.188 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:20:39.188 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:39.188 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.188 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 11:20:39.188 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:39.188 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:39.188 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 11:20:39.188 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:39.188 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.188 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:39.188 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:20:39.189 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:39.191 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:20:39.192 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:39.192 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:39.192 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.192 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:39.184 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:39.192 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:20:39.189 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:39.192 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:39.192 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.193 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:39.193 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 11:20:39.193 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:39.193 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.193 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:39.193 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:39.194 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:39.194 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:20:39.194 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:39.194 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:39.194 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 11:20:39.194 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.194 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.194 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:39.194 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:39.195 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:20:39.195 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 11:20:39.195 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:20:39.195 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:39.196 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:39.199 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.200 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:20:39.200 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 11:20:39.201 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:39.201 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.201 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:39.202 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 11:20:39.202 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 11:20:39.204 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:39.204 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:39.204 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.204 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:39.196 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:39.204 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:20:39.196 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:39.205 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:39.205 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.205 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:39.205 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:20:39.206 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:39.206 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 11:20:39.206 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:39.206 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:39.206 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.206 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:39.206 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:39.206 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.206 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:39.206 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:39.206 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:39.209 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:39.210 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:39.210 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:39.210 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:20:39.210 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:20:39.212 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:39.212 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:41.720 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:20:41.720 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:41.720 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:20:41.720 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:20:41.723 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:20:41.723 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:41.723 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:41.723 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:41.724 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:20:41.726 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:20:41.727 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:41.727 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:41.727 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:41.727 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:20:41.728 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 11:20:41.730 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:41.730 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 11:20:41.730 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:41.731 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:41.731 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-30 11:20:41.731 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:41.731 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:41.731 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:20:41.733 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-30 11:20:41.734 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:41.734 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 11:20:41.734 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:41.734 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 11:20:41.734 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:41.734 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 11:20:41.734 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:41.734 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:41.735 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:20:41.738 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 11:20:41.738 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 11:20:41.739 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:41.739 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 11:20:41.739 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 11:20:41.740 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:41.740 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 11:20:52.670 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:20:52.670 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:52.670 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:20:52.670 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:20:52.672 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:20:52.672 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:52.672 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:52.672 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:52.672 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:20:52.673 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:20:52.674 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:52.674 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:52.674 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:52.674 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:20:52.675 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:52.675 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:52.675 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:52.675 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:52.676 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:20:52.677 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:52.677 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:52.677 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:52.677 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:52.677 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:20:52.678 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:52.682 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 11:20:52.683 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:52.683 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 11:20:52.683 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-30 11:20:52.684 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-30 11:20:52.684 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 11:20:52.684 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:52.685 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 11:20:52.685 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 11:20:52.686 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 11:20:52.686 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 11:20:52.686 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:52.686 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 11:20:52.686 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 11:20:52.687 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 11:20:56.099 [http-nio-8080-exec-8] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 11:20:56.099 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 11:20:56.099 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:20:56.099 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:20:56.099 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.099 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.099 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 11:20:56.100 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 11:20:56.099 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.101 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:20:56.101 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 11:20:56.102 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 11:20:56.102 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 11:20:56.103 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 11:20:56.103 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.103 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 11:20:56.104 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 11:20:56.105 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 11:20:56.108 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 11:20:56.108 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.108 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:56.109 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:56.099 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:20:56.109 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:56.109 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.110 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:20:56.110 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 11:20:56.110 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.110 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 11:20:56.111 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 11:20:56.109 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:56.111 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 11:20:56.111 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:56.112 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:56.112 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.112 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:56.112 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:56.112 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:20:56.112 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:56.113 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.113 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:56.113 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 11:20:56.113 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:20:56.113 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:56.113 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.113 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:56.113 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:56.113 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:56.113 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:56.114 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 11:20:56.114 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.114 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 11:20:56.114 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 11:20:56.114 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:20:56.114 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:56.114 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.114 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:56.114 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:20:56.115 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:56.115 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:56.115 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.115 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:56.115 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 11:20:56.115 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 11:20:56.116 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:56.117 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:56.117 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:56.117 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.117 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:56.117 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:56.117 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.117 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:56.118 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 11:20:56.118 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:20:56.118 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:56.119 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:56.119 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:56.119 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:56.119 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.119 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.119 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:56.119 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:56.120 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 11:20:56.120 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:20:56.122 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:56.122 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:56.122 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:56.122 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.122 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:56.123 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:20:56.124 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:56.125 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:20:56.125 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:56.125 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:20:56.126 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:20:56.127 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:20:58.501 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:20:58.501 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:58.501 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:20:58.504 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:20:58.507 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:20:58.508 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:58.508 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:58.508 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:58.508 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:20:58.511 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:20:58.513 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:58.513 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:58.513 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:58.514 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:20:58.518 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:58.519 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:58.519 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:58.519 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:58.519 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:20:58.522 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:58.524 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:20:58.524 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:20:58.524 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:20:58.524 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:20:58.526 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:20:58.534 [http-nio-8080-exec-4] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 11:20:58.549 [http-nio-8080-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 11:21:00.019 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:21:00.019 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:00.019 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:21:00.019 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 11:21:00.023 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 11:21:00.023 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:21:00.023 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:00.023 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:21:00.026 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:21:00.028 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:21:00.061 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 11:21:00.061 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:00.061 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 11:21:00.064 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 11:21:00.066 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 11:21:00.067 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:21:00.067 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:00.067 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:21:00.067 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:21:00.068 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:21:00.070 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 11:21:00.070 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:00.070 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 11:21:00.071 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 11:21:00.073 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 11:21:00.073 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:21:00.074 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:00.074 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:21:00.074 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:21:00.074 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:21:00.075 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:21:00.075 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:00.075 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:21:00.075 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:21:00.076 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:21:01.420 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:21:01.420 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:01.420 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:21:01.420 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:21:01.423 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:21:01.424 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:01.424 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:01.424 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:01.425 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:21:01.428 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:21:01.429 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:01.429 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:01.429 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:01.429 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:21:01.431 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 11:21:01.431 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:01.431 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 11:21:01.431 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-30 11:21:01.431 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:01.431 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:01.432 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:01.432 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:01.432 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:21:01.432 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-30 11:21:01.433 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 11:21:01.433 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:01.433 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 11:21:01.433 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 11:21:01.434 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:01.434 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:01.434 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:01.434 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:01.435 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 11:21:01.435 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:21:01.435 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 11:21:01.435 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:01.435 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 11:21:01.435 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 11:21:01.436 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:01.437 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 11:21:03.943 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:21:03.944 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.944 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:21:03.944 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:21:03.944 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.944 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:21:03.944 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:21:03.944 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 11:21:03.946 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 11:21:03.946 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:21:03.946 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:03.946 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:21:03.946 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.946 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.946 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:21:03.946 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:03.946 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:21:03.946 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:21:03.947 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:21:03.948 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:21:03.948 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:03.948 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.948 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:03.948 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 11:21:03.948 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.948 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 11:21:03.949 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 11:21:03.949 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:21:03.951 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:03.952 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:03.952 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 11:21:03.952 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.952 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:03.952 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:21:03.952 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:21:03.952 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.952 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:21:03.952 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:21:03.953 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:03.953 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:21:03.953 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:03.953 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.953 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:03.953 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:21:03.953 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 11:21:03.954 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.954 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 11:21:03.955 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:03.957 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 11:21:03.958 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 11:21:03.959 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:21:03.959 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.959 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:21:03.959 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:21:03.961 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:21:03.961 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:21:03.961 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:03.961 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:21:03.962 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:21:03.963 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:21:05.318 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:21:05.318 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:05.318 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:21:05.318 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:21:05.319 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 11:21:05.319 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:05.320 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 11:21:05.321 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 5(Integer)
2025-06-30 11:21:05.321 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:21:05.323 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:05.323 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:05.323 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:05.323 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:21:05.325 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 11:21:05.325 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:21:05.326 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 11:21:05.326 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:05.326 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 11:21:05.326 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002214(String)
2025-06-30 11:21:05.326 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:05.326 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:05.326 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:05.326 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:21:05.327 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 1
2025-06-30 11:21:05.329 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:05.329 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 11:21:05.329 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:05.329 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 11:21:05.329 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:05.329 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:05.329 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:05.329 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:21:05.329 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 5(Integer)
2025-06-30 11:21:05.330 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 11:21:05.330 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:05.331 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 11:21:05.331 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:05.331 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 11:21:05.331 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:05.331 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:05.331 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:05.331 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 11:21:05.331 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:21:05.333 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 11:21:05.333 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:06.781 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:21:06.781 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.781 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:21:06.781 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:21:06.781 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:21:06.782 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.782 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:21:06.782 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 11:21:06.783 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 11:21:06.784 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:21:06.784 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:06.784 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:21:06.785 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.785 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:06.785 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.785 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:21:06.785 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:21:06.786 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:21:06.787 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:21:06.787 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:21:06.787 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:06.787 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.787 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:06.787 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:21:06.787 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 11:21:06.787 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.787 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 11:21:06.790 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:06.790 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 11:21:06.790 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:06.790 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.790 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:06.790 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:21:06.791 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:06.792 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 11:21:06.792 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:06.793 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.793 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:06.793 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:21:06.793 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:21:06.793 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.793 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:21:06.794 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:21:06.795 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:21:06.795 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:06.796 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 11:21:06.796 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.796 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 11:21:06.797 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 11:21:06.799 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 11:21:06.799 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:21:06.799 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.799 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:21:06.800 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:21:06.801 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:21:06.801 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:21:06.802 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:06.802 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:21:06.802 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:21:06.803 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:21:07.914 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:21:07.915 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:07.915 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:21:07.915 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:21:07.917 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:21:07.917 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:07.917 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:07.917 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:07.917 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:21:07.919 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:21:07.919 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:07.920 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:07.920 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:07.920 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:21:07.921 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 11:21:07.921 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:07.921 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 11:21:07.921 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-30 11:21:07.921 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:07.922 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:07.922 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:07.922 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:07.922 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-30 11:21:07.922 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:21:07.922 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 11:21:07.923 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:07.923 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 11:21:07.923 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 11:21:07.923 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:07.924 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 11:21:07.924 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:07.924 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:07.924 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:07.924 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:21:07.924 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 11:21:07.924 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:07.924 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 11:21:07.924 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 11:21:07.925 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 11:21:07.925 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:09.256 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:21:09.256 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.256 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:21:09.256 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:21:09.256 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:21:09.256 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.256 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:21:09.256 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 11:21:09.257 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:21:09.258 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 11:21:09.258 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:09.258 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.258 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:09.258 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:21:09.258 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:21:09.258 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.258 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:21:09.258 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:21:09.259 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:21:09.259 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:21:09.259 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:09.259 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.259 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:09.259 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:21:09.259 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 11:21:09.259 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.259 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 11:21:09.260 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 11:21:09.260 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:09.260 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:09.261 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.261 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:09.261 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:21:09.261 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 11:21:09.262 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:21:09.262 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.262 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:21:09.262 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:09.262 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:21:09.262 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:21:09.262 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.263 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:21:09.263 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:21:09.264 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:21:09.264 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:21:09.265 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 11:21:09.265 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.265 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 11:21:09.265 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 11:21:09.266 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 11:21:09.267 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:21:09.267 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.267 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:21:09.267 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:21:09.268 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:21:09.269 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:21:09.269 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:21:09.269 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:21:09.269 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:21:09.270 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:24:18.806 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:24:18.806 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:24:18.806 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:24:18.808 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:24:18.809 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:24:18.810 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:24:18.810 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:24:18.810 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:24:18.810 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 11:24:18.810 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:24:18.810 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 11:24:18.810 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:24:18.811 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:24:18.811 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:24:18.811 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:24:18.811 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:24:18.811 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:24:18.812 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-30 11:24:18.812 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:24:18.813 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:24:18.813 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:24:18.813 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:24:18.813 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:24:18.813 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-30 11:24:18.814 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 11:24:18.814 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:24:18.814 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 11:24:18.814 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:24:18.814 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 11:24:18.814 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:24:18.814 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:24:18.814 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:24:18.814 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:24:18.815 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 11:24:18.815 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:24:18.815 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 11:24:18.815 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:24:18.815 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 11:24:18.815 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 11:24:18.816 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 11:25:00.147 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:25:00.147 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.147 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:25:00.147 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:25:00.148 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.148 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:25:00.148 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:25:00.148 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 11:25:00.149 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 11:25:00.149 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:25:00.149 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:00.149 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:25:00.149 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.149 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.149 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:00.149 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:25:00.149 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:25:00.149 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:25:00.151 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:25:00.151 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:25:00.151 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:00.151 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.151 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:00.151 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 11:25:00.151 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:25:00.151 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.151 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 11:25:00.152 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 11:25:00.153 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:00.153 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 11:25:00.153 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:00.153 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.153 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:00.153 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:25:00.153 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.153 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:25:00.154 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:25:00.154 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:25:00.154 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:25:00.154 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:00.154 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 11:25:00.154 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:00.154 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.154 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.154 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:00.154 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 11:25:00.154 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:25:00.154 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 11:25:00.155 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 11:25:00.155 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:00.156 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:25:00.156 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.156 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:25:00.156 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:25:00.157 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:25:00.157 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:25:00.158 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:00.158 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:25:00.158 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:25:00.159 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:25:06.744 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:25:06.744 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:06.744 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:25:06.744 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:25:06.746 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:25:06.746 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:06.746 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:06.746 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:06.747 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:25:06.748 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:25:06.749 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:06.749 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:06.749 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:06.749 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:25:06.750 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:06.751 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:06.751 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:06.751 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:06.751 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:25:06.753 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:06.754 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:06.754 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:06.754 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:06.755 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:25:06.756 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 11:25:06.756 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:06.757 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:06.758 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 11:25:06.758 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-30 11:25:06.760 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-30 11:25:06.761 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 11:25:06.761 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:06.761 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 11:25:06.761 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 11:25:06.765 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 11:25:06.766 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 11:25:06.766 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:06.766 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 11:25:06.766 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 11:25:06.769 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 11:25:08.124 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:25:08.124 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.124 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:25:08.124 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 11:25:08.124 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.124 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:25:08.124 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 11:25:08.125 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 11:25:08.126 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:25:08.126 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 11:25:08.127 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:08.127 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:25:08.127 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.127 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.127 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:08.127 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:25:08.128 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:25:08.128 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:25:08.129 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:25:08.129 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:25:08.129 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:08.129 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.129 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:08.130 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:25:08.130 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 11:25:08.130 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.130 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 11:25:08.130 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 11:25:08.131 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:08.132 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:08.132 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.132 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:08.133 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:25:08.133 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 11:25:08.133 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 11:25:08.133 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.133 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 11:25:08.134 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 11:25:08.134 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:08.135 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:08.135 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.135 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:08.135 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:25:08.135 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 11:25:08.136 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 11:25:08.136 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:08.136 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.136 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 11:25:08.136 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 11:25:08.138 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 11:25:08.139 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:25:08.139 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.139 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:25:08.140 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 11:25:08.142 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:25:08.143 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 11:25:08.144 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:08.144 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 11:25:08.144 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 11:25:08.146 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 11:25:09.069 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 11:25:09.069 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:09.069 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 11:25:09.070 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 11:25:09.072 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 11:25:09.076 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:09.077 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:09.077 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:09.077 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 11:25:09.084 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 11:25:09.085 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:09.085 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:09.085 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:09.085 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 11:25:09.086 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 11:25:09.086 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:09.086 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 11:25:09.086 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 5(Integer)
2025-06-30 11:25:09.087 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:09.087 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:09.087 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:09.087 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:09.088 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 11:25:09.088 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 11:25:09.088 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 11:25:09.088 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:09.088 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 11:25:09.088 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002214(String)
2025-06-30 11:25:09.088 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:09.089 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 11:25:09.089 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:09.089 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 11:25:09.089 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 11:25:09.091 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 1
2025-06-30 11:25:09.092 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 11:25:09.092 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:09.092 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 11:25:09.092 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 5(Integer)
2025-06-30 11:25:09.092 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 11:25:09.093 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 11:25:09.095 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 11:25:09.095 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 11:25:09.095 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 11:25:09.095 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 11:25:09.097 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 16:14:51.414 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 16:14:51.429 [Thread-7] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 16:14:51.440 [Thread-7] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-06-30 16:14:51.495 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-268930409] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 16:14:51.496 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-268930409] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 16:14:51.496 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-109802217] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 16:14:51.496 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-109802217] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 16:14:51.498 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-nioEventLoop-4-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/sun.nio.ch.WEPoll.wait(Native Method)
 java.base@17.0.8/sun.nio.ch.WEPollSelectorImpl.doSelect(WEPollSelectorImpl.java:111)
 java.base@17.0.8/sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:129)
 java.base@17.0.8/sun.nio.ch.SelectorImpl.select(SelectorImpl.java:146)
 app//io.netty.channel.nio.SelectedSelectionKeySetSelector.select(SelectedSelectionKeySetSelector.java:68)
 app//io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:879)
 app//io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:526)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.499 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.500 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-2] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.500 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-3] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.500 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-4] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.500 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-5] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.501 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-6] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.501 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-7] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.501 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-8] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.501 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-9] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.502 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-10] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.502 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-11] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.503 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-12] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 16:14:51.508 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 16:14:51.515 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 16:14:51.707 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-06-30 16:14:51.714 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-06-30 16:14:51.927 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 24392 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 16:14:51.927 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 16:14:51.927 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 16:14:52.128 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 16:14:52.128 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 16:14:52.137 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-30 16:14:52.201 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$af18f191] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 16:14:52.209 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 16:14:52.283 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 16:14:52.283 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 16:14:52.283 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 16:14:52.283 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 16:14:52.283 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 16:14:52.285 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 16:14:52.285 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 16:14:52.285 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 16:14:52.297 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 16:14:52.297 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 363 ms
2025-06-30 16:14:52.299 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 16:14:52.388 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} inited
2025-06-30 16:14:52.403 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} inited
2025-06-30 16:14:52.496 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 16:14:52.496 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 16:14:52.594 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 16:14:52.661 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5aef3cf6, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3bd22062, org.springframework.security.web.context.SecurityContextPersistenceFilter@2247493f, org.springframework.security.web.header.HeaderWriterFilter@76c63d7e, org.springframework.web.filter.CorsFilter@5df0503c, org.springframework.security.web.authentication.logout.LogoutFilter@4b0dab33, com.huang.store.security.JwtAuthenticationTokenFilter@bdbe518, com.huang.store.security.CustomAuthenticationFilter@2d5f3b55, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@41cb88f3, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@68728b6c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2f1876d1, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4dbd3ae0, org.springframework.security.web.session.SessionManagementFilter@2955306a, org.springframework.security.web.access.ExceptionTranslationFilter@7bb62922, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@eead1ab]
2025-06-30 16:14:52.779 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 16:14:52.792 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 16:14:52.794 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 16:14:52.799 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.923 seconds (JVM running for 19643.809)
2025-06-30 16:53:22.499 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 16:53:22.499 [Thread-9] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 16:53:22.501 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-198522594] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 16:53:22.501 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-198522594] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 16:53:22.501 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1940084265] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 16:53:22.501 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1940084265] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 16:53:22.502 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 16:53:22.503 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 16:53:22.506 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closed
2025-06-30 16:53:22.507 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closed
2025-06-30 16:53:22.609 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 24392 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 16:53:22.609 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 16:53:22.609 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 16:53:22.816 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 16:53:22.816 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 16:53:22.827 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-30 16:53:22.882 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$af18f191] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 16:53:22.889 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 16:53:22.954 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 16:53:22.954 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 16:53:22.954 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 16:53:22.955 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 16:53:22.955 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 16:53:22.956 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 16:53:22.956 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 16:53:22.956 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 16:53:22.969 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 16:53:22.969 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 354 ms
2025-06-30 16:53:22.971 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 16:53:23.051 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} inited
2025-06-30 16:53:23.068 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} inited
2025-06-30 16:53:23.140 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 16:53:23.141 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 16:53:23.226 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 16:53:23.288 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@49a7af4e, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@26a74ae, org.springframework.security.web.context.SecurityContextPersistenceFilter@5998191, org.springframework.security.web.header.HeaderWriterFilter@5486d900, org.springframework.web.filter.CorsFilter@3ee7fdc7, org.springframework.security.web.authentication.logout.LogoutFilter@3f72a046, com.huang.store.security.JwtAuthenticationTokenFilter@7dfbf95b, com.huang.store.security.CustomAuthenticationFilter@2e5a5de3, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@20c0c05b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2c0f737a, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4ea3e122, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@32cc19a6, org.springframework.security.web.session.SessionManagementFilter@25394311, org.springframework.security.web.access.ExceptionTranslationFilter@1697e515, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1686549]
2025-06-30 16:53:23.382 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 16:53:23.390 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 16:53:23.393 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 16:53:23.395 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.835 seconds (JVM running for 21954.405)
2025-06-30 16:55:32.378 [http-nio-8080-exec-4] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 16:55:32.379 [http-nio-8080-exec-4] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 16:55:32.379 [http-nio-8080-exec-4] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-06-30 16:55:32.387 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjUzNjM4MTIwLCJleHAiOjE3NTEyNTU0Mzh9.4wWGiVq3wUj1coW2QLEsOV8xeFEs2JzAq44V7n6SPr2xhNWSIk92Rx1FFFD8e46kJm3LkbF6EQSG1V2SX1h9mw
2025-06-30 16:55:32.387 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjUzNjM4MTIwLCJleHAiOjE3NTEyNTU0Mzh9.4wWGiVq3wUj1coW2QLEsOV8xeFEs2JzAq44V7n6SPr2xhNWSIk92Rx1FFFD8e46kJm3LkbF6EQSG1V2SX1h9mw
2025-06-30 16:55:32.387 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjUzNjM4MTIwLCJleHAiOjE3NTEyNTU0Mzh9.4wWGiVq3wUj1coW2QLEsOV8xeFEs2JzAq44V7n6SPr2xhNWSIk92Rx1FFFD8e46kJm3LkbF6EQSG1V2SX1h9mw
2025-06-30 16:55:32.387 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjUzNjM4MTIwLCJleHAiOjE3NTEyNTU0Mzh9.4wWGiVq3wUj1coW2QLEsOV8xeFEs2JzAq44V7n6SPr2xhNWSIk92Rx1FFFD8e46kJm3LkbF6EQSG1V2SX1h9mw
2025-06-30 16:55:32.387 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjUzNjM4MTIwLCJleHAiOjE3NTEyNTU0Mzh9.4wWGiVq3wUj1coW2QLEsOV8xeFEs2JzAq44V7n6SPr2xhNWSIk92Rx1FFFD8e46kJm3LkbF6EQSG1V2SX1h9mw
2025-06-30 16:55:32.387 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjUzNjM4MTIwLCJleHAiOjE3NTEyNTU0Mzh9.4wWGiVq3wUj1coW2QLEsOV8xeFEs2JzAq44V7n6SPr2xhNWSIk92Rx1FFFD8e46kJm3LkbF6EQSG1V2SX1h9mw
2025-06-30 16:55:32.392 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 16:55:32.392 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 16:55:32.392 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.392 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 16:55:32.393 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 16:55:32.393 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 16:55:32.393 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.393 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.393 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 16:55:32.393 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 16:55:32.393 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 16:55:32.393 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.393 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 16:55:32.394 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 16:55:32.394 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.394 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 16:55:32.394 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:55:32.394 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.394 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:55:32.398 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 16:55:32.403 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 16:55:32.403 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 16:55:32.403 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.403 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 16:55:32.405 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 16:55:32.411 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 16:55:32.411 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 16:55:32.411 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.411 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 16:55:32.412 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 16:55:32.412 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 16:55:32.414 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 16:55:32.415 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 16:55:32.416 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 16:55:32.416 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.416 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 16:55:32.416 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:55:32.416 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 16:55:32.418 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 16:55:32.418 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 16:55:32.418 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.418 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 16:55:32.419 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:55:32.419 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 16:55:32.420 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:55:32.420 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.420 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:55:32.420 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 16:55:32.421 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 16:55:32.421 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 16:55:32.422 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 16:55:32.424 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 16:55:32.425 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:55:32.425 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.425 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:55:32.425 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 16:55:32.425 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:55:32.426 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 16:55:32.426 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:55:32.426 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:55:32.426 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.426 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:55:32.426 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:55:32.427 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 16:55:32.428 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:55:32.428 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:55:32.428 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.428 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:55:32.428 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:55:32.429 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:55:32.429 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:55:32.429 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:55:32.429 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:55:32.429 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.429 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.429 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:55:32.429 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:55:32.430 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:55:32.430 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 16:55:32.431 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:55:32.432 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:55:32.432 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:55:32.432 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.432 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:55:32.432 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 16:55:32.433 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:55:32.433 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:55:32.433 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.433 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:55:32.433 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 16:55:32.434 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:55:32.434 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:55:32.434 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:55:32.434 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:55:32.435 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 16:55:32.436 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:25.598 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjUzNjM4MTIwLCJleHAiOjE3NTEyNTU0Mzh9.4wWGiVq3wUj1coW2QLEsOV8xeFEs2JzAq44V7n6SPr2xhNWSIk92Rx1FFFD8e46kJm3LkbF6EQSG1V2SX1h9mw
2025-06-30 16:56:25.670 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 16:56:25.670 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:25.671 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 16:56:25.672 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 16:56:25.673 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 16:56:25.679 [http-nio-8080-exec-7] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 16:56:25.751 [http-nio-8080-exec-7] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=56464ff@456.com, password=$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy, enabled=true, roles=[ROLE_USER]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_USER]]
2025-06-30 16:56:25.753 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 16:56:25.753 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:25.753 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 16:56:25.753 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 16:56:25.754 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 16:56:26.823 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 16:56:26.823 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:56:26.823 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 16:56:26.823 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:56:26.823 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 16:56:26.823 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 16:56:26.823 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 16:56:26.823 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-1] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 16:56:26.823 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 16:56:26.823 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 16:56:26.823 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 16:56:26.824 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 16:56:26.825 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 16:56:26.825 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 16:56:26.825 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.825 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 16:56:26.826 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 16:56:26.827 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 16:56:26.827 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 16:56:26.828 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.828 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 16:56:26.828 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 16:56:26.828 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.828 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 16:56:26.828 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:56:26.828 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 16:56:26.828 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 16:56:26.828 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 16:56:26.828 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:26.828 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.828 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:26.829 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 16:56:26.829 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 16:56:26.830 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 16:56:26.830 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 16:56:26.830 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 16:56:26.830 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:56:26.830 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 16:56:26.830 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.830 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 16:56:26.830 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 16:56:26.831 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:56:26.831 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 16:56:26.831 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:26.831 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.831 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:26.831 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:56:26.831 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 16:56:26.832 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 16:56:26.832 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:26.832 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:26.832 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:26.832 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.832 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.832 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:26.832 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:26.832 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 16:56:26.832 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:56:26.834 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:26.834 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:26.834 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:26.834 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:26.834 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.834 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:26.834 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.834 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:26.835 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 16:56:26.835 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:56:26.836 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:26.836 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:26.836 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:26.836 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.836 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:26.836 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 16:56:26.837 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:26.837 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:26.838 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.838 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:26.838 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 16:56:26.838 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:26.839 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:26.839 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:26.839 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:26.839 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 16:56:26.839 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:33.642 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:56:33.643 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:33.643 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:56:33.644 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:56:33.646 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 16:56:33.647 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:33.647 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 16:56:33.647 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 4(Integer)
2025-06-30 16:56:33.648 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:56:33.648 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 16:56:33.648 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:33.648 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:33.648 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:33.648 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:56:33.648 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:33.648 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:33.649 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:33.649 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:56:33.650 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-30 16:56:33.650 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:33.650 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:33.650 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:33.650 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:56:33.650 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 16:56:33.651 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:33.652 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:33.652 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:33.652 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:33.652 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:56:33.652 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 16:56:33.652 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:33.652 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 16:56:33.653 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:33.653 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:33.653 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 4(Integer), 12(Integer), 13(Integer), 0(Integer), 10(Integer)
2025-06-30 16:56:33.653 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:33.653 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:33.654 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:56:33.655 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:33.656 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-30 16:56:33.656 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:33.656 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:33.656 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:33.657 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-30 16:56:33.658 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 16:56:33.659 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 16:56:33.659 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:33.659 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 16:56:33.660 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 4(Integer), 12(Integer), 13(Integer)
2025-06-30 16:56:33.661 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 16:56:36.622 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 16:56:36.622 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:36.622 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 16:56:36.624 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 3(Integer)
2025-06-30 16:56:36.625 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 16:56:36.625 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:36.625 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:36.625 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:36.626 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 教育(String), 教育(String)
2025-06-30 16:56:36.628 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 16:56:36.629 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 16:56:36.629 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:36.629 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 16:56:36.630 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 10(Integer), 11(Integer), 3(Integer), 0(Integer), 10(Integer)
2025-06-30 16:56:36.631 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-30 16:56:36.632 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:36.632 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:36.632 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:36.632 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 教育(String), 教育(String)
2025-06-30 16:56:36.634 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 16:56:36.636 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 16:56:36.636 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:36.636 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 16:56:36.636 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 10(Integer), 11(Integer), 3(Integer)
2025-06-30 16:56:36.637 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 16:56:37.488 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 16:56:37.488 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:37.488 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 16:56:37.488 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-30 16:56:37.490 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 16:56:37.491 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:37.491 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:37.491 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:37.491 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 16:56:37.492 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 16:56:37.493 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 16:56:37.493 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:37.493 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 16:56:37.493 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-30 16:56:37.496 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-30 16:56:37.496 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:37.496 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:37.496 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:37.496 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 16:56:37.497 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 16:56:37.498 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 16:56:37.498 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:37.498 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 16:56:37.498 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-30 16:56:37.499 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 16:56:37.499 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:37.499 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:37.499 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:37.500 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 16:56:37.501 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:37.501 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:37.501 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:37.501 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:37.502 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 16:56:37.503 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:37.504 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:37.504 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:37.504 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:37.504 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 16:56:37.505 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:38.652 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 16:56:38.652 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:38.652 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 16:56:38.652 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 16:56:38.652 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 16:56:38.653 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:38.653 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:38.653 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:38.653 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 16:56:38.655 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 16:56:38.657 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 16:56:38.657 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:38.657 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 16:56:38.658 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 16:56:38.661 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 16:56:38.662 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:38.662 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:38.662 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:38.662 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 16:56:38.663 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 16:56:38.664 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 16:56:38.665 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:38.665 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 16:56:38.665 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 16:56:38.666 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 16:56:38.666 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:38.666 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:38.666 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:38.668 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 16:56:38.669 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:38.670 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:38.670 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:38.670 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:38.670 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 16:56:38.671 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:50.527 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:56:50.527 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:50.527 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:56:50.527 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:56:50.528 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:56:50.528 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:50.528 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:50.528 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:50.528 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:56:50.530 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:56:50.530 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:50.530 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:50.531 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:50.531 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:56:50.532 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:50.532 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:50.532 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:50.532 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:50.532 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:56:50.534 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:50.534 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:50.534 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:50.534 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:50.534 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:56:50.536 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:50.588 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 16:56:50.589 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:50.589 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 16:56:50.589 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-30 16:56:50.590 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-30 16:56:50.591 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 16:56:50.591 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:50.591 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 16:56:50.591 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 16:56:50.593 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 16:56:50.594 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 16:56:50.594 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:50.594 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 16:56:50.595 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 16:56:50.596 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 16:56:52.351 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:56:52.351 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.351 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:56:52.351 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:56:52.352 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:56:52.352 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:52.352 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.352 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:52.354 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:56:52.354 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 16:56:52.354 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.354 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 16:56:52.354 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 16:56:52.355 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 16:56:52.355 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:56:52.355 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:52.356 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.356 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:52.357 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 16:56:52.357 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:52.357 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.357 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:52.357 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:56:52.358 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 16:56:52.359 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:52.359 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 16:56:52.359 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.359 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 16:56:52.359 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 16:56:52.360 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:52.360 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.360 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:52.360 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:56:52.362 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:52.362 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:52.362 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.362 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:52.364 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:56:52.364 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 16:56:52.364 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:52.364 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.364 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:52.364 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 16:56:52.365 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:52.366 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 16:56:52.366 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 16:56:52.366 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.366 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 16:56:52.366 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 16:56:52.369 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 16:56:52.370 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:52.370 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.370 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:52.370 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 16:56:52.371 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:52.372 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:52.372 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:52.372 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:52.372 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 16:56:52.373 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:54.062 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:56:54.062 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:54.062 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:56:54.062 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:56:54.064 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:56:54.065 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:54.065 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:54.065 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:54.065 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:56:54.066 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:56:54.067 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:54.067 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:54.067 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:54.067 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:56:54.070 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:54.080 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:54.080 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:54.080 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:54.080 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:56:54.081 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:54.082 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:54.082 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:54.082 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:54.083 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:56:54.081 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 16:56:54.085 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:54.086 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:54.086 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 16:56:54.087 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-30 16:56:54.088 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-30 16:56:54.088 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 16:56:54.088 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:54.088 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 16:56:54.088 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 16:56:54.090 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 16:56:54.091 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 16:56:54.092 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:54.092 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 16:56:54.092 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 16:56:54.097 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 16:56:56.540 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:56:56.540 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.540 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:56:56.540 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:56:56.542 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:56:56.544 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:56.544 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.544 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:56.544 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:56:56.546 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:56:56.546 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:56.546 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.546 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:56.547 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:56:56.550 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:56.552 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:56.556 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.556 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:56.557 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:56:56.560 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:56.560 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:56.560 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.560 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:56.560 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:56:56.562 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:56.568 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 16:56:56.568 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.568 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 16:56:56.568 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 16:56:56.570 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 16:56:56.570 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:56.570 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.570 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:56.572 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 16:56:56.576 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 16:56:56.578 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 16:56:56.578 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.578 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 16:56:56.578 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 16:56:56.580 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 16:56:56.581 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:56.581 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.581 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:56.581 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 16:56:56.581 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 16:56:56.582 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 16:56:56.582 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.582 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 16:56:56.582 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 16:56:56.582 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 16:56:56.582 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:56.582 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.582 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:56.584 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 16:56:56.585 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:56.586 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:56.586 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:56.586 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:56.586 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 16:56:56.587 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:57.907 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:56:57.907 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:57.907 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:56:57.907 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:56:57.909 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:56:57.909 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:57.909 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:57.909 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:57.909 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:56:57.910 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 16:56:57.910 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:57.910 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 16:56:57.910 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 5(Integer)
2025-06-30 16:56:57.911 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:56:57.912 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 16:56:57.913 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 16:56:57.913 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:57.913 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 16:56:57.914 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002214(String)
2025-06-30 16:56:57.914 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:57.914 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:57.914 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:57.914 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:56:57.915 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:57.916 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 1
2025-06-30 16:56:57.917 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 16:56:57.917 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:57.917 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:57.917 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 16:56:57.917 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:57.917 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:57.917 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:56:57.917 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 5(Integer)
2025-06-30 16:56:57.921 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:57.921 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 16:56:57.922 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:57.922 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:57.922 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:57.922 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:56:57.922 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 16:56:57.922 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:57.922 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 16:56:57.923 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 16:56:57.923 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:57.923 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 16:56:58.866 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:56:58.866 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.866 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:56:58.866 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:56:58.866 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 16:56:58.866 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.866 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 16:56:58.866 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 16:56:58.867 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:56:58.868 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:58.869 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.869 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:58.869 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:56:58.870 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 16:56:58.871 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:58.871 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.871 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:58.871 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:56:58.872 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 16:56:58.872 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:58.872 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.872 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:58.872 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:56:58.872 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 16:56:58.872 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:58.872 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:58.872 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.872 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:58.872 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:56:58.873 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 16:56:58.873 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.873 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 16:56:58.873 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 16:56:58.873 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:58.873 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:56:58.873 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.873 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:56:58.873 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 16:56:58.873 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:56:58.874 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:56:58.874 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.874 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:56:58.874 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 16:56:58.875 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:56:58.875 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 16:56:58.876 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 16:56:58.876 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.876 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 16:56:58.876 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 16:56:58.878 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 16:56:58.878 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:58.878 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.878 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:58.878 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 16:56:58.879 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:56:58.879 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:56:58.879 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:56:58.879 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:56:58.879 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 16:56:58.880 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:57:00.369 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:57:00.369 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:00.369 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:57:00.369 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:57:00.371 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:57:00.371 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:57:00.371 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:00.371 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:57:00.372 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:57:00.373 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:57:00.374 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:57:00.374 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:00.374 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:57:00.374 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:57:00.375 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:57:00.375 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 16:57:00.375 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:57:00.376 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:00.376 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:00.376 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 16:57:00.376 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:57:00.376 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:57:00.376 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-30 16:57:00.376 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-30 16:57:00.377 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:57:00.377 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:57:00.377 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 16:57:00.377 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:00.377 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:57:00.377 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:00.377 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:57:00.377 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 16:57:00.377 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 16:57:00.379 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:57:00.379 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 16:57:00.379 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 16:57:00.379 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:00.380 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 16:57:00.380 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 16:57:00.381 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 16:57:04.749 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:57:04.749 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.749 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:57:04.749 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:57:04.751 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:57:04.752 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:57:04.752 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.752 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:57:04.752 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:57:04.753 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:57:04.754 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:57:04.754 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.754 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:57:04.754 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:57:04.756 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:57:04.756 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:57:04.756 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.756 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:57:04.756 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 16:57:04.756 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.756 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 16:57:04.756 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:57:04.756 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 16:57:04.758 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 16:57:04.758 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:57:04.758 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:57:04.758 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.758 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:57:04.758 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:57:04.758 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.758 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:57:04.758 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:57:04.759 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 16:57:04.760 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 16:57:04.760 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:57:04.761 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 16:57:04.761 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.761 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 16:57:04.763 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 16:57:04.766 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 16:57:04.769 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 16:57:04.769 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.769 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 16:57:04.770 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 16:57:04.771 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 16:57:04.771 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 16:57:04.771 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.771 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 16:57:04.772 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 16:57:04.773 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 16:57:04.774 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:57:04.774 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.774 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:57:04.774 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 16:57:04.775 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:57:04.776 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 16:57:04.776 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:57:04.776 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 16:57:04.776 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 16:57:04.777 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 16:59:47.400 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 16:59:47.400 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:59:47.400 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 16:59:47.403 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 16:59:47.403 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 16:59:47.404 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:59:47.404 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:59:47.404 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:59:47.405 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 16:59:47.405 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 16:59:47.405 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:59:47.405 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 16:59:47.405 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 16:59:47.406 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:59:47.406 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:59:47.406 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:59:47.406 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 16:59:47.407 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:59:47.407 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:59:47.407 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:59:47.407 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:59:47.408 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 16:59:47.408 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 332165464(String)
2025-06-30 16:59:47.408 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 0
2025-06-30 16:59:47.408 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:59:47.409 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 16:59:47.409 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 16:59:47.409 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:59:47.409 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:59:47.409 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 16:59:47.409 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 16:59:47.409 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 16:59:47.409 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 16:59:47.410 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 16:59:47.410 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 16:59:47.410 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 16:59:47.410 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 16:59:47.410 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 16:59:47.410 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 16:59:47.412 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:01:33.256 [Thread-15] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 17:01:33.256 [Thread-15] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 17:01:33.256 [Thread-15] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-06-30 17:01:33.267 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1952084954] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 17:01:33.267 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1952084954] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 17:01:33.267 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1358475596] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 17:01:33.268 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1358475596] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 17:01:33.268 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-nioEventLoop-9-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/sun.nio.ch.WEPoll.wait(Native Method)
 java.base@17.0.8/sun.nio.ch.WEPollSelectorImpl.doSelect(WEPollSelectorImpl.java:111)
 java.base@17.0.8/sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:129)
 java.base@17.0.8/sun.nio.ch.SelectorImpl.select(SelectorImpl.java:146)
 app//io.netty.channel.nio.SelectedSelectionKeySetSelector.select(SelectedSelectionKeySetSelector.java:68)
 app//io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:879)
 app//io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:526)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:01:33.268 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-7-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:01:33.269 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-7-2] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:01:33.269 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-7-3] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:01:33.269 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-7-4] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:01:33.270 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-7-5] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:01:33.270 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-7-6] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:01:33.270 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-7-7] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:01:33.271 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-7-8] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:01:33.271 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-7-9] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:01:33.271 [Thread-15] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 17:01:33.274 [Thread-15] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 17:01:33.394 [Thread-15] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closed
2025-06-30 17:01:33.396 [Thread-15] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closed
2025-06-30 17:01:33.526 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 24392 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 17:01:33.526 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 17:01:33.526 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 17:01:33.913 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 17:01:33.914 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 17:01:33.921 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-06-30 17:01:34.009 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.huang.store.mapper]' package. Please check your configuration.
2025-06-30 17:01:34.124 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 17:01:34.124 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 17:01:34.124 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 17:01:34.124 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 17:01:34.125 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 17:01:34.127 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 17:01:34.128 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 17:01:34.128 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 17:01:34.166 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 17:01:34.166 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 632 ms
2025-06-30 17:01:34.185 [restartedMain] ERROR org.apache.catalina.session.StandardManager - Exception loading sessions from persistent storage
java.lang.ClassNotFoundException: com.huang.store.entity.user.SecurityUser
	at org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader.loadClass(TomcatEmbeddedWebappClassLoader.java:72)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1141)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:467)
	at org.apache.catalina.util.CustomObjectInputStream.resolveClass(CustomObjectInputStream.java:158)
	at java.base/java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:2045)
	at java.base/java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1909)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2235)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:514)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:472)
	at org.apache.catalina.session.StandardSession.doReadObject(StandardSession.java:1530)
	at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:1000)
	at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:210)
	at org.apache.catalina.session.StandardManager.load(StandardManager.java:156)
	at org.apache.catalina.session.StandardManager.startInternal(StandardManager.java:346)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4931)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:794)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:248)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:489)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:481)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:211)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:184)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:585)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2025-06-30 17:01:34.285 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 17:01:34.372 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-7} inited
2025-06-30 17:01:34.418 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-8} inited
2025-06-30 17:01:34.465 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
2025-06-30 17:01:34.466 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-7} closed
2025-06-30 17:01:34.468 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-8} closed
2025-06-30 17:01:34.469 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 17:01:34.476 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-30 17:01:34.506 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 24 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:595)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:475)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:615)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:180)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$a96dfff0.CGLIB$sqlSessionFactory$2(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$a96dfff0$$FastClassBySpringCGLIB$$5457315e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$a96dfff0.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\CartMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:122)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:593)
	... 38 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:76)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:137)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:130)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:120)
	... 40 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Cart'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:120)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 44 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Cart
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:200)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	... 46 common frames omitted
2025-06-30 17:01:37.528 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 17:01:37.563 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 13044 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 17:01:37.565 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 17:01:37.566 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 17:01:37.715 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 17:01:37.715 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 17:01:38.209 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 17:01:38.212 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 17:01:38.237 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-30 17:01:38.439 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$ef29038c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:01:38.452 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:01:38.891 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 17:01:38.892 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 17:01:38.892 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 17:01:38.893 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 17:01:38.897 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 17:01:38.904 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 17:01:38.906 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 17:01:38.907 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 17:01:38.961 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 17:01:38.962 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1246 ms
2025-06-30 17:01:38.965 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 17:01:39.579 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 17:01:39.610 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 17:01:39.905 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 17:01:39.908 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 17:01:40.370 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 17:01:40.493 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@713476bc, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7206760d, org.springframework.security.web.context.SecurityContextPersistenceFilter@4fbb4972, org.springframework.security.web.header.HeaderWriterFilter@bdcae6d, org.springframework.web.filter.CorsFilter@79bc908, org.springframework.security.web.authentication.logout.LogoutFilter@2c591d34, com.huang.store.security.JwtAuthenticationTokenFilter@435ab919, com.huang.store.security.CustomAuthenticationFilter@7841f6d3, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@74448a2e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@55c32192, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7734309e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@119581e4, org.springframework.security.web.session.SessionManagementFilter@ab6e2f, org.springframework.security.web.access.ExceptionTranslationFilter@18acab8d, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@204add9c]
2025-06-30 17:01:40.725 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 17:01:40.741 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 17:01:40.756 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 17:01:40.762 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.638 seconds (JVM running for 3.964)
2025-06-30 17:07:33.285 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 17:07:33.300 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 24036 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 17:07:33.300 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 17:07:33.300 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 17:07:33.412 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 17:07:33.412 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 17:07:33.928 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 17:07:33.929 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 17:07:33.956 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17 ms. Found 0 Redis repository interfaces.
2025-06-30 17:07:34.145 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$8d8e8a63] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:07:34.160 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:07:34.491 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 17:07:34.491 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 17:07:34.491 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 17:07:34.491 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 17:07:34.496 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 17:07:34.501 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 17:07:34.502 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 17:07:34.502 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 17:07:34.548 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 17:07:34.548 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1136 ms
2025-06-30 17:07:34.552 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 17:07:35.039 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 17:07:35.065 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 17:07:35.325 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 17:07:35.325 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 17:07:35.785 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 17:07:35.922 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@50b4788a, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@e74fa10, org.springframework.security.web.context.SecurityContextPersistenceFilter@23bf6d17, org.springframework.security.web.header.HeaderWriterFilter@78d862d4, org.springframework.web.filter.CorsFilter@1debef66, org.springframework.security.web.authentication.logout.LogoutFilter@8ef9a79, com.huang.store.security.JwtAuthenticationTokenFilter@2e80e959, com.huang.store.security.CustomAuthenticationFilter@3a60ccbe, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@47d4af71, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4f0c7830, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@66faee96, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@53a6aa7, org.springframework.security.web.session.SessionManagementFilter@24c26788, org.springframework.security.web.access.ExceptionTranslationFilter@20381c7e, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@61e06ec4]
2025-06-30 17:07:36.222 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 17:07:36.263 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 17:07:36.275 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.354 seconds (JVM running for 3.876)
2025-06-30 17:07:36.311 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-06-30 17:07:36.312 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-06-30 17:08:15.056 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 17:08:15.071 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 15344 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 17:08:15.072 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 17:08:15.073 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 17:08:15.186 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 17:08:15.186 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 17:08:15.588 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 17:08:15.590 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 17:08:15.614 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.
2025-06-30 17:08:15.781 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$1211d8ee] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:08:15.794 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:08:16.155 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 17:08:16.156 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 17:08:16.157 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 17:08:16.157 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 17:08:16.160 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 17:08:16.168 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 17:08:16.170 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 17:08:16.170 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 17:08:16.218 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 17:08:16.218 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1031 ms
2025-06-30 17:08:16.221 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 17:08:16.686 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 17:08:16.710 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 17:08:16.943 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 17:08:16.943 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 17:08:17.298 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 17:08:17.409 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@8e8c5f9, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5dfa3226, org.springframework.security.web.context.SecurityContextPersistenceFilter@143a8cbc, org.springframework.security.web.header.HeaderWriterFilter@7d2652c5, org.springframework.web.filter.CorsFilter@77a11508, org.springframework.security.web.authentication.logout.LogoutFilter@1108ec37, com.huang.store.security.JwtAuthenticationTokenFilter@6671a6c9, com.huang.store.security.CustomAuthenticationFilter@5301dfe8, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@2940f07, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@71bdda44, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5421259d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@220c69a0, org.springframework.security.web.session.SessionManagementFilter@6e85e7be, org.springframework.security.web.access.ExceptionTranslationFilter@3b4aa14d, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6e4ae488]
2025-06-30 17:08:17.628 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 17:08:17.642 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 17:08:17.656 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 17:08:17.663 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 2.908 seconds (JVM running for 3.187)
2025-06-30 17:10:44.965 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 17:10:44.979 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 13648 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 17:10:44.979 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 17:10:44.980 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 17:10:45.087 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 17:10:45.087 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 17:10:45.509 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 17:10:45.511 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 17:10:45.534 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 12 ms. Found 0 Redis repository interfaces.
2025-06-30 17:10:45.712 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$ff816297] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:10:45.726 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:10:46.114 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 17:10:46.114 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 17:10:46.114 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 17:10:46.116 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 17:10:46.119 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 17:10:46.127 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 17:10:46.128 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 17:10:46.129 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 17:10:46.186 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 17:10:46.186 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1099 ms
2025-06-30 17:10:46.190 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 17:10:46.680 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 17:10:46.703 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 17:10:46.979 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 17:10:46.979 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 17:10:47.352 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 17:10:47.491 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@522ce90f, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@61c1cf2f, org.springframework.security.web.context.SecurityContextPersistenceFilter@68c4a838, org.springframework.security.web.header.HeaderWriterFilter@143a8cbc, org.springframework.web.filter.CorsFilter@7bd8d44a, org.springframework.security.web.authentication.logout.LogoutFilter@ea7da61, com.huang.store.security.JwtAuthenticationTokenFilter@5301dfe8, com.huang.store.security.CustomAuthenticationFilter@2cb509ed, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@2e1466f5, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5421259d, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@34391fb, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1a00e86c, org.springframework.security.web.session.SessionManagementFilter@71bdda44, org.springframework.security.web.access.ExceptionTranslationFilter@4483c5, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@79d23c16]
2025-06-30 17:10:47.732 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 17:10:47.747 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 17:10:47.763 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 17:10:47.770 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.11 seconds (JVM running for 3.365)
2025-06-30 17:12:46.329 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 17:12:46.329 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 17:12:46.331 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-30 17:12:57.735 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 17:12:57.735 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 17:12:57.765 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:12:57.768 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 17:12:57.765 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:12:57.769 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 17:12:57.963 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 17:12:57.963 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 17:12:57.991 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 17:12:57.991 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 17:12:58.011 [http-nio-8080-exec-4] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 17:12:58.022 [http-nio-8080-exec-3] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 17:12:58.169 [http-nio-8080-exec-4] WARN  org.apache.catalina.util.SessionIdGeneratorBase - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [113] milliseconds.
2025-06-30 17:12:58.169 [http-nio-8080-exec-3] WARN  org.apache.catalina.util.SessionIdGeneratorBase - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [113] milliseconds.
2025-06-30 17:12:58.174 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:12:58.175 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:12:58.176 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:12:58.182 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:12:58.187 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:12:58.192 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:12:58.192 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:12:58.192 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:12:58.192 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:12:58.192 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:12:58.195 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:12:58.195 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:12:58.199 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:12:58.200 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:12:58.201 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:12:58.205 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:12:58.207 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:12:58.207 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:12:58.209 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:12:58.209 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:12:58.210 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:12:58.212 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:12:58.214 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:12:58.215 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:12:58.216 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:12:58.218 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:12:58.219 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:12:58.221 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:12:58.221 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:12:58.222 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:12:58.222 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:12:58.222 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:12:58.224 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:12:58.224 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:12:58.224 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:12:58.224 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:12:58.226 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:12:58.227 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:12:58.228 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:12:58.229 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:12:58.231 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:12:58.232 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:12:58.232 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:12:58.234 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:12:58.236 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:13:10.309 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:13:10.315 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:10.317 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:13:10.317 [http-nio-8080-exec-6] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 17:13:10.318 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:13:10.333 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:13:10.338 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:10.341 [http-nio-8080-exec-6] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 17:13:10.344 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:10.345 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:10.345 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:13:10.347 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:13:10.348 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:10.349 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:10.351 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:10.351 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:13:10.353 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:13:10.353 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:10.353 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:10.354 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:10.354 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:13:10.356 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:13:10.359 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:10.359 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:10.359 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:10.360 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:13:10.362 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:13:11.637 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:13:11.638 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:11.638 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:13:11.638 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:13:11.641 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:13:11.642 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:13:11.644 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:11.644 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:13:11.648 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:13:11.651 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:13:11.673 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:13:11.673 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:11.674 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:13:11.679 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:13:11.684 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:13:11.688 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:13:11.692 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:11.693 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:13:11.694 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:13:11.696 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:13:11.698 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:13:11.699 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:11.699 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:13:11.701 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:13:11.703 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:13:11.704 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:13:11.705 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:11.705 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:13:11.706 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:13:11.708 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:13:11.708 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:13:11.708 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:11.709 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:13:11.709 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:13:11.712 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:13:14.047 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:13:14.051 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:14.055 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:13:14.055 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:13:14.061 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:13:14.063 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:13:14.066 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:14.069 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:14.070 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:14.070 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:13:14.070 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:14.075 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 5(Integer)
2025-06-30 17:13:14.076 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:13:14.083 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:13:14.084 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:13:14.086 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:13:14.087 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:14.087 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:14.088 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:14.088 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:13:14.089 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:14.093 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002214(String)
2025-06-30 17:13:14.096 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:13:14.097 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 1
2025-06-30 17:13:14.097 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:13:14.098 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:14.101 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:14.101 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:14.100 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:13:14.101 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:13:14.101 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:14.102 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:13:14.103 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 5(Integer)
2025-06-30 17:13:14.103 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:13:14.104 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:14.106 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:13:14.109 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:13:14.107 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:14.115 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:14.115 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:14.115 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:13:14.115 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:13:14.116 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:13:14.117 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:13:14.118 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:13:16.500 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:13:16.513 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:16.514 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:13:16.513 [http-nio-8080-exec-1] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 17:13:16.516 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:13:16.535 [http-nio-8080-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 17:13:16.541 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:13:16.545 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:16.547 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:16.547 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:16.547 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:13:16.550 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:13:16.552 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:16.552 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:16.552 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:16.553 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:13:16.554 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:13:16.555 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:16.556 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:16.556 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:16.560 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:13:16.561 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:13:16.562 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:16.562 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:16.563 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:16.565 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:13:16.567 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:13:17.701 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:13:17.702 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:17.703 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:13:17.706 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:13:17.708 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:13:17.709 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:13:17.715 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:17.715 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:13:17.717 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:13:17.719 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:13:17.721 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:13:17.722 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:17.722 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:13:17.724 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:13:17.727 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:13:17.728 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:13:17.728 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:17.728 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:13:17.728 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:13:17.730 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:13:17.731 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:13:17.732 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:17.732 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:13:17.734 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:13:17.736 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:13:17.736 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:13:17.737 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:17.738 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:13:17.739 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:13:17.743 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:13:17.744 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:13:17.744 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:17.745 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:13:17.747 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:13:17.749 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:13:19.113 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:13:19.114 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:19.115 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:13:19.117 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:13:19.118 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:13:19.122 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:13:19.124 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:19.125 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:13:19.126 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:19.126 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:19.128 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:19.130 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:13:19.126 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:13:19.133 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:13:19.133 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:13:19.137 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:19.138 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:19.138 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:13:19.138 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:19.138 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:19.139 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:13:19.139 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:13:19.139 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:13:19.141 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:13:19.142 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:13:19.144 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:19.145 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:13:19.146 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:19.146 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:13:19.146 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:19.146 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:19.146 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:13:19.147 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:13:19.150 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:13:19.150 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:13:19.152 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:13:19.152 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:13:19.152 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:19.152 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:13:19.152 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:13:19.153 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:13:19.153 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:13:19.153 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:13:19.155 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:13:19.155 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:17:23.752 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-06-30 17:17:23.754 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-06-30 17:17:34.445 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 17:17:34.459 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 3932 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 17:17:34.459 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 17:17:34.459 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 17:17:34.560 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 17:17:34.560 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 17:17:34.960 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 17:17:34.961 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 17:17:34.981 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-30 17:17:35.141 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$278026a1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:17:35.152 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:17:35.453 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 17:17:35.458 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 17:17:35.458 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 17:17:35.459 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 17:17:35.461 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 17:17:35.469 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 17:17:35.470 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 17:17:35.470 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 17:17:35.512 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 17:17:35.512 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 952 ms
2025-06-30 17:17:35.515 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 17:17:35.954 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 17:17:35.977 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 17:17:36.240 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 17:17:36.240 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 17:17:36.608 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 17:17:36.710 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4bdf8809, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@74cc1fe2, org.springframework.security.web.context.SecurityContextPersistenceFilter@66faee96, org.springframework.security.web.header.HeaderWriterFilter@4f0c7830, org.springframework.web.filter.CorsFilter@c90af6e, org.springframework.security.web.authentication.logout.LogoutFilter@4c9a8b3a, com.huang.store.security.JwtAuthenticationTokenFilter@291639f6, com.huang.store.security.CustomAuthenticationFilter@87c2545, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@62763de5, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4a98c10c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@68e44f99, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@24ec4c0a, org.springframework.security.web.session.SessionManagementFilter@5f697c01, org.springframework.security.web.access.ExceptionTranslationFilter@23bf6d17, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@2b11e31b]
2025-06-30 17:17:36.953 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 17:17:36.967 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 17:17:36.979 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 17:17:36.986 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 2.814 seconds (JVM running for 3.285)
2025-06-30 17:17:42.366 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 17:17:42.366 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 17:17:42.367 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-30 17:18:10.877 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 17:18:10.890 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:10.892 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 17:18:10.989 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 17:18:11.005 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 17:18:11.014 [http-nio-8080-exec-3] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 17:18:11.094 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 17:18:11.094 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:11.094 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 17:18:11.095 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 17:18:11.096 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 17:18:11.096 [http-nio-8080-exec-3] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 17:18:11.164 [http-nio-8080-exec-3] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=56464ff@456.com, password=$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy, enabled=true, roles=[ROLE_USER]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=A67F80F7B1F0AC22176DBA6D6314DBAE], Granted Authorities=[ROLE_USER]]
2025-06-30 17:18:11.189 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 17:18:11.189 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:11.189 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 17:18:11.190 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 17:18:11.192 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 17:18:12.296 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:18:12.296 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.296 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:18:12.298 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:18:12.301 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:18:12.301 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:12.301 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.302 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:12.302 [http-nio-8080-exec-8] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:18:12.302 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:18:12.302 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.302 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:18:12.302 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:18:12.302 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.302 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:18:12.302 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:18:12.303 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:18:12.304 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:12.304 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.304 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:12.305 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:18:12.307 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:18:12.307 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.307 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:18:12.308 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:18:12.307 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:18:12.308 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.308 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.308 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:18:12.308 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:18:12.308 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:18:12.310 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:18:12.312 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:18:12.312 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:18:12.314 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:18:12.314 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.314 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:18:12.316 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:18:12.316 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:12.316 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.316 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:12.318 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:18:12.322 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:18:12.323 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:18:12.324 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:18:12.324 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.324 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:18:12.324 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:18:12.325 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:18:12.325 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:18:12.325 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:18:12.326 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.326 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:18:12.326 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:18:12.326 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:18:12.326 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.326 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:18:12.326 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:18:12.328 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:18:12.328 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:18:12.329 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:18:12.329 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:12.329 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.329 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:12.329 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:18:12.330 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:18:12.330 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:18:12.331 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:18:12.331 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:18:12.331 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.331 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:18:12.331 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:18:12.334 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:18:12.334 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:18:12.336 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:18:12.339 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:18:12.340 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:18:12.340 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.340 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:18:12.341 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:18:12.343 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:18:12.343 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:18:12.343 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.343 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:18:12.343 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:18:12.344 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:18:12.344 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:18:12.344 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.344 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:18:12.344 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:18:12.346 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:18:12.346 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:18:12.346 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:12.346 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:18:12.346 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:18:12.347 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:18:23.471 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:18:23.471 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:23.471 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:18:23.476 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:18:23.484 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:18:23.484 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:23.485 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:23.485 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:23.485 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:18:23.489 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:18:23.490 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:23.491 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:23.491 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:23.491 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:18:23.495 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:18:23.496 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:23.496 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:23.496 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:23.496 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:18:23.499 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:18:23.499 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:23.499 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:23.500 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:23.500 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:18:23.503 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:18:24.077 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:18:24.077 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:24.077 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:18:24.077 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:18:24.080 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:18:24.081 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:18:24.081 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:24.081 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:18:24.082 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:18:24.083 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:18:24.083 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:18:24.083 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:24.083 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:18:24.084 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:18:24.086 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:18:24.086 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:18:24.087 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:24.087 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:18:24.087 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:18:24.087 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:18:26.082 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:18:26.082 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:26.082 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:18:26.082 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:18:26.084 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:18:26.084 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:26.084 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:26.084 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:26.085 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:18:26.087 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:18:26.087 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:26.087 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:26.088 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:26.088 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:18:26.090 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:18:26.090 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:26.089 [http-nio-8080-exec-8] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 17:18:26.090 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:26.091 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:26.091 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:18:26.093 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:18:26.093 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:18:26.093 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:18:26.093 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:18:26.093 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:18:26.094 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:18:26.097 [http-nio-8080-exec-8] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 17:25:57.129 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:25:57.129 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:25:57.129 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:25:57.135 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:25:57.138 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:25:57.139 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:25:57.139 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:25:57.139 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:25:57.142 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:25:57.144 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:25:57.172 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:25:57.172 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:25:57.172 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:25:57.175 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:25:57.179 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:25:57.179 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:25:57.179 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:25:57.179 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:25:57.180 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:25:57.181 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:25:57.183 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:25:57.183 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:25:57.183 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:25:57.184 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:25:57.186 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:25:57.187 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:25:57.187 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:25:57.187 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:25:57.187 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:25:57.188 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:25:57.189 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:25:57.189 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:25:57.189 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:25:57.189 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:25:57.190 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:01.275 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:01.275 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:01.275 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:01.275 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:01.277 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:01.278 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:01.278 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:01.278 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:01.278 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:01.281 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:01.282 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:01.283 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:01.283 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:01.283 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:26:01.283 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:01.283 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:26:01.283 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:01.286 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:01.287 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:01.287 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:01.287 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:01.288 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:01.288 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:26:01.290 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:01.290 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:26:01.291 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:01.291 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:01.291 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:26:01.291 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:01.291 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:01.291 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:26:01.292 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:01.292 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:26:01.294 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:26:01.294 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:01.294 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:26:01.294 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:01.294 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:26:01.295 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:26:01.297 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:26:01.297 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:26:01.298 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:01.298 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:26:01.298 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:26:01.301 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:26:02.767 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:02.768 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.768 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:02.769 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:02.772 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:02.772 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:02.772 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.772 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:02.773 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:02.775 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:02.776 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:02.776 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.776 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:02.776 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:02.778 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:02.778 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:02.778 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.778 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:02.779 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:02.780 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:26:02.780 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.780 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:26:02.780 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:26:02.780 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:02.780 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:02.780 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.780 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:02.780 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:02.781 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:26:02.781 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:02.781 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.781 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:02.781 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:02.781 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:02.783 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:02.785 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:26:02.785 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.785 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:26:02.785 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:26:02.787 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:26:02.787 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:02.787 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.787 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:02.787 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:02.789 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:02.789 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:26:02.789 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.789 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:26:02.790 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:26:02.791 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:26:02.792 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:02.792 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.792 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:02.792 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:26:02.793 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:02.794 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:02.794 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:02.794 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:02.794 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:26:02.796 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:16.310 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:16.310 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:16.310 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:16.310 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:16.312 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:26:16.312 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:16.312 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:26:16.312 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:26:16.313 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:16.313 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:16.313 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:16.313 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:16.314 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:16.314 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:26:16.315 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:26:16.315 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:16.315 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:26:16.315 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:26:16.316 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:16.316 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:16.316 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:16.316 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:16.317 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:16.319 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:26:16.319 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:16.320 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:16.320 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:26:16.320 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:16.320 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:16.320 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:26:16.320 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:16.320 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:26:16.320 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:16.322 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:26:16.322 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:16.324 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:26:16.324 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:16.324 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:16.324 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:16.324 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:26:16.324 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:16.324 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:16.324 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:26:16.325 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:26:16.325 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:19.730 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:19.730 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.730 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:19.730 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:19.730 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:26:19.730 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.730 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:26:19.730 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:26:19.732 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:26:19.732 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:19.732 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:19.732 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:19.732 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.732 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.732 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:19.732 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:19.732 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:19.733 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:19.734 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:19.734 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:19.734 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:19.735 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.735 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:19.735 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:26:19.735 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:19.735 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.735 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:26:19.737 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:26:19.738 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:19.738 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:19.738 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.738 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:19.738 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:19.740 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:19.740 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:19.740 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:26:19.740 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.740 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:19.741 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:19.741 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:19.741 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.741 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:19.741 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:19.742 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:19.742 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:19.743 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:26:19.743 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.743 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:26:19.744 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:26:19.745 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:26:19.746 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:19.746 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.746 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:19.746 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:26:19.747 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:19.747 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:19.747 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:19.747 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:19.747 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:26:19.749 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:20.844 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:20.844 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:20.844 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:20.844 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:20.848 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:20.849 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:20.850 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:20.850 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:20.850 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:20.851 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:26:20.851 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:20.851 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:26:20.851 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 5(Integer)
2025-06-30 17:26:20.852 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:20.853 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:20.854 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:20.854 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:20.854 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:20.855 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:26:20.855 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:26:20.855 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:20.855 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:26:20.856 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002214(String)
2025-06-30 17:26:20.856 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:20.857 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:20.857 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:20.857 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:20.857 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:20.857 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 1
2025-06-30 17:26:20.858 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:26:20.858 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:20.858 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:26:20.858 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 5(Integer)
2025-06-30 17:26:20.859 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:20.860 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:20.860 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:26:20.860 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:20.861 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:20.861 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:20.861 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:26:20.861 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:20.861 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:26:20.861 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:26:20.863 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:26:20.863 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:24.404 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:24.404 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.404 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:24.404 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:24.405 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:26:24.405 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.406 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:26:24.406 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:26:24.406 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:24.407 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:24.407 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.407 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:24.407 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:24.407 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:26:24.407 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:24.407 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.407 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:24.408 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:24.408 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:24.409 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:24.409 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.409 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:24.409 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:24.410 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:24.410 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:24.410 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:24.410 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:26:24.410 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.410 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.410 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:26:24.410 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:24.411 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:24.411 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:26:24.412 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:24.413 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:24.413 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.413 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:24.413 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:24.415 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:24.418 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:26:24.419 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:24.419 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.419 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:24.419 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:24.421 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:24.421 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:26:24.421 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.421 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:26:24.422 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:26:24.423 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:26:24.424 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:24.424 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.424 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:24.424 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:26:24.425 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:24.425 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:24.425 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:24.426 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:24.426 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:26:24.427 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:27.021 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:27.021 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:27.021 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:27.022 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:27.023 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:27.024 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:27.024 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:27.024 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:27.024 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:27.025 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:26:27.025 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:27.025 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:26:27.025 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:27.025 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:26:27.026 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:27.026 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:27.026 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:27.026 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:27.028 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:26:27.029 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:27.029 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:26:27.030 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:27.030 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:26:27.030 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:26:27.030 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:27.030 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:27.030 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:27.030 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:27.031 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:26:27.032 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:26:27.032 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:27.032 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:26:27.032 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:26:27.032 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:27.033 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:27.033 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:27.033 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:27.033 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:27.034 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:26:27.036 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:26:27.036 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:27.036 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:26:27.036 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:26:27.037 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:27.038 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:26:33.188 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:33.189 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.189 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:33.189 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:26:33.189 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.189 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:26:33.189 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:33.189 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:26:33.192 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:26:33.192 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:33.193 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:33.193 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:33.193 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.193 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:33.194 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:33.193 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.195 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:33.195 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:33.195 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:33.196 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:33.196 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:26:33.196 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:33.196 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.196 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.196 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:33.196 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:26:33.196 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:33.196 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:26:33.198 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:33.198 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:26:33.198 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:33.198 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.198 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:33.198 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:33.198 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:33.198 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.198 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:33.198 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:33.199 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:33.199 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:33.199 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:33.199 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.199 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:33.199 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:33.199 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:26:33.199 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.199 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:26:33.200 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:26:33.200 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:33.202 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:26:33.202 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:33.202 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.202 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:33.202 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:26:33.203 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:33.204 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:33.204 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:33.204 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:33.204 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:26:33.205 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:34.950 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:34.951 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:34.951 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:34.952 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:34.954 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:34.955 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:26:34.955 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:34.955 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:34.955 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:34.956 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:34.956 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:34.956 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:26:34.957 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:26:34.963 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:34.963 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:26:34.964 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:26:34.964 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:34.964 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:26:34.966 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:26:34.967 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:34.967 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:34.967 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:34.967 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:34.968 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:26:34.969 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:26:34.969 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:34.969 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:26:34.969 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:34.969 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:26:34.969 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:34.969 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:34.969 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:34.969 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:34.970 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:26:34.971 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:34.971 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:34.971 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:26:34.971 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:34.971 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:26:34.972 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:26:34.971 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:34.973 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:34.974 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:34.974 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:26:34.975 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:36.349 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:36.350 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.350 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:36.350 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:36.350 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:26:36.350 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.350 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:26:36.350 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:26:36.352 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:26:36.352 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:36.352 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:36.352 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:36.352 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.352 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.352 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:36.352 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:36.352 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:36.352 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:36.353 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:36.353 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:36.353 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:36.353 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.353 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:36.354 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:36.354 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:26:36.354 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.354 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:26:36.354 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:26:36.355 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:36.356 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:36.356 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.357 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:26:36.357 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:36.357 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:36.357 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:36.357 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.357 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:36.357 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:36.358 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:36.359 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:36.359 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:36.359 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.359 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:36.360 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:36.360 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:26:36.360 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.360 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:26:36.360 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:26:36.364 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:36.366 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:26:36.367 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:36.367 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.367 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:36.368 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:26:36.369 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:36.370 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:36.370 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:36.370 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:36.370 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:26:36.372 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:37.647 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:37.647 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:37.647 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:37.648 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:37.649 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:37.649 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:26:37.649 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:37.649 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:26:37.649 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:37.649 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:26:37.649 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:37.649 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:37.650 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:37.651 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:37.651 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:26:37.651 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:37.651 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:26:37.651 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:37.651 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:37.651 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:26:37.651 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:37.651 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:37.651 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:26:37.653 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:37.653 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:26:37.653 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:37.653 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:37.653 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:26:37.653 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:37.653 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:37.653 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:26:37.654 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:26:37.654 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:37.655 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:26:37.655 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:37.655 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:26:37.655 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:37.655 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:37.655 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:37.655 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:26:37.655 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:37.656 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:26:37.656 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:37.657 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:26:37.657 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:38.954 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:26:38.954 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.954 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:26:38.954 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:26:38.954 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:26:38.955 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.955 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:26:38.955 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:26:38.956 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:26:38.957 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:38.957 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.957 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:38.957 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:26:38.957 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:26:38.959 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:38.959 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.959 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:38.959 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:26:38.959 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:38.960 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:38.960 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.960 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:38.960 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:26:38.960 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:38.962 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:38.962 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:26:38.962 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.962 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:26:38.962 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:38.962 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.962 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:38.962 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:26:38.963 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:26:38.964 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:38.965 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:26:38.965 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.965 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:26:38.965 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:26:38.966 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:26:38.966 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:26:38.966 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.966 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:26:38.966 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:26:38.967 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:26:38.968 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:26:38.969 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:26:38.970 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.970 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:26:38.970 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:26:38.974 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:26:38.974 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:38.974 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.974 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:38.975 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:26:38.976 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:26:38.977 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:26:38.977 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:26:38.977 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:26:38.977 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:26:38.979 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:27:59.767 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:27:59.767 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:27:59.767 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:27:59.768 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:27:59.768 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:27:59.768 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:27:59.771 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:27:59.772 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:27:59.772 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:27:59.772 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:27:59.772 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:27:59.772 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:27:59.772 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:27:59.773 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:27:59.773 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:27:59.773 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:27:59.773 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:27:59.774 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:27:59.773 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:27:59.774 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:27:59.774 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:27:59.774 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:27:59.774 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:27:59.776 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:27:59.776 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:27:59.777 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:27:59.777 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:27:59.777 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:27:59.777 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:27:59.777 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:27:59.777 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:27:59.777 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:27:59.777 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:27:59.779 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:27:59.779 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:27:59.780 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:27:59.780 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:27:59.780 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:27:59.780 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:27:59.780 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:27:59.780 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:27:59.780 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:27:59.780 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:27:59.781 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:27:59.781 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:28:00.831 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:28:00.832 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.832 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:28:00.832 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:28:00.833 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:28:00.833 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:00.833 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.833 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:00.834 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:28:00.835 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:28:00.835 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:28:00.835 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:00.835 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.835 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.835 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:00.835 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:28:00.835 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:28:00.836 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:28:00.837 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:28:00.837 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:28:00.837 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:00.837 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:28:00.837 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.837 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.837 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:28:00.837 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:00.838 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:28:00.838 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:28:00.839 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:28:00.839 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:28:00.839 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:00.839 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.839 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:00.840 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:28:00.840 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:28:00.840 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.840 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:28:00.840 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:28:00.841 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:28:00.842 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:28:00.842 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:28:00.842 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.842 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:28:00.843 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:28:00.844 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:28:00.845 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:28:00.845 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.845 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:28:00.846 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:28:00.847 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:28:00.847 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:00.847 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.847 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:00.848 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:28:00.849 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:00.849 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:00.849 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:00.849 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:00.849 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:28:00.850 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:02.347 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:28:02.347 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.347 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:28:02.348 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-30 17:28:02.349 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:28:02.349 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:28:02.349 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.349 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:28:02.350 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:28:02.351 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:28:02.351 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:28:02.351 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.351 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:28:02.353 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-30 17:28:02.354 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-30 17:28:02.355 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:28:02.355 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.355 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:28:02.355 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:28:02.355 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:28:02.356 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 17:28:02.356 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.356 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:28:02.357 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-30 17:28:02.358 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:28:02.359 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:02.359 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.359 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:02.359 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:28:02.360 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:02.360 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:02.360 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.360 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:02.361 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:28:02.361 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:02.362 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:02.362 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.362 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:02.362 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:28:02.363 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:02.844 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:28:02.844 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.844 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:28:02.844 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:28:02.846 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:28:02.847 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:28:02.847 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.847 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:28:02.847 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:28:02.849 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:28:02.850 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:28:02.850 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.850 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:28:02.851 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:28:02.854 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:28:02.854 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:28:02.854 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.854 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:28:02.855 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:28:02.856 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:28:02.857 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:28:02.857 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.857 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:28:02.857 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:28:02.859 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:28:02.860 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:02.860 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.860 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:02.860 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:28:02.862 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:02.862 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:02.862 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:02.862 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:02.863 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:28:02.864 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:06.834 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:28:06.834 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:06.834 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:28:06.834 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-30 17:28:06.835 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:28:06.836 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:28:06.836 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:06.836 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:28:06.836 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:28:06.837 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:28:06.839 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:28:06.839 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:06.839 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:28:06.840 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-30 17:28:06.842 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-30 17:28:06.842 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:28:06.842 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:06.842 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:28:06.843 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:28:06.843 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:28:06.845 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 17:28:06.845 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:06.845 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:28:06.845 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-30 17:28:06.847 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:28:06.847 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:06.847 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:06.847 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:06.848 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:28:06.848 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:06.848 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:06.848 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:06.848 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:06.849 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:28:06.849 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:06.849 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:06.849 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:06.849 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:06.850 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:28:06.850 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:07.571 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:28:07.572 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:07.572 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:28:07.572 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:28:07.573 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:28:07.573 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:28:07.573 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:07.573 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:28:07.574 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:28:07.576 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:28:07.577 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:28:07.577 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:07.577 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:28:07.577 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:28:07.579 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:28:07.579 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:28:07.579 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:07.579 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:28:07.579 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:28:07.581 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:28:07.582 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:28:07.583 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:07.583 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:28:07.583 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:28:07.584 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:28:07.585 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:07.585 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:07.585 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:07.585 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:28:07.585 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:07.586 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:07.586 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:07.586 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:07.586 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:28:07.590 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:08.161 [http-nio-8080-exec-10] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 17:28:08.164 [http-nio-8080-exec-10] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 17:28:09.384 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:28:09.384 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.384 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:28:09.384 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:28:09.387 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:28:09.388 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:28:09.388 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.388 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:28:09.388 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:28:09.390 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:28:09.395 [http-nio-8080-exec-9] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:28:09.395 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:28:09.395 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:28:09.395 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.395 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.395 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:28:09.395 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:28:09.396 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:28:09.396 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:28:09.396 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.396 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:28:09.396 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:28:09.399 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:28:09.400 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:28:09.400 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.400 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:28:09.401 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:28:09.401 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:28:09.401 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.401 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:28:09.395 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:28:09.402 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:28:09.402 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:28:09.403 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:09.403 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.403 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:09.403 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:28:09.404 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:28:09.404 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:28:09.404 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.404 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:28:09.405 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:28:09.404 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:09.405 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:09.405 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.405 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:09.406 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:28:09.406 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:28:09.406 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:28:09.407 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:09.408 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:09.408 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.408 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:09.408 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:28:09.409 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:28:09.409 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:09.409 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:28:09.409 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.409 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:28:09.410 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:28:09.410 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:09.410 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.410 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:09.410 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:28:09.411 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:28:09.411 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:09.411 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:28:09.411 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.411 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:28:09.412 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:28:09.412 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:28:09.412 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.412 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:28:09.413 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:28:09.414 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:28:09.415 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:28:09.416 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:09.416 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.416 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:09.416 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:28:09.417 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:28:09.417 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:09.418 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.418 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:09.418 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:28:09.419 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:28:09.419 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:09.419 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.419 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:09.419 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:28:09.421 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:28:09.421 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:09.421 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:09.421 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:09.422 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:28:09.423 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:28:11.385 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:28:11.386 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:11.387 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:28:11.388 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:28:11.389 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:28:11.389 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:28:11.389 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:11.389 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:28:11.390 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:11.390 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:11.390 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:11.390 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:28:11.390 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:28:11.391 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:28:11.391 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:28:11.392 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:28:11.392 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:11.392 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:11.392 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:11.392 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:28:11.392 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:11.392 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:28:11.393 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:28:11.395 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:28:11.396 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:28:11.396 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:28:11.396 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:11.396 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:28:11.396 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:28:11.396 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:11.396 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:11.396 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:11.396 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:28:11.397 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:28:11.397 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:28:11.398 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:28:11.398 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:28:11.398 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:11.398 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:28:11.398 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:28:11.398 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:28:11.398 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:28:11.398 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:28:11.399 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:28:11.399 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:29:14.950 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:29:14.951 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.951 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:29:14.953 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:29:14.954 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:29:14.954 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:29:14.954 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.954 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:29:14.954 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.954 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:29:14.954 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:29:14.955 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:29:14.955 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.955 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:29:14.955 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:29:14.956 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:29:14.957 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:29:14.958 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:29:14.959 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:29:14.959 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.959 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:29:14.959 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:29:14.959 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:29:14.961 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:29:14.962 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:29:14.963 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:29:14.963 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.963 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:29:14.963 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:29:14.963 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:29:14.964 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.954 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:29:14.964 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:29:14.964 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:29:14.964 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:29:14.965 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:29:14.965 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.965 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:29:14.965 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:29:14.965 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:29:14.965 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:29:14.965 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.965 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:29:14.965 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:29:14.966 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.966 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:29:14.966 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:29:14.966 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:29:14.966 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:29:14.966 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:29:14.966 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:29:14.966 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.966 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:29:14.966 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.967 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:29:14.967 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:29:14.967 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:29:14.967 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:29:14.967 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:29:14.967 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:29:14.968 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:29:14.968 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.968 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:29:14.968 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:29:14.968 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:29:14.968 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:29:14.969 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.969 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.969 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:29:14.969 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:29:14.969 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:29:14.969 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:29:14.970 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:29:14.970 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:29:14.970 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:29:14.970 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:29:14.970 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:29:14.970 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.970 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.970 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:29:14.970 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:29:14.970 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:29:14.970 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:29:14.971 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:29:14.971 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:29:14.971 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:29:14.971 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.971 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:29:14.972 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:29:14.973 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:29:14.973 [http-nio-8080-exec-2] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:29:14.973 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:29:14.973 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:29:14.973 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:29:14.973 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:29:14.974 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:31:51.597 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:31:51.597 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:51.597 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:31:51.602 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:31:51.604 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:31:51.604 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:51.604 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:51.604 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:51.605 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:31:51.605 [http-nio-8080-exec-7] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 17:31:51.607 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:31:51.607 [http-nio-8080-exec-7] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 17:31:51.607 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:51.607 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:51.607 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:51.608 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:31:51.609 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:31:51.609 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:51.609 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:51.609 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:51.609 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:31:51.611 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:31:51.611 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:51.611 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:51.611 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:51.611 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:31:51.613 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:31:52.844 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:31:52.844 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:52.844 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:31:52.844 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:31:52.845 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:31:52.846 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:31:52.846 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:52.846 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:31:52.846 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:31:52.847 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:31:52.848 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:31:52.848 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:52.848 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:31:52.848 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:31:52.851 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:31:52.852 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:31:52.852 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:52.852 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:31:52.852 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:31:52.853 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:31:52.854 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:31:52.854 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:52.854 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:31:52.854 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:31:52.855 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:31:52.856 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:52.856 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:52.856 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:52.856 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:31:52.857 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:52.857 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:52.857 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:52.857 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:52.857 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:31:52.859 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:55.459 [http-nio-8080-exec-10] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 17:31:55.461 [http-nio-8080-exec-10] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 17:31:56.256 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:31:56.256 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.256 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:31:56.257 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:31:56.257 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:31:56.257 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.257 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:31:56.258 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:31:56.259 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:31:56.259 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.259 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:31:56.259 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:31:56.260 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:31:56.264 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:31:56.267 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:31:56.267 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:31:56.267 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.268 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:31:56.268 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:31:56.268 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.268 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:31:56.268 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:31:56.268 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:31:56.269 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:31:56.269 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:31:56.269 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:56.269 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.269 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:56.269 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:31:56.269 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:31:56.269 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.269 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:31:56.270 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:31:56.270 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:31:56.270 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:56.270 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:56.271 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.271 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:56.271 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:31:56.272 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:56.273 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:56.273 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.273 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:56.273 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:31:56.275 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:56.276 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:56.276 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.276 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:56.276 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:31:56.277 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:56.278 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:56.278 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.278 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:56.279 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:31:56.279 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:31:56.279 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.279 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:31:56.279 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:31:56.279 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:56.280 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:31:56.282 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:31:56.282 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.282 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:31:56.282 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:31:56.284 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:31:56.287 [http-nio-8080-exec-8] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:31:56.287 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:31:56.287 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.287 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:31:56.287 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:31:56.288 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:31:56.289 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:31:56.289 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.289 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:31:56.289 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:31:56.290 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:31:56.290 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:56.290 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.290 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:56.291 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:31:56.292 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:31:56.292 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:56.292 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.292 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:56.292 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:31:56.294 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:31:56.294 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:56.294 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.294 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:56.295 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:31:56.296 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:31:56.297 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:56.297 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:56.297 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:56.297 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:31:56.298 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:31:57.746 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:31:57.747 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:57.747 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:31:57.747 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:31:57.748 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:31:57.748 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:31:57.748 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:57.749 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:31:57.749 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:57.749 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:57.749 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:57.749 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:31:57.749 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:31:57.750 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:31:57.751 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:31:57.751 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:57.751 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:57.751 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:57.751 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:31:57.752 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:57.752 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:31:57.752 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:31:57.752 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:31:57.753 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:31:57.753 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:31:57.754 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:57.754 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:57.754 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:57.754 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:31:57.754 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:31:57.754 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:57.754 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:31:57.754 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:31:57.755 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:31:57.755 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:31:57.755 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:31:57.755 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:57.755 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:57.755 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:57.755 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:31:57.755 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:57.755 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:31:57.755 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:31:57.757 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:31:57.761 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:31:59.539 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:31:59.540 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.540 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:31:59.540 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:31:59.540 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:31:59.540 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.540 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:31:59.541 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:31:59.542 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:31:59.542 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:31:59.542 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.542 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:31:59.542 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:31:59.542 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:31:59.543 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:31:59.543 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.543 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:31:59.543 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:31:59.544 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:31:59.539 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:31:59.545 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.545 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:31:59.545 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:31:59.547 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:31:59.548 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:31:59.548 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.548 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:31:59.548 [http-nio-8080-exec-8] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:31:59.548 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:31:59.548 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:31:59.545 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:31:59.542 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:31:59.549 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.549 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:31:59.549 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:59.549 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.549 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:59.549 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:31:59.550 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:31:59.551 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:59.552 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:59.552 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.552 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:59.552 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:31:59.553 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:31:59.555 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:31:59.553 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:59.548 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.556 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:31:59.556 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:31:59.556 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.556 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:31:59.556 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:31:59.556 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:31:59.555 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:31:59.556 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:59.556 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.556 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:59.557 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:31:59.557 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:31:59.557 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:31:59.558 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:59.559 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:59.560 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.560 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:59.560 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:31:59.556 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.561 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:31:59.561 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:59.562 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:31:59.562 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:31:59.562 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.562 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:31:59.562 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:31:59.562 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:31:59.562 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:31:59.563 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:59.563 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.563 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:59.563 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:31:59.565 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:31:59.566 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:59.566 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.566 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:59.566 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:31:59.567 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:31:59.568 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:59.568 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.568 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:59.568 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:31:59.569 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:31:59.569 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:31:59.569 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:31:59.569 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:31:59.570 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:31:59.571 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:38:17.101 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:38:17.101 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:17.102 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:38:17.103 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:38:17.103 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:17.103 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:38:17.105 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:38:17.107 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:38:17.107 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:38:17.107 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:17.107 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:17.107 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:17.107 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:38:17.108 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:38:17.108 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:38:17.108 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:38:17.108 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:17.108 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:38:17.109 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:17.109 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:17.109 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:17.109 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:38:17.109 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:38:17.110 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:38:17.110 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:38:17.110 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:17.110 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:38:17.110 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:17.110 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:17.110 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:17.110 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:38:17.110 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:38:17.111 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:38:17.112 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:38:17.113 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:17.113 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:17.113 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:17.114 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:38:17.114 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:38:17.115 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:38:17.115 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:17.115 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:38:17.115 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:38:17.116 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:38:17.116 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:38:18.509 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:38:18.510 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.510 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:38:18.510 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.510 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:38:18.510 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:38:18.512 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:38:18.512 [http-nio-8080-exec-2] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:38:18.512 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:38:18.512 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:38:18.512 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:38:18.512 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.512 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:38:18.512 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.512 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:38:18.512 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:38:18.512 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:38:18.513 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:38:18.513 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.513 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:38:18.510 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:38:18.513 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:38:18.513 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:38:18.512 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.513 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:38:18.515 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:38:18.516 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:38:18.517 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:38:18.517 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:38:18.517 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.517 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:38:18.517 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:38:18.517 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.517 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:38:18.518 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:38:18.518 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:38:18.518 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:38:18.518 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:38:18.518 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.518 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:38:18.519 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:38:18.519 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:38:18.519 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:38:18.520 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:38:18.520 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:38:18.520 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.520 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:38:18.520 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:18.520 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.520 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:18.520 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:38:18.520 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:38:18.521 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:38:18.522 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:38:18.522 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:38:18.522 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:18.523 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.523 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:18.523 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:38:18.523 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:38:18.523 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:18.523 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.523 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:18.523 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:38:18.524 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:18.524 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:38:18.524 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:18.524 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.524 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:18.524 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:38:18.524 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:18.524 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.524 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:18.524 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:38:18.525 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:18.525 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:38:18.526 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:18.526 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:18.526 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.526 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.526 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:18.526 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:18.526 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:38:18.526 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:38:18.526 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:18.526 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:38:18.526 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:18.526 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.526 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:18.526 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:38:18.528 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:18.529 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:18.529 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:18.529 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:18.529 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:38:18.530 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:20.114 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:38:20.114 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:20.114 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:38:20.115 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:38:20.116 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:38:20.116 [http-nio-8080-exec-5] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 17:38:20.117 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:20.117 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:20.117 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:20.118 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:38:20.120 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:38:20.120 [http-nio-8080-exec-5] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 17:38:20.120 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:20.120 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:20.120 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:20.121 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:38:20.122 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:38:20.122 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:20.123 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:20.123 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:20.123 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:38:20.124 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:38:20.124 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:38:20.124 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:20.124 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:38:20.125 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:38:20.126 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:38:21.235 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:38:21.235 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:21.235 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:38:21.236 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:38:21.239 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:38:21.239 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:38:21.240 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:21.240 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:38:21.240 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:38:21.241 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:38:21.242 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:38:21.242 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:21.242 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:38:21.243 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:38:21.246 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:38:21.246 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:38:21.246 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:21.246 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:38:21.247 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:38:21.248 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:38:21.249 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:38:21.249 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:21.249 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:38:21.250 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:38:21.251 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:38:21.252 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:21.252 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:21.252 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:21.253 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:38:21.253 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:21.253 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:21.253 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:21.253 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:21.253 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:38:21.255 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:25.706 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:38:25.706 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:25.706 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:38:25.706 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-30 17:38:25.707 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:38:25.708 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:38:25.708 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:25.708 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:38:25.708 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:38:25.710 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:38:25.711 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:38:25.711 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:25.711 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:38:25.711 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-30 17:38:25.713 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-30 17:38:25.713 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:38:25.713 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:25.714 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:38:25.714 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:38:25.716 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:38:25.717 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 17:38:25.717 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:25.717 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:38:25.718 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-30 17:38:25.719 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:38:25.720 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:25.720 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:25.720 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:25.720 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:38:25.721 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:25.722 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:25.722 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:25.722 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:25.723 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:38:25.725 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:25.725 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:25.725 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:25.725 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:25.726 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:38:25.727 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:26.601 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:38:26.601 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:26.601 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:38:26.602 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:38:26.602 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:38:26.603 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:38:26.603 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:26.603 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:38:26.603 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:38:26.604 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:38:26.604 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:38:26.605 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:26.605 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:38:26.605 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:38:26.607 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:38:26.608 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:38:26.608 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:26.608 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:38:26.608 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:38:26.609 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:38:26.610 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:38:26.610 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:26.610 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:38:26.610 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:38:26.611 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:38:26.611 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:26.611 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:26.612 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:26.612 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:38:26.612 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:26.613 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:26.613 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:26.613 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:26.613 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:38:26.614 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:59.158 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:38:59.158 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.158 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:38:59.158 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-30 17:38:59.159 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:38:59.160 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:38:59.160 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.160 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:38:59.160 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:38:59.161 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:38:59.162 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:38:59.162 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.162 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:38:59.162 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-30 17:38:59.164 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-30 17:38:59.165 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:38:59.165 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.165 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:38:59.165 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:38:59.167 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:38:59.168 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 17:38:59.168 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.168 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:38:59.169 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-30 17:38:59.170 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:38:59.171 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:59.171 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.171 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:59.172 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:38:59.173 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:59.176 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:59.176 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.176 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:59.176 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:38:59.178 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:59.179 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:59.179 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.179 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:59.179 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:38:59.181 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:59.684 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:38:59.684 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.684 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:38:59.685 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:38:59.686 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:38:59.687 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:38:59.687 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.687 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:38:59.688 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:38:59.690 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:38:59.692 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:38:59.693 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.693 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:38:59.693 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:38:59.697 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:38:59.698 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:38:59.699 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.699 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:38:59.699 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:38:59.702 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:38:59.705 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:38:59.705 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.705 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:38:59.705 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:38:59.707 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:38:59.708 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:59.708 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.708 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:59.708 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:38:59.710 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:38:59.710 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:38:59.710 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:38:59.710 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:38:59.710 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:38:59.712 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:00.777 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:39:00.777 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:00.777 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:39:00.778 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-30 17:39:00.780 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:39:00.780 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:39:00.780 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:00.780 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:39:00.780 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:39:00.781 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:39:00.782 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:39:00.782 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:00.782 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:39:00.782 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-30 17:39:00.784 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-30 17:39:00.784 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:39:00.785 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:00.786 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:39:00.786 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:39:00.788 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:39:00.788 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 17:39:00.789 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:00.789 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:39:00.789 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-30 17:39:00.790 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:39:00.790 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:00.791 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:00.791 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:00.791 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:39:00.791 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:00.794 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:00.794 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:00.794 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:00.794 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:39:00.796 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:00.797 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:00.797 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:00.797 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:00.797 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:39:00.798 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:01.426 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:39:01.427 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:01.427 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:39:01.427 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:39:01.429 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:39:01.429 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:39:01.429 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:01.429 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:39:01.429 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:39:01.431 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:39:01.432 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:39:01.432 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:01.432 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:39:01.432 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:39:01.435 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:39:01.436 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:39:01.436 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:01.436 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:39:01.436 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:39:01.437 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:39:01.438 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:39:01.438 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:01.438 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:39:01.439 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:39:01.440 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:39:01.440 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:01.440 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:01.440 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:01.440 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:39:01.441 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:01.442 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:01.442 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:01.442 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:01.442 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:39:01.442 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:02.009 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:39:02.010 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.010 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:39:02.010 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-30 17:39:02.011 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:39:02.011 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:39:02.011 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.011 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:39:02.011 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:39:02.012 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:39:02.012 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:39:02.012 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.012 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:39:02.012 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-30 17:39:02.013 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-30 17:39:02.013 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:39:02.014 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.014 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:39:02.014 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 17:39:02.015 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 17:39:02.016 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 17:39:02.016 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.016 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:39:02.016 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-30 17:39:02.017 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:39:02.018 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:02.018 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.018 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:02.018 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:39:02.018 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:02.019 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:02.019 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.019 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:02.019 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:39:02.019 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:02.020 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:02.020 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.020 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:02.020 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:39:02.020 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:02.486 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:39:02.487 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.487 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:39:02.487 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:39:02.489 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:39:02.489 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:39:02.489 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.489 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:39:02.489 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:39:02.490 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:39:02.491 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:39:02.491 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.491 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:39:02.491 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:39:02.493 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:39:02.493 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:39:02.494 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.494 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:39:02.494 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:39:02.495 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:39:02.496 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:39:02.496 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.496 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:39:02.496 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:39:02.497 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:39:02.497 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:02.497 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.497 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:02.497 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:39:02.498 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:02.498 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:02.498 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:02.498 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:02.498 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:39:02.499 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:03.481 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:03.481 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.481 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:03.482 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:03.482 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:39:03.482 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.482 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:39:03.482 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:39:03.483 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:03.483 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:03.483 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.483 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:03.483 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:03.483 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:39:03.483 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:39:03.483 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.483 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:39:03.484 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:39:03.484 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:03.484 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:03.484 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.484 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:03.484 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:03.485 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:03.485 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:03.485 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.485 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:03.485 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:39:03.486 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:39:03.486 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:39:03.486 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.486 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:39:03.486 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:39:03.488 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:03.488 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:39:03.488 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:03.488 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.488 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:03.488 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:39:03.488 [http-nio-8080-exec-7] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:39:03.488 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:39:03.488 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.488 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:39:03.488 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:39:03.488 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.488 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:03.488 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:39:03.489 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:03.489 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:03.489 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:03.489 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:39:03.489 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.490 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:03.490 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:39:03.490 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:39:03.490 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:03.490 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.490 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:03.490 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:03.491 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:03.491 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:03.491 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:03.491 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.491 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:03.491 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:39:03.492 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:39:03.492 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.492 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:39:03.492 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:39:03.492 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:03.492 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:03.492 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.492 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:03.492 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:39:03.493 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:39:03.494 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:03.494 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.494 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:03.494 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:39:03.494 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:03.495 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:39:03.495 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:03.495 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.495 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:03.495 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:39:03.496 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:03.496 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:03.496 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.496 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:03.496 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:39:03.497 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:03.497 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:03.498 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:03.498 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:03.498 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:39:03.498 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:08.993 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:39:08.993 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:08.993 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:39:08.994 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:39:08.998 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:39:08.998 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:08.998 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:08.998 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:08.998 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:08.999 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:08.999 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:08.999 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:08.999 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:08.999 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:39:09.000 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:09.000 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:09.000 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:09.000 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:09.000 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:39:09.001 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:09.001 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:09.001 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:09.001 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:09.001 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:39:09.002 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:09.002 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:09.002 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:09.002 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:09.003 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:39:09.003 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:09.003 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:09.003 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:09.003 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:09.003 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:39:09.004 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:11.122 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:39:11.122 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:39:11.122 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.122 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:39:11.122 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:39:11.122 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.122 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:39:11.122 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:39:11.122 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:39:11.122 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.122 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:39:11.122 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:39:11.123 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:39:11.123 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:11.124 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.124 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:11.124 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:39:11.126 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:39:11.126 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:11.126 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.126 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:11.126 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:39:11.126 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:39:11.126 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:39:11.126 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.126 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:39:11.127 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:39:11.127 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:39:11.127 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:11.127 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.127 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:11.127 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:11.127 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:39:11.127 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:11.127 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.127 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:11.127 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:39:11.128 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:11.128 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:11.128 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:11.128 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.128 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:11.128 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:39:11.129 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:11.129 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:11.129 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:11.129 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.129 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:11.129 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:39:11.130 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:11.130 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:11.130 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.130 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:11.130 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:39:11.130 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:11.130 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.130 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:11.130 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:11.130 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:11.131 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:11.131 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.131 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:11.131 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:39:11.131 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:11.131 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:11.131 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.132 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:11.132 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:11.132 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:11.133 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:11.133 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.133 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:11.133 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:39:11.133 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:11.135 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:11.135 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:11.135 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.135 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:11.135 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:39:11.136 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:11.137 [http-nio-8080-exec-7] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:39:11.137 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:39:11.137 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.137 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:39:11.137 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:39:11.137 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:39:11.141 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:39:11.141 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.141 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:11.141 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:11.142 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:39:11.142 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:11.143 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:11.143 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:11.143 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:11.144 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:15.394 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:39:15.394 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:15.394 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:39:15.394 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:39:15.395 [http-nio-8080-exec-4] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 17:39:15.396 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:39:15.396 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:15.396 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:15.396 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:15.396 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:39:15.396 [http-nio-8080-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 17:39:15.398 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:39:15.398 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:15.398 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:15.398 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:15.398 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:39:15.399 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:15.399 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:15.399 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:15.399 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:15.400 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:39:15.401 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:15.401 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:15.401 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:15.401 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:15.401 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:39:15.402 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:16.562 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:39:16.562 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:16.562 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:39:16.563 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:39:16.564 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:39:16.564 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:39:16.565 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:16.565 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:39:16.565 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:39:16.566 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:39:16.566 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:39:16.566 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:16.566 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:39:16.566 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:39:16.568 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:39:16.568 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:39:16.568 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:16.568 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:39:16.568 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:39:16.569 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:39:16.569 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:39:16.569 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:16.569 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:39:16.570 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:39:16.571 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:39:16.571 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:16.571 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:16.571 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:16.572 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:39:16.572 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:16.572 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:16.573 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:16.573 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:16.573 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:39:16.573 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:17.447 [http-nio-8080-exec-8] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 17:39:17.448 [http-nio-8080-exec-8] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 17:39:18.087 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:39:18.087 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.087 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:39:18.087 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:39:18.089 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:39:18.089 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:39:18.089 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.089 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:39:18.089 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:39:18.089 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:39:18.089 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.089 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:39:18.089 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:39:18.090 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:39:18.090 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:39:18.091 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:18.091 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.091 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:18.092 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:18.093 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:18.093 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:18.094 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.094 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:18.094 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:39:18.094 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:18.094 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:18.095 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.095 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:18.095 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:39:18.096 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:18.096 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:18.096 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.096 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:18.096 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:39:18.096 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:39:18.096 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.096 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:39:18.096 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:39:18.097 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:18.097 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:18.097 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.097 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:18.097 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:39:18.098 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:39:18.098 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:18.098 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.098 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:18.099 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:39:18.099 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:18.099 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.099 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:18.099 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:18.099 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:18.099 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:18.099 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.099 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:18.100 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:39:18.100 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:39:18.100 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:18.101 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.100 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:18.100 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:18.101 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:18.101 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:39:18.101 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:18.101 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.101 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:18.101 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:18.102 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:39:18.102 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.102 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:18.102 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:18.102 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:18.102 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:18.102 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.102 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:18.102 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:18.102 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:39:18.106 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:39:18.106 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:18.106 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.106 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:18.106 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:18.107 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:18.107 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:18.107 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.107 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:18.107 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:39:18.108 [http-nio-8080-exec-6] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:39:18.108 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:39:18.108 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:18.108 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:39:18.108 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:39:18.108 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:18.108 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:39:18.108 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:23.027 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:39:23.032 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.032 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:23.032 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:23.031 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:39:23.033 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.031 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:39:23.033 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:39:23.033 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.033 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:39:23.033 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:39:23.033 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:39:23.034 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:39:23.034 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:23.034 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.034 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:23.034 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:23.035 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:39:23.035 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:39:23.035 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:39:23.035 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.035 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:39:23.035 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:39:23.035 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:23.037 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:23.038 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.038 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:23.038 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:23.038 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:39:23.039 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:23.039 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:23.039 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.039 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:23.039 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:39:23.040 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:23.041 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:23.041 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.041 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:23.041 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:39:23.043 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:23.043 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:23.043 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.043 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:23.043 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:39:23.044 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:39:23.044 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.044 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:39:23.044 [http-nio-8080-exec-3] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:39:23.044 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:39:23.044 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:39:23.044 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.044 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:39:23.044 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:39:23.044 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:23.044 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:39:23.045 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:23.045 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.045 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:23.045 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:39:23.046 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:23.046 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.046 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:23.046 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:23.046 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:39:23.049 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:39:23.051 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:23.051 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.051 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:23.051 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:39:23.054 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:23.055 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.055 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:23.055 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:39:23.058 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:23.063 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:23.063 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.063 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:23.064 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:39:23.067 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:23.068 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:23.045 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:23.068 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:39:23.073 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.076 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.076 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:39:23.073 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:39:23.076 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:23.076 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:39:23.076 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:23.077 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:39:23.077 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:23.078 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:23.078 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:23.078 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:23.078 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:23.088 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:53.419 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:39:53.419 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:53.419 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:39:53.419 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:39:53.421 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:39:53.421 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:39:53.421 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:53.421 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:39:53.421 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:39:53.422 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:39:53.423 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:53.423 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:53.423 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:53.423 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:39:53.424 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:53.424 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:53.424 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:53.424 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:53.424 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:39:53.425 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:53.426 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:53.426 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:53.426 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:53.426 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:39:53.427 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:53.427 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:53.427 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:53.427 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:53.427 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:39:53.427 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:39:53.428 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:39:53.428 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:39:53.428 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:39:53.428 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:39:53.428 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:40:06.817 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:40:06.817 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:06.817 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:40:06.817 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:40:06.819 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:40:06.820 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:06.820 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:06.820 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:06.821 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:40:06.822 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:40:06.822 [http-nio-8080-exec-6] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 17:40:06.823 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:06.823 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:06.823 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:06.823 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:40:06.824 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:40:06.825 [http-nio-8080-exec-6] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 17:40:06.825 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:06.825 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:06.825 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:06.825 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:40:06.828 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:40:06.828 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:06.828 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:06.828 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:06.828 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:40:06.831 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:40:08.026 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:40:08.026 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:08.026 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:40:08.026 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:40:08.027 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:40:08.028 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:40:08.028 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:08.028 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:40:08.028 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:40:08.029 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:40:08.030 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:40:08.030 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:08.030 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:40:08.030 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:40:08.032 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:40:08.033 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:40:08.033 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:08.033 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:40:08.033 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:40:08.033 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:40:08.034 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:40:08.034 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:08.034 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:40:08.034 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:40:08.034 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:40:08.035 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:40:08.035 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:08.035 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:40:08.035 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:40:08.036 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:40:08.036 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:40:08.036 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:08.036 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:40:08.037 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:40:08.037 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:40:12.836 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:40:12.837 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.837 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:40:12.837 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:40:12.838 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:40:12.838 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.838 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:40:12.838 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:40:12.838 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:40:12.838 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:40:12.838 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.838 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:40:12.838 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:40:12.838 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:40:12.838 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.838 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:40:12.838 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:40:12.838 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:40:12.838 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:40:12.839 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:40:12.839 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.839 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:40:12.839 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:40:12.839 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:40:12.839 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:40:12.839 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.839 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:40:12.839 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:40:12.839 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:40:12.840 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:40:12.843 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:40:12.843 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:40:12.843 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.843 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:40:12.843 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:40:12.844 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:40:12.844 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.844 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:40:12.844 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:40:12.844 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:40:12.844 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.844 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:40:12.844 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:40:12.844 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:40:12.844 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:40:12.844 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:12.844 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.844 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:12.844 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:40:12.845 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:40:12.845 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:40:12.845 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.845 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:40:12.845 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:40:12.846 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:40:12.846 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:12.846 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.846 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:12.847 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:40:12.848 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:40:12.849 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:40:12.849 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.849 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:40:12.849 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:40:12.849 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:40:12.849 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:12.849 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.849 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:12.849 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:40:12.850 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:40:12.850 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:40:12.850 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:40:12.850 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.850 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:40:12.850 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:12.851 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.851 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:12.850 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:40:12.851 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:40:12.852 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:40:12.852 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:40:12.852 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:40:12.852 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.852 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:40:12.852 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:40:12.852 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:40:12.852 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:40:12.852 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.852 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:40:12.853 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:40:12.853 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:40:12.854 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:40:12.854 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:12.854 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:40:12.855 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:40:12.856 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:40:25.412 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:40:25.412 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:25.412 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:40:25.412 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:40:25.412 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:40:25.412 [http-nio-8080-exec-10] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 17:40:25.412 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:25.412 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:25.412 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:25.412 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:40:25.413 [http-nio-8080-exec-10] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 17:40:25.413 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:40:25.413 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:25.413 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:25.413 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:25.414 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:40:25.414 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:40:25.415 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:25.415 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:25.415 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:25.415 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:40:25.415 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:40:25.415 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:40:25.415 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:25.415 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:40:25.415 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:40:25.416 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:40:26.491 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:40:26.491 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:26.491 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:40:26.491 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:40:26.492 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:40:26.492 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:40:26.492 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:26.493 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:40:26.493 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:40:26.494 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:40:26.495 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:40:26.495 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:26.495 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:40:26.496 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:40:26.501 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:40:26.501 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:40:26.501 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:26.501 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:40:26.501 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:40:26.503 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:40:26.504 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:40:26.504 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:26.504 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:40:26.505 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:40:26.506 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:40:26.506 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:40:26.506 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:26.506 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:40:26.506 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:40:26.507 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:40:26.507 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:40:26.507 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:40:26.507 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:40:26.508 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:40:26.509 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:41:10.329 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:41:10.329 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.330 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:41:10.330 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:41:10.330 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:41:10.330 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.330 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:41:10.330 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:41:10.331 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:41:10.331 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:41:10.331 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:41:10.331 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:41:10.331 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.331 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.331 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:41:10.331 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:41:10.332 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:41:10.332 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:41:10.333 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:41:10.333 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:41:10.333 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:41:10.333 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.333 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:41:10.333 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:41:10.333 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:41:10.333 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.333 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:41:10.333 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:41:10.334 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:41:10.335 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:41:10.335 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.335 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:41:10.335 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:41:10.336 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:41:10.336 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:41:10.336 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:41:10.336 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.336 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:41:10.336 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:41:10.336 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:41:10.336 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.336 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:41:10.336 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:41:10.336 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:41:10.337 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:41:10.337 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:41:10.337 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.337 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:41:10.337 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:41:10.338 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:41:10.338 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:41:10.338 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.338 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:41:10.339 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:41:10.340 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:41:10.340 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:41:10.340 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:41:10.340 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:41:10.340 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:41:10.341 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:42:04.591 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:42:04.591 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.591 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:42:04.591 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:42:04.592 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:42:04.592 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.592 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:42:04.592 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 17:42:04.593 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 17:42:04.593 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:42:04.593 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:42:04.593 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.593 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:42:04.593 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:42:04.593 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.593 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:42:04.593 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:42:04.593 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:42:04.594 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:42:04.594 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:42:04.594 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:42:04.594 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.594 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:42:04.594 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:42:04.594 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 17:42:04.594 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.594 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 17:42:04.595 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 17:42:04.595 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:42:04.595 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:42:04.595 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.595 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:42:04.595 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:42:04.596 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 17:42:04.596 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 17:42:04.596 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.596 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 17:42:04.596 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:42:04.596 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 17:42:04.596 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:42:04.596 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.596 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:42:04.596 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:42:04.597 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 17:42:04.597 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:42:04.597 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 17:42:04.597 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.597 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 17:42:04.597 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 17:42:04.599 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 17:42:04.599 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:42:04.599 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.599 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:42:04.599 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:42:04.601 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:42:04.601 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:42:04.601 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:42:04.601 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:42:04.601 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:42:04.602 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:44:14.098 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 17:44:14.098 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.098 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 17:44:14.100 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 17:44:14.100 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.100 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 17:44:14.101 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 17:44:14.101 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 17:44:14.102 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 17:44:14.102 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.102 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 17:44:14.102 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 17:44:14.102 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 17:44:14.102 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.102 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:44:14.102 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 17:44:14.103 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 17:44:14.105 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 17:44:14.105 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:44:14.105 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.105 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:44:14.107 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:44:14.108 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 17:44:14.108 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 17:44:14.108 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.108 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 17:44:14.108 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 17:44:14.108 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:44:14.108 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:44:14.108 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.108 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:44:14.108 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 17:44:14.108 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 17:44:14.109 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:44:14.109 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:44:14.109 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.109 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:44:14.109 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 17:44:14.113 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:44:14.113 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.113 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:44:14.113 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:44:14.113 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:44:14.114 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:44:14.114 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.114 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:44:14.114 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 17:44:14.114 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:44:14.114 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:44:14.114 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:44:14.114 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.114 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:44:14.114 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:44:14.114 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:44:14.115 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.115 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:44:14.116 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 17:44:14.116 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:44:14.116 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:44:14.116 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.116 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:44:14.116 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:44:14.116 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 17:44:14.116 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:44:14.118 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:44:14.118 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.119 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:44:14.119 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 17:44:14.119 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:44:14.119 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.119 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 17:44:14.119 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.119 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:44:14.119 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 17:44:14.119 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:44:14.120 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 17:44:14.120 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:44:14.120 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:44:14.120 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:44:14.120 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:44:14.120 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.120 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:44:14.120 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:44:14.121 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:44:14.121 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:44:14.121 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:44:14.121 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.121 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:44:14.121 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:44:14.122 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:44:14.122 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:44:14.122 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 17:44:14.122 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:14.122 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 17:44:14.122 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 17:44:14.124 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 17:44:49.412 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 17:44:49.412 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:49.412 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 17:44:49.412 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 17:44:49.414 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 17:44:49.414 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 17:44:49.414 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:49.414 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 17:44:49.414 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:44:49.414 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:49.414 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 17:44:49.414 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:44:49.414 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 17:44:49.416 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 17:44:49.416 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 17:44:49.416 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 17:44:49.416 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:49.416 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 17:44:49.416 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 17:44:49.417 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:44:49.417 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:49.417 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:44:49.417 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 17:44:49.418 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 17:44:49.418 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:44:49.418 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 17:44:49.418 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:49.418 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 17:44:49.418 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:44:49.418 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:49.418 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:44:49.418 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 17:44:49.419 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 17:44:49.419 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:44:49.419 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 17:44:49.419 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:49.419 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 17:44:49.419 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 17:44:49.420 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 17:44:49.420 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 17:44:49.420 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 17:44:49.420 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:44:49.420 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 17:44:49.420 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 17:44:49.421 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 17:44:50.328 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 17:44:50.328 [Thread-7] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 17:44:50.329 [Thread-7] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-06-30 17:44:50.338 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1482513760] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 17:44:50.338 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1482513760] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 17:44:50.339 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1124765806] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 17:44:50.339 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1124765806] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 17:44:50.339 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-nioEventLoop-4-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/sun.nio.ch.WEPoll.wait(Native Method)
 java.base@17.0.8/sun.nio.ch.WEPollSelectorImpl.doSelect(WEPollSelectorImpl.java:111)
 java.base@17.0.8/sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:129)
 java.base@17.0.8/sun.nio.ch.SelectorImpl.select(SelectorImpl.java:146)
 app//io.netty.channel.nio.SelectedSelectionKeySetSelector.select(SelectedSelectionKeySetSelector.java:68)
 app//io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:879)
 app//io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:526)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.340 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.340 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-2] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.340 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-3] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.340 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-4] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.341 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-5] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.341 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-6] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.341 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-7] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.341 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-8] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.341 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-9] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.342 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-10] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.342 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-11] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.342 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-12] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 17:44:50.342 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 17:44:50.344 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 17:44:50.459 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-06-30 17:44:50.460 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-06-30 17:44:50.543 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 3932 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 17:44:50.543 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 17:44:50.543 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 17:44:50.773 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 17:44:50.773 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 17:44:50.781 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-06-30 17:44:50.824 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$278026a1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:44:50.830 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 17:44:50.896 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 17:44:50.896 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 17:44:50.896 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 17:44:50.896 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 17:44:50.897 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 17:44:50.897 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 17:44:50.897 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 17:44:50.897 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 17:44:50.912 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 17:44:50.912 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 363 ms
2025-06-30 17:44:50.913 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 17:44:50.987 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} inited
2025-06-30 17:44:51.000 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} inited
2025-06-30 17:44:51.089 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 17:44:51.089 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 17:44:51.184 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 17:44:51.240 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@cad3db, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@43fb9dc7, org.springframework.security.web.context.SecurityContextPersistenceFilter@6a5a4738, org.springframework.security.web.header.HeaderWriterFilter@406a3d09, org.springframework.web.filter.CorsFilter@69b31937, org.springframework.security.web.authentication.logout.LogoutFilter@7418553d, com.huang.store.security.JwtAuthenticationTokenFilter@63398891, com.huang.store.security.CustomAuthenticationFilter@57aa0ddd, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@3adbd40e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7e86e7de, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6f151f72, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@a92629, org.springframework.security.web.session.SessionManagementFilter@7ccbe7d5, org.springframework.security.web.access.ExceptionTranslationFilter@5e23558, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5852874f]
2025-06-30 17:44:51.352 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 17:44:51.359 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 17:44:51.361 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 17:44:51.364 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.862 seconds (JVM running for 1637.664)
2025-06-30 17:44:51.691 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 17:44:51.691 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 17:44:51.691 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-06-30 17:59:39.168 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 17:59:39.173 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 17:59:39.173 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:39.173 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 17:59:39.178 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 17:59:39.180 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 17:59:42.122 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 17:59:42.122 [http-nio-8080-exec-7] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-06-30 17:59:42.123 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false 
2025-06-30 17:59:42.123 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:42.123 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-06-30 17:59:42.124 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-06-30 17:59:42.138 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 0
2025-06-30 17:59:42.138 [http-nio-8080-exec-7] DEBUG com.huang.store.controller.UserController - 找到0个地址
2025-06-30 17:59:43.676 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 17:59:43.695 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 17:59:43.695 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:43.695 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 17:59:43.699 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 17:59:43.704 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 17:59:43.704 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 17:59:43.704 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:43.704 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 17:59:43.705 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 17:59:43.707 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 17:59:45.353 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 17:59:45.355 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 17:59:45.355 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:45.355 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 17:59:45.356 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 17:59:45.357 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 17:59:45.358 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 17:59:45.358 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:45.358 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 17:59:45.358 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 17:59:45.358 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 17:59:46.144 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 17:59:46.146 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 17:59:46.146 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:46.146 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 17:59:46.149 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 17:59:46.151 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 17:59:46.151 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ? 
2025-06-30 17:59:46.152 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:46.152 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 17:59:46.153 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-06-30 17:59:46.154 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 17:59:46.573 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 17:59:46.575 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 17:59:46.575 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:46.575 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 17:59:46.576 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), true(Boolean), 0(Integer), 5(Integer)
2025-06-30 17:59:46.577 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 17:59:46.577 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 17:59:46.577 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:46.577 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 17:59:46.578 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), true(Boolean)
2025-06-30 17:59:46.578 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 17:59:47.443 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 17:59:47.444 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 17:59:47.444 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:47.444 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 17:59:47.445 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 17:59:47.446 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 17:59:47.446 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 17:59:47.446 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:47.446 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 17:59:47.446 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 17:59:47.447 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 17:59:49.052 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 17:59:49.053 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 17:59:49.053 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:49.053 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 17:59:49.053 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 133@qq.com(String), 已收货(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 17:59:49.054 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 17:59:49.054 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ? 
2025-06-30 17:59:49.054 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 17:59:49.054 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 17:59:49.054 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 133@qq.com(String), 已收货(String), false(Boolean)
2025-06-30 17:59:49.056 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:00:06.548 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:00:06.549 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:00:06.550 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:00:06.550 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:00:06.550 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:00:06.551 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:00:08.079 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:00:08.080 [http-nio-8080-exec-2] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-06-30 18:00:08.080 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false 
2025-06-30 18:00:08.080 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:00:08.080 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-06-30 18:00:08.080 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:00:08.081 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 0
2025-06-30 18:00:08.081 [http-nio-8080-exec-2] DEBUG com.huang.store.controller.UserController - 找到0个地址
2025-06-30 18:00:14.023 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:00:14.024 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:00:14.025 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:00:14.025 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:00:14.025 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:00:14.025 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:00:28.025 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:00:28.026 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:00:28.026 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:00:28.027 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:00:28.027 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:00:28.028 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:10:48.453 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:48.454 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:48.455 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:10:48.455 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:48.455 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:10:48.458 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:10:48.459 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:10:48.460 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:10:48.460 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:48.460 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:10:48.460 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:10:48.462 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:10:48.463 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:48.469 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:48.471 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:48.475 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:48.476 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:10:48.476 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:48.476 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:10:48.478 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:10:48.481 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:10:48.482 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:10:48.482 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:48.482 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:10:48.482 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:10:48.483 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:10:48.484 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:10:48.484 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:48.484 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:10:48.484 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:10:48.484 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:10:48.485 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:10:48.485 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:48.485 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:10:48.485 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:10:48.486 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:10:48.486 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:10:48.486 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:48.486 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:10:48.486 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:10:48.487 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:10:55.069 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:55.069 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:55.069 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:55.071 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:10:55.071 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:55.071 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:10:55.071 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:10:55.072 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:10:55.072 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:10:55.072 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:55.072 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:10:55.072 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:10:55.073 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:10:55.076 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:55.076 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:55.077 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:10:55.078 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:55.078 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:10:55.077 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:10:55.078 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:10:55.082 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:10:55.082 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:10:55.082 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:55.082 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:10:55.082 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:10:55.083 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:10:55.084 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:10:55.084 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:55.084 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:10:55.084 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:10:55.085 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:10:55.086 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:10:55.086 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:55.086 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:10:55.086 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:10:55.087 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:10:55.087 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:10:55.087 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:10:55.087 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:10:55.087 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:10:55.088 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:22.849 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:22.850 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:11:22.850 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:22.850 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:11:22.850 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:11:22.851 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:11:22.851 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:11:22.851 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:22.851 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:11:22.851 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:11:22.851 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:11:22.852 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:22.852 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:22.854 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:22.855 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:22.855 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:22.855 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:11:22.855 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:22.855 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:11:22.855 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:11:22.856 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:11:22.857 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:22.857 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:22.857 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:22.857 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:11:22.858 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:11:22.858 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:22.858 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:22.858 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:22.858 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:11:22.859 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:22.859 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:22.859 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:22.859 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:22.859 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:11:22.860 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:22.860 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:22.860 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:22.860 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:22.860 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:11:22.861 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:23.781 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:23.781 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:23.782 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:11:23.782 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:23.782 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:11:23.782 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:11:23.783 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:11:23.783 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:11:23.783 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:23.783 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:11:23.783 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:11:23.784 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:11:23.786 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:23.786 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:23.787 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:23.789 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:23.790 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:11:23.790 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:23.790 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:11:23.790 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:11:23.791 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:11:23.791 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:23.791 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:23.791 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:23.791 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:11:23.792 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:11:23.792 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:23.792 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:23.792 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:23.792 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:11:23.794 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:23.794 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:23.794 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:23.794 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:23.794 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:11:23.795 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:23.796 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:23.796 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:23.796 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:23.796 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:11:23.796 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:24.518 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:24.519 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:11:24.519 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:24.519 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:11:24.519 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:11:24.520 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:11:24.520 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:24.520 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:24.520 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:11:24.520 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:24.520 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:11:24.520 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:11:24.521 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:11:24.524 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:24.525 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:24.525 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:11:24.525 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:24.525 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:11:24.525 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:11:24.526 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:11:24.526 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:24.526 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:24.526 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:24.526 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:11:24.524 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:24.527 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:11:24.527 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:24.527 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:24.527 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:24.527 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:11:24.528 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:24.528 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:24.529 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:24.529 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:24.529 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:11:24.530 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:24.530 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:24.530 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:24.530 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:24.530 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:11:24.531 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:36.110 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:36.113 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:36.113 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:36.115 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:36.117 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:36.117 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:11:36.117 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:36.117 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:11:36.117 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:11:36.118 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:11:36.118 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:11:36.118 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:11:36.118 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:36.118 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:11:36.118 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:11:36.118 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:36.118 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:11:36.119 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:11:36.120 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:11:36.121 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:11:36.121 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:36.121 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:36.121 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:36.121 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:11:36.122 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:11:36.123 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:11:36.123 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:36.123 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:36.123 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:36.123 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:11:36.124 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:36.124 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:36.124 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:36.124 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:36.124 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:11:36.125 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:11:36.125 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:11:36.125 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:11:36.125 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:11:36.125 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:11:36.126 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:12:35.411 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:12:35.411 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:12:35.411 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:12:35.411 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:12:35.411 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:12:35.411 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:12:35.411 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:12:35.411 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:12:35.411 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:12:35.411 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:12:35.411 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:12:35.411 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:12:35.412 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:12:35.412 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:12:35.412 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:12:35.413 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:12:35.413 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:12:35.413 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:12:35.413 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:12:35.413 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:12:35.414 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:12:35.414 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:12:35.414 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:12:35.414 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:12:35.415 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:12:35.415 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:12:35.415 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:12:35.415 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:12:35.415 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:12:35.415 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:12:35.416 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:12:35.416 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:12:35.416 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:12:35.416 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:12:35.416 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:12:35.416 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:12:35.417 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:12:35.417 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:12:35.417 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:12:35.417 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:12:35.417 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:13:29.940 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjc1MDkxMTY0LCJleHAiOjE3NTEyNzY4OTF9.yvsi8WnkGA_c1fFLtixQOAb_-E7sbropDOj39oRdlyM5KlaOPHf-vnSOsNPUiOtQUmfhlSFreAun1nj_XBDeQA
2025-06-30 18:13:30.010 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:13:30.010 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:30.010 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:13:30.011 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:13:30.013 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:13:30.019 [http-nio-8080-exec-6] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 18:13:30.089 [http-nio-8080-exec-6] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=56464ff@456.com, password=$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy, enabled=true, roles=[ROLE_USER]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=A67F80F7B1F0AC22176DBA6D6314DBAE], Granted Authorities=[ROLE_USER]]
2025-06-30 18:13:30.090 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:13:30.090 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:30.090 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:13:30.090 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:13:30.091 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:13:31.141 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:13:31.141 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:31.141 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:13:31.141 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:13:31.141 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:13:31.141 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:31.141 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:13:31.141 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:13:31.142 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:13:31.142 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:13:31.142 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:31.142 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:13:31.142 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:13:31.143 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:13:31.143 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:13:31.143 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:31.143 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:13:31.143 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:13:31.144 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:13:31.144 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:13:31.144 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:31.144 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:13:31.144 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:13:31.144 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:13:31.144 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:13:31.144 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:31.144 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:13:31.145 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:13:31.145 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:13:31.145 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:13:31.145 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:13:31.145 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:31.145 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:13:31.145 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:13:31.146 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:13:56.178 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:13:56.178 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:56.178 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:13:56.178 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:13:56.180 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:13:56.180 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:13:56.180 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:56.180 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:13:56.180 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:13:56.180 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:13:56.180 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:56.180 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:13:56.180 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:13:56.181 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:13:56.181 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:13:56.181 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:13:56.181 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:13:56.181 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:56.181 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:13:56.181 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:56.181 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:13:56.181 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:13:56.181 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:13:56.181 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:13:56.181 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:13:56.181 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:13:56.181 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:56.181 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:13:56.182 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:13:56.182 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:13:56.182 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:13:56.182 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:13:56.182 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:13:56.183 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:13:56.183 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:14:16.526 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:14:16.526 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:14:16.526 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:14:16.526 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:14:16.527 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:14:20.552 [http-nio-8080-exec-5] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-06-30 18:14:20.552 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false 
2025-06-30 18:14:20.552 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:14:20.552 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-06-30 18:14:20.553 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:14:20.554 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 0
2025-06-30 18:14:20.554 [http-nio-8080-exec-5] DEBUG com.huang.store.controller.UserController - 找到0个地址
2025-06-30 18:14:21.207 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:14:21.207 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:14:21.207 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:14:21.208 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:14:21.211 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 18:14:21.211 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 18:14:21.211 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:14:21.211 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:14:21.212 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 18:14:21.212 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:14:50.791 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:14:50.791 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:14:50.791 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:14:50.791 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:14:50.793 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:14:50.793 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:14:50.793 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:14:50.793 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:14:50.793 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:14:50.794 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:14:50.795 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:14:50.795 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:14:50.795 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:14:50.795 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:14:50.795 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:14:50.795 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:14:50.795 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:14:50.795 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:14:50.796 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:14:50.796 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:14:50.796 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:14:50.796 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:14:50.796 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:14:50.796 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:14:50.796 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:14:50.796 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:14:50.796 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:14:50.796 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:14:50.797 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:14:50.797 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:14:50.797 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:14:50.797 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:14:50.797 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:14:50.797 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:14:50.798 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:15:21.455 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:15:21.455 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:21.455 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:15:21.455 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:15:21.456 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:15:21.456 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:15:21.456 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:21.456 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:15:21.456 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:15:21.456 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:15:21.456 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:21.456 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:15:21.457 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:15:21.457 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:15:21.457 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:15:21.457 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:21.457 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:15:21.457 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:15:21.458 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:15:21.458 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:15:21.458 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:21.458 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:15:21.458 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:15:21.459 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:15:21.459 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:15:21.459 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:21.459 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:15:21.459 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:15:21.459 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:15:21.459 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:21.459 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:15:21.459 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:15:21.459 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:15:21.460 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:15:21.461 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:15:52.004 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:15:52.006 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:52.006 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:15:52.006 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:15:52.007 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:15:52.007 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:15:52.007 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:52.007 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:15:52.007 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:15:52.007 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:15:52.007 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:15:52.008 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:52.008 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:15:52.008 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:15:52.008 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:15:52.009 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:15:52.009 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:52.009 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:15:52.009 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:15:52.009 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:15:52.009 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:52.009 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:15:52.009 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:15:52.009 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:15:52.009 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:15:52.009 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:52.009 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:15:52.010 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:15:52.010 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:15:52.010 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:15:52.010 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:15:52.010 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:15:52.010 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:15:52.010 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:15:52.012 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:17:34.260 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 18:17:34.260 [Thread-9] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 18:17:34.260 [Thread-9] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-06-30 18:17:34.264 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1872175085] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 18:17:34.264 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1872175085] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 18:17:34.265 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-2017692725] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 18:17:34.265 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-2017692725] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 18:17:34.265 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 18:17:34.266 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 18:17:34.270 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closed
2025-06-30 18:17:34.271 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closed
2025-06-30 18:17:34.350 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 3932 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 18:17:34.350 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 18:17:34.350 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 18:17:34.473 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 18:17:34.473 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 18:17:34.475 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 1 ms. Found 0 Redis repository interfaces.
2025-06-30 18:17:34.515 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.huang.store.mapper]' package. Please check your configuration.
2025-06-30 18:17:34.568 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 18:17:34.569 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 18:17:34.569 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 18:17:34.569 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 18:17:34.569 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 18:17:34.569 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 18:17:34.569 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 18:17:34.569 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 18:17:34.582 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 18:17:34.582 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 227 ms
2025-06-30 18:17:34.588 [restartedMain] ERROR org.apache.catalina.session.StandardManager - Exception loading sessions from persistent storage
java.lang.ClassNotFoundException: com.huang.store.entity.user.SecurityUser
	at org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader.loadClass(TomcatEmbeddedWebappClassLoader.java:72)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1141)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:467)
	at org.apache.catalina.util.CustomObjectInputStream.resolveClass(CustomObjectInputStream.java:158)
	at java.base/java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:2045)
	at java.base/java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1909)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2235)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:514)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:472)
	at org.apache.catalina.session.StandardSession.doReadObject(StandardSession.java:1530)
	at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:1000)
	at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:210)
	at org.apache.catalina.session.StandardManager.load(StandardManager.java:156)
	at org.apache.catalina.session.StandardManager.startInternal(StandardManager.java:346)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4931)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:794)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:248)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:489)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:481)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:211)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:184)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:585)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2025-06-30 18:17:34.626 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 18:17:34.669 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} inited
2025-06-30 18:17:34.683 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} inited
2025-06-30 18:17:34.705 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
2025-06-30 18:17:34.706 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closed
2025-06-30 18:17:34.707 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closed
2025-06-30 18:17:34.707 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 18:17:34.714 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-30 18:17:34.741 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 24 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:595)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:475)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:615)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:180)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$21d53500.CGLIB$sqlSessionFactory$2(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$21d53500$$FastClassBySpringCGLIB$$e69ec8e0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$21d53500.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:122)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:593)
	... 38 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:76)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:137)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:130)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:120)
	... 40 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:120)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 44 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:200)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	... 46 common frames omitted
2025-06-30 18:19:30.949 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 18:19:30.960 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 18208 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 18:19:30.961 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 18:19:30.961 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 18:19:31.084 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 18:19:31.084 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 18:19:31.518 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 18:19:31.519 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 18:19:31.540 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-30 18:19:31.744 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$e71df6c3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 18:19:31.766 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 18:19:32.182 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 18:19:32.183 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 18:19:32.183 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 18:19:32.183 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 18:19:32.188 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 18:19:32.195 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 18:19:32.196 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 18:19:32.196 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 18:19:32.255 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 18:19:32.256 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1172 ms
2025-06-30 18:19:32.261 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 18:19:32.891 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 18:19:32.920 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 18:19:33.237 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 18:19:33.237 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 18:19:33.637 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 18:19:33.758 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@54bd5a3b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7174e20e, org.springframework.security.web.context.SecurityContextPersistenceFilter@393798d8, org.springframework.security.web.header.HeaderWriterFilter@25bb537b, org.springframework.web.filter.CorsFilter@19596634, org.springframework.security.web.authentication.logout.LogoutFilter@3a766d46, com.huang.store.security.JwtAuthenticationTokenFilter@eb81e89, com.huang.store.security.CustomAuthenticationFilter@463025cd, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@574fc98a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@55455450, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@63c63d73, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@cc8898e, org.springframework.security.web.session.SessionManagementFilter@6e91f081, org.springframework.security.web.access.ExceptionTranslationFilter@13f0d3d7, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@27db2288]
2025-06-30 18:19:34.013 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 18:19:34.029 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 18:19:34.042 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 18:19:34.051 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.407 seconds (JVM running for 3.892)
2025-06-30 18:19:47.384 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 18:19:47.384 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 18:19:47.385 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-30 18:19:47.472 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:19:47.472 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:19:47.472 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:19:47.472 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:19:47.472 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:19:47.472 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:19:47.483 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.483 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.483 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.483 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.483 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.484 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:19:47.484 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:19:47.484 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:19:47.484 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:19:47.483 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.484 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:19:47.484 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:19:47.578 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:19:47.578 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:19:47.578 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:19:47.578 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:19:47.578 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:19:47.578 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:19:47.596 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:19:47.596 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:19:47.596 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:19:47.597 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:19:47.596 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:19:47.597 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:19:47.614 [http-nio-8080-exec-7] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 18:19:47.614 [http-nio-8080-exec-1] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 18:19:47.614 [http-nio-8080-exec-10] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 18:19:47.614 [http-nio-8080-exec-6] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 18:19:47.614 [http-nio-8080-exec-5] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 18:19:47.615 [http-nio-8080-exec-2] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 18:19:47.691 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:19:47.691 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.691 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:19:47.693 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:19:47.695 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:19:47.695 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 18:19:47.695 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:19:47.695 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:19:47.695 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.695 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.696 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:19:47.696 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:19:47.696 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:19:47.696 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.696 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:19:47.696 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:19:47.697 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 18:19:47.698 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:19:47.698 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:19:47.698 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 18:19:47.699 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:19:47.699 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:19:47.699 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.699 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:19:47.699 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:19:47.699 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 18:19:47.699 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:19:47.699 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 18:19:47.699 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.699 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:19:47.699 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.699 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:19:47.699 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.699 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:19:47.699 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.699 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:19:47.699 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 18:19:47.700 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:19:47.701 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:19:47.701 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:19:47.701 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.701 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:19:47.701 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:19:47.702 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:19:47.702 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:19:47.702 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 18:19:47.703 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:19:47.703 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.703 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:19:47.704 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:19:47.704 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:19:47.704 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:19:47.705 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:19:47.706 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 18:19:47.706 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:19:47.706 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.706 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:19:47.706 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 18:19:47.706 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:19:47.707 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:19:47.707 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:19:47.707 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.707 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:19:47.707 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:19:47.707 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.707 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:19:47.707 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:19:47.708 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:19:47.708 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:19:47.708 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:19:47.709 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:19:47.709 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.709 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:19:47.710 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:19:47.710 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:19:47.712 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:19:47.712 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:19:47.712 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.712 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:19:47.712 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:19:47.712 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:19:47.713 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:19:47.713 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.713 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:19:47.713 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:19:47.714 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:19:47.714 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:19:47.714 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.715 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:19:47.715 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:19:47.716 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:19:47.716 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:19:47.716 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:19:47.716 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:19:47.716 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:19:47.717 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:33.674 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:21:33.675 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.675 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:21:33.676 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:33.676 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.676 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:33.679 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:21:33.680 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-30 18:21:33.683 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:21:33.684 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:21:33.684 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:33.684 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.684 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:33.685 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:33.685 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.685 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:33.685 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:21:33.686 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 18:21:33.687 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:33.687 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:21:33.687 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:33.688 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.688 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:33.688 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:21:33.689 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:33.690 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:33.690 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.690 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:33.690 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:21:33.692 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:33.693 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:33.693 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.693 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:33.693 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:21:33.694 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:33.703 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:21:33.703 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.703 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:21:33.704 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-30 18:21:33.707 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-30 18:21:33.708 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:33.708 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.708 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:33.708 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 18:21:33.709 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:33.710 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 18:21:33.710 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.710 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:21:33.711 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-30 18:21:33.713 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:21:33.713 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:33.713 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.713 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:33.713 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:21:33.714 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:33.714 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:33.714 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.714 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:33.714 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:21:33.715 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:33.716 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:33.716 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:33.716 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:33.716 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:21:33.717 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:35.886 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:21:35.886 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.886 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:21:35.886 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:21:35.886 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:21:35.886 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.887 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:21:35.887 [http-nio-8080-exec-9] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 18:21:35.887 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:35.887 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.887 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:35.887 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 18:21:35.887 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.887 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:21:35.887 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 18:21:35.887 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.887 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:21:35.887 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:21:35.888 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:21:35.889 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 18:21:35.890 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:21:35.891 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:21:35.891 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.891 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:21:35.894 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:21:35.894 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.894 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:21:35.895 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 18:21:35.895 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.895 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:21:35.896 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 18:21:35.896 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:21:35.897 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 18:21:35.898 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:21:35.898 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:21:35.898 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.898 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:21:35.898 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:21:35.898 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 18:21:35.899 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:21:35.899 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:35.899 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.899 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:35.899 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:21:35.899 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:21:35.899 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:21:35.902 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:21:35.903 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:21:35.903 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 18:21:35.903 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:35.903 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.903 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:35.904 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:21:35.904 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.904 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:21:35.904 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:21:35.904 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:21:35.905 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:21:35.905 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:21:35.905 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:35.905 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.905 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:35.905 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:21:35.905 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:35.906 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:35.906 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.906 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:35.906 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:21:35.906 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:21:35.906 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:35.906 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:35.906 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.906 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:35.907 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:21:35.907 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:35.907 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:35.907 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.907 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:35.908 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:21:35.908 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:35.908 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:35.908 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.908 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:35.908 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:21:35.909 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:35.909 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:35.909 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:35.909 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.909 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:35.909 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:21:35.911 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:35.911 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:35.911 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:35.911 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:35.911 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:21:35.912 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:37.376 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:21:37.376 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:37.376 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:37.376 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:21:37.376 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:37.376 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:37.377 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 4(Integer)
2025-06-30 18:21:37.377 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:21:37.378 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:21:37.379 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:21:37.379 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:37.379 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:37.379 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:37.379 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:37.379 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:37.379 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:37.380 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:21:37.380 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-30 18:21:37.382 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:21:37.382 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:37.382 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:37.382 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:37.382 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:37.383 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:21:37.383 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:21:37.384 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:37.384 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:21:37.384 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:37.385 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 4(Integer), 12(Integer), 13(Integer), 0(Integer), 10(Integer)
2025-06-30 18:21:37.385 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:37.385 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:37.385 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:37.385 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:21:37.386 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-30 18:21:37.387 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:37.387 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:37.387 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:37.387 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:37.388 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-30 18:21:37.388 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:37.388 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:37.388 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:37.389 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:21:37.389 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:37.390 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:37.390 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 18:21:37.390 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:37.390 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:21:37.390 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 4(Integer), 12(Integer), 13(Integer)
2025-06-30 18:21:37.392 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:21:38.606 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:38.606 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:38.606 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:38.607 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 18:21:38.608 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:21:38.608 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:38.608 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:38.608 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:38.608 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 18:21:38.609 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 18:21:38.609 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:21:38.609 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:38.609 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:21:38.610 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 18:21:38.612 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 18:21:38.612 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:38.613 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:38.613 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:38.613 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 18:21:38.613 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 18:21:38.614 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 18:21:38.614 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:38.614 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:21:38.614 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 18:21:38.615 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:21:38.615 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:38.615 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:38.615 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:38.615 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:21:38.616 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:38.616 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:38.616 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:38.616 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:38.616 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:21:38.616 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:40.372 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:40.372 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:40.372 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:40.373 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-30 18:21:40.373 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:21:40.374 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:40.374 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:40.374 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:40.374 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 18:21:40.376 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:40.376 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:21:40.376 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:40.377 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:21:40.377 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-30 18:21:40.380 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-30 18:21:40.380 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:40.380 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:40.380 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:40.380 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 18:21:40.381 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:40.381 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 18:21:40.381 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:40.381 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:21:40.381 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-30 18:21:40.382 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:21:40.383 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:40.383 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:40.383 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:40.383 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:21:40.384 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:40.384 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:40.384 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:40.384 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:40.384 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:21:40.385 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:40.385 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:40.385 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:40.385 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:40.385 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:21:40.385 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:42.171 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:42.172 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:42.172 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:42.172 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 3(Integer)
2025-06-30 18:21:42.172 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:21:42.173 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:42.173 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:42.173 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:42.173 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 教育(String), 教育(String)
2025-06-30 18:21:42.174 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:42.175 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:21:42.175 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:42.175 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:21:42.175 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 10(Integer), 11(Integer), 3(Integer), 0(Integer), 10(Integer)
2025-06-30 18:21:42.176 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-30 18:21:42.176 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:42.176 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:42.176 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:42.176 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 教育(String), 教育(String)
2025-06-30 18:21:42.177 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:42.177 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 18:21:42.177 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:42.177 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:21:42.177 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 10(Integer), 11(Integer), 3(Integer)
2025-06-30 18:21:42.178 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:21:43.270 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:43.270 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:43.271 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:43.271 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 4(Integer)
2025-06-30 18:21:43.273 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:21:43.274 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:43.274 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:43.274 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:43.274 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-30 18:21:43.275 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:43.276 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:21:43.276 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:43.276 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:21:43.277 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 4(Integer), 12(Integer), 13(Integer), 0(Integer), 10(Integer)
2025-06-30 18:21:43.280 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-30 18:21:43.281 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:43.281 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:43.281 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:43.281 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-30 18:21:43.282 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:43.283 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 18:21:43.283 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:43.283 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:21:43.283 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 4(Integer), 12(Integer), 13(Integer)
2025-06-30 18:21:43.284 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:21:44.551 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:44.551 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:44.551 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:44.552 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 3(Integer)
2025-06-30 18:21:44.554 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:21:44.554 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:44.554 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:44.554 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:44.555 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 教育(String), 教育(String)
2025-06-30 18:21:44.557 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:44.558 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:21:44.558 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:44.558 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:21:44.559 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 10(Integer), 11(Integer), 3(Integer), 0(Integer), 10(Integer)
2025-06-30 18:21:44.560 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-30 18:21:44.560 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:44.560 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:44.560 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:44.560 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 教育(String), 教育(String)
2025-06-30 18:21:44.561 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:44.561 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 18:21:44.561 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:44.561 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:21:44.562 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 10(Integer), 11(Integer), 3(Integer)
2025-06-30 18:21:44.563 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:21:45.256 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:45.256 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:45.256 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:45.256 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-30 18:21:45.257 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:21:45.258 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:45.258 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:45.258 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:45.258 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 18:21:45.259 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:45.260 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:21:45.260 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:45.260 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:21:45.260 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-30 18:21:45.261 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-30 18:21:45.261 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:45.261 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:45.261 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:45.261 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 18:21:45.262 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:45.262 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 18:21:45.262 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:45.262 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:21:45.262 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-30 18:21:45.263 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:21:45.263 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:45.263 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:45.263 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:45.263 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:21:45.263 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:45.264 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:45.264 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:45.264 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:45.264 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:21:45.265 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:45.265 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:45.265 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:45.265 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:45.266 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:21:45.266 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:46.268 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:46.268 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.268 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:46.268 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 18:21:46.270 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:21:46.271 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:46.271 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.271 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:46.271 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 18:21:46.272 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 18:21:46.273 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:21:46.273 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.273 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:21:46.273 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 18:21:46.274 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 18:21:46.274 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:46.275 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.275 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:46.275 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 18:21:46.276 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 18:21:46.277 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 18:21:46.277 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.277 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:21:46.277 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 18:21:46.278 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:21:46.279 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:46.279 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.279 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:46.279 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:21:46.280 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:46.280 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:46.280 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.280 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:46.280 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:21:46.281 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:46.803 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:46.803 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.803 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:46.803 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 4(Integer)
2025-06-30 18:21:46.804 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:21:46.805 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:46.805 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.805 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:46.805 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-30 18:21:46.806 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:46.807 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:21:46.807 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.807 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:21:46.807 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 4(Integer), 12(Integer), 13(Integer), 0(Integer), 10(Integer)
2025-06-30 18:21:46.808 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-30 18:21:46.809 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:21:46.809 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.809 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:21:46.809 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-30 18:21:46.810 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:21:46.810 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 18:21:46.810 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:46.810 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:21:46.810 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 4(Integer), 12(Integer), 13(Integer)
2025-06-30 18:21:46.811 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:21:48.575 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 18:21:48.575 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 18:21:48.575 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:21:48.575 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.575 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.575 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:21:48.575 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:21:48.575 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.575 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:21:48.575 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.575 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:21:48.575 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:21:48.575 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 18:21:48.575 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:21:48.575 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.575 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:21:48.575 [http-nio-8080-exec-8] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 18:21:48.575 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:21:48.576 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:21:48.576 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.576 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:21:48.576 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:21:48.576 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 18:21:48.577 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:21:48.577 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:48.577 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.577 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:48.577 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:21:48.578 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:21:48.578 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 18:21:48.578 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:21:48.578 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 18:21:48.578 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 18:21:48.578 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.578 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:21:48.578 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:21:48.578 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.578 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:21:48.578 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:21:48.578 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.578 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:21:48.578 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:21:48.578 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:21:48.579 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 18:21:48.579 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:21:48.579 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:21:48.579 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:21:48.579 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:21:48.579 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:21:48.579 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:21:48.579 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.579 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:21:48.579 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:48.580 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.580 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:48.580 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:21:48.580 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:21:48.580 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:21:48.581 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:21:48.581 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:48.581 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.581 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:48.581 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:21:48.581 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:21:48.581 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:48.582 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:48.582 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.582 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:48.582 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:21:48.583 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:48.584 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:48.584 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:48.584 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:21:48.584 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.584 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.584 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:48.584 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:21:48.584 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:21:48.584 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:21:48.585 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:48.585 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:21:48.586 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:48.586 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.586 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:48.586 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:21:48.587 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:48.588 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:48.588 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.588 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:48.588 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:21:48.589 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:21:48.590 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:21:48.590 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:21:48.590 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:21:48.591 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:21:48.592 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:13.479 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:22:13.479 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.479 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:22:13.480 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:22:13.482 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:22:13.483 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:13.483 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.483 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:13.484 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:22:13.486 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:22:13.487 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:13.487 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.487 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:13.487 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:22:13.487 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:22:13.487 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.487 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:22:13.487 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 2(Integer)
2025-06-30 18:22:13.488 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:13.488 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:13.488 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.488 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:13.488 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:22:13.488 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:22:13.488 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:22:13.489 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.489 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:22:13.489 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 18:22:13.489 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:13.489 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:13.489 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.489 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:13.489 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:22:13.489 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:22:13.490 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:22:13.490 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.490 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:22:13.490 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:13.490 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 2(Integer), 8(Integer), 9(Integer), 0(Integer), 10(Integer)
2025-06-30 18:22:13.491 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 3
2025-06-30 18:22:13.491 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:22:13.491 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.491 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:22:13.492 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 科技(String), 科技(String)
2025-06-30 18:22:13.492 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:22:13.493 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 18:22:13.493 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.493 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:22:13.493 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 2(Integer), 8(Integer), 9(Integer)
2025-06-30 18:22:13.493 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:22:13.494 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:13.494 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.494 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:13.494 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:22:13.495 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:13.495 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:13.496 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.496 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:13.496 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:22:13.496 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:13.497 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:13.497 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:13.497 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:13.497 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:22:13.498 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:18.485 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:22:18.485 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 18:22:18.485 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.485 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 18:22:18.485 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.485 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.485 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:22:18.485 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:22:18.485 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.485 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:22:18.485 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:22:18.485 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:22:18.486 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:22:18.486 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.486 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:22:18.486 [http-nio-8080-exec-4] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 18:22:18.486 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:22:18.486 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:22:18.486 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.486 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:22:18.486 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:22:18.486 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 18:22:18.485 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 18:22:18.486 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:22:18.486 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 18:22:18.486 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 18:22:18.487 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:22:18.487 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:22:18.487 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:22:18.487 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.487 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:22:18.487 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:22:18.487 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.487 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:22:18.487 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:18.487 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.487 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:18.487 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:22:18.487 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:22:18.487 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:22:18.487 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:22:18.487 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:22:18.487 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 18:22:18.488 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.488 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:22:18.488 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:22:18.489 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:22:18.489 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:22:18.489 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:22:18.489 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:18.489 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:22:18.489 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.489 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:18.490 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:22:18.491 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 18:22:18.491 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:22:18.492 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:18.492 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.492 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:22:18.492 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:22:18.492 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:18.492 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.492 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:18.492 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:22:18.493 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:22:18.493 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:18.493 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:18.493 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:18.493 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.493 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.493 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:18.493 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:18.493 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:22:18.493 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:22:18.493 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:18.493 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:18.493 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:18.494 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.494 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:18.494 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:22:18.495 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:18.495 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:18.496 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.496 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:18.496 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:22:18.497 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:18.497 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:18.497 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.497 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:18.497 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:22:18.498 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:18.499 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:18.499 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:18.499 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:18.499 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:22:18.500 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:22.482 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:22:22.482 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:22.482 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:22:22.483 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:22:22.485 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:22:22.486 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:22.486 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:22.486 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:22.486 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:22:22.488 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:22:22.489 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:22.489 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:22.489 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:22.490 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:22:22.492 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:22.492 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:22.492 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:22.492 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:22.492 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:22:22.494 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:22.495 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:22.495 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:22:22.495 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:22.495 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:22.495 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:22.495 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:22:22.495 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:22:22.496 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 4(Integer)
2025-06-30 18:22:22.497 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:22.497 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 18:22:22.498 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:22:22.498 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:22.498 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:22:22.498 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-30 18:22:22.499 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:22:22.500 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 18:22:22.500 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:22.500 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 18:22:22.501 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 4(Integer), 12(Integer), 13(Integer), 0(Integer), 10(Integer)
2025-06-30 18:22:22.502 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 0
2025-06-30 18:22:22.502 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 18:22:22.502 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:22.502 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 18:22:22.502 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 生活(String), 生活(String)
2025-06-30 18:22:22.502 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 3
2025-06-30 18:22:22.502 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? ) ) 
2025-06-30 18:22:22.502 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:22.502 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 18:22:22.503 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 4(Integer), 12(Integer), 13(Integer)
2025-06-30 18:22:22.503 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 18:22:26.916 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 18:22:26.916 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:22:26.916 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 18:22:26.916 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.916 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.916 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.916 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 18:22:26.916 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:22:26.916 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:22:26.916 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:22:26.916 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.916 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:22:26.917 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:22:26.917 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:22:26.917 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:22:26.917 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 18:22:26.918 [http-nio-8080-exec-4] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 18:22:26.918 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 18:22:26.918 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:22:26.918 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:22:26.918 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.918 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:22:26.918 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:22:26.918 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 18:22:26.918 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:22:26.918 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:22:26.918 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.919 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:22:26.919 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:22:26.919 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.919 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:22:26.919 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.919 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:22:26.919 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:22:26.919 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.919 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:22:26.919 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:22:26.919 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:22:26.919 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:22:26.919 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 18:22:26.919 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:22:26.919 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:22:26.920 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.920 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:22:26.920 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:22:26.920 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 18:22:26.920 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:22:26.920 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:22:26.920 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:22:26.920 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:22:26.920 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:26.920 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.920 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:26.920 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:22:26.921 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:22:26.921 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:22:26.922 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:26.922 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:26.922 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.922 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:26.922 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.922 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:26.922 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:22:26.923 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:22:26.924 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:26.924 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:26.924 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:26.924 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:26.924 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.924 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.924 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:26.924 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:26.924 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:22:26.924 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:22:26.926 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:26.926 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:26.926 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:26.926 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:22:26.926 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.926 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.926 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:26.926 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:22:26.926 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:22:26.926 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:22:26.927 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:26.927 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:22:26.928 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:26.928 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.928 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:26.928 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:22:26.929 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:22:26.930 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:22:26.930 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:22:26.930 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:22:26.930 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:22:26.931 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:24:09.119 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 18:24:09.119 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:24:09.119 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 18:24:09.119 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:24:09.119 [http-nio-8080-exec-7] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 18:24:09.119 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:24:09.119 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:24:09.119 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 18:24:09.119 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:24:09.119 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:24:09.119 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:24:09.120 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:24:09.120 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:24:09.120 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:24:09.120 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:24:09.120 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:24:09.120 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:24:09.120 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:24:09.120 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:24:09.123 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 18:24:09.124 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:24:09.126 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 18:24:09.126 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 18:24:09.126 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:24:09.126 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 18:24:09.126 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:24:09.126 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:24:09.126 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:24:09.126 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:24:09.126 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:24:09.126 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:24:09.126 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:24:09.127 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 18:24:09.127 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:24:09.127 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:24:09.127 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:24:09.127 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:24:09.128 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:24:09.128 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:24:09.128 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:24:09.128 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:24:09.128 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:24:09.128 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:24:09.128 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:24:09.128 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:24:09.128 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:24:09.128 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:24:09.129 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:24:09.129 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:24:09.129 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:24:09.129 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:24:09.129 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:24:09.129 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:24:09.129 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:24:09.129 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:24:09.129 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:24:09.130 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:24:09.130 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:24:09.130 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:24:09.130 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:24:09.130 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:24:09.130 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:24:09.130 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:24:09.130 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:24:09.131 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:24:09.131 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:24:09.131 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:24:09.131 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:24:09.131 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:24:09.131 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:24:09.131 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:24:09.131 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:24:09.131 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:24:09.131 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:24:09.133 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:24:09.133 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:24:09.133 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:24:09.133 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:24:09.133 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:24:09.133 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:24:09.133 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:24:09.133 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:24:09.133 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:24:09.133 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:24:09.134 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:24:09.135 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:24:09.135 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:24:09.135 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:24:09.135 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:24:09.135 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:24:09.135 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:24:09.136 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:24:09.136 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:24:09.136 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:24:09.137 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:24:09.138 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:25:01.126 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:25:01.126 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:25:01.126 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:25:01.126 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-30 18:25:01.130 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:25:01.131 [http-nio-8080-exec-8] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:2545059634@qq.com    数据库密码:$2a$10$w8zNNUSDq3MCiLDDuAhYXedA0QGva1Z4.6UxO61Njhsrlo8voc01G
2025-06-30 18:25:01.201 [http-nio-8080-exec-8] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=2545059634@qq.com, password=$2a$10$w8zNNUSDq3MCiLDDuAhYXedA0QGva1Z4.6UxO61Njhsrlo8voc01G, enabled=true, roles=[ROLE_ADMIN]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=B7023B3F4C27BD5ACF7B11120DD13678], Granted Authorities=[ROLE_ADMIN]]
2025-06-30 18:25:01.210 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:25:01.211 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:25:01.211 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:25:01.211 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-30 18:25:01.211 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:25:51.735 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUsersByPage - ==>  Preparing: select * from user where manage = false limit ?,? 
2025-06-30 18:25:51.736 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:25:51.736 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from user where manage = false limit ?,? ::: DataSources: slave
2025-06-30 18:25:51.738 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUsersByPage - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:25:51.740 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUsersByPage - <==      Total: 3
2025-06-30 18:25:51.740 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.count - ==>  Preparing: select count(*) from user where manage = false 
2025-06-30 18:25:51.740 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:25:51.740 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from user where manage = false ::: DataSources: slave
2025-06-30 18:25:51.741 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.count - ==> Parameters: 
2025-06-30 18:25:51.743 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.count - <==      Total: 1
2025-06-30 18:25:58.608 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:25:58.608 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:25:58.608 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:25:58.608 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==>  Preparing: select name from publish 
2025-06-30 18:25:58.608 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:25:58.608 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select name from publish ::: DataSources: slave
2025-06-30 18:25:58.609 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:25:58.610 [http-nio-8080-exec-1] INFO  com.huang.store.controller.BookController - 按页获取图书列表: page=1, pageSize=5
2025-06-30 18:25:58.611 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==>  Preparing: select * from book limit ?,? 
2025-06-30 18:25:58.611 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:25:58.611 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book limit ?,? ::: DataSources: slave
2025-06-30 18:25:58.612 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:25:58.612 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:25:58.613 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:25:58.613 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:25:58.613 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:25:58.614 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==> Parameters: 
2025-06-30 18:25:58.616 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:25:58.617 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:25:58.617 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:25:58.617 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:25:58.617 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:25:58.618 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:25:58.620 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:25:58.621 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:25:58.621 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:25:58.621 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:25:58.621 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:25:58.623 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - <==      Total: 5
2025-06-30 18:25:58.623 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:25:58.624 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:25:58.624 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:25:58.624 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:25:58.624 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:25:58.624 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:25:58.624 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:25:58.625 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:25:58.625 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:25:58.625 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - <==      Total: 5
2025-06-30 18:25:58.626 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:25:58.627 [http-nio-8080-exec-1] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002207
2025-06-30 18:25:58.627 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:25:58.627 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:25:58.627 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:25:58.627 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:25:58.629 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:25:58.633 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:25:58.634 [http-nio-8080-exec-1] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111213826
2025-06-30 18:25:58.634 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:25:58.634 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:25:58.634 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:25:58.634 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:25:58.636 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:25:58.636 [http-nio-8080-exec-1] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111407010
2025-06-30 18:25:58.637 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:25:58.637 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:25:58.637 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:25:58.637 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:25:58.638 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:25:58.639 [http-nio-8080-exec-1] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787121291005
2025-06-30 18:25:58.639 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:25:58.639 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:25:58.640 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:25:58.640 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:25:58.641 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:25:58.642 [http-nio-8080-exec-1] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002214
2025-06-30 18:25:58.643 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==>  Preparing: select count(*) from book 
2025-06-30 18:25:58.643 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:25:58.643 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from book ::: DataSources: slave
2025-06-30 18:25:58.645 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==> Parameters: 
2025-06-30 18:25:58.647 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCount - <==      Total: 1
2025-06-30 18:26:03.984 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:26:03.985 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:03.985 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:26:03.985 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:26:03.986 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:26:03.987 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:03.987 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:03.987 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:03.987 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:26:03.988 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:26:03.989 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:03.989 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==>  Preparing: select name from publish 
2025-06-30 18:26:03.989 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:03.989 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:03.989 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:03.989 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select name from publish ::: DataSources: slave
2025-06-30 18:26:03.989 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:26:03.989 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==> Parameters: 
2025-06-30 18:26:03.991 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:03.992 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:03.992 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:03.992 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:03.993 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - <==      Total: 5
2025-06-30 18:26:03.993 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:26:03.994 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:03.994 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:03.994 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:03.994 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:03.994 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:26:03.995 [http-nio-8080-exec-7] INFO  com.huang.store.controller.BookController - 按页获取图书列表: page=1, pageSize=5
2025-06-30 18:26:03.995 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==>  Preparing: select * from book limit ?,? 
2025-06-30 18:26:03.995 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:03.995 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book limit ?,? ::: DataSources: slave
2025-06-30 18:26:03.995 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:26:03.995 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:03.997 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - <==      Total: 5
2025-06-30 18:26:03.998 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:03.998 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:03.998 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:03.999 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:26:04.000 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:04.000 [http-nio-8080-exec-7] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002207
2025-06-30 18:26:04.000 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:04.000 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:04.000 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:04.000 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:26:04.001 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:04.002 [http-nio-8080-exec-7] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111213826
2025-06-30 18:26:04.002 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:04.002 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:04.002 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:04.002 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:26:04.003 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:04.003 [http-nio-8080-exec-7] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111407010
2025-06-30 18:26:04.003 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:04.003 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:04.003 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:04.004 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:26:04.005 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:04.006 [http-nio-8080-exec-7] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787121291005
2025-06-30 18:26:04.006 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:04.006 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:04.006 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:04.006 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:26:04.007 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:04.007 [http-nio-8080-exec-7] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002214
2025-06-30 18:26:04.007 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==>  Preparing: select count(*) from book 
2025-06-30 18:26:04.007 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:04.007 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from book ::: DataSources: slave
2025-06-30 18:26:04.008 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==> Parameters: 
2025-06-30 18:26:04.008 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCount - <==      Total: 1
2025-06-30 18:26:07.224 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==>  Preparing: select name from publish 
2025-06-30 18:26:07.224 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:07.225 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select name from publish ::: DataSources: slave
2025-06-30 18:26:07.225 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==> Parameters: 
2025-06-30 18:26:07.225 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:26:07.225 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:07.226 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:26:07.226 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:26:07.225 [http-nio-8080-exec-8] INFO  com.huang.store.controller.BookController - 按页获取图书列表: page=1, pageSize=5
2025-06-30 18:26:07.227 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==>  Preparing: select * from book limit ?,? 
2025-06-30 18:26:07.227 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:07.227 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book limit ?,? ::: DataSources: slave
2025-06-30 18:26:07.227 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - <==      Total: 5
2025-06-30 18:26:07.228 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:26:07.228 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:26:07.228 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:07.229 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:07.229 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:07.229 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:26:07.230 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:26:07.231 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - <==      Total: 5
2025-06-30 18:26:07.231 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:07.231 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:07.231 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:07.231 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:26:07.231 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:07.231 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:07.231 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:07.231 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:26:07.233 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:07.233 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:07.233 [http-nio-8080-exec-8] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002207
2025-06-30 18:26:07.234 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:07.234 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:07.234 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:07.234 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:07.234 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:07.234 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:07.234 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:26:07.234 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:26:07.236 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:07.236 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:07.237 [http-nio-8080-exec-8] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111213826
2025-06-30 18:26:07.237 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:07.237 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:07.237 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:07.237 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:07.237 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:07.237 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:07.238 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:26:07.238 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:26:07.240 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:07.240 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:07.240 [http-nio-8080-exec-8] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111407010
2025-06-30 18:26:07.241 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:07.241 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:07.241 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:07.242 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:26:07.244 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:07.245 [http-nio-8080-exec-8] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787121291005
2025-06-30 18:26:07.245 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:07.245 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:07.245 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:07.245 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:26:07.247 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:07.248 [http-nio-8080-exec-8] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002214
2025-06-30 18:26:07.248 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==>  Preparing: select count(*) from book 
2025-06-30 18:26:07.249 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:07.249 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from book ::: DataSources: slave
2025-06-30 18:26:07.249 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==> Parameters: 
2025-06-30 18:26:07.251 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCount - <==      Total: 1
2025-06-30 18:26:10.288 [http-nio-8080-exec-4] INFO  com.huang.store.controller.BookController - 按页获取图书列表: page=1, pageSize=5
2025-06-30 18:26:10.288 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==>  Preparing: select name from publish 
2025-06-30 18:26:10.288 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:10.288 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select name from publish ::: DataSources: slave
2025-06-30 18:26:10.288 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==> Parameters: 
2025-06-30 18:26:10.290 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:26:10.290 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - <==      Total: 5
2025-06-30 18:26:10.290 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:10.290 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:26:10.291 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==>  Preparing: select * from book limit ?,? 
2025-06-30 18:26:10.292 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:10.292 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book limit ?,? ::: DataSources: slave
2025-06-30 18:26:10.293 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:26:10.291 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:26:10.297 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - <==      Total: 5
2025-06-30 18:26:10.297 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:26:10.298 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:10.298 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:10.298 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:10.298 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:10.298 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:10.298 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:10.298 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:26:10.298 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:26:10.300 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:10.300 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:26:10.300 [http-nio-8080-exec-4] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002207
2025-06-30 18:26:10.300 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:10.300 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:10.300 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:10.300 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:10.300 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:10.300 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:10.301 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:26:10.301 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:26:10.303 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:10.303 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:10.304 [http-nio-8080-exec-4] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111213826
2025-06-30 18:26:10.304 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:10.304 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:10.304 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:10.304 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:10.304 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:10.304 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:10.304 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:26:10.304 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:26:10.306 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:10.306 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:10.306 [http-nio-8080-exec-4] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111407010
2025-06-30 18:26:10.306 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:10.307 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:10.307 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:10.306 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:10.307 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:10.307 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:10.307 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:26:10.307 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:26:10.308 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:10.309 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:10.309 [http-nio-8080-exec-4] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787121291005
2025-06-30 18:26:10.310 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:10.310 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:10.310 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:10.310 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:26:10.313 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:10.313 [http-nio-8080-exec-4] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002214
2025-06-30 18:26:10.313 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==>  Preparing: select count(*) from book 
2025-06-30 18:26:10.314 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:10.314 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book ::: DataSources: slave
2025-06-30 18:26:10.315 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==> Parameters: 
2025-06-30 18:26:10.317 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCount - <==      Total: 1
2025-06-30 18:26:31.119 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:26:31.119 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==>  Preparing: select name from publish 
2025-06-30 18:26:31.119 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:31.119 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:26:31.119 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:31.119 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select name from publish ::: DataSources: slave
2025-06-30 18:26:31.119 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:26:31.119 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==> Parameters: 
2025-06-30 18:26:31.120 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:26:31.120 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - <==      Total: 5
2025-06-30 18:26:31.120 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:31.121 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:31.121 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:31.121 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:26:31.123 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:26:31.123 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:31.124 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:31.124 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:31.124 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:26:31.126 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:31.126 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:31.127 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:31.127 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:31.127 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:26:31.129 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:31.129 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:31.129 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:31.129 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:31.129 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:26:31.131 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:31.709 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 18:26:31.709 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:31.709 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 18:26:31.710 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 18:26:31.710 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 18:26:31.711 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 18:26:31.711 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:31.711 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 18:26:31.713 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 18:26:31.714 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 18:26:31.714 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:31.714 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:31.714 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:31.714 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:26:31.715 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:31.716 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 18:26:31.716 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:31.716 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 18:26:31.716 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 18:26:31.718 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 18:26:31.718 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 18:26:31.718 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:31.718 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 18:26:31.719 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 18:26:31.720 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 18:26:41.155 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==>  Preparing: select name from publish 
2025-06-30 18:26:41.155 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:41.155 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select name from publish ::: DataSources: slave
2025-06-30 18:26:41.155 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==> Parameters: 
2025-06-30 18:26:41.155 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:26:41.156 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:41.156 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:26:41.156 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:26:41.156 [http-nio-8080-exec-3] INFO  com.huang.store.controller.BookController - 按页获取图书列表: page=1, pageSize=5
2025-06-30 18:26:41.156 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - <==      Total: 5
2025-06-30 18:26:41.156 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==>  Preparing: select * from book limit ?,? 
2025-06-30 18:26:41.157 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:26:41.157 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:41.157 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book limit ?,? ::: DataSources: slave
2025-06-30 18:26:41.157 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:26:41.157 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:41.157 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:41.157 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:41.157 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:26:41.160 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:26:41.161 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:41.161 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:41.161 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:41.161 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:26:41.161 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - <==      Total: 5
2025-06-30 18:26:41.162 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:41.162 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:41.162 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:41.162 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:26:41.162 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:41.163 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:41.163 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:41.163 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:41.163 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:41.163 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:26:41.163 [http-nio-8080-exec-3] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002207
2025-06-30 18:26:41.163 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:41.163 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:41.163 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:41.163 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:26:41.164 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:41.164 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:41.164 [http-nio-8080-exec-3] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111213826
2025-06-30 18:26:41.164 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:41.164 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:41.164 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:41.164 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:41.164 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:41.164 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:41.164 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:26:41.164 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:26:41.166 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:41.166 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:41.166 [http-nio-8080-exec-3] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111407010
2025-06-30 18:26:41.166 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:41.167 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:41.167 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:41.167 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:26:41.167 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:41.168 [http-nio-8080-exec-3] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787121291005
2025-06-30 18:26:41.168 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:41.168 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:41.168 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:41.168 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:26:41.168 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:41.168 [http-nio-8080-exec-3] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002214
2025-06-30 18:26:41.169 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==>  Preparing: select count(*) from book 
2025-06-30 18:26:41.169 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:41.169 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from book ::: DataSources: slave
2025-06-30 18:26:41.169 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==> Parameters: 
2025-06-30 18:26:41.169 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCount - <==      Total: 1
2025-06-30 18:26:51.055 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==>  Preparing: select name from publish 
2025-06-30 18:26:51.055 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:51.055 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:26:51.056 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select name from publish ::: DataSources: slave
2025-06-30 18:26:51.056 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:51.056 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:26:51.056 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:26:51.056 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==> Parameters: 
2025-06-30 18:26:51.056 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 按页获取图书列表: page=1, pageSize=5
2025-06-30 18:26:51.057 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==>  Preparing: select * from book limit ?,? 
2025-06-30 18:26:51.057 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - <==      Total: 5
2025-06-30 18:26:51.057 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:51.057 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book limit ?,? ::: DataSources: slave
2025-06-30 18:26:51.057 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:26:51.057 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:26:51.057 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:51.057 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:51.057 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:51.057 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:26:51.058 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:26:51.058 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:51.058 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:51.058 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:51.058 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - <==      Total: 5
2025-06-30 18:26:51.058 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:26:51.059 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:51.059 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:51.059 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:51.059 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:26:51.060 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:51.060 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:51.061 [http-nio-8080-exec-5] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002207
2025-06-30 18:26:51.061 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:51.061 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:51.061 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:51.061 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:51.061 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:51.061 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:26:51.061 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:51.061 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:26:51.062 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:51.063 [http-nio-8080-exec-5] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111213826
2025-06-30 18:26:51.063 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:51.063 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:51.063 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:51.063 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:51.063 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:26:51.063 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:51.063 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:51.063 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:51.063 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:26:51.064 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:51.064 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:51.064 [http-nio-8080-exec-5] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111407010
2025-06-30 18:26:51.064 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:51.064 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:51.064 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:51.065 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:26:51.067 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:51.067 [http-nio-8080-exec-5] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787121291005
2025-06-30 18:26:51.068 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:51.068 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:51.068 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:51.068 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:26:51.069 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:51.069 [http-nio-8080-exec-5] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002214
2025-06-30 18:26:51.070 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==>  Preparing: select count(*) from book 
2025-06-30 18:26:51.070 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:51.070 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from book ::: DataSources: slave
2025-06-30 18:26:51.070 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==> Parameters: 
2025-06-30 18:26:51.070 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCount - <==      Total: 1
2025-06-30 18:26:56.718 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:26:56.719 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:56.719 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:26:56.719 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==>  Preparing: select name from publish 
2025-06-30 18:26:56.719 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:56.719 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:26:56.719 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select name from publish ::: DataSources: slave
2025-06-30 18:26:56.719 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==> Parameters: 
2025-06-30 18:26:56.720 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - <==      Total: 5
2025-06-30 18:26:56.721 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:26:56.722 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:56.722 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:56.722 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:56.722 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:26:56.724 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:26:56.725 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:56.725 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:56.725 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:56.725 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:26:56.727 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:56.727 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:56.727 [http-nio-8080-exec-6] INFO  com.huang.store.controller.BookController - 按页获取图书列表: page=1, pageSize=5
2025-06-30 18:26:56.727 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:56.727 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:56.728 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==>  Preparing: select * from book limit ?,? 
2025-06-30 18:26:56.728 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:56.728 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book limit ?,? ::: DataSources: slave
2025-06-30 18:26:56.728 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:26:56.728 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:26:56.730 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:56.731 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:56.731 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:56.731 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:56.732 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:26:56.732 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - <==      Total: 5
2025-06-30 18:26:56.733 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:56.733 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:56.733 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:56.733 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:26:56.734 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:56.735 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:56.735 [http-nio-8080-exec-6] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002207
2025-06-30 18:26:56.736 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:56.736 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:56.736 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:56.736 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:26:56.738 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:56.739 [http-nio-8080-exec-6] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111213826
2025-06-30 18:26:56.739 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:56.739 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:56.739 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:56.740 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:26:56.741 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:56.742 [http-nio-8080-exec-6] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111407010
2025-06-30 18:26:56.742 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:56.742 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:56.742 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:56.742 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:26:56.744 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:56.745 [http-nio-8080-exec-6] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787121291005
2025-06-30 18:26:56.746 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:56.746 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:56.746 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:56.746 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:26:56.750 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:56.750 [http-nio-8080-exec-6] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002214
2025-06-30 18:26:56.750 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==>  Preparing: select count(*) from book 
2025-06-30 18:26:56.750 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:56.750 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from book ::: DataSources: slave
2025-06-30 18:26:56.750 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==> Parameters: 
2025-06-30 18:26:56.751 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCount - <==      Total: 1
2025-06-30 18:26:58.601 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:26:58.601 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:58.601 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:26:58.601 [http-nio-8080-exec-7] INFO  com.huang.store.controller.BookController - 按页获取图书列表: page=1, pageSize=5
2025-06-30 18:26:58.602 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:26:58.602 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==>  Preparing: select * from book limit ?,? 
2025-06-30 18:26:58.601 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==>  Preparing: select name from publish 
2025-06-30 18:26:58.602 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:58.602 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book limit ?,? ::: DataSources: slave
2025-06-30 18:26:58.602 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:58.602 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select name from publish ::: DataSources: slave
2025-06-30 18:26:58.602 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:26:58.602 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==> Parameters: 
2025-06-30 18:26:58.604 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:26:58.604 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - <==      Total: 5
2025-06-30 18:26:58.605 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:58.605 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:58.605 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - <==      Total: 5
2025-06-30 18:26:58.605 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:58.605 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:26:58.605 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:58.606 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:58.606 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:58.606 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:26:58.607 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:26:58.607 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:58.608 [http-nio-8080-exec-7] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002207
2025-06-30 18:26:58.608 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:58.608 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:58.608 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:58.608 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:58.608 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:26:58.608 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:58.608 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:58.608 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:26:58.609 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:58.610 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:58.610 [http-nio-8080-exec-7] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111213826
2025-06-30 18:26:58.610 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:58.610 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:58.610 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:58.610 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:58.610 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:58.610 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:58.610 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:26:58.610 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:26:58.611 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:58.612 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:58.612 [http-nio-8080-exec-7] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111407010
2025-06-30 18:26:58.612 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:58.612 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:26:58.612 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:58.612 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:58.612 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:58.612 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:26:58.612 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:26:58.612 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:26:58.613 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:58.613 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:26:58.613 [http-nio-8080-exec-7] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787121291005
2025-06-30 18:26:58.613 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:26:58.613 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:58.613 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:26:58.613 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:26:58.613 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:26:58.614 [http-nio-8080-exec-7] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002214
2025-06-30 18:26:58.614 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==>  Preparing: select count(*) from book 
2025-06-30 18:26:58.614 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:26:58.614 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from book ::: DataSources: slave
2025-06-30 18:26:58.614 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==> Parameters: 
2025-06-30 18:26:58.615 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCount - <==      Total: 1
2025-06-30 18:27:09.136 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:27:09.137 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:27:09.137 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:27:09.137 [http-nio-8080-exec-8] INFO  com.huang.store.controller.BookController - 按页获取图书列表: page=1, pageSize=5
2025-06-30 18:27:09.137 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==>  Preparing: select name from publish 
2025-06-30 18:27:09.137 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:27:09.137 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:27:09.137 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select name from publish ::: DataSources: slave
2025-06-30 18:27:09.137 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==>  Preparing: select * from book limit ?,? 
2025-06-30 18:27:09.137 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:27:09.137 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book limit ?,? ::: DataSources: slave
2025-06-30 18:27:09.137 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==> Parameters: 
2025-06-30 18:27:09.138 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:27:09.139 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - <==      Total: 5
2025-06-30 18:27:09.139 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:27:09.140 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:27:09.140 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:27:09.140 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:27:09.141 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:27:09.142 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - <==      Total: 5
2025-06-30 18:27:09.142 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:27:09.142 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:27:09.142 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:27:09.142 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:27:09.142 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:27:09.143 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:27:09.143 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:27:09.143 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:27:09.143 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:27:09.145 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:27:09.145 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:27:09.145 [http-nio-8080-exec-8] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002207
2025-06-30 18:27:09.146 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:27:09.146 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:27:09.146 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:27:09.146 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:27:09.146 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:27:09.146 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:27:09.146 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:27:09.146 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:27:09.147 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:27:09.148 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:27:09.148 [http-nio-8080-exec-8] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111213826
2025-06-30 18:27:09.148 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:27:09.148 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:27:09.148 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:27:09.148 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:27:09.148 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:27:09.148 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:27:09.149 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:27:09.149 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:27:09.150 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:27:09.151 [http-nio-8080-exec-8] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111407010
2025-06-30 18:27:09.151 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:27:09.151 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:27:09.151 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:27:09.151 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:27:09.152 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:27:09.153 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:27:09.153 [http-nio-8080-exec-8] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787121291005
2025-06-30 18:27:09.153 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:27:09.153 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:27:09.153 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:27:09.154 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:27:09.155 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:27:09.155 [http-nio-8080-exec-8] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002214
2025-06-30 18:27:09.155 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==>  Preparing: select count(*) from book 
2025-06-30 18:27:09.155 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:27:09.155 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from book ::: DataSources: slave
2025-06-30 18:27:09.155 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==> Parameters: 
2025-06-30 18:27:09.156 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCount - <==      Total: 1
2025-06-30 18:34:34.971 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 18:34:34.971 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:34.971 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 18:34:34.972 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:34:34.972 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:34.972 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:34:34.974 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 18:34:34.974 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:34.974 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:34:34.976 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:34:34.976 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:34.977 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:34:34.977 [http-nio-8080-exec-2] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 18:34:34.977 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:34:34.977 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:34.977 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:34:34.991 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:34:34.993 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 18:34:34.994 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 18:34:34.994 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:34:34.995 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:34:34.995 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:34.995 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:34:34.995 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:34:34.996 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:34.996 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:34:34.996 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:34:34.996 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 18:34:34.997 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:34:34.997 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:34:34.997 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:34:34.997 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:34.997 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:34.998 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:34:34.998 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:34:34.998 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:34:34.998 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 18:34:34.999 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:34:34.999 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 18:34:34.999 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:34:35.000 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:35.000 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:34:35.001 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:34:35.002 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:34:35.003 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:34:35.003 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:34:35.004 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:34:35.005 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:34:35.006 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:34:35.006 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:34:35.006 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:34:35.006 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:35.006 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:34:35.007 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:34:35.007 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:35.007 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:34:35.007 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:34:35.007 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:34:35.008 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:34:35.008 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:34:35.008 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:34:35.008 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:34:35.008 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:35.008 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:34:35.008 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:34:35.008 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:35.008 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:34:35.008 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:34:35.008 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:34:35.009 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:34:35.010 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:34:35.010 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:35.010 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:34:35.010 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:34:35.010 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:34:35.010 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:34:35.010 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:35.010 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:34:35.010 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:34:35.010 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:34:35.010 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:34:35.011 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:35.011 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:34:35.011 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:34:35.011 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:34:35.011 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:34:35.011 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:34:35.011 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:34:35.011 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:35.011 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:34:35.011 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:35.011 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:34:35.012 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:34:35.012 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:34:35.012 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:34:35.013 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:34:55.238 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:34:55.238 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:55.238 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:34:55.239 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:34:55.240 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:34:55.240 [http-nio-8080-exec-9] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 18:34:55.312 [http-nio-8080-exec-9] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=56464ff@456.com, password=$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy, enabled=true, roles=[ROLE_USER]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=B7023B3F4C27BD5ACF7B11120DD13678], Granted Authorities=[ROLE_USER]]
2025-06-30 18:34:55.314 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:34:55.314 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:55.314 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:34:55.314 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:34:55.315 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:34:56.361 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:34:56.361 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:56.361 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:34:56.363 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:34:56.368 [http-nio-8080-exec-8] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 18:34:56.368 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:34:56.368 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:56.368 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:34:56.367 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 18:34:56.368 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 18:34:56.368 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:56.368 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 18:34:56.368 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:56.368 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:34:56.368 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:34:56.368 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:34:56.368 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:56.368 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:34:56.368 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:34:56.369 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:56.369 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:34:56.368 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:34:56.368 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 18:34:56.370 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 18:34:56.370 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:34:56.370 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:34:56.370 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 18:34:56.370 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:34:56.370 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:34:56.370 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 18:34:56.370 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:34:56.370 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:56.370 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:56.370 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:34:56.370 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:34:56.371 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:34:56.371 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:34:56.371 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:56.371 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:34:56.371 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:34:56.371 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:56.371 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:34:56.372 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:34:56.372 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 18:34:56.372 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:34:56.372 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:34:56.372 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:34:56.372 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:34:56.372 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:56.372 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:34:56.372 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:34:56.372 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:34:56.373 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:34:56.374 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:34:56.374 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:34:56.374 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:56.374 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:34:56.374 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:34:56.374 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:34:56.374 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:56.374 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:34:56.374 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:34:56.375 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:34:56.375 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:34:56.375 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:34:56.375 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:34:56.375 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:56.375 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:34:56.375 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:34:56.376 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:56.376 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:34:56.376 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:34:56.376 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:34:56.376 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:34:56.377 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:34:56.377 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:34:56.378 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:56.378 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:34:56.378 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:34:56.378 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:34:56.379 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:34:56.379 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:56.379 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:34:56.379 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:34:56.379 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:34:56.379 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:34:56.379 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:56.379 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:34:56.379 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:34:56.380 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:34:56.380 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:34:56.381 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:34:56.381 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:34:56.381 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:34:56.382 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:34:56.383 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:35:00.540 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:35:00.540 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:35:00.540 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:35:00.541 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:35:00.544 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:35:00.545 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:35:00.545 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:35:00.545 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:35:00.545 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 18:35:00.545 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:35:00.545 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 18:35:00.546 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:35:00.547 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 18:35:00.547 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:35:00.548 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:35:00.548 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:35:00.548 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:35:00.549 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:35:00.549 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 18:35:00.549 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 18:35:00.550 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:35:00.550 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 18:35:00.551 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:35:00.551 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 18:35:00.551 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:35:00.551 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:35:00.551 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:35:00.552 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:35:00.552 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 18:35:00.552 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:35:00.552 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:35:00.552 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:35:00.552 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:35:00.553 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:35:00.553 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:35:00.554 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:35:00.555 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:35:00.555 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:35:00.556 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 18:35:00.557 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:35:00.557 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 18:35:00.556 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:35:00.559 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 18:35:00.560 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:35:00.561 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 18:35:00.563 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 18:35:00.563 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:35:00.563 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 18:35:00.564 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 18:35:00.566 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 18:39:33.438 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:39:33.438 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:33.438 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:39:33.442 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-30 18:39:33.444 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:39:33.445 [http-nio-8080-exec-8] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:2545059634@qq.com    数据库密码:$2a$10$w8zNNUSDq3MCiLDDuAhYXedA0QGva1Z4.6UxO61Njhsrlo8voc01G
2025-06-30 18:39:33.588 [http-nio-8080-exec-8] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=2545059634@qq.com, password=$2a$10$w8zNNUSDq3MCiLDDuAhYXedA0QGva1Z4.6UxO61Njhsrlo8voc01G, enabled=true, roles=[ROLE_ADMIN]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=B7023B3F4C27BD5ACF7B11120DD13678], Granted Authorities=[ROLE_ADMIN]]
2025-06-30 18:39:33.590 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:39:33.591 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:33.591 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:39:33.591 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-30 18:39:33.593 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:39:40.554 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:39:40.554 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:40.554 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:39:40.554 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:39:40.555 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==>  Preparing: select name from publish 
2025-06-30 18:39:40.555 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:40.555 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select name from publish ::: DataSources: slave
2025-06-30 18:39:40.555 [http-nio-8080-exec-4] INFO  com.huang.store.controller.BookController - 按页获取图书列表: page=1, pageSize=5
2025-06-30 18:39:40.555 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:39:40.555 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==>  Preparing: select * from book limit ?,? 
2025-06-30 18:39:40.555 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:40.555 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book limit ?,? ::: DataSources: slave
2025-06-30 18:39:40.555 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:39:40.556 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:40.556 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:39:40.556 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:39:40.558 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==> Parameters: 
2025-06-30 18:39:40.559 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - <==      Total: 5
2025-06-30 18:39:40.559 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - <==      Total: 5
2025-06-30 18:39:40.559 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:39:40.559 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:40.559 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:39:40.561 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:39:40.561 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:39:40.562 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:39:40.563 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:39:40.563 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:40.563 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:39:40.563 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:39:40.563 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:39:40.563 [http-nio-8080-exec-4] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002207
2025-06-30 18:39:40.563 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:39:40.563 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:40.563 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:39:40.563 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:39:40.564 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:39:40.564 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:39:40.564 [http-nio-8080-exec-4] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111213826
2025-06-30 18:39:40.564 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:39:40.564 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:40.564 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:39:40.564 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:39:40.564 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:40.564 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:39:40.564 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:39:40.565 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:39:40.566 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:39:40.566 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:39:40.566 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:39:40.566 [http-nio-8080-exec-4] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111407010
2025-06-30 18:39:40.566 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:40.566 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:39:40.566 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:39:40.566 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:40.566 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:39:40.566 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:39:40.566 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:39:40.568 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:39:40.568 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:39:40.568 [http-nio-8080-exec-4] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787121291005
2025-06-30 18:39:40.568 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:39:40.569 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:40.569 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:39:40.569 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:39:40.570 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:39:40.571 [http-nio-8080-exec-4] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002214
2025-06-30 18:39:40.571 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==>  Preparing: select count(*) from book 
2025-06-30 18:39:40.571 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:40.571 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from book ::: DataSources: slave
2025-06-30 18:39:40.571 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==> Parameters: 
2025-06-30 18:39:40.573 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCount - <==      Total: 1
2025-06-30 18:39:58.425 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==>  Preparing: select name from publish 
2025-06-30 18:39:58.425 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:58.425 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select name from publish ::: DataSources: slave
2025-06-30 18:39:58.426 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==> Parameters: 
2025-06-30 18:39:58.426 [http-nio-8080-exec-1] INFO  com.huang.store.controller.OrderController - 获取订单列表: page=1, pageSize=5
2025-06-30 18:39:58.426 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - <==      Total: 5
2025-06-30 18:39:58.441 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:39:58.441 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:58.441 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:39:58.445 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:39:58.451 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 2
2025-06-30 18:39:58.452 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE beUserDelete = ? 
2025-06-30 18:39:58.452 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:58.452 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  beUserDelete = ? ::: DataSources: slave
2025-06-30 18:39:58.452 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: false(Boolean)
2025-06-30 18:39:58.453 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:39:59.765 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==>  Preparing: select name from publish 
2025-06-30 18:39:59.765 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:59.765 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select name from publish ::: DataSources: slave
2025-06-30 18:39:59.765 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:39:59.765 [http-nio-8080-exec-6] INFO  com.huang.store.controller.BookController - 按页获取图书列表: page=1, pageSize=5
2025-06-30 18:39:59.765 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:59.765 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:39:59.765 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==> Parameters: 
2025-06-30 18:39:59.765 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==>  Preparing: select * from book limit ?,? 
2025-06-30 18:39:59.765 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:39:59.765 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:59.765 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book limit ?,? ::: DataSources: slave
2025-06-30 18:39:59.765 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:39:59.766 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - <==      Total: 5
2025-06-30 18:39:59.766 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:39:59.766 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:39:59.766 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:59.766 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:39:59.766 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:39:59.766 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - <==      Total: 5
2025-06-30 18:39:59.767 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:39:59.767 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:59.767 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:39:59.767 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:39:59.767 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:39:59.767 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:39:59.767 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:59.767 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:39:59.767 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:39:59.767 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:39:59.768 [http-nio-8080-exec-6] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002207
2025-06-30 18:39:59.768 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:39:59.768 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:59.768 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:39:59.768 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:39:59.768 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:39:59.768 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:39:59.769 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:59.769 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:39:59.769 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:39:59.770 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:39:59.770 [http-nio-8080-exec-6] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111213826
2025-06-30 18:39:59.770 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:39:59.770 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:59.770 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:39:59.770 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:39:59.771 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:39:59.771 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:39:59.771 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:59.771 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:39:59.771 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:39:59.772 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:39:59.773 [http-nio-8080-exec-6] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111407010
2025-06-30 18:39:59.773 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:39:59.773 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:59.773 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:39:59.773 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:39:59.773 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:39:59.774 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:39:59.774 [http-nio-8080-exec-6] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787121291005
2025-06-30 18:39:59.774 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:39:59.774 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:59.774 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:39:59.774 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:39:59.775 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:39:59.775 [http-nio-8080-exec-6] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002214
2025-06-30 18:39:59.775 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==>  Preparing: select count(*) from book 
2025-06-30 18:39:59.775 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:39:59.775 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from book ::: DataSources: slave
2025-06-30 18:39:59.775 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==> Parameters: 
2025-06-30 18:39:59.777 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCount - <==      Total: 1
2025-06-30 18:40:05.527 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==>  Preparing: select name from publish 
2025-06-30 18:40:05.527 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:40:05.527 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select name from publish ::: DataSources: slave
2025-06-30 18:40:05.527 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==> Parameters: 
2025-06-30 18:40:05.528 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - <==      Total: 5
2025-06-30 18:40:05.529 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:40:05.529 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:40:05.529 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:40:05.529 [http-nio-8080-exec-10] INFO  com.huang.store.controller.BookController - 按页获取图书列表: page=1, pageSize=5
2025-06-30 18:40:05.529 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:40:05.529 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==>  Preparing: select * from book limit ?,? 
2025-06-30 18:40:05.529 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:40:05.529 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book limit ?,? ::: DataSources: slave
2025-06-30 18:40:05.529 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:40:05.530 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:40:05.530 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:40:05.530 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:40:05.530 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:40:05.530 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:40:05.530 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBooksByPage - <==      Total: 5
2025-06-30 18:40:05.531 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:40:05.531 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:40:05.531 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:40:05.531 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:40:05.531 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:40:05.531 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:40:05.531 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:40:05.531 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:40:05.531 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:40:05.531 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:40:05.532 [http-nio-8080-exec-10] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002207
2025-06-30 18:40:05.532 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:40:05.532 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:40:05.532 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:40:05.532 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:40:05.532 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:40:05.533 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:40:05.533 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:40:05.533 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:40:05.533 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:40:05.533 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:40:05.533 [http-nio-8080-exec-10] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111213826
2025-06-30 18:40:05.534 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:40:05.534 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:40:05.534 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:40:05.534 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:40:05.534 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:40:05.534 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:40:05.534 [http-nio-8080-exec-10] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787111407010
2025-06-30 18:40:05.534 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:40:05.534 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:40:05.534 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:40:05.534 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:40:05.534 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:40:05.534 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:40:05.534 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:40:05.534 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:40:05.535 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:40:05.535 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:40:05.535 [http-nio-8080-exec-10] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787121291005
2025-06-30 18:40:05.535 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:40:05.535 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:40:05.535 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:40:05.535 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:40:05.536 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:40:05.536 [http-nio-8080-exec-10] DEBUG com.huang.store.controller.BookController - 设置图书封面图片: isbn=9787020002214
2025-06-30 18:40:05.536 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==>  Preparing: select count(*) from book 
2025-06-30 18:40:05.536 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:40:05.536 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from book ::: DataSources: slave
2025-06-30 18:40:05.536 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCount - ==> Parameters: 
2025-06-30 18:40:05.537 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCount - <==      Total: 1
2025-06-30 18:49:24.164 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 18:49:24.164 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 18:49:24.164 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:24.165 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 18:49:24.166 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:49:24.166 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:24.166 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:49:24.170 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 18:49:24.170 [http-nio-8080-exec-1] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 18:49:24.171 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:49:24.171 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:24.171 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:49:24.172 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:49:24.173 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:49:24.174 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 18:49:24.174 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:49:24.174 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:24.174 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:49:24.174 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:49:24.174 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:24.174 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:49:24.175 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:49:24.175 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:49:24.164 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:24.175 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:49:24.177 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:49:24.177 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:49:24.180 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 18:49:24.180 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:49:24.184 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:24.184 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:49:24.184 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:49:24.184 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:24.184 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:49:24.184 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:49:24.184 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:49:24.185 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 18:49:24.185 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:49:24.186 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 18:49:24.186 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:49:24.186 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:49:24.186 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:24.186 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:49:24.186 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:49:24.186 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:49:24.187 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:49:24.187 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:24.187 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:49:24.187 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:49:24.187 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:49:24.187 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:49:24.187 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:24.187 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:49:24.187 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:49:24.187 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:49:24.188 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:49:24.188 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:24.188 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:49:24.188 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:49:24.188 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:49:24.188 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:49:24.188 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:24.188 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:49:24.189 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:49:24.189 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:49:24.189 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:49:24.190 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:24.190 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:49:24.190 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:49:24.191 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:49:24.186 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:49:24.188 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:49:24.193 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:24.193 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:49:24.193 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:49:24.193 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:49:24.193 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:24.193 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:49:24.193 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:49:24.180 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:49:24.194 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:24.194 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:49:24.194 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:49:24.194 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:49:24.194 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:49:24.194 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:49:24.194 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:24.194 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:49:24.194 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:49:24.195 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:49:24.195 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:49:24.196 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:49:24.196 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:24.196 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:49:24.196 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:49:24.197 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:49:45.271 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:49:45.272 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:45.272 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:49:45.273 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:49:45.278 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:49:45.278 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:49:45.278 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:45.278 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:49:45.279 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:49:45.281 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:49:45.281 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:49:45.281 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:45.281 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:49:45.282 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:49:45.283 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:49:45.284 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:49:45.284 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:45.284 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:49:45.284 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:49:45.286 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:49:45.287 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:49:45.287 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:45.287 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:49:45.287 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:49:45.289 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:49:45.304 [http-nio-8080-exec-2] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 18:49:45.325 [http-nio-8080-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 18:49:47.619 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:49:47.619 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 18:49:47.619 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:47.619 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:49:47.619 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:47.619 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:49:47.620 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:49:47.620 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:49:47.621 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:49:47.622 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:47.622 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:49:47.621 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 18:49:47.621 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:49:47.622 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:47.622 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 18:49:47.622 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:49:47.622 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:47.622 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:49:47.623 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:49:47.623 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:49:47.622 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 18:49:47.622 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:49:47.623 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:49:47.623 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:47.623 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:47.623 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:49:47.623 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 18:49:47.624 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:49:47.623 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:49:47.624 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:49:47.626 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 18:49:47.626 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 18:49:47.626 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:49:47.626 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:49:47.628 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:49:47.628 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:47.628 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:49:47.628 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:49:47.628 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:47.628 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:49:47.628 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:49:47.628 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:47.628 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:49:47.628 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:49:47.628 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:47.628 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:49:47.629 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 18:49:47.629 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:49:47.629 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:49:47.630 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:49:47.630 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 18:49:47.630 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:49:47.630 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:49:47.630 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:49:47.631 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:49:47.631 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:49:47.631 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:47.631 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:49:47.632 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:49:47.633 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:49:47.634 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:49:47.634 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:49:47.634 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:47.634 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:49:47.635 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:49:47.635 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:49:47.635 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:47.635 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:49:47.635 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:49:47.636 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:49:47.637 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:49:47.637 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:49:47.637 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:49:47.637 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:47.637 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:47.637 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:49:47.637 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:49:47.637 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:49:47.637 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:49:47.639 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:49:47.639 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:49:47.639 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:49:47.639 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:47.639 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:49:47.639 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:49:47.639 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:47.639 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:49:47.640 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:49:47.640 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:49:47.641 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:49:47.641 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:49:47.642 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:49:47.642 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:49:47.642 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:49:47.642 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:49:47.644 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:50:25.933 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:50:25.933 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:25.933 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:50:25.933 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:50:25.938 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:50:25.939 [http-nio-8080-exec-1] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 18:50:26.007 [http-nio-8080-exec-1] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=56464ff@456.com, password=$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy, enabled=true, roles=[ROLE_USER]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=B7023B3F4C27BD5ACF7B11120DD13678], Granted Authorities=[ROLE_USER]]
2025-06-30 18:50:26.008 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:50:26.008 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:26.008 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:50:26.008 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:50:26.009 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:50:27.059 [http-nio-8080-exec-10] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 18:50:27.059 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:50:27.059 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:27.059 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:50:27.059 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:50:27.059 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:27.059 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:50:27.059 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 18:50:27.059 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 18:50:27.059 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:50:27.059 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:27.059 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:50:27.059 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:50:27.059 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:27.059 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:27.059 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 18:50:27.059 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:50:27.059 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:50:27.059 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:27.059 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:50:27.059 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:50:27.060 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:50:27.059 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:50:27.060 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 18:50:27.060 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 18:50:27.060 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:50:27.060 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:50:27.060 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:50:27.060 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:27.060 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:27.060 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:50:27.060 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:50:27.061 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:50:27.063 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:50:27.063 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:50:27.063 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 18:50:27.063 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:50:27.063 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:27.063 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:50:27.064 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:50:27.064 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:50:27.064 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:50:27.064 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 18:50:27.064 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:50:27.064 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:27.064 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:50:27.064 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:50:27.064 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:50:27.064 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:27.064 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:50:27.064 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:50:27.064 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:50:27.064 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:50:27.065 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 18:50:27.065 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:50:27.065 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:50:27.066 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:50:27.066 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:50:27.066 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:27.066 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:50:27.066 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:27.066 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:50:27.066 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:50:27.066 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:50:27.067 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:50:27.067 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:50:27.067 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:50:27.067 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:50:27.067 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:27.067 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:27.067 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:50:27.067 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:50:27.068 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:50:27.068 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:50:27.070 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:50:27.070 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:50:27.070 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:50:27.070 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:50:27.070 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:27.070 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:50:27.070 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:27.070 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:50:27.070 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:50:27.070 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:50:27.071 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:50:27.071 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:50:27.071 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:50:27.071 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:27.071 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:50:27.072 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:50:27.072 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:50:27.073 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:50:27.073 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:27.073 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:50:27.073 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:50:27.074 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:50:29.072 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:50:29.073 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:29.073 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:50:29.076 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:50:29.080 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 18:50:29.081 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 18:50:29.081 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:29.081 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:50:29.083 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 18:50:29.084 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:50:38.542 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 18:50:38.542 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 18:50:38.542 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:38.543 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:50:38.543 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:50:38.543 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:50:38.543 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:38.543 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:50:38.544 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:50:38.544 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:50:38.544 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:38.542 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:38.544 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:50:38.544 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 18:50:38.545 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:50:38.545 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 18:50:38.546 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:50:38.546 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:50:38.546 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:38.546 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:50:38.546 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:50:38.547 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 18:50:38.547 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 18:50:38.547 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:50:38.547 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:38.547 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:50:38.547 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:50:38.547 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:38.547 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:50:38.547 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:50:38.547 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:50:38.547 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:50:38.548 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:50:38.548 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:38.548 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:50:38.548 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:50:38.549 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:50:38.549 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:50:38.550 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:50:38.550 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:38.550 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:50:38.550 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:50:38.547 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:50:38.543 [http-nio-8080-exec-6] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 18:50:38.551 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:38.551 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:50:38.551 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:50:38.552 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:50:38.552 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:50:38.552 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:38.552 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:50:38.552 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:50:38.552 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:38.552 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:50:38.552 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 18:50:38.552 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:50:38.552 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:50:38.552 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:50:38.552 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:50:38.552 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:38.552 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 18:50:38.552 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:50:38.553 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:50:38.553 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:50:38.553 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:50:38.553 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:38.553 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:50:38.553 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:50:38.554 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:50:38.555 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:50:38.555 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:38.555 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:50:38.555 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:50:38.556 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:50:38.556 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:50:38.557 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:50:38.557 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:50:38.558 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:50:38.558 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:38.558 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:50:38.558 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:38.558 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:50:38.558 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:50:38.559 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:50:38.559 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:50:38.560 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:50:38.560 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:38.560 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:50:38.560 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:50:38.561 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:50:38.561 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:50:38.562 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:50:38.562 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:38.562 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:50:38.562 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:50:38.563 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:50:44.168 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:50:44.168 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:44.168 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:50:44.168 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:50:44.170 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:50:44.170 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:50:44.170 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:44.170 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:50:44.171 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:50:44.173 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:50:44.173 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 18:50:44.173 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:44.173 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 18:50:44.173 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 18:50:44.173 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:50:44.173 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:44.173 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:50:44.174 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:50:44.174 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:50:44.174 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 18:50:44.175 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:50:44.175 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 18:50:44.175 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:44.175 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:44.175 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:50:44.175 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 18:50:44.175 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:50:44.175 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 18:50:44.175 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 18:50:44.176 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:50:44.176 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:50:44.176 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:44.176 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:50:44.176 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:50:44.176 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:44.176 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:50:44.176 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:50:44.176 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:50:44.177 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:50:44.177 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:50:44.177 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 18:50:44.177 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:44.177 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 18:50:44.177 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 18:50:44.181 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 18:50:44.182 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 18:50:44.182 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:44.182 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 18:50:44.183 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 18:50:44.184 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 18:50:47.120 [http-nio-8080-exec-1] INFO  com.huang.store.controller.CartController - 添加图书到购物车: 用户=56464ff@456.com, 图书ID=1, 数量=1
2025-06-30 18:50:47.121 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.CartMapper.existProduct - ==>  Preparing: select count(1) from cart where account=? and id = ? 
2025-06-30 18:50:47.121 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:47.122 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(1) from cart where account=? and id = ? ::: DataSources: slave
2025-06-30 18:50:47.123 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.CartMapper.existProduct - ==> Parameters: 56464ff@456.com(String), 1(Integer)
2025-06-30 18:50:47.125 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.CartMapper.existProduct - <==      Total: 1
2025-06-30 18:50:47.126 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.CartMapper.addProduct - ==>  Preparing: insert into cart(account,id,num,addTime) values (?,?,?,?) 
2025-06-30 18:50:47.129 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:47.129 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: insert into cart(account,id,num,addTime)
            values (?,?,?,?) ::: DataSources: master
2025-06-30 18:50:47.212 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.CartMapper.addProduct - ==> Parameters: 56464ff@456.com(String), 1(Integer), 1(Integer), 2025-06-30 18:50:47.126(Timestamp)
2025-06-30 18:50:47.249 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.CartMapper.addProduct - <==    Updates: 1
2025-06-30 18:50:47.249 [http-nio-8080-exec-1] INFO  com.huang.store.controller.CartController - 添加到购物车成功: 用户=56464ff@456.com, 图书ID=1, 数量=1
2025-06-30 18:50:50.617 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,put,num,addTime,account from book join cart on book.id = cart.id where account=? limit ?,? 
2025-06-30 18:50:50.617 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:50.617 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,put,num,addTime,account
         from book join cart on book.id = cart.id
         where account=? limit ?,? ::: DataSources: slave
2025-06-30 18:50:50.621 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==> Parameters: 56464ff@456.com(String), 0(Integer), 10(Integer)
2025-06-30 18:50:50.625 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - <==      Total: 1
2025-06-30 18:50:50.625 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:50:50.625 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:50.625 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:50:50.626 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:50:50.627 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:50:54.048 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBatchBookList - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,IFNULL(num,1) from book left join cart on book.id = cart.id where book.id in ( ? ) 
2025-06-30 18:50:54.048 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:54.048 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,IFNULL(num,1)
         from book left join cart on book.id = cart.id
         where book.id in
         (  
            ?
         ) ::: DataSources: slave
2025-06-30 18:50:54.053 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBatchBookList - ==> Parameters: 1(Integer)
2025-06-30 18:50:54.057 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBatchBookList - <==      Total: 2
2025-06-30 18:50:54.058 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CartMapper.getBookCount - ==>  Preparing: select num from cart where account=? and id=? 
2025-06-30 18:50:54.058 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:54.058 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select num from cart where account=? and id=? ::: DataSources: slave
2025-06-30 18:50:54.058 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CartMapper.getBookCount - ==> Parameters: 56464ff@456.com(String), 1(Integer)
2025-06-30 18:50:54.059 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CartMapper.getBookCount - <==      Total: 1
2025-06-30 18:50:54.060 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CartMapper.getBookCount - ==>  Preparing: select num from cart where account=? and id=? 
2025-06-30 18:50:54.060 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:54.060 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select num from cart where account=? and id=? ::: DataSources: slave
2025-06-30 18:50:54.060 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CartMapper.getBookCount - ==> Parameters: 56464ff@456.com(String), 1(Integer)
2025-06-30 18:50:54.061 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CartMapper.getBookCount - <==      Total: 1
2025-06-30 18:50:54.062 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CartMapper.delBatchProduct - ==>  Preparing: delete from cart where account=? and id in ( ? ) 
2025-06-30 18:50:54.062 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:54.062 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: delete from cart where account=? and id in
         (  
            ?
         ) ::: DataSources: master
2025-06-30 18:50:54.064 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CartMapper.delBatchProduct - ==> Parameters: 56464ff@456.com(String), 1(Integer)
2025-06-30 18:50:54.075 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CartMapper.delBatchProduct - <==    Updates: 1
2025-06-30 18:50:54.075 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:50:54.075 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:54.075 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:50:54.075 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:50:54.076 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:50:54.076 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:50:54.076 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:54.076 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:50:54.077 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:50:54.077 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:50:54.078 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false 
2025-06-30 18:50:54.078 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:50:54.078 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-06-30 18:50:54.079 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:50:54.080 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 0
2025-06-30 18:51:09.944 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.AddressMapper.addAddress - ==>  Preparing: insert into address(account,name,phone,addr,label) values (?,?,?,?,?) 
2025-06-30 18:51:09.944 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:51:09.944 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: insert into address(account,name,phone,addr,label)
            values (?,?,?,?,?) ::: DataSources: master
2025-06-30 18:51:09.944 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.AddressMapper.addAddress - ==> Parameters: 56464ff@456.com(String), dsjfalk(String), flakf;lakf(String), flajklj(String), gajklajg(String)
2025-06-30 18:51:09.949 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.AddressMapper.addAddress - <==    Updates: 1
2025-06-30 18:51:09.963 [http-nio-8080-exec-8] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-06-30 18:51:09.964 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false 
2025-06-30 18:51:09.964 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:51:09.964 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-06-30 18:51:09.964 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:51:09.965 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 1
2025-06-30 18:51:09.966 [http-nio-8080-exec-8] DEBUG com.huang.store.controller.UserController - 找到1个地址
2025-06-30 18:51:17.313 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.modifyBookStock - ==>  Preparing: update book set stock=stock-? where id=? and stock>=? 
2025-06-30 18:51:17.313 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:51:17.313 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: update book
            set stock=stock-?
                where id=? and stock>=? ::: DataSources: master
2025-06-30 18:51:17.317 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.modifyBookStock - ==> Parameters: 1(Integer), 1(Integer), 1(Integer)
2025-06-30 18:51:17.324 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.modifyBookStock - <==    Updates: 1
2025-06-30 18:51:17.348 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.modifyBookStock - ==>  Preparing: update book set stock=stock-? where id=? and stock>=? 
2025-06-30 18:51:17.348 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:51:17.348 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: update book
            set stock=stock-?
                where id=? and stock>=? ::: DataSources: master
2025-06-30 18:51:17.350 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.modifyBookStock - ==> Parameters: 1(Integer), 1(Integer), 1(Integer)
2025-06-30 18:51:17.351 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.modifyBookStock - <==    Updates: 1
2025-06-30 18:51:17.357 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.addOrder - ==>  Preparing: insert into bookorder(orderId,account,addressId,orderTime,shipTime,getTime,evaluateTime,closeTime,orderStatus,logisticsNum,confirmTime) values (?,?,?,?,?,?,?,?,?,?,?) 
2025-06-30 18:51:17.357 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:51:17.357 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: insert into bookorder(orderId,account,addressId,orderTime,shipTime,getTime,evaluateTime,closeTime,orderStatus,logisticsNum,confirmTime)
            values (?,?,?,?,?,?,?,?,?,?,?) ::: DataSources: master
2025-06-30 18:51:17.362 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.addOrder - ==> Parameters: 20250630185117146375(String), 56464ff@456.com(String), 4(Integer), 2025-06-30 18:51:17.269(Timestamp), null, null, null, null, 已付款(String), null, null
2025-06-30 18:51:17.365 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.addOrder - <==    Updates: 1
2025-06-30 18:51:17.380 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.OrderMapper.batchAddOrderDetail - ==>  Preparing: insert into orderdetail(orderId,bookId,num,price) values (?,?,?,?) , (?,?,?,?) 
2025-06-30 18:51:17.380 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:51:17.380 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: insert into orderdetail(orderId,bookId,num,price)
        values
          
            (?,?,?,?)
         , 
            (?,?,?,?) ::: DataSources: master
2025-06-30 18:51:17.383 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.OrderMapper.batchAddOrderDetail - ==> Parameters: 20250630185117146375(String), 1(Integer), 1(Integer), 45.0(Double), 20250630185117146375(String), 1(Integer), 1(Integer), 45.0(Double)
2025-06-30 18:51:17.403 [http-nio-8080-exec-4] ERROR druid.sql.Statement - {conn-10001, pstmt-20005} execute error. insert into orderdetail(orderId,bookId,num,price)
        values
          
            (?,?,?,?)
         , 
            (?,?,?,?)
java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '20250630185117146375-1' for key 'orderdetail.PRIMARY'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:118)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3409)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:619)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:498)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor22.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at jdk.proxy4/jdk.proxy4.$Proxy113.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at jdk.proxy2/jdk.proxy2.$Proxy79.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:271)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:144)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at jdk.proxy3/jdk.proxy3.$Proxy95.batchAddOrderDetail(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy96.batchAddOrderDetail(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.addOrder(OrderServiceImpl.java:151)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$65eed1f4.addOrder(<generated>)
	at com.huang.store.controller.OrderController.addOrder(OrderController.java:116)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-30 18:51:17.475 [http-nio-8080-exec-4] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.dao.DuplicateKeyException: 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '20250630185117146375-1' for key 'orderdetail.PRIMARY'
### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]
### The error may involve com.huang.store.mapper.OrderMapper.batchAddOrderDetail-Inline
### The error occurred while setting parameters
### SQL: insert into orderdetail(orderId,bookId,num,price)         values                        (?,?,?,?)          ,              (?,?,?,?)
### Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '20250630185117146375-1' for key 'orderdetail.PRIMARY'
; Duplicate entry '20250630185117146375-1' for key 'orderdetail.PRIMARY'; nested exception is java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '20250630185117146375-1' for key 'orderdetail.PRIMARY'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:244)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:88)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)
	at jdk.proxy2/jdk.proxy2.$Proxy79.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:271)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:144)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at jdk.proxy3/jdk.proxy3.$Proxy95.batchAddOrderDetail(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:241)
	at jdk.proxy3/jdk.proxy3.$Proxy96.batchAddOrderDetail(Unknown Source)
	at com.huang.store.service.OrderServiceImpl.addOrder(OrderServiceImpl.java:151)
	at com.huang.store.service.OrderServiceImpl$$FastClassBySpringCGLIB$$5e40a99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at com.huang.store.service.OrderServiceImpl$$EnhancerBySpringCGLIB$$65eed1f4.addOrder(<generated>)
	at com.huang.store.controller.OrderController.addOrder(OrderController.java:116)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '20250630185117146375-1' for key 'orderdetail.PRIMARY'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:118)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3409)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:619)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:498)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor22.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at jdk.proxy4/jdk.proxy4.$Proxy113.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	... 141 common frames omitted
2025-06-30 18:51:17.477 [http-nio-8080-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.dao.DuplicateKeyException: <EOL><EOL>### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '20250630185117146375-1' for key 'orderdetail.PRIMARY'<EOL><EOL>### The error may exist in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]<EOL><EOL>### The error may involve com.huang.store.mapper.OrderMapper.batchAddOrderDetail-Inline<EOL><EOL>### The error occurred while setting parameters<EOL><EOL>### SQL: insert into orderdetail(orderId,bookId,num,price)         values                        (?,?,?,?)          ,              (?,?,?,?)<EOL><EOL>### Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '20250630185117146375-1' for key 'orderdetail.PRIMARY'<EOL>; Duplicate entry '20250630185117146375-1' for key 'orderdetail.PRIMARY'; nested exception is java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '20250630185117146375-1' for key 'orderdetail.PRIMARY']
2025-06-30 18:52:14.520 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 18:52:14.520 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:52:14.520 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 18:52:14.521 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:52:14.521 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:52:14.521 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:52:14.523 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:52:14.524 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 18:52:14.527 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 18:52:14.527 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:52:14.527 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:52:14.527 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:52:14.527 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:52:14.528 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:52:14.529 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:52:14.529 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:52:14.529 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:52:14.529 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:52:14.529 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:52:14.531 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:52:14.531 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:52:14.531 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:52:14.531 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:52:14.520 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 18:52:14.531 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:52:14.531 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:52:14.531 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:52:14.531 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:52:14.531 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:52:14.531 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:52:14.533 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:52:14.535 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:52:14.535 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:52:14.535 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:52:14.535 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:52:14.536 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:52:14.536 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:52:14.536 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:52:14.538 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:52:14.539 [http-nio-8080-exec-1] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 18:52:14.539 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:52:14.539 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:52:14.539 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:52:14.542 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:52:14.542 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:52:14.542 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:52:14.542 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:52:14.542 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:52:14.542 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:52:14.543 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 18:52:14.544 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:52:14.544 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:52:14.544 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:52:14.544 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:52:14.544 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:52:14.544 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:52:14.546 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:52:14.546 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:52:14.546 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:52:14.546 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:52:14.546 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:52:14.546 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:52:14.546 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 18:52:14.547 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:52:14.547 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:52:14.547 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:52:14.547 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:52:14.547 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:52:14.548 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 18:52:14.549 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:52:14.549 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:52:14.550 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:52:14.550 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:52:14.550 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:52:14.550 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:52:14.550 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:52:14.551 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:52:14.551 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:52:14.551 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:52:14.551 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:52:14.552 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:52:14.552 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:52:14.552 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:52:14.552 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:52:14.552 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:52:14.553 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:52:14.554 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:52:14.554 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:52:14.554 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:52:14.554 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:52:14.555 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:52:14.556 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:52:14.556 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:52:14.556 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:52:14.556 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:52:14.557 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:53:14.743 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:53:14.743 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:53:14.743 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:53:14.747 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:53:14.748 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 18:53:14.748 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:53:14.748 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 18:53:14.748 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:53:14.749 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:53:14.749 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:53:14.749 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:53:14.749 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:53:14.750 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:53:14.751 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:53:14.751 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:53:14.751 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:53:14.751 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:53:14.752 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 18:53:14.752 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:53:14.752 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 18:53:14.752 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:53:14.752 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:53:14.752 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:53:14.753 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 18:53:14.753 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:53:14.753 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:53:14.753 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 18:53:14.753 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 18:53:14.753 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:53:14.754 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:53:14.754 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:53:14.754 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:53:14.754 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:53:14.754 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 18:53:14.755 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:53:14.755 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:53:14.755 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:53:14.755 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:53:14.755 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:53:14.756 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:53:14.757 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 18:53:14.757 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:53:14.757 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 18:53:14.757 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 18:53:14.759 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 18:53:14.760 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 18:53:14.760 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:53:14.760 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 18:53:14.761 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 18:53:14.763 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 18:53:20.461 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getOneBookList - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description from book where book.id in ( ? ) 
2025-06-30 18:53:20.461 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:53:20.461 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
        birthday,marketPrice,price,stock,description
        from book
        where book.id in
         (  
            ?
         ) ::: DataSources: slave
2025-06-30 18:53:20.462 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getOneBookList - ==> Parameters: 1(Integer)
2025-06-30 18:53:20.465 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getOneBookList - <==      Total: 1
2025-06-30 18:53:20.466 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:53:20.466 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:53:20.466 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:53:20.466 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:53:20.467 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:53:20.468 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false 
2025-06-30 18:53:20.468 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:53:20.468 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-06-30 18:53:20.468 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:53:20.471 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 1
2025-06-30 18:54:03.090 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.AddressMapper.addAddress - ==>  Preparing: insert into address(account,name,phone,addr,label) values (?,?,?,?,?) 
2025-06-30 18:54:03.090 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:03.090 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: insert into address(account,name,phone,addr,label)
            values (?,?,?,?,?) ::: DataSources: master
2025-06-30 18:54:03.094 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.AddressMapper.addAddress - ==> Parameters: 56464ff@456.com(String), 123(String), 13246578(String), 465789(String), 132564(String)
2025-06-30 18:54:03.101 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.AddressMapper.addAddress - <==    Updates: 1
2025-06-30 18:54:03.119 [http-nio-8080-exec-5] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-06-30 18:54:03.119 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false 
2025-06-30 18:54:03.119 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:03.119 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-06-30 18:54:03.119 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:54:03.121 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-06-30 18:54:03.121 [http-nio-8080-exec-5] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-06-30 18:54:16.115 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.modifyBookStock - ==>  Preparing: update book set stock=stock-? where id=? and stock>=? 
2025-06-30 18:54:16.115 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:16.115 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: update book
            set stock=stock-?
                where id=? and stock>=? ::: DataSources: master
2025-06-30 18:54:16.116 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.modifyBookStock - ==> Parameters: 1(Integer), 1(Integer), 1(Integer)
2025-06-30 18:54:16.117 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.modifyBookStock - <==    Updates: 1
2025-06-30 18:54:16.120 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.addOrder - ==>  Preparing: insert into bookorder(orderId,account,addressId,orderTime,shipTime,getTime,evaluateTime,closeTime,orderStatus,logisticsNum,confirmTime) values (?,?,?,?,?,?,?,?,?,?,?) 
2025-06-30 18:54:16.120 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:16.120 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: insert into bookorder(orderId,account,addressId,orderTime,shipTime,getTime,evaluateTime,closeTime,orderStatus,logisticsNum,confirmTime)
            values (?,?,?,?,?,?,?,?,?,?,?) ::: DataSources: master
2025-06-30 18:54:16.120 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.addOrder - ==> Parameters: 20250630185416346684(String), 56464ff@456.com(String), 5(Integer), 2025-06-30 18:54:16.111(Timestamp), null, null, null, null, 已付款(String), null, null
2025-06-30 18:54:16.121 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.addOrder - <==    Updates: 1
2025-06-30 18:54:16.121 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.OrderMapper.batchAddOrderDetail - ==>  Preparing: insert into orderdetail(orderId,bookId,num,price) values (?,?,?,?) 
2025-06-30 18:54:16.122 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:16.122 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: insert into orderdetail(orderId,bookId,num,price)
        values
          
            (?,?,?,?) ::: DataSources: master
2025-06-30 18:54:16.122 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.OrderMapper.batchAddOrderDetail - ==> Parameters: 20250630185416346684(String), 1(Integer), 1(Integer), 45.0(Double)
2025-06-30 18:54:16.123 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.OrderMapper.batchAddOrderDetail - <==    Updates: 1
2025-06-30 18:54:16.123 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.ExpenseMapper.addExpense - ==>  Preparing: insert into expense(orderId,productTotalMoney,freight,coupon,activityDiscount,allPrice,finallyPrice) values (?,?,?,?,?,?,?) 
2025-06-30 18:54:16.123 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:16.123 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: insert into expense(orderId,productTotalMoney,freight,coupon,activityDiscount,allPrice,finallyPrice)
            values (?,?,?,?,?,?,?) ::: DataSources: master
2025-06-30 18:54:16.124 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.ExpenseMapper.addExpense - ==> Parameters: 20250630185416346684(String), 45.0(Double), 0.0(Double), 0(Integer), 0.0(Double), 45.0(Double), 45.0(Double)
2025-06-30 18:54:16.124 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.ExpenseMapper.addExpense - <==    Updates: 1
2025-06-30 18:54:17.176 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:54:17.176 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:17.176 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:54:17.177 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:54:17.179 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 18:54:17.180 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 18:54:17.180 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:17.180 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 18:54:17.181 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 18:54:17.182 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 18:54:17.193 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:54:17.193 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:17.193 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:54:17.193 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:54:17.194 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:54:17.195 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 18:54:17.195 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:17.195 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:54:17.196 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 18:54:17.197 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:54:38.057 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:54:38.058 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:38.058 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:54:38.058 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:54:38.061 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 18:54:38.062 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 18:54:38.062 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:38.062 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 18:54:38.062 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 18:54:38.063 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 18:54:38.064 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:54:38.064 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:38.064 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:54:38.064 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:54:38.065 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:54:38.066 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 18:54:38.066 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:38.066 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:54:38.066 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 18:54:38.067 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:54:38.465 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:54:38.465 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:38.465 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:54:38.469 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:54:38.470 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 18:54:38.471 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ? 
2025-06-30 18:54:38.471 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:38.471 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:54:38.475 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-06-30 18:54:38.476 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:54:39.315 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:54:39.315 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:39.315 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:54:39.316 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:54:39.317 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 18:54:39.318 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ? 
2025-06-30 18:54:39.318 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:39.318 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:54:39.318 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-06-30 18:54:39.319 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:54:39.934 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:54:39.934 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:39.934 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:54:39.935 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:54:39.936 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 18:54:39.937 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ? 
2025-06-30 18:54:39.937 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:39.937 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:54:39.937 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-06-30 18:54:39.939 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:54:40.425 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:54:40.425 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:40.425 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:54:40.425 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:54:40.429 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 18:54:40.430 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 18:54:40.430 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:40.430 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 18:54:40.430 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 18:54:40.431 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 18:54:40.431 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:54:40.431 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:40.431 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:54:40.431 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:54:40.432 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:54:40.433 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 18:54:40.433 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:40.433 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:54:40.433 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 18:54:40.434 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:54:44.880 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.findOrderDto - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.id = ? 
2025-06-30 18:54:44.880 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:44.880 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
        WHERE o.id = ? ::: DataSources: slave
2025-06-30 18:54:44.886 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.findOrderDto - ==> Parameters: 4(Integer)
2025-06-30 18:54:44.888 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.findOrderDto - <==      Total: 1
2025-06-30 18:54:44.888 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 18:54:44.888 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:44.888 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 18:54:44.888 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 18:54:44.890 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 18:54:44.890 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 18:54:44.890 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:44.890 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 18:54:44.891 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 18:54:44.892 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 18:54:44.893 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:54:44.893 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:44.893 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:54:44.893 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:54:44.894 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:54:49.595 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:54:49.595 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:49.595 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:54:49.596 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:54:49.598 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 18:54:49.598 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 18:54:49.598 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:49.598 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 18:54:49.598 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 18:54:49.600 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 18:54:49.600 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:54:49.600 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:49.600 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:54:49.600 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:54:49.601 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:54:49.601 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 18:54:49.601 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:49.601 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:54:49.601 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 18:54:49.602 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:54:50.616 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:54:50.616 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:50.616 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:54:50.616 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:54:50.618 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 18:54:50.618 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ? 
2025-06-30 18:54:50.618 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:50.618 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:54:50.618 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-06-30 18:54:50.619 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:54:51.325 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:54:51.325 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:51.325 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:54:51.326 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:54:51.327 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 18:54:51.327 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ? 
2025-06-30 18:54:51.327 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:51.327 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:54:51.327 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-06-30 18:54:51.328 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:54:52.456 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:54:52.456 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:52.456 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:54:52.456 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), true(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:54:52.457 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 18:54:52.457 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 18:54:52.457 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:52.457 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:54:52.458 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), true(Boolean)
2025-06-30 18:54:52.458 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:54:53.171 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:54:53.172 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:53.172 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:54:53.172 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:54:53.174 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 18:54:53.175 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 18:54:53.175 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:53.175 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 18:54:53.175 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 18:54:53.177 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 18:54:53.178 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:54:53.178 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:53.178 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:54:53.178 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:54:53.179 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:54:53.179 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 18:54:53.179 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:53.180 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:54:53.180 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 18:54:53.181 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:54:53.785 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getOneBookList - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description from book where book.id in ( ? ) 
2025-06-30 18:54:53.785 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:53.785 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
        birthday,marketPrice,price,stock,description
        from book
        where book.id in
         (  
            ?
         ) ::: DataSources: slave
2025-06-30 18:54:53.785 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getOneBookList - ==> Parameters: 1(Integer)
2025-06-30 18:54:53.787 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getOneBookList - <==      Total: 1
2025-06-30 18:54:53.788 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:54:53.788 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:53.788 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:54:53.788 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:54:53.789 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:54:53.789 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false 
2025-06-30 18:54:53.789 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:53.789 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-06-30 18:54:53.789 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:54:53.791 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-06-30 18:54:56.715 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:54:56.715 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:56.715 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:54:56.715 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:54:56.717 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:54:56.718 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:54:56.718 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 18:54:56.718 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:56.718 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:56.718 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 18:54:56.718 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:54:56.718 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:54:56.719 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:54:56.719 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:54:56.719 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:56.719 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:54:56.719 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:54:56.720 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:54:56.721 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:54:56.721 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 18:54:56.721 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:56.721 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:54:56.721 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:54:56.722 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:54:56.722 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 18:54:56.722 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 18:54:56.722 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:54:56.722 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:56.722 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:56.722 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 18:54:56.722 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:54:56.722 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 18:54:56.722 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:54:56.724 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 18:54:56.724 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:54:56.724 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:54:56.724 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:56.724 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:54:56.724 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:54:56.725 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:54:56.726 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 18:54:56.726 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:56.726 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 18:54:56.726 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 18:54:56.727 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 18:54:56.728 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 18:54:56.728 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:54:56.728 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 18:54:56.728 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 18:54:56.729 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 18:55:00.707 [http-nio-8080-exec-3] INFO  com.huang.store.controller.CartController - 添加图书到购物车: 用户=56464ff@456.com, 图书ID=1, 数量=1
2025-06-30 18:55:00.707 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.CartMapper.existProduct - ==>  Preparing: select count(1) from cart where account=? and id = ? 
2025-06-30 18:55:00.707 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:00.707 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(1) from cart where account=? and id = ? ::: DataSources: slave
2025-06-30 18:55:00.707 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.CartMapper.existProduct - ==> Parameters: 56464ff@456.com(String), 1(Integer)
2025-06-30 18:55:00.708 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.CartMapper.existProduct - <==      Total: 1
2025-06-30 18:55:00.708 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.CartMapper.addProduct - ==>  Preparing: insert into cart(account,id,num,addTime) values (?,?,?,?) 
2025-06-30 18:55:00.708 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:00.708 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: insert into cart(account,id,num,addTime)
            values (?,?,?,?) ::: DataSources: master
2025-06-30 18:55:00.708 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.CartMapper.addProduct - ==> Parameters: 56464ff@456.com(String), 1(Integer), 1(Integer), 2025-06-30 18:55:00.708(Timestamp)
2025-06-30 18:55:00.718 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.CartMapper.addProduct - <==    Updates: 1
2025-06-30 18:55:00.718 [http-nio-8080-exec-3] INFO  com.huang.store.controller.CartController - 添加到购物车成功: 用户=56464ff@456.com, 图书ID=1, 数量=1
2025-06-30 18:55:02.759 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:55:02.759 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:02.759 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:55:02.760 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:55:02.762 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:55:05.656 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:55:05.656 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:05.656 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:55:05.656 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:55:05.659 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 18:55:05.659 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 18:55:05.659 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:05.659 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 18:55:05.659 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 18:55:05.661 [http-nio-8080-exec-10] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 18:55:05.662 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:55:05.662 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:05.662 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:55:05.662 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:55:05.664 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:55:05.665 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 18:55:05.665 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:05.665 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:55:05.665 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 18:55:05.666 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:55:07.037 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:55:07.038 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:07.038 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:55:07.038 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:55:07.040 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 18:55:07.041 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 18:55:07.041 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:07.041 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 18:55:07.041 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 18:55:07.042 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 18:55:07.043 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:55:07.043 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:07.043 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:55:07.043 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:55:07.044 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:55:07.045 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 18:55:07.045 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:07.045 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:55:07.045 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 18:55:07.046 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:55:07.464 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:55:07.465 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:07.465 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:55:07.465 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:55:07.467 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 18:55:07.467 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ? 
2025-06-30 18:55:07.467 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:07.467 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:55:07.468 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-06-30 18:55:07.469 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:55:08.407 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:55:08.407 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:08.407 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:55:08.408 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:55:08.409 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 18:55:08.409 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ? 
2025-06-30 18:55:08.409 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:08.409 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:55:08.409 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-06-30 18:55:08.410 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:55:09.088 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:55:09.088 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:09.088 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:55:09.088 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:55:09.091 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 18:55:09.091 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 18:55:09.092 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:09.092 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 18:55:09.092 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 18:55:09.094 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 18:55:09.094 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:55:09.094 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:09.094 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:55:09.095 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:55:09.096 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:55:09.096 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 18:55:09.097 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:09.097 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:55:09.097 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 18:55:09.098 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:55:11.251 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,put,num,addTime,account from book join cart on book.id = cart.id where account=? limit ?,? 
2025-06-30 18:55:11.251 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:11.252 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,put,num,addTime,account
         from book join cart on book.id = cart.id
         where account=? limit ?,? ::: DataSources: slave
2025-06-30 18:55:11.253 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==> Parameters: 56464ff@456.com(String), 0(Integer), 10(Integer)
2025-06-30 18:55:11.256 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - <==      Total: 1
2025-06-30 18:55:11.256 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:55:11.256 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:11.256 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:55:11.256 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:55:11.258 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:55:15.747 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBatchBookList - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,IFNULL(num,1) from book left join cart on book.id = cart.id where book.id in ( ? ) 
2025-06-30 18:55:15.747 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:15.747 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,IFNULL(num,1)
         from book left join cart on book.id = cart.id
         where book.id in
         (  
            ?
         ) ::: DataSources: slave
2025-06-30 18:55:15.748 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBatchBookList - ==> Parameters: 1(Integer)
2025-06-30 18:55:15.749 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBatchBookList - <==      Total: 2
2025-06-30 18:55:15.750 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CartMapper.getBookCount - ==>  Preparing: select num from cart where account=? and id=? 
2025-06-30 18:55:15.750 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:15.750 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select num from cart where account=? and id=? ::: DataSources: slave
2025-06-30 18:55:15.750 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CartMapper.getBookCount - ==> Parameters: 56464ff@456.com(String), 1(Integer)
2025-06-30 18:55:15.751 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CartMapper.getBookCount - <==      Total: 1
2025-06-30 18:55:15.752 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CartMapper.getBookCount - ==>  Preparing: select num from cart where account=? and id=? 
2025-06-30 18:55:15.752 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:15.752 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select num from cart where account=? and id=? ::: DataSources: slave
2025-06-30 18:55:15.752 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CartMapper.getBookCount - ==> Parameters: 56464ff@456.com(String), 1(Integer)
2025-06-30 18:55:15.753 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CartMapper.getBookCount - <==      Total: 1
2025-06-30 18:55:15.753 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CartMapper.delBatchProduct - ==>  Preparing: delete from cart where account=? and id in ( ? ) 
2025-06-30 18:55:15.753 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:15.753 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: delete from cart where account=? and id in
         (  
            ?
         ) ::: DataSources: master
2025-06-30 18:55:15.753 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CartMapper.delBatchProduct - ==> Parameters: 56464ff@456.com(String), 1(Integer)
2025-06-30 18:55:15.768 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CartMapper.delBatchProduct - <==    Updates: 1
2025-06-30 18:55:15.768 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:55:15.768 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:15.768 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:55:15.768 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:55:15.769 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:55:15.769 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:55:15.769 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:15.769 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:55:15.769 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:55:15.770 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:55:15.770 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false 
2025-06-30 18:55:15.770 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:55:15.770 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-06-30 18:55:15.770 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:55:15.771 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-06-30 18:56:25.506 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 18:56:25.506 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:56:25.506 [http-nio-8080-exec-8] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 18:56:25.506 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:56:25.506 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:56:25.506 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 18:56:25.506 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:56:25.506 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:56:25.506 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:56:25.506 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:56:25.506 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 18:56:25.506 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:56:25.506 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:56:25.506 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:56:25.506 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:56:25.506 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:56:25.506 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:56:25.507 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:56:25.507 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:56:25.510 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 18:56:25.510 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 18:56:25.511 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:56:25.511 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 18:56:25.512 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 18:56:25.514 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:56:25.514 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:56:25.514 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:56:25.515 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:56:25.515 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 18:56:25.515 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:56:25.515 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:56:25.515 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:56:25.517 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:56:25.523 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:56:25.523 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:56:25.523 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:56:25.523 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:56:25.523 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:56:25.524 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:56:25.524 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:56:25.524 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:56:25.524 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:56:25.524 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:56:25.524 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:56:25.524 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:56:25.525 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:56:25.525 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:56:25.525 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:56:25.525 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:56:25.525 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:56:25.525 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:56:25.525 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:56:25.525 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:56:25.525 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:56:25.526 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:56:25.526 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:56:25.527 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:56:25.527 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:56:25.527 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:56:25.528 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:56:25.529 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:56:25.529 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:56:25.529 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:56:25.529 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:56:25.533 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:56:25.533 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:56:25.533 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:56:25.533 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:56:25.533 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:56:25.534 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:56:25.534 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:56:25.534 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:56:25.534 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:56:25.534 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:56:25.534 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:56:25.534 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:56:25.534 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:56:25.534 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:56:25.534 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:56:25.535 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:56:25.535 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:56:25.535 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:56:25.535 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:56:25.535 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:56:25.535 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:56:25.535 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:56:25.535 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:56:25.535 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:56:25.535 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:56:25.536 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:56:25.536 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:56:25.536 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:56:25.536 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:56:25.536 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:56:25.536 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:56:25.537 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:57:38.924 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:57:38.925 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:38.925 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:57:38.927 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:57:38.928 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:57:39.841 [http-nio-8080-exec-3] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-06-30 18:57:39.841 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false 
2025-06-30 18:57:39.841 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:39.841 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-06-30 18:57:39.841 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:57:39.842 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-06-30 18:57:39.843 [http-nio-8080-exec-3] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-06-30 18:57:41.417 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:57:41.418 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:41.418 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:57:41.418 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:57:41.419 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:57:43.983 [http-nio-8080-exec-6] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-06-30 18:57:43.983 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false 
2025-06-30 18:57:43.983 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:43.983 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-06-30 18:57:43.983 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-06-30 18:57:43.985 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-06-30 18:57:43.985 [http-nio-8080-exec-6] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-06-30 18:57:47.471 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:57:47.471 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:47.471 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:57:47.472 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:57:47.475 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 18:57:47.475 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 18:57:47.475 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:47.475 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 18:57:47.476 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 18:57:47.477 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 18:57:47.478 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:57:47.478 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:47.478 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:57:47.478 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:57:47.480 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:57:47.480 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 18:57:47.480 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:47.480 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:57:47.481 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 18:57:47.481 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:57:49.755 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:57:49.756 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:49.756 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:57:49.757 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 133@qq.com(String), 已收货(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:57:49.758 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 18:57:49.759 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ? 
2025-06-30 18:57:49.759 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:49.759 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:57:49.759 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 133@qq.com(String), 已收货(String), false(Boolean)
2025-06-30 18:57:49.760 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:57:51.266 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:57:51.266 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:51.266 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:57:51.266 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:57:51.268 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 18:57:51.268 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 18:57:51.268 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:51.268 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 18:57:51.269 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 18:57:51.270 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 18:57:51.270 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:57:51.270 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:51.270 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:57:51.271 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:57:51.271 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:57:51.272 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 18:57:51.272 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:51.272 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:57:51.272 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 18:57:51.272 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:57:52.490 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:57:52.490 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:52.490 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:57:52.490 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:57:52.495 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 18:57:52.496 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 18:57:52.496 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:52.496 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 18:57:52.496 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 18:57:52.498 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 18:57:52.498 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:57:52.498 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:52.498 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:57:52.498 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:57:52.499 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:57:52.500 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 18:57:52.500 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:52.500 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:57:52.500 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 18:57:52.501 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:57:53.021 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:57:53.021 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:53.021 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:57:53.021 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:57:53.022 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 18:57:53.023 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ? 
2025-06-30 18:57:53.023 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:53.023 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:57:53.023 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-06-30 18:57:53.024 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:57:53.551 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:57:53.552 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:53.552 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:57:53.552 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), true(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:57:53.553 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 18:57:53.554 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 18:57:53.554 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:53.554 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:57:53.554 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), true(Boolean)
2025-06-30 18:57:53.556 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:57:54.138 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:57:54.138 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:54.138 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:57:54.138 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), true(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:57:54.140 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 18:57:54.140 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 18:57:54.140 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:54.140 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:57:54.140 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), true(Boolean)
2025-06-30 18:57:54.141 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:57:54.622 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:57:54.622 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:54.622 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:57:54.622 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:57:54.625 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 18:57:54.625 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 18:57:54.625 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:54.625 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 18:57:54.625 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 18:57:54.626 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 18:57:54.626 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:57:54.626 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:54.626 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:57:54.626 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:57:54.627 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:57:54.627 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 18:57:54.627 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:57:54.627 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:57:54.628 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 18:57:54.628 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:58:00.010 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:58:00.011 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:00.011 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:58:00.011 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:58:00.020 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 18:58:00.020 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 18:58:00.020 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:00.020 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 18:58:00.020 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 18:58:00.022 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 18:58:00.023 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:58:00.023 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:00.023 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:58:00.023 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:58:00.024 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:58:00.024 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 18:58:00.024 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:00.024 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:58:00.024 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 18:58:00.026 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:58:03.967 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,put,num,addTime,account from book join cart on book.id = cart.id where account=? limit ?,? 
2025-06-30 18:58:03.967 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:03.967 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,put,num,addTime,account
         from book join cart on book.id = cart.id
         where account=? limit ?,? ::: DataSources: slave
2025-06-30 18:58:03.968 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==> Parameters: 56464ff@456.com(String), 0(Integer), 10(Integer)
2025-06-30 18:58:03.971 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - <==      Total: 0
2025-06-30 18:58:09.302 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 18:58:09.302 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:09.302 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 18:58:09.302 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 18:58:09.302 [http-nio-8080-exec-4] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 18:58:09.303 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 18:58:09.303 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:09.303 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 18:58:09.304 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 18:58:09.304 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:09.304 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:58:09.305 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 18:58:09.305 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:58:09.305 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:09.305 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:58:09.305 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:58:09.306 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 18:58:09.307 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:58:09.307 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:58:09.307 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:09.307 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:58:09.307 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 18:58:09.307 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 18:58:09.315 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:58:09.315 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:58:09.315 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:09.315 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:58:09.315 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 18:58:09.316 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:58:09.316 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:58:09.316 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:58:09.316 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:09.316 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:58:09.316 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 18:58:09.320 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:58:09.320 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:58:09.320 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:09.320 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:58:09.320 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 18:58:09.320 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 18:58:09.321 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:58:09.321 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:09.321 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:58:09.321 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:58:09.322 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:58:09.322 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:58:09.322 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:58:09.322 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:09.322 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:58:09.322 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:58:09.323 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:58:09.323 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:09.323 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:58:09.323 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:58:09.323 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:58:09.324 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 18:58:09.324 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:09.324 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 18:58:09.324 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:58:09.325 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 18:58:09.325 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:09.325 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 18:58:09.325 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 18:58:09.326 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 18:58:09.326 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 18:58:09.327 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 18:58:09.327 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 18:58:09.328 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:09.328 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 18:58:09.328 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 18:58:09.326 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:58:09.329 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:09.329 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:58:09.329 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:58:09.329 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 18:58:09.329 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:58:09.330 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:58:09.330 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:09.330 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:58:09.330 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:58:09.330 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:58:09.331 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:58:09.331 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:09.331 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:58:09.331 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:58:09.331 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:58:09.331 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:58:09.331 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:09.331 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:58:09.331 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:58:09.333 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:58:09.333 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:58:09.333 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:09.333 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:58:09.333 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:58:09.334 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:58:10.961 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 18:58:10.962 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:10.962 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 18:58:10.962 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 18:58:10.963 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 18:58:10.964 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:58:10.964 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:10.964 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:58:10.964 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 18:58:10.964 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 18:58:10.964 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:10.964 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 18:58:10.964 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 18:58:10.965 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:58:10.965 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 18:58:10.965 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:10.965 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:58:10.965 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 18:58:10.966 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:58:10.966 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:58:10.966 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:10.966 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:58:10.966 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 18:58:10.966 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 18:58:10.966 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 18:58:10.966 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:10.966 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 18:58:10.967 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 18:58:10.967 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:58:10.968 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 18:58:10.968 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:10.968 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 18:58:10.968 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 18:58:10.968 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 18:58:10.968 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:58:10.968 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:10.968 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:58:10.968 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:58:10.969 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 18:58:10.969 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:58:10.969 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 18:58:10.969 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:10.969 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 18:58:10.970 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 18:58:10.972 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 18:58:10.972 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 18:58:10.972 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:10.972 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 18:58:10.973 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 18:58:10.974 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 18:58:11.749 [http-nio-8080-exec-2] INFO  com.huang.store.controller.CartController - 添加图书到购物车: 用户=56464ff@456.com, 图书ID=1, 数量=1
2025-06-30 18:58:11.749 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.CartMapper.existProduct - ==>  Preparing: select count(1) from cart where account=? and id = ? 
2025-06-30 18:58:11.749 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:11.749 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(1) from cart where account=? and id = ? ::: DataSources: slave
2025-06-30 18:58:11.749 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.CartMapper.existProduct - ==> Parameters: 56464ff@456.com(String), 1(Integer)
2025-06-30 18:58:11.750 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.CartMapper.existProduct - <==      Total: 1
2025-06-30 18:58:11.750 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.CartMapper.addProduct - ==>  Preparing: insert into cart(account,id,num,addTime) values (?,?,?,?) 
2025-06-30 18:58:11.750 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:11.750 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: insert into cart(account,id,num,addTime)
            values (?,?,?,?) ::: DataSources: master
2025-06-30 18:58:11.752 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.CartMapper.addProduct - ==> Parameters: 56464ff@456.com(String), 1(Integer), 1(Integer), 2025-06-30 18:58:11.75(Timestamp)
2025-06-30 18:58:11.759 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.CartMapper.addProduct - <==    Updates: 1
2025-06-30 18:58:11.759 [http-nio-8080-exec-2] INFO  com.huang.store.controller.CartController - 添加到购物车成功: 用户=56464ff@456.com, 图书ID=1, 数量=1
2025-06-30 18:58:16.388 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,put,num,addTime,account from book join cart on book.id = cart.id where account=? limit ?,? 
2025-06-30 18:58:16.388 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:16.388 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,put,num,addTime,account
         from book join cart on book.id = cart.id
         where account=? limit ?,? ::: DataSources: slave
2025-06-30 18:58:16.389 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==> Parameters: 56464ff@456.com(String), 0(Integer), 10(Integer)
2025-06-30 18:58:16.391 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - <==      Total: 1
2025-06-30 18:58:16.392 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:58:16.392 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:16.392 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:58:16.392 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:58:16.393 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:58:17.886 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:58:17.886 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:17.886 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:58:17.886 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:58:17.888 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 18:58:17.889 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 18:58:17.889 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:17.889 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 18:58:17.889 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 18:58:17.893 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 18:58:17.893 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:58:17.893 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:17.893 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:58:17.893 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:58:17.895 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:58:17.895 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 18:58:17.895 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:17.895 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 18:58:17.895 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 18:58:17.896 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 18:58:21.734 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,put,num,addTime,account from book join cart on book.id = cart.id where account=? limit ?,? 
2025-06-30 18:58:21.734 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:21.734 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,put,num,addTime,account
         from book join cart on book.id = cart.id
         where account=? limit ?,? ::: DataSources: slave
2025-06-30 18:58:21.734 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==> Parameters: 56464ff@456.com(String), 0(Integer), 10(Integer)
2025-06-30 18:58:21.736 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - <==      Total: 1
2025-06-30 18:58:21.736 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 18:58:21.736 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:21.736 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 18:58:21.736 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 18:58:21.737 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 18:58:33.822 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:58:33.822 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:33.822 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:58:33.822 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-30 18:58:33.823 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:58:33.823 [http-nio-8080-exec-1] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:2545059634@qq.com    数据库密码:$2a$10$w8zNNUSDq3MCiLDDuAhYXedA0QGva1Z4.6UxO61Njhsrlo8voc01G
2025-06-30 18:58:33.963 [http-nio-8080-exec-1] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=2545059634@qq.com, password=$2a$10$w8zNNUSDq3MCiLDDuAhYXedA0QGva1Z4.6UxO61Njhsrlo8voc01G, enabled=true, roles=[ROLE_ADMIN]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=B7023B3F4C27BD5ACF7B11120DD13678], Granted Authorities=[ROLE_ADMIN]]
2025-06-30 18:58:33.966 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 18:58:33.966 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:33.966 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 18:58:33.966 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 2545059634@qq.com(String)
2025-06-30 18:58:33.967 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 18:58:39.294 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==>  Preparing: select name from publish 
2025-06-30 18:58:39.294 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:39.294 [http-nio-8080-exec-5] INFO  com.huang.store.controller.OrderController - 获取订单列表: page=1, pageSize=5
2025-06-30 18:58:39.294 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select name from publish ::: DataSources: slave
2025-06-30 18:58:39.294 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 18:58:39.294 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:39.294 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 18:58:39.294 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - ==> Parameters: 
2025-06-30 18:58:39.294 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: false(Boolean), 0(Integer), 5(Integer)
2025-06-30 18:58:39.295 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.PublishMapper.getPublishNames - <==      Total: 5
2025-06-30 18:58:39.297 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 3
2025-06-30 18:58:39.297 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE beUserDelete = ? 
2025-06-30 18:58:39.297 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 18:58:39.297 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  beUserDelete = ? ::: DataSources: slave
2025-06-30 18:58:39.298 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: false(Boolean)
2025-06-30 18:58:39.299 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 19:03:50.485 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 19:03:50.485 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:50.485 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 19:03:50.489 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 19:03:50.489 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:50.489 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 19:03:50.490 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 19:03:50.492 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 19:03:50.492 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 19:03:50.493 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 19:03:50.493 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:50.493 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 19:03:50.493 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 19:03:50.493 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 19:03:50.494 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 19:03:50.494 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:50.494 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:03:50.494 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:03:50.494 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 19:03:50.495 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 19:03:50.495 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:03:50.495 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:50.495 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:03:50.495 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 19:03:50.496 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:03:50.496 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:03:50.496 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:50.496 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:03:50.496 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 19:03:50.497 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:03:50.497 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 19:03:50.497 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:50.497 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:03:50.497 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:03:50.497 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:50.497 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:03:50.497 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:03:50.498 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 19:03:50.499 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 19:03:50.499 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 19:03:50.499 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:50.499 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:03:50.499 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:03:50.500 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:03:50.500 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:03:50.500 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:50.500 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:03:50.500 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 19:03:50.501 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:03:50.501 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:03:50.501 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:50.501 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:03:50.501 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 19:03:50.502 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 19:03:50.502 [http-nio-8080-exec-2] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 19:03:50.502 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 19:03:50.502 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:03:50.502 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:50.502 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 19:03:50.502 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 19:03:50.503 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 19:03:50.503 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 19:03:50.504 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:50.504 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 19:03:50.505 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 19:03:50.506 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 19:03:50.506 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:03:50.506 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:50.506 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:03:50.506 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 19:03:50.507 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 19:03:50.507 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:03:50.507 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:50.507 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:03:50.507 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 19:03:50.509 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:03:50.509 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 19:03:50.509 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:50.509 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:03:50.509 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:03:50.509 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:50.509 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:03:50.509 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 19:03:50.509 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:03:50.510 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:03:50.510 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 19:03:50.510 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:03:50.510 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 19:03:50.510 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:50.510 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:50.510 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:03:50.510 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:03:50.510 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:03:50.510 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 19:03:50.511 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 19:03:50.511 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:03:59.861 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 19:03:59.861 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:59.861 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 19:03:59.862 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 19:03:59.863 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 19:03:59.863 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:59.863 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 19:03:59.863 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 19:03:59.863 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 19:03:59.863 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:03:59.863 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:59.863 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:03:59.864 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 19:03:59.864 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 19:03:59.864 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 19:03:59.864 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 19:03:59.865 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:59.865 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:03:59.865 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 19:03:59.865 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:59.865 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:03:59.865 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 19:03:59.865 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 19:03:59.866 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:03:59.866 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:03:59.866 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 19:03:59.867 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:59.867 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:03:59.867 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 19:03:59.867 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 19:03:59.867 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:59.867 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 19:03:59.867 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:03:59.868 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 19:03:59.868 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:03:59.868 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:59.868 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:03:59.868 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 19:03:59.869 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:03:59.869 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 19:03:59.870 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 19:03:59.870 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:59.870 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 19:03:59.870 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 19:03:59.871 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 19:03:59.871 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 19:03:59.871 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:59.871 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 19:03:59.872 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 19:03:59.872 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 19:03:59.873 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:03:59.873 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:59.873 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:03:59.873 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 19:03:59.874 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:03:59.874 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:03:59.874 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:03:59.874 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:03:59.874 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 19:03:59.875 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:04:01.615 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 19:04:01.615 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:01.615 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 19:04:01.615 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 19:04:01.615 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 19:04:01.616 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:01.616 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 19:04:01.616 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 19:04:01.617 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 19:04:01.617 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 19:04:01.617 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:01.617 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 19:04:01.617 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 19:04:01.617 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 19:04:01.617 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 19:04:01.617 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:01.617 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:04:01.617 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 19:04:01.617 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:01.617 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:04:01.617 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:04:01.618 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 19:04:01.619 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 19:04:01.619 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 19:04:01.620 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:01.620 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:04:01.620 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:04:01.621 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 19:04:01.621 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 19:04:01.621 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:04:01.621 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:01.621 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 19:04:01.621 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 19:04:01.621 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 19:04:01.621 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:01.621 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:04:01.621 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:04:01.622 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 19:04:01.622 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 19:04:01.622 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:04:01.622 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:01.622 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:04:01.622 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:04:01.622 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:01.622 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:04:01.622 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 19:04:01.622 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 19:04:01.622 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 19:04:01.622 [http-nio-8080-exec-4] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 19:04:01.622 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 19:04:01.622 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:01.623 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:04:01.622 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 19:04:01.623 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:04:01.623 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:01.623 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 19:04:01.623 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 19:04:01.623 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:04:01.623 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:04:01.623 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:04:01.623 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:01.623 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:01.623 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:04:01.623 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:04:01.623 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 19:04:01.623 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 19:04:01.623 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 19:04:01.624 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 19:04:01.624 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 19:04:01.624 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:04:01.624 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:04:01.624 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:01.624 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:04:01.624 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 19:04:01.624 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:04:01.624 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:04:01.624 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:01.624 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:04:01.624 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 19:04:01.625 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:04:01.625 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:04:01.625 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:01.625 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:04:01.625 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 19:04:01.625 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:04:01.625 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:04:01.625 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:01.625 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:04:01.625 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 19:04:01.626 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:04:01.626 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:04:01.626 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:04:01.626 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:01.626 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:04:01.626 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 19:04:01.627 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:04:06.220 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 19:04:06.220 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:06.220 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 19:04:06.221 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 19:04:06.222 [http-nio-8080-exec-3] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 19:04:06.223 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 19:04:06.223 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:04:06.223 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:06.223 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:04:06.223 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 19:04:06.223 [http-nio-8080-exec-3] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 19:04:06.224 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 19:04:06.224 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:04:06.224 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:06.224 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:04:06.225 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 19:04:06.225 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:04:06.225 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:04:06.226 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:06.226 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:04:06.226 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 19:04:06.226 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:04:06.226 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:04:06.226 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:06.226 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:04:06.226 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 19:04:06.227 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:04:22.546 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 19:04:22.546 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:22.546 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 19:04:22.546 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 19:04:22.548 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 19:04:22.548 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:22.548 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 19:04:22.548 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 19:04:22.550 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 19:04:22.550 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:22.550 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:04:22.551 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:04:22.552 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 19:04:22.553 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 19:04:22.553 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:22.553 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:04:22.554 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:04:22.554 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 19:04:22.554 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 19:04:22.554 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:22.554 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:04:22.554 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:04:22.556 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 19:04:22.556 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 19:04:22.556 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 19:04:22.556 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:04:22.556 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:22.556 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:04:22.556 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 19:04:22.556 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 19:04:22.556 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:22.556 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 19:04:22.556 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 19:04:22.556 [http-nio-8080-exec-7] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 19:04:22.557 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:04:22.557 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:04:22.557 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:22.557 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:04:22.557 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 19:04:22.557 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 19:04:22.558 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:22.558 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:04:22.558 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:04:22.558 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 19:04:22.558 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:22.558 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 19:04:22.558 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:04:22.558 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 19:04:22.558 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 19:04:22.557 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 19:04:22.558 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:22.558 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:04:22.558 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 19:04:22.558 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:22.558 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:04:22.558 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 19:04:22.559 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 19:04:22.559 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 19:04:22.559 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 19:04:22.559 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 19:04:22.559 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:04:22.559 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 19:04:22.559 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:22.559 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:04:22.559 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:22.559 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:04:22.559 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 19:04:22.559 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:04:22.559 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:04:22.559 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:04:22.559 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:22.559 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:04:22.559 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 19:04:22.560 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:04:22.560 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 19:04:22.560 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 19:04:22.560 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:04:22.560 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:04:22.560 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:22.560 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:22.560 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:04:22.560 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:04:22.560 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 19:04:22.560 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 19:04:22.561 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:04:22.561 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:04:22.561 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:04:22.561 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:22.561 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:04:22.561 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 19:04:22.562 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:04:22.563 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:04:22.563 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:04:22.563 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:04:22.563 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 19:04:22.564 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:06:00.687 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 19:06:00.687 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:00.687 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 19:06:00.688 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 19:06:00.689 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 19:06:00.689 [http-nio-8080-exec-6] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 19:06:00.762 [http-nio-8080-exec-6] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=56464ff@456.com, password=$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy, enabled=true, roles=[ROLE_USER]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=B7023B3F4C27BD5ACF7B11120DD13678], Granted Authorities=[ROLE_USER]]
2025-06-30 19:06:00.763 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 19:06:00.763 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:00.763 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 19:06:00.763 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 19:06:00.763 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 19:06:01.811 [http-nio-8080-exec-8] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 19:06:01.811 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 19:06:01.811 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:01.811 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 19:06:01.811 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 19:06:01.811 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 19:06:01.811 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 19:06:01.812 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:01.812 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:01.812 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:06:01.812 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 19:06:01.812 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 19:06:01.812 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:01.812 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 19:06:01.812 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 19:06:01.812 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:01.812 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 19:06:01.813 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 19:06:01.813 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 19:06:01.813 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:01.813 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:06:01.813 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 19:06:01.813 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 19:06:01.813 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:01.813 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:06:01.814 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 19:06:01.814 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 19:06:01.814 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:06:01.815 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:01.815 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:06:01.816 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 19:06:01.816 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 19:06:01.816 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:06:01.816 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:01.816 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 19:06:01.816 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 19:06:01.816 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 19:06:01.816 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 19:06:01.817 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:06:01.817 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:01.817 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:06:01.817 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 19:06:01.817 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:06:01.817 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 19:06:01.818 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 19:06:01.818 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 19:06:01.818 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 19:06:01.818 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:01.818 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:06:01.818 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:01.818 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:06:01.818 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:06:01.818 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 19:06:01.818 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:06:01.818 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:06:01.818 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 19:06:01.818 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:06:01.818 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:01.818 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:06:01.818 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:06:01.818 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 19:06:01.819 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 19:06:01.819 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:06:01.820 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 19:06:01.820 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 19:06:01.820 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:06:01.820 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 19:06:01.820 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:01.820 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:01.820 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:06:01.820 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:06:01.820 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:06:01.820 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 19:06:01.821 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:06:01.821 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:06:01.821 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 19:06:01.821 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:06:01.821 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:06:01.821 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:01.821 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:01.821 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:06:01.822 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:06:01.822 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 19:06:01.822 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 19:06:01.823 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:06:01.823 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:06:01.823 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:06:01.823 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:01.823 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:06:01.823 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 19:06:01.824 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:06:01.824 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:06:01.824 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:01.824 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:06:01.824 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 19:06:01.825 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:06:02.984 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 19:06:02.984 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:02.984 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 19:06:02.985 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 19:06:02.986 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 19:06:02.987 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 19:06:02.987 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:02.987 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 19:06:02.987 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 19:06:02.991 [http-nio-8080-exec-7] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 19:06:02.991 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:06:02.991 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:02.991 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:06:02.991 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 19:06:02.992 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:06:02.993 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 19:06:02.993 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:06:02.993 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 19:06:02.993 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 19:06:02.993 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 19:10:06.969 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 19:10:06.969 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:06.969 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 19:10:06.969 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 19:10:06.969 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:06.969 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:10:06.972 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 19:10:06.972 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:06.972 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 19:10:06.974 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 19:10:06.974 [http-nio-8080-exec-3] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 19:10:06.974 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 19:10:06.974 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:06.974 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 19:10:06.975 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 19:10:06.976 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 19:10:06.976 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:06.976 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 19:10:06.976 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:10:06.977 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 19:10:06.977 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 19:10:06.978 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 19:10:06.978 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 19:10:06.978 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 19:10:06.978 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:06.978 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:10:06.978 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:10:06.978 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 19:10:06.979 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 19:10:06.988 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 19:10:06.989 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 19:10:06.989 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:06.989 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:10:06.989 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:10:06.990 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 19:10:06.990 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 19:10:06.990 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:06.990 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:10:06.990 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:10:06.991 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 19:10:06.991 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 19:10:06.991 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:06.991 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 19:10:06.991 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 19:10:06.991 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 19:10:06.991 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:10:06.991 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 19:10:06.991 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:06.991 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:10:06.991 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 19:10:06.991 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 19:10:06.991 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:06.991 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 19:10:06.991 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 19:10:06.991 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:10:06.991 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:10:06.991 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:06.991 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:10:06.991 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 19:10:06.991 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 19:10:06.992 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:10:06.992 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:06.992 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:10:06.992 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:10:06.992 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:10:06.992 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:06.992 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:10:06.992 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 19:10:06.992 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 19:10:06.992 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:10:06.992 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 19:10:06.993 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:10:06.993 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:06.993 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:10:06.993 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 19:10:06.993 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:10:06.993 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:06.993 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:10:06.993 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 19:10:06.993 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:10:06.994 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:10:06.994 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:06.994 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:10:06.994 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 19:10:06.994 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:10:06.994 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:10:06.994 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:06.994 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:10:06.994 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 19:10:06.995 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:10:06.995 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:10:06.996 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:10:06.996 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:06.996 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:10:06.996 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 19:10:06.996 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:10:08.434 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 19:10:08.435 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:08.435 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 19:10:08.436 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 19:10:08.437 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 19:10:08.438 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:10:08.438 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:08.438 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:10:08.438 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 19:10:08.438 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 19:10:08.438 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:08.438 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 19:10:08.438 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 19:10:08.438 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:10:08.438 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:08.438 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 19:10:08.438 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:10:08.438 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 19:10:08.439 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:10:08.439 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 19:10:08.440 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 19:10:08.440 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:10:08.440 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:08.440 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 19:10:08.440 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:08.440 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:10:08.440 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 19:10:08.440 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 19:10:08.441 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 19:10:08.441 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:10:08.441 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 19:10:08.441 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:08.441 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:10:08.444 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 19:10:08.444 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:08.444 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:10:08.444 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 19:10:08.444 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 19:10:08.445 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:10:08.446 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 19:10:08.446 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:08.446 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 19:10:08.447 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 19:10:08.447 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 19:10:08.458 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 19:10:08.458 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 19:10:08.458 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:08.458 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 19:10:08.459 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 19:10:08.460 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 19:10:10.048 [http-nio-8080-exec-4] INFO  com.huang.store.controller.CartController - 添加图书到购物车: 用户=56464ff@456.com, 图书ID=1, 数量=1
2025-06-30 19:10:10.048 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CartMapper.existProduct - ==>  Preparing: select count(1) from cart where account=? and id = ? 
2025-06-30 19:10:10.048 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:10.048 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(1) from cart where account=? and id = ? ::: DataSources: slave
2025-06-30 19:10:10.049 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CartMapper.existProduct - ==> Parameters: 56464ff@456.com(String), 1(Integer)
2025-06-30 19:10:10.050 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.CartMapper.existProduct - <==      Total: 1
2025-06-30 19:10:10.050 [http-nio-8080-exec-4] WARN  com.huang.store.controller.CartController - 购物车中已存在该图书: 用户=56464ff@456.com, 图书ID=1
2025-06-30 19:10:15.110 [http-nio-8080-exec-7] INFO  com.huang.store.controller.CartController - 添加图书到购物车: 用户=56464ff@456.com, 图书ID=1, 数量=2
2025-06-30 19:10:15.110 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CartMapper.existProduct - ==>  Preparing: select count(1) from cart where account=? and id = ? 
2025-06-30 19:10:15.110 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:15.110 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(1) from cart where account=? and id = ? ::: DataSources: slave
2025-06-30 19:10:15.110 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CartMapper.existProduct - ==> Parameters: 56464ff@456.com(String), 1(Integer)
2025-06-30 19:10:15.111 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.CartMapper.existProduct - <==      Total: 1
2025-06-30 19:10:15.111 [http-nio-8080-exec-7] WARN  com.huang.store.controller.CartController - 购物车中已存在该图书: 用户=56464ff@456.com, 图书ID=1
2025-06-30 19:10:17.643 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,put,num,addTime,account from book join cart on book.id = cart.id where account=? limit ?,? 
2025-06-30 19:10:17.644 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:17.644 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,put,num,addTime,account
         from book join cart on book.id = cart.id
         where account=? limit ?,? ::: DataSources: slave
2025-06-30 19:10:17.644 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==> Parameters: 56464ff@456.com(String), 0(Integer), 10(Integer)
2025-06-30 19:10:17.647 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - <==      Total: 1
2025-06-30 19:10:17.647 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:10:17.647 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:17.647 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:10:17.647 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 19:10:17.649 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:10:23.374 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBatchBookList - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,IFNULL(num,1) from book left join cart on book.id = cart.id where book.id in ( ? ) 
2025-06-30 19:10:23.375 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:23.375 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,IFNULL(num,1)
         from book left join cart on book.id = cart.id
         where book.id in
         (  
            ?
         ) ::: DataSources: slave
2025-06-30 19:10:23.376 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBatchBookList - ==> Parameters: 1(Integer)
2025-06-30 19:10:23.378 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBatchBookList - <==      Total: 2
2025-06-30 19:10:23.378 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.CartMapper.getBookCount - ==>  Preparing: select num from cart where account=? and id=? 
2025-06-30 19:10:23.378 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:23.378 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select num from cart where account=? and id=? ::: DataSources: slave
2025-06-30 19:10:23.378 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.CartMapper.getBookCount - ==> Parameters: 56464ff@456.com(String), 1(Integer)
2025-06-30 19:10:23.379 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.CartMapper.getBookCount - <==      Total: 1
2025-06-30 19:10:23.379 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.CartMapper.getBookCount - ==>  Preparing: select num from cart where account=? and id=? 
2025-06-30 19:10:23.379 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:23.379 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select num from cart where account=? and id=? ::: DataSources: slave
2025-06-30 19:10:23.379 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.CartMapper.getBookCount - ==> Parameters: 56464ff@456.com(String), 1(Integer)
2025-06-30 19:10:23.380 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.CartMapper.getBookCount - <==      Total: 1
2025-06-30 19:10:23.380 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.CartMapper.delBatchProduct - ==>  Preparing: delete from cart where account=? and id in ( ? ) 
2025-06-30 19:10:23.380 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:23.380 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: delete from cart where account=? and id in
         (  
            ?
         ) ::: DataSources: master
2025-06-30 19:10:23.382 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.CartMapper.delBatchProduct - ==> Parameters: 56464ff@456.com(String), 1(Integer)
2025-06-30 19:10:23.391 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.CartMapper.delBatchProduct - <==    Updates: 1
2025-06-30 19:10:23.391 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:10:23.391 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:23.391 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:10:23.391 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 19:10:23.392 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:10:23.392 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:10:23.392 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:23.392 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:10:23.392 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 19:10:23.392 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:10:23.392 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false 
2025-06-30 19:10:23.392 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:23.393 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-06-30 19:10:23.393 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-06-30 19:10:23.394 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-06-30 19:10:24.825 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,put,num,addTime,account from book join cart on book.id = cart.id where account=? limit ?,? 
2025-06-30 19:10:24.825 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:24.825 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,put,num,addTime,account
         from book join cart on book.id = cart.id
         where account=? limit ?,? ::: DataSources: slave
2025-06-30 19:10:24.825 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==> Parameters: 56464ff@456.com(String), 0(Integer), 10(Integer)
2025-06-30 19:10:24.826 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - <==      Total: 0
2025-06-30 19:10:29.243 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 19:10:29.243 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:29.243 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 19:10:29.244 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 19:10:29.245 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 19:10:29.245 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 19:10:29.245 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:29.245 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 19:10:29.246 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 19:10:29.247 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 19:10:29.247 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:10:29.247 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:29.247 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:10:29.247 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 19:10:29.248 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:10:29.248 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 19:10:29.248 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:29.248 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 19:10:29.248 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 19:10:29.249 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 19:10:30.258 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 19:10:30.258 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:30.258 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 19:10:30.258 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 19:10:30.260 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 19:10:30.260 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 19:10:30.260 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:30.260 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 19:10:30.260 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 19:10:30.261 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 19:10:30.261 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:10:30.261 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:30.261 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:10:30.261 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 19:10:30.262 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:10:30.262 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 19:10:30.262 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:30.262 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 19:10:30.263 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 19:10:30.263 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 19:10:30.927 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.orderStatus = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 19:10:30.927 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:30.927 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.orderStatus = ?
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 19:10:30.928 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 19:10:30.929 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 0
2025-06-30 19:10:30.929 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND orderStatus = ? AND beUserDelete = ? 
2025-06-30 19:10:30.929 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:30.929 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND orderStatus = ?
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 19:10:30.930 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), 已发货(String), false(Boolean)
2025-06-30 19:10:30.931 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 19:10:31.850 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 19:10:31.850 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:31.850 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 19:10:31.850 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 19:10:31.852 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 19:10:31.852 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 19:10:31.852 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:31.852 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 19:10:31.852 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 19:10:31.854 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 19:10:31.854 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:10:31.854 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:31.854 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:10:31.854 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 19:10:31.855 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:10:31.856 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 19:10:31.856 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:31.856 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 19:10:31.856 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 19:10:31.856 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 19:10:32.964 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 19:10:32.964 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:32.964 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 19:10:32.964 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 19:10:32.966 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 19:10:32.967 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 19:10:32.967 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:32.967 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 19:10:32.967 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 19:10:32.969 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 19:10:32.969 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:10:32.969 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:32.969 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:10:32.969 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 19:10:32.970 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:10:32.971 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 19:10:32.971 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:32.971 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 19:10:32.971 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 19:10:32.972 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 19:10:33.687 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 19:10:33.688 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:33.688 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 19:10:33.688 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 19:10:33.689 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 19:10:33.690 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 19:10:33.690 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:33.690 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 19:10:33.690 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 19:10:33.691 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 19:10:33.692 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 19:10:33.692 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:33.692 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 19:10:33.692 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 19:10:33.692 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 19:10:33.693 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 19:10:33.693 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 19:10:33.693 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 19:10:33.693 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 19:10:33.694 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 20:45:10.475 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 20:45:10.479 [Thread-7] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 20:45:10.490 [Thread-7] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-06-30 20:45:10.534 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1478865307] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 20:45:10.535 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1478865307] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 20:45:10.535 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-351040774] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 20:45:10.536 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-351040774] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 20:45:10.537 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-nioEventLoop-4-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/sun.nio.ch.WEPoll.wait(Native Method)
 java.base@17.0.8/sun.nio.ch.WEPollSelectorImpl.doSelect(WEPollSelectorImpl.java:111)
 java.base@17.0.8/sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:129)
 java.base@17.0.8/sun.nio.ch.SelectorImpl.select(SelectorImpl.java:146)
 app//io.netty.channel.nio.SelectedSelectionKeySetSelector.select(SelectedSelectionKeySetSelector.java:68)
 app//io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:879)
 app//io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:526)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 20:45:10.539 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 20:45:10.539 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-2] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 20:45:10.539 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-3] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 20:45:10.540 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-4] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 20:45:10.541 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-5] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 20:45:10.541 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-6] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 20:45:10.542 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-7] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 20:45:10.542 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-8] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 20:45:10.543 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-9] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 20:45:10.543 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-10] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 20:45:10.543 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-11] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 20:45:10.544 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-12] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 20:45:10.548 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 20:45:10.556 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 20:45:10.751 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-06-30 20:45:10.755 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-06-30 20:45:11.019 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 18208 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 20:45:11.019 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 20:45:11.019 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 20:45:11.332 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 20:45:11.332 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 20:45:11.341 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-06-30 20:45:11.382 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$e71df6c3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 20:45:11.387 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 20:45:11.465 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 20:45:11.465 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 20:45:11.466 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 20:45:11.466 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 20:45:11.467 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 20:45:11.468 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 20:45:11.468 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 20:45:11.468 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 20:45:11.484 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 20:45:11.484 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 457 ms
2025-06-30 20:45:11.487 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 20:45:11.661 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} inited
2025-06-30 20:45:11.682 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} inited
2025-06-30 20:45:11.826 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 20:45:11.826 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 20:45:12.049 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 20:45:12.233 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@54bc2c1d, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@69caa832, org.springframework.security.web.context.SecurityContextPersistenceFilter@4f7efcf8, org.springframework.security.web.header.HeaderWriterFilter@6ed013cb, org.springframework.web.filter.CorsFilter@ab6ad7f, org.springframework.security.web.authentication.logout.LogoutFilter@5b86e325, com.huang.store.security.JwtAuthenticationTokenFilter@4084404f, com.huang.store.security.CustomAuthenticationFilter@71534a56, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@26dadc41, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@47776462, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@29d7690c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5a61782c, org.springframework.security.web.session.SessionManagementFilter@359ff4bf, org.springframework.security.web.access.ExceptionTranslationFilter@1dc2a875, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@63676b77]
2025-06-30 20:45:12.456 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 20:45:12.469 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 20:45:12.472 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 20:45:12.477 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 1.521 seconds (JVM running for 8742.319)
2025-06-30 20:45:22.292 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 20:45:22.292 [Thread-9] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 20:45:22.295 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-257104063] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 20:45:22.295 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-257104063] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 20:45:22.296 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1632621400] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 20:45:22.296 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1632621400] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 20:45:22.296 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 20:45:22.297 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 20:45:22.301 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closed
2025-06-30 20:45:22.301 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closed
2025-06-30 20:45:22.430 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 18208 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 20:45:22.430 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 20:45:22.430 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 20:45:22.723 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 20:45:22.723 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 20:45:22.738 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-06-30 20:45:22.809 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$e71df6c3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 20:45:22.817 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 20:45:22.917 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 20:45:22.917 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 20:45:22.917 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 20:45:22.917 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 20:45:22.918 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 20:45:22.918 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 20:45:22.918 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 20:45:22.918 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 20:45:22.943 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 20:45:22.944 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 502 ms
2025-06-30 20:45:22.947 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 20:45:23.052 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} inited
2025-06-30 20:45:23.070 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} inited
2025-06-30 20:45:23.216 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 20:45:23.216 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 20:45:23.339 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 20:45:23.395 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4e59c45f, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7d567fb6, org.springframework.security.web.context.SecurityContextPersistenceFilter@76464ef9, org.springframework.security.web.header.HeaderWriterFilter@4b1016b6, org.springframework.web.filter.CorsFilter@707ce95f, org.springframework.security.web.authentication.logout.LogoutFilter@9ca8096, com.huang.store.security.JwtAuthenticationTokenFilter@3159128a, com.huang.store.security.CustomAuthenticationFilter@7442f67d, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@5da74b96, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@53f4b76a, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@189abe04, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7b0feca0, org.springframework.security.web.session.SessionManagementFilter@3ced33ba, org.springframework.security.web.access.ExceptionTranslationFilter@3052a8ab, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@387e548b]
2025-06-30 20:45:23.488 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 20:45:23.498 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 20:45:23.501 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 20:45:23.504 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 1.124 seconds (JVM running for 8753.345)
2025-06-30 20:48:36.659 [Thread-15] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 20:48:36.659 [Thread-15] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 20:48:36.661 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1156052046] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 20:48:36.661 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1156052046] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 20:48:36.661 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1564434679] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 20:48:36.661 [Thread-15] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1564434679] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 20:48:36.662 [Thread-15] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 20:48:36.662 [Thread-15] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 20:48:36.666 [Thread-15] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closed
2025-06-30 20:48:36.666 [Thread-15] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closed
2025-06-30 20:48:36.748 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 18208 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 20:48:36.749 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 20:48:36.749 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 20:48:36.952 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 20:48:36.952 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 20:48:36.964 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 12 ms. Found 0 Redis repository interfaces.
2025-06-30 20:48:37.018 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$e71df6c3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 20:48:37.024 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 20:48:37.098 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 20:48:37.098 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 20:48:37.098 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 20:48:37.098 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 20:48:37.099 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 20:48:37.099 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 20:48:37.099 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 20:48:37.099 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 20:48:37.117 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 20:48:37.117 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 368 ms
2025-06-30 20:48:37.120 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 20:48:37.227 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-7} inited
2025-06-30 20:48:37.246 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-8} inited
2025-06-30 20:48:37.353 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 20:48:37.353 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 20:48:37.503 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 20:48:37.599 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@7c371779, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@60ca13ef, org.springframework.security.web.context.SecurityContextPersistenceFilter@19aa817c, org.springframework.security.web.header.HeaderWriterFilter@11bb677e, org.springframework.web.filter.CorsFilter@657ab57f, org.springframework.security.web.authentication.logout.LogoutFilter@265c6319, com.huang.store.security.JwtAuthenticationTokenFilter@57518c8f, com.huang.store.security.CustomAuthenticationFilter@105f6e6c, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@d38824, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4a056697, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4f783e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@11d8a2f8, org.springframework.security.web.session.SessionManagementFilter@48c46a07, org.springframework.security.web.access.ExceptionTranslationFilter@22be3856, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@17f802f4]
2025-06-30 20:48:37.708 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 20:48:37.715 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 20:48:37.716 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 20:48:37.719 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 1.008 seconds (JVM running for 8947.561)
2025-06-30 20:54:35.224 [Thread-21] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 20:54:35.224 [Thread-21] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 20:54:35.226 [Thread-21] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1766302632] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 20:54:35.226 [Thread-21] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1766302632] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 20:54:35.226 [Thread-21] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1081527949] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 20:54:35.226 [Thread-21] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1081527949] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 20:54:35.226 [Thread-21] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 20:54:35.227 [Thread-21] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 20:54:35.229 [Thread-21] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-7} closed
2025-06-30 20:54:35.230 [Thread-21] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-8} closed
2025-06-30 20:54:35.286 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 18208 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 20:54:35.286 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 20:54:35.286 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 20:54:35.396 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 20:54:35.396 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 20:54:35.402 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-06-30 20:54:35.434 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$e71df6c3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 20:54:35.438 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 20:54:35.487 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 20:54:35.487 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 20:54:35.487 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 20:54:35.487 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 20:54:35.488 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 20:54:35.488 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 20:54:35.488 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 20:54:35.488 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 20:54:35.515 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 20:54:35.515 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 226 ms
2025-06-30 20:54:35.518 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 20:54:35.576 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-9} inited
2025-06-30 20:54:35.589 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-10} inited
2025-06-30 20:54:35.647 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 20:54:35.647 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 20:54:35.741 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 20:54:35.791 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4fe1535b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@10b173dd, org.springframework.security.web.context.SecurityContextPersistenceFilter@3975c84, org.springframework.security.web.header.HeaderWriterFilter@1d7c7559, org.springframework.web.filter.CorsFilter@ff5b65d, org.springframework.security.web.authentication.logout.LogoutFilter@7f1d8c2c, com.huang.store.security.JwtAuthenticationTokenFilter@15dd7c2f, com.huang.store.security.CustomAuthenticationFilter@bda1681, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@b4543e7, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@30ce0d3c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4ee660c1, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@20f00b92, org.springframework.security.web.session.SessionManagementFilter@34e79bc8, org.springframework.security.web.access.ExceptionTranslationFilter@1ef5b3f1, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@73088a37]
2025-06-30 20:54:35.886 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 20:54:35.895 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 20:54:35.896 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 20:54:35.898 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.635 seconds (JVM running for 9305.74)
2025-06-30 20:56:26.350 [Thread-27] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 20:56:26.351 [Thread-27] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 20:56:26.353 [Thread-27] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-484381945] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 20:56:26.353 [Thread-27] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-484381945] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 20:56:26.354 [Thread-27] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1646027273] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 20:56:26.354 [Thread-27] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1646027273] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 20:56:26.354 [Thread-27] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 20:56:26.356 [Thread-27] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 20:56:26.360 [Thread-27] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-9} closed
2025-06-30 20:56:26.360 [Thread-27] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-10} closed
2025-06-30 20:56:26.471 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 18208 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 20:56:26.471 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 20:56:26.471 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 20:56:26.654 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 20:56:26.654 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 20:56:26.655 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 0 ms. Found 0 Redis repository interfaces.
2025-06-30 20:56:26.708 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.huang.store.mapper]' package. Please check your configuration.
2025-06-30 20:56:26.772 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 20:56:26.772 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 20:56:26.772 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 20:56:26.772 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 20:56:26.773 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 20:56:26.773 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 20:56:26.773 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 20:56:26.773 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 20:56:26.809 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 20:56:26.809 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 336 ms
2025-06-30 20:56:26.872 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 20:56:26.935 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-11} inited
2025-06-30 20:56:26.954 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-12} inited
2025-06-30 20:56:26.974 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
2025-06-30 20:56:26.975 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-11} closed
2025-06-30 20:56:26.976 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-12} closed
2025-06-30 20:56:26.976 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 20:56:26.998 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-30 20:56:27.031 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 24 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:595)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:475)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:615)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:180)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$e1730522.CGLIB$sqlSessionFactory$2(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$e1730522$$FastClassBySpringCGLIB$$4b93197b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$e1730522.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:122)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:593)
	... 38 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:76)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:137)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:130)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:120)
	... 40 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:120)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 44 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:200)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	... 46 common frames omitted
2025-06-30 20:56:28.923 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 18208 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 20:56:28.923 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 20:56:28.923 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 20:56:29.085 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 20:56:29.085 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 20:56:29.090 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-06-30 20:56:29.178 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 20:56:29.178 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 20:56:29.178 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 20:56:29.178 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 20:56:29.179 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 20:56:29.179 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 20:56:29.179 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 20:56:29.179 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 20:56:29.205 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-1].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 20:56:29.205 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 281 ms
2025-06-30 20:56:29.219 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'fileController': Unsatisfied dependency expressed through field 'bookService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.huang.store.service.imp.BookService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true), @org.springframework.beans.factory.annotation.Qualifier("firstVersion")}
2025-06-30 20:56:29.220 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 20:56:29.225 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-30 20:56:29.230 [restartedMain] ERROR o.s.b.diagnostics.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field bookService in com.huang.store.controller.FileController required a bean of type 'com.huang.store.service.imp.BookService' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)
	- @org.springframework.beans.factory.annotation.Qualifier("firstVersion")


Action:

Consider defining a bean of type 'com.huang.store.service.imp.BookService' in your configuration.

2025-06-30 20:58:15.188 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 18208 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 20:58:15.188 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 20:58:15.188 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 20:58:15.392 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 20:58:15.392 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 20:58:15.404 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 12 ms. Found 0 Redis repository interfaces.
2025-06-30 20:58:15.535 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 20:58:15.535 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 20:58:15.536 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 20:58:15.536 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 20:58:15.536 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 20:58:15.537 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 20:58:15.537 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 20:58:15.537 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 20:58:15.565 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-2].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 20:58:15.565 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 367 ms
2025-06-30 20:58:15.652 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 20:58:15.713 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-13} inited
2025-06-30 20:58:15.731 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-14} inited
2025-06-30 20:58:15.785 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
2025-06-30 20:58:15.786 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-13} closed
2025-06-30 20:58:15.787 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-14} closed
2025-06-30 20:58:15.787 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 20:58:15.793 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-30 20:58:15.797 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 24 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:595)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:475)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:615)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:180)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$e1730522.CGLIB$sqlSessionFactory$2(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$e1730522$$FastClassBySpringCGLIB$$4b93197b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$e1730522.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:122)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:593)
	... 38 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElement(XMLMapperBuilder.java:262)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElement(XMLMapperBuilder.java:253)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElements(XMLMapperBuilder.java:245)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:118)
	... 40 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:120)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 44 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:200)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	... 46 common frames omitted
2025-06-30 20:58:43.899 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 18208 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 20:58:43.899 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 20:58:43.899 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 20:58:44.140 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 20:58:44.140 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 20:58:44.149 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-06-30 20:58:44.213 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.huang.store.mapper]' package. Please check your configuration.
2025-06-30 20:58:44.300 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 20:58:44.300 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 20:58:44.300 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 20:58:44.300 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 20:58:44.301 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 20:58:44.301 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 20:58:44.301 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 20:58:44.301 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 20:58:44.327 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-3].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 20:58:44.327 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 426 ms
2025-06-30 20:58:44.398 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 20:58:44.460 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-15} inited
2025-06-30 20:58:44.479 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-16} inited
2025-06-30 20:58:44.496 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
2025-06-30 20:58:44.497 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-15} closed
2025-06-30 20:58:44.497 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-16} closed
2025-06-30 20:58:44.498 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 20:58:44.503 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-30 20:58:44.506 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 24 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:595)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:475)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:615)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:180)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$e1730522.CGLIB$sqlSessionFactory$2(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$e1730522$$FastClassBySpringCGLIB$$4b93197b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$e1730522.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:122)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:593)
	... 38 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:76)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:137)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:130)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:120)
	... 40 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:120)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 44 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:200)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	... 46 common frames omitted
2025-06-30 20:58:46.462 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 18208 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 20:58:46.462 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 20:58:46.462 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 20:58:46.649 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 20:58:46.649 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 20:58:46.657 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-06-30 20:58:46.700 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$e71df6c3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 20:58:46.705 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 20:58:46.743 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 20:58:46.743 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 20:58:46.743 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 20:58:46.743 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 20:58:46.744 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 20:58:46.744 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 20:58:46.744 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 20:58:46.744 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 20:58:46.769 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-4].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 20:58:46.769 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 305 ms
2025-06-30 20:58:46.824 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-17} inited
2025-06-30 20:58:46.844 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-18} inited
2025-06-30 20:58:46.875 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'cartController': Unsatisfied dependency expressed through field 'cartService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'firstCart': Unsatisfied dependency expressed through field 'cartMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'cartMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\CartMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
2025-06-30 20:58:46.876 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-17} closed
2025-06-30 20:58:46.877 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-18} closed
2025-06-30 20:58:46.877 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 20:58:46.882 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-30 20:58:46.885 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'cartController': Unsatisfied dependency expressed through field 'cartService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'firstCart': Unsatisfied dependency expressed through field 'cartMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'cartMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\CartMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'firstCart': Unsatisfied dependency expressed through field 'cartMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'cartMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\CartMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1391)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 25 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'cartMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\CartMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1534)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1417)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1391)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 39 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1391)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1519)
	... 50 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 63 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:595)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:475)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:615)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:180)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$e1730522.CGLIB$sqlSessionFactory$2(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$e1730522$$FastClassBySpringCGLIB$$4b93197b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$e1730522.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 64 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:122)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:593)
	... 77 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElement(XMLMapperBuilder.java:262)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElement(XMLMapperBuilder.java:253)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElements(XMLMapperBuilder.java:245)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:118)
	... 79 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:120)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 83 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:200)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	... 85 common frames omitted
2025-06-30 20:59:37.725 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 18208 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 20:59:37.725 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 20:59:37.725 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 20:59:37.921 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 20:59:37.921 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 20:59:37.925 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2025-06-30 20:59:37.968 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.huang.store.mapper]' package. Please check your configuration.
2025-06-30 20:59:38.023 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 20:59:38.023 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 20:59:38.023 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 20:59:38.023 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 20:59:38.026 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 20:59:38.026 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 20:59:38.027 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 20:59:38.027 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 20:59:38.050 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-5].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 20:59:38.050 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 323 ms
2025-06-30 20:59:38.108 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 20:59:38.167 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-19} inited
2025-06-30 20:59:38.183 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-20} inited
2025-06-30 20:59:38.202 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
2025-06-30 20:59:38.203 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-19} closed
2025-06-30 20:59:38.203 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-20} closed
2025-06-30 20:59:38.204 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 20:59:38.210 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-30 20:59:38.212 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 24 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:595)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:475)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:615)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:180)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$e1730522.CGLIB$sqlSessionFactory$2(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$e1730522$$FastClassBySpringCGLIB$$4b93197b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$e1730522.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:122)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:593)
	... 38 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:76)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:137)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:130)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:120)
	... 40 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:120)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 44 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:200)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	... 46 common frames omitted
2025-06-30 20:59:40.162 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 18208 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 20:59:40.162 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 20:59:40.162 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 20:59:40.454 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 20:59:40.455 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 20:59:40.476 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 0 Redis repository interfaces.
2025-06-30 20:59:40.594 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$e71df6c3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 20:59:40.602 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 20:59:40.682 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 20:59:40.682 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 20:59:40.682 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 20:59:40.682 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 20:59:40.683 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 20:59:40.684 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 20:59:40.684 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 20:59:40.684 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 20:59:40.704 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-6].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 20:59:40.705 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 542 ms
2025-06-30 20:59:40.707 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 20:59:40.785 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-21} inited
2025-06-30 20:59:40.806 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-22} inited
2025-06-30 20:59:40.955 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 20:59:40.955 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 20:59:41.243 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 20:59:41.424 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5124c0b7, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@76f78b0b, org.springframework.security.web.context.SecurityContextPersistenceFilter@6872e7a4, org.springframework.security.web.header.HeaderWriterFilter@5b702d7, org.springframework.web.filter.CorsFilter@d358754, org.springframework.security.web.authentication.logout.LogoutFilter@56c852ee, com.huang.store.security.JwtAuthenticationTokenFilter@5854b96b, com.huang.store.security.CustomAuthenticationFilter@18aed407, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@4d7a1cde, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@46cec2ea, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7bd2d15e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@632e4a85, org.springframework.security.web.session.SessionManagementFilter@4a73117f, org.springframework.security.web.access.ExceptionTranslationFilter@25c17a6a, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@2b76225f]
2025-06-30 20:59:41.684 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 20:59:41.708 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 20:59:41.712 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 20:59:41.716 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 1.593 seconds (JVM running for 9611.557)
2025-06-30 21:00:07.434 [http-nio-8080-exec-5] INFO  o.a.c.c.ContainerBase.[Tomcat-6].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 21:00:07.434 [http-nio-8080-exec-5] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 21:00:07.435 [http-nio-8080-exec-5] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-30 21:00:07.447 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:07.447 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:07.447 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:07.447 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:07.447 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:07.447 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:07.451 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 21:00:07.451 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:07.451 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:00:07.452 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 21:00:07.452 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:07.452 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:00:07.452 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:00:07.452 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 21:00:07.452 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:07.452 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:00:07.452 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 21:00:07.452 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:07.452 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:00:07.453 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:00:07.453 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 21:00:07.453 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:07.453 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:00:07.453 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:00:07.454 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:07.454 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:00:07.455 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:00:07.455 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:07.455 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:07.455 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:07.456 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:00:07.459 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:00:07.459 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:00:07.459 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:07.459 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:00:07.460 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:00:07.461 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:00:07.461 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:00:07.461 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:07.461 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:00:07.461 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:00:07.461 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:00:07.461 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:00:07.462 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:00:07.462 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 21:00:07.462 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:07.462 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:00:07.463 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:00:07.465 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:00:07.465 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:00:07.465 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:00:07.465 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:07.465 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:00:07.465 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:00:07.466 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:00:07.466 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:00:07.466 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:00:07.466 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:07.466 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:07.466 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:07.467 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:00:07.467 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:00:07.467 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:00:07.467 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:07.467 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:07.467 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:07.469 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:00:07.469 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:00:07.469 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:00:07.471 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:00:07.471 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:07.471 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:07.471 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:07.471 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:00:07.471 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:00:07.472 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:00:07.472 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:07.472 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:07.472 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:07.472 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:00:07.473 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:07.473 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:07.473 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:00:07.473 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:07.473 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:07.473 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:00:07.474 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:07.474 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:07.474 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:07.474 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:07.474 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:00:07.475 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:07.475 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:07.475 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:07.475 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:07.476 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:00:07.476 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:07.476 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:07.476 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:07.476 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:07.476 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:00:07.477 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:16.150 [Thread-33] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:00:16.150 [Thread-33] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 21:00:16.150 [Thread-33] INFO  o.a.c.c.ContainerBase.[Tomcat-6].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-06-30 21:00:16.160 [Thread-33] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1828726663] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 21:00:16.161 [Thread-33] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1828726663] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 21:00:16.161 [Thread-33] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-46665107] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 21:00:16.161 [Thread-33] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-46665107] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 21:00:16.161 [Thread-33] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 21:00:16.162 [Thread-33] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 21:00:16.164 [Thread-33] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-21} closed
2025-06-30 21:00:16.165 [Thread-33] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-22} closed
2025-06-30 21:00:16.232 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 18208 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:00:16.232 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:00:16.232 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:00:16.388 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:00:16.389 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:00:16.399 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-30 21:00:16.437 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$e71df6c3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:00:16.441 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:00:16.494 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:00:16.494 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:00:16.494 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:00:16.494 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:00:16.494 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:00:16.495 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:00:16.495 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:00:16.495 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:00:16.511 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-6].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:00:16.511 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 278 ms
2025-06-30 21:00:16.514 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 21:00:16.603 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-23} inited
2025-06-30 21:00:16.619 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-24} inited
2025-06-30 21:00:16.735 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 21:00:16.736 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 21:00:16.865 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:00:16.923 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@2bd69a93, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4094736c, org.springframework.security.web.context.SecurityContextPersistenceFilter@44190d75, org.springframework.security.web.header.HeaderWriterFilter@784ebc01, org.springframework.web.filter.CorsFilter@7f38637e, org.springframework.security.web.authentication.logout.LogoutFilter@726f4170, com.huang.store.security.JwtAuthenticationTokenFilter@4dfe34e4, com.huang.store.security.CustomAuthenticationFilter@3ca6ba4a, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@48c704f9, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1137f304, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1c94eb97, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4bbcba3a, org.springframework.security.web.session.SessionManagementFilter@62900ef1, org.springframework.security.web.access.ExceptionTranslationFilter@56d0757f, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@76f21357]
2025-06-30 21:00:17.024 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 21:00:17.031 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 21:00:17.034 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 21:00:17.037 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.827 seconds (JVM running for 9646.878)
2025-06-30 21:00:18.461 [Thread-69] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:00:18.461 [Thread-69] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 21:00:18.463 [Thread-69] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1344738122] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 21:00:18.464 [Thread-69] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1344738122] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 21:00:18.464 [Thread-69] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-78140976] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 21:00:18.464 [Thread-69] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-78140976] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 21:00:18.464 [Thread-69] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 21:00:18.466 [Thread-69] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 21:00:18.468 [Thread-69] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-23} closed
2025-06-30 21:00:18.470 [Thread-69] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-24} closed
2025-06-30 21:00:18.524 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 18208 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:00:18.524 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:00:18.524 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:00:18.744 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:00:18.744 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:00:18.760 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 0 Redis repository interfaces.
2025-06-30 21:00:18.802 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$e71df6c3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:00:18.807 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:00:18.869 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:00:18.869 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:00:18.869 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:00:18.869 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:00:18.870 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:00:18.870 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:00:18.870 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:00:18.870 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:00:18.886 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-6].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:00:18.886 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 361 ms
2025-06-30 21:00:18.889 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 21:00:18.964 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-25} inited
2025-06-30 21:00:18.978 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-26} inited
2025-06-30 21:00:19.068 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 21:00:19.068 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 21:00:19.163 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:00:19.222 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@510da4ba, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@728e708f, org.springframework.security.web.context.SecurityContextPersistenceFilter@213922be, org.springframework.security.web.header.HeaderWriterFilter@3f964447, org.springframework.web.filter.CorsFilter@26b9bc39, org.springframework.security.web.authentication.logout.LogoutFilter@228a2471, com.huang.store.security.JwtAuthenticationTokenFilter@6f9f8619, com.huang.store.security.CustomAuthenticationFilter@550a00cd, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@533d5e3f, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4de8deb, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@967454b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5012b2b9, org.springframework.security.web.session.SessionManagementFilter@47808d5e, org.springframework.security.web.access.ExceptionTranslationFilter@504ea18b, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1b6332d]
2025-06-30 21:00:19.320 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 21:00:19.328 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 21:00:19.330 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 21:00:19.333 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.828 seconds (JVM running for 9649.174)
2025-06-30 21:00:28.034 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat-6].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 21:00:28.034 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 21:00:28.035 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-30 21:00:28.037 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:28.037 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:28.037 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:28.037 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:28.037 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:28.037 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:28.039 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:00:28.039 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 21:00:28.039 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:28.039 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:00:28.039 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 21:00:28.039 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:28.039 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:00:28.039 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 21:00:28.039 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:28.039 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:00:28.039 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:00:28.039 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:28.039 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:00:28.039 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 21:00:28.039 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:28.039 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:00:28.039 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 21:00:28.039 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:00:28.039 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:28.039 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:00:28.042 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:00:28.042 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:28.042 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:28.042 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:28.043 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:00:28.043 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:00:28.044 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:00:28.045 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:00:28.045 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 21:00:28.045 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:28.045 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:00:28.046 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:00:28.049 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:00:28.049 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:00:28.049 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:28.049 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:00:28.049 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:00:28.051 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:00:28.051 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:00:28.051 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:00:28.051 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:28.051 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:00:28.051 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:00:28.052 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:00:28.052 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:28.052 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:28.052 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:28.052 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:00:28.052 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:00:28.052 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:00:28.052 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:28.052 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:00:28.052 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:00:28.052 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:00:28.052 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:00:28.053 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:00:28.053 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:00:28.054 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:00:28.054 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:00:28.054 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:00:28.054 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:28.054 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:28.054 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:28.055 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:00:28.055 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:00:28.055 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:00:28.055 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:28.055 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:28.055 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:28.056 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:00:28.056 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:28.056 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:28.056 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:28.056 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:00:28.056 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:00:28.059 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:28.059 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:28.059 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:28.059 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:28.059 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:00:28.059 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:28.060 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:28.060 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:28.060 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:28.060 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:00:28.060 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:28.060 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:28.060 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:28.060 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:28.060 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:00:28.061 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:28.061 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:28.061 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:28.061 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:28.061 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:00:28.062 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:33.119 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:33.119 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:33.120 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:33.120 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:00:33.120 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 21:00:33.120 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:00:33.120 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:33.120 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:33.120 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 21:00:33.120 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:33.120 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:00:33.121 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:33.121 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:00:33.120 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:00:33.121 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:00:33.121 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 21:00:33.122 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:33.122 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:00:33.120 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:00:33.122 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:00:33.122 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:33.122 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:33.122 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:00:33.123 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:00:33.123 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 21:00:33.123 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:33.123 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:00:33.123 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:00:33.123 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:00:33.123 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:33.123 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:00:33.123 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 21:00:33.123 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:33.123 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:00:33.125 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:00:33.126 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:00:33.126 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:00:33.126 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:33.126 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:00:33.128 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:00:33.126 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:00:33.129 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:00:33.129 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:00:33.132 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:00:33.132 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:33.132 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:00:33.132 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:00:33.132 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:00:33.132 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:33.132 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:33.132 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:33.133 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:00:33.133 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:00:33.134 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:33.134 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:00:33.134 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:00:33.134 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 21:00:33.134 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:00:33.134 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:33.134 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:00:33.134 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:00:33.134 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:33.134 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:33.134 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:00:33.135 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:00:33.135 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:00:33.135 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:33.135 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:33.135 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:33.135 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:33.135 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:00:33.135 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:33.135 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:33.135 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:33.135 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:00:33.136 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:00:33.136 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:33.136 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:33.136 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:33.136 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:00:33.136 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:33.136 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:33.136 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:33.136 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:33.136 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:00:33.137 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:33.137 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:00:33.137 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:33.137 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:33.137 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:33.137 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:33.137 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:33.137 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:00:33.137 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:33.137 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:00:33.138 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:33.138 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:33.138 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:33.138 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:33.139 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:00:33.139 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:00:33.141 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:34.605 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:34.605 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:34.607 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 21:00:34.608 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:34.608 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:00:34.609 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:00:34.612 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:00:34.612 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:34.612 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:34.612 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:34.613 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:00:34.612 [http-nio-8080-exec-2] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 21:00:34.614 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:00:34.615 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:34.615 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:34.615 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:34.615 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:00:34.617 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:00:34.617 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:34.618 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:34.618 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:34.618 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:00:34.619 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:00:34.620 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:34.620 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:34.620 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:34.620 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:00:34.622 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:00:34.627 [http-nio-8080-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 21:00:35.786 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:35.787 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 21:00:35.787 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:35.787 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:00:35.787 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 21:00:35.788 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 21:00:35.789 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 21:00:35.789 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:35.789 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 21:00:35.789 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 21:00:35.791 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 21:00:35.792 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 21:00:35.792 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:35.792 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 21:00:35.793 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 21:00:35.796 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 21:00:35.796 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 21:00:35.796 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:35.796 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 21:00:35.796 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 21:00:35.797 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 21:00:35.799 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 21:00:35.799 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:35.799 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 21:00:35.800 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 21:00:35.801 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 21:00:35.801 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:35.801 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:35.801 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:35.802 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:00:35.802 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:35.802 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:35.802 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:35.802 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:35.802 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:00:35.803 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:37.397 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:37.398 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:37.398 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 21:00:37.398 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:37.398 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:00:37.398 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:00:37.400 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:00:37.400 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:37.400 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:37.400 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:37.400 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:00:37.402 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:00:37.402 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:37.402 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:37.402 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:37.402 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:00:37.403 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:00:37.403 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:37.404 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:37.404 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:37.404 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:00:37.405 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:00:37.405 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:37.405 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:37.405 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:37.405 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:00:37.406 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:00:37.444 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 21:00:37.444 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:37.444 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 21:00:37.445 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 21:00:37.447 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 21:00:37.447 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 21:00:37.447 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:37.447 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 21:00:37.447 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 21:00:37.448 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 21:00:37.448 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:37.448 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:37.448 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:37.448 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:00:37.449 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:37.449 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 21:00:37.449 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:37.449 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 21:00:37.450 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 21:00:37.453 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 21:00:37.453 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 21:00:37.454 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:37.454 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 21:00:37.454 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 21:00:37.455 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 21:00:38.540 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:38.543 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 21:00:38.543 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:38.543 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:00:38.543 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:00:38.544 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:00:38.544 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:38.544 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:38.544 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:38.544 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:00:38.545 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:00:38.545 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:38.545 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:38.545 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:38.545 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:00:38.549 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:00:38.549 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:38.549 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:38.549 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:38.549 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:00:38.550 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:00:38.551 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:38.551 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:38.551 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:38.551 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:00:38.552 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:00:38.560 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:38.562 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 21:00:38.562 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:38.562 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:00:38.562 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 1(Integer)
2025-06-30 21:00:38.563 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 1
2025-06-30 21:00:38.564 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 21:00:38.564 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:38.564 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 21:00:38.564 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 21:00:38.565 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 21:00:38.565 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==>  Preparing: select * from book where id in (select t.bookId from (select * from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) as t ) limit ?,? 
2025-06-30 21:00:38.565 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:38.565 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book
            where id in (select t.bookId from
                (select * from booksortlist
                     WHERE bookSortId in
                        (
                            ?
                        ,
                            ?
                        ,
                            ?
                        ,
                            ?
                        ) 
                )
        as t ) limit ?,? ::: DataSources: slave
2025-06-30 21:00:38.566 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer), 0(Integer), 10(Integer)
2025-06-30 21:00:38.566 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBooksByFirst - <==      Total: 2
2025-06-30 21:00:38.567 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==>  Preparing: select id from booksort where (upperName="无" and sortName=?) or upperName=? 
2025-06-30 21:00:38.567 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:38.567 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select id from booksort where (upperName="无" and sortName=?) or upperName=? ::: DataSources: slave
2025-06-30 21:00:38.567 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - ==> Parameters: 文学(String), 文学(String)
2025-06-30 21:00:38.567 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSortId - <==      Total: 4
2025-06-30 21:00:38.568 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==>  Preparing: select count(*) from book where id in (select bookId from booksortlist WHERE bookSortId in ( ? , ? , ? , ? ) ) 
2025-06-30 21:00:38.568 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:38.568 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from book
        where id in (select bookId from booksortlist
         WHERE bookSortId in
            (
                ?
            ,
                ?
            ,
                ?
            ,
                ?
            ) 
        ) ::: DataSources: slave
2025-06-30 21:00:38.568 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - ==> Parameters: 5(Integer), 6(Integer), 7(Integer), 1(Integer)
2025-06-30 21:00:38.570 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getFirstBookCount - <==      Total: 1
2025-06-30 21:00:38.570 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:38.570 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:38.570 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:38.571 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:00:38.572 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:38.572 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:38.572 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:38.572 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:38.572 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:00:38.573 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:39.310 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:39.313 [http-nio-8080-exec-8] ERROR com.huang.store.exception.GlobalExceptionHandler - 运行时异常
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:133)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NumberFormatException: For input string: "undefined"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.valueOf(Integer.java:999)
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211)
	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:115)
	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:429)
	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:402)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:73)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:729)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:125)
	... 107 common frames omitted
2025-06-30 21:00:39.315 [http-nio-8080-exec-8] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "undefined"]
2025-06-30 21:00:41.925 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:41.925 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:41.925 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:41.925 [http-nio-8080-exec-9] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:00:41.925 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 21:00:41.925 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 21:00:41.925 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:41.925 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:00:41.926 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:00:41.926 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:41.926 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:41.926 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:00:41.926 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 21:00:41.926 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:41.926 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:00:41.926 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:00:41.926 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:41.926 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:00:41.927 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:00:41.927 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:00:41.925 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 21:00:41.927 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:41.927 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:00:41.927 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:00:41.927 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:00:41.928 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:00:41.928 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:41.928 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:00:41.928 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:00:41.930 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:00:41.930 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 21:00:41.930 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:41.930 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:00:41.930 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:00:41.931 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:00:41.931 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:00:41.933 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:00:41.925 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:41.933 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:00:41.934 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:00:41.934 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:00:41.934 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:00:41.934 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:41.934 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:00:41.934 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:00:41.934 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:00:41.934 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:00:41.934 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:41.934 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:00:41.934 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:00:41.934 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 21:00:41.935 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:41.935 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:00:41.935 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:00:41.935 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:00:41.935 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:41.935 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:41.935 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:41.936 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:00:41.937 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:41.937 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:00:41.937 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:41.938 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:41.938 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:41.938 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:00:41.938 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:41.938 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:00:41.938 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:41.938 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:41.938 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:41.938 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:41.938 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:41.938 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:41.938 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:00:41.938 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:00:41.939 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:41.939 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:00:41.939 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:41.939 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:41.939 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:41.939 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:41.939 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:41.939 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:41.939 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:00:41.939 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:00:41.940 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:41.940 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:00:41.940 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:00:41.940 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:41.940 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:00:41.940 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:41.940 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:41.940 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:41.940 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:00:41.940 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:00:41.940 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:00:41.940 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:00:41.940 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:00:41.940 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:00:41.940 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:00:41.941 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:00:41.941 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:01:21.004 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:01:21.004 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 21:01:21.005 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.005 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:01:21.005 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:01:21.006 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:01:21.006 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:01:21.006 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 21:01:21.006 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.006 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:01:21.006 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:01:21.006 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:01:21.007 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 21:01:21.007 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.007 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:01:21.007 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:01:21.007 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:01:21.007 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:01:21.008 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 21:01:21.008 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.008 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:01:21.008 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:01:21.007 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:01:21.008 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.008 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:01:21.008 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:01:21.008 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:01:21.008 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:01:21.008 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.008 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:01:21.008 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:01:21.009 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:01:21.009 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:01:21.009 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:01:21.009 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:01:21.009 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:01:21.009 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.009 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.009 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:01:21.009 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:01:21.009 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:01:21.009 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:01:21.009 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:01:21.009 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.009 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:01:21.009 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:01:21.009 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:01:21.010 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:01:21.010 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:01:21.010 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:01:21.010 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:01:21.010 [http-nio-8080-exec-7] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:01:21.010 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.010 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:01:21.010 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 21:01:21.010 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.010 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:01:21.010 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:01:21.010 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:01:21.011 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:01:21.011 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:01:21.011 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:01:21.012 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:01:21.012 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.012 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:01:21.012 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:01:21.012 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 21:01:21.012 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.012 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:01:21.012 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:01:21.013 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:01:21.013 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:01:21.013 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:01:21.013 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:01:21.013 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.013 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.013 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:01:21.013 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:01:21.013 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:01:21.013 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:01:21.015 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:01:21.015 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:01:21.015 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:01:21.015 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:01:21.015 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.015 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:01:21.015 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.015 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:01:21.015 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:01:21.015 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:01:21.016 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:01:21.016 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:01:21.016 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:01:21.016 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.016 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:01:21.016 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:01:21.018 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:01:21.044 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:01:21.044 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.044 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:01:21.044 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:01:21.045 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:01:21.845 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:01:21.845 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:01:21.845 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:01:21.845 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:01:21.845 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:01:21.845 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 21:01:21.845 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.845 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:01:21.846 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 21:01:21.846 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.846 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:01:21.846 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:01:21.846 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.846 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:01:21.846 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 21:01:21.846 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.846 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:01:21.846 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:01:21.846 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:01:21.845 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:01:21.845 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:01:21.846 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 21:01:21.846 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.846 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:01:21.846 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:01:21.846 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 21:01:21.847 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:01:21.847 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:01:21.847 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:01:21.847 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.847 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.847 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:01:21.847 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:01:21.847 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 21:01:21.847 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.847 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:01:21.847 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:01:21.847 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:01:21.848 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:01:21.848 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:01:21.848 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:01:21.848 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:01:21.849 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:01:21.849 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.849 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:01:21.849 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:01:21.849 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:01:21.849 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.849 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:01:21.849 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:01:21.849 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:01:21.849 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:01:21.849 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:01:21.849 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:01:21.849 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.849 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:01:21.850 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:01:21.850 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:01:21.851 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:01:21.851 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:01:21.851 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:01:21.851 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.851 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:01:21.851 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:01:21.851 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:01:21.852 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:01:21.852 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:01:21.852 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.852 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:01:21.852 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:01:21.852 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:01:21.852 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:01:21.852 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.852 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:01:21.852 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:01:21.853 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:01:21.853 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:01:21.853 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:01:21.853 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:01:21.853 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.853 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.853 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:01:21.853 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:01:21.853 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:01:21.853 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:01:21.854 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:01:21.854 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:01:21.854 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:01:21.854 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:01:21.854 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.854 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.854 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:01:21.854 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:01:21.854 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:01:21.854 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:01:21.855 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:01:21.855 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:01:21.855 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:01:21.855 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:21.855 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:01:21.855 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:01:21.856 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:01:23.068 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:01:23.069 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:01:23.070 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 21:01:23.070 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:23.070 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:01:23.070 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:01:23.071 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - ==>  Preparing: select * from book where id = ? 
2025-06-30 21:01:23.071 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:23.071 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id = ? ::: DataSources: slave
2025-06-30 21:01:23.071 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - ==> Parameters: 1(Integer)
2025-06-30 21:01:23.072 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:01:23.072 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBook - <==      Total: 1
2025-06-30 21:01:23.072 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==>  Preparing: select imgSrc from bookimg where isbn=? 
2025-06-30 21:01:23.072 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:01:23.072 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:23.072 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:23.072 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? ::: DataSources: slave
2025-06-30 21:01:23.072 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:01:23.072 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:01:23.073 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - ==> Parameters: 9787020002207(String)
2025-06-30 21:01:23.073 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.BookMapper.getBookImgSrcList - <==      Total: 2
2025-06-30 21:01:23.073 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:01:23.073 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:01:23.073 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:01:23.073 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:23.073 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:23.073 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:01:23.073 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:01:23.073 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:01:23.074 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:01:23.074 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:01:23.074 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:01:23.074 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:01:23.074 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==>  Preparing: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) 
2025-06-30 21:01:23.074 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:23.074 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:23.074 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:01:23.074 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id in (select bookSortId from booksortlist where bookId=?) ::: DataSources: slave
2025-06-30 21:01:23.075 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookSort - ==> Parameters: 1(Integer)
2025-06-30 21:01:23.075 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:01:23.075 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.BookMapper.getBookSort - <==      Total: 1
2025-06-30 21:01:23.075 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:01:23.075 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:01:23.075 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==>  Preparing: select id from booksort where upperName=? and sortName=? 
2025-06-30 21:01:23.075 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:23.075 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:23.075 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:01:23.075 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select id from booksort where upperName=? and sortName=? ::: DataSources: slave
2025-06-30 21:01:23.075 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:01:23.075 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - ==> Parameters: 无(String), 文学(String)
2025-06-30 21:01:23.076 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortId - <==      Total: 1
2025-06-30 21:01:23.076 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:01:29.379 [http-nio-8080-exec-6] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:01:29.379 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:01:29.379 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:01:29.379 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:01:29.380 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 21:01:29.380 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:29.380 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:01:29.380 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:01:29.380 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 21:01:29.380 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:29.380 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:01:29.380 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:01:29.380 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:01:29.380 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:29.380 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:01:29.379 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:01:29.380 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:01:29.381 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:01:29.381 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:01:29.381 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:01:29.381 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:29.381 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:01:29.381 [http-nio-8080-exec-10] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:01:29.381 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:01:29.381 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 21:01:29.381 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:29.381 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:01:29.381 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:01:29.381 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:01:29.381 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 21:01:29.381 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:29.381 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:01:29.381 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:01:29.381 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:29.381 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:01:29.381 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:01:29.380 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 21:01:29.381 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:29.381 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:01:29.381 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:01:29.381 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:01:29.381 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:01:29.382 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:01:29.382 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:01:29.382 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:01:29.382 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:29.382 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:01:29.382 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:01:29.382 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:29.382 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:29.382 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:01:29.382 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:01:29.382 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:01:29.383 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:01:29.383 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:01:29.383 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:01:29.383 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:01:29.384 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:01:29.384 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:01:29.384 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:01:29.384 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:01:29.384 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:01:29.384 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:29.384 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:01:29.384 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:29.384 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:01:29.384 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:01:29.384 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:01:29.384 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:01:29.385 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:01:29.385 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:01:29.385 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 21:01:29.385 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:29.385 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:01:29.385 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:01:29.385 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:29.385 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:01:29.385 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:01:29.385 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:01:29.385 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:01:29.385 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:29.385 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:01:29.385 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:01:29.385 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:01:29.385 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:01:29.386 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:01:29.386 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:01:29.386 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:01:29.386 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:29.386 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:01:29.386 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:01:29.387 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:01:29.387 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:01:29.387 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:29.387 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:01:29.387 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:01:29.388 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:01:29.388 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:01:29.388 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:01:29.388 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:01:29.388 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:01:29.389 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:02:07.591 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:02:07.591 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:02:07.591 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:02:07.591 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:02:07.591 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:02:07.591 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:02:07.592 [http-nio-8080-exec-1] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:02:07.592 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 21:02:07.592 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 21:02:07.592 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 21:02:07.592 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:02:07.592 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:07.592 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 21:02:07.592 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:07.592 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 21:02:07.592 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:02:07.592 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:07.592 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:02:07.592 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:07.592 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:02:07.592 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:02:07.592 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:02:07.592 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:02:07.592 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:07.592 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:02:07.592 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:07.592 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:02:07.592 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:02:07.592 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:02:07.593 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:02:07.593 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:02:07.593 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:02:07.593 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:02:07.593 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:02:07.593 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:07.593 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:02:07.593 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:02:07.593 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 21:02:07.593 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:07.593 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:02:07.593 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:02:07.593 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:02:07.593 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:07.593 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:02:07.593 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:02:07.593 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:02:07.593 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:02:07.594 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:02:07.594 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:02:07.594 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:02:07.594 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:02:07.594 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:02:07.594 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:02:07.594 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:07.594 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:02:07.594 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:07.594 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:02:07.594 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:02:07.594 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:02:07.595 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:02:07.595 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:02:07.595 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:02:07.595 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:02:07.595 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:07.595 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:02:07.595 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:02:07.595 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:07.595 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:02:07.595 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:02:07.595 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:02:07.596 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:02:07.596 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:02:07.596 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:02:07.597 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:07.597 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:02:07.597 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:02:07.597 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:07.597 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:02:07.597 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:02:07.597 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:02:07.597 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:02:07.597 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:02:07.597 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:02:07.597 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:07.597 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:02:07.598 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:02:07.598 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:02:07.599 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:02:07.599 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:07.599 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:02:07.599 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:02:07.599 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:02:07.599 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:02:07.599 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:07.599 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:02:07.600 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:02:07.600 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:02:07.601 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:02:07.601 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:07.601 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:02:07.601 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:02:07.602 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:02:30.306 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-25} closed
2025-06-30 21:02:30.309 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-26} closed
2025-06-30 21:02:34.096 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 21:02:34.107 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 9840 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:02:34.108 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:02:34.108 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:02:34.250 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 21:02:34.251 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 21:02:34.791 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:02:34.793 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:02:34.821 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-06-30 21:02:35.039 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$18f93d2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:02:35.055 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:02:35.461 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:02:35.462 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:02:35.463 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:02:35.463 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:02:35.466 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:02:35.477 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:02:35.480 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:02:35.480 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:02:35.532 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:02:35.532 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1281 ms
2025-06-30 21:02:35.535 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 21:02:36.107 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 21:02:36.130 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 21:02:36.438 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 21:02:36.439 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 21:02:36.908 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:02:37.031 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@3d9badf5, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4d5c8334, org.springframework.security.web.context.SecurityContextPersistenceFilter@e530933, org.springframework.security.web.header.HeaderWriterFilter@3721e364, org.springframework.web.filter.CorsFilter@75de7e74, org.springframework.security.web.authentication.logout.LogoutFilter@218aac0d, com.huang.store.security.JwtAuthenticationTokenFilter@219aca1e, com.huang.store.security.CustomAuthenticationFilter@3654b4e3, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@21a1c85a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4188ba3c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6a1bb43c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@69d5d60d, org.springframework.security.web.session.SessionManagementFilter@7f2285e7, org.springframework.security.web.access.ExceptionTranslationFilter@f8b3782, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@79d32aa]
2025-06-30 21:02:37.274 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 21:02:37.296 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 21:02:37.316 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 21:02:37.325 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.59 seconds (JVM running for 4.162)
2025-06-30 21:02:43.882 [http-nio-8080-exec-2] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 21:02:43.882 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 21:02:43.883 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-30 21:02:43.938 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:02:43.938 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:02:43.938 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:02:43.938 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:02:43.938 [http-nio-8080-exec-3] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:02:43.938 [http-nio-8080-exec-2] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:02:43.961 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:02:43.982 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 21:02:43.982 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 21:02:43.982 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:02:43.982 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 21:02:43.982 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 21:02:43.982 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 21:02:43.996 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:43.996 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:43.996 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:43.996 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:43.996 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:43.996 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:02:43.996 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:02:43.996 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:02:43.996 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:43.996 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:02:43.996 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:02:43.996 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:02:44.090 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:02:44.091 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:02:44.091 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:02:44.091 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:02:44.091 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:02:44.091 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:02:44.104 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:02:44.104 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:02:44.104 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:02:44.106 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:02:44.106 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:02:44.107 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:02:44.111 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:02:44.111 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:02:44.111 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:02:44.111 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:02:44.111 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:44.111 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 21:02:44.111 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:44.111 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:44.111 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:02:44.111 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:02:44.111 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:44.111 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:02:44.111 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:44.111 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:02:44.111 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:02:44.111 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:02:44.112 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:02:44.112 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:02:44.112 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:02:44.112 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:02:44.118 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:02:44.119 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:02:44.119 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:02:44.119 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:02:44.119 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:02:44.119 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:44.119 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:02:44.121 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:02:44.121 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:02:44.121 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:02:44.121 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:44.121 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:02:44.121 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:02:44.121 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:02:44.122 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:02:44.122 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:44.122 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:02:44.122 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:02:44.123 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:02:44.123 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:02:44.123 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:44.123 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:02:44.124 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:02:44.124 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:02:44.124 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:02:44.124 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:44.124 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:02:44.124 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:02:44.125 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:02:44.125 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:02:44.125 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:44.125 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:02:44.126 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:02:44.126 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:02:44.126 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:02:44.127 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:44.127 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:02:44.127 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:02:44.127 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:02:44.128 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:02:44.129 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:02:44.129 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:02:44.129 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:02:44.129 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:02:44.130 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:02:48.353 [http-nio-8080-exec-4] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1NjQ2NGZmQDQ1Ni5jb20iLCJjcmVhdGVkIjoxNzUxMjgxNTYwNzYyLCJleHAiOjE3NTEyODMzNjB9.BrxIo8hdmOs_r7VtovfbP7fmg8SwvwQX0ZPqIEGbjQ7fub-C6FE2dJkfnSBhecXvqxTi_qTYkzYEct1JdNX37w
2025-06-30 21:03:05.222 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 21:03:05.222 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:05.222 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:03:05.222 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:03:05.224 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:03:05.229 [http-nio-8080-exec-10] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 21:03:05.301 [http-nio-8080-exec-10] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=56464ff@456.com, password=$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy, enabled=true, roles=[ROLE_USER]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=080BC78D413015DC53E883CBDC6AEAA8], Granted Authorities=[ROLE_USER]]
2025-06-30 21:03:05.308 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 21:03:05.308 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:05.308 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:03:05.309 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:03:05.311 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:03:06.425 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,? 
2025-06-30 21:03:06.425 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:06.425 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 21:03:06.430 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 21:03:06.434 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 21:03:06.436 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ? 
2025-06-30 21:03:06.436 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:06.436 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 21:03:06.437 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 21:03:06.439 [http-nio-8080-exec-8] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 21:03:06.451 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:03:06.451 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:06.451 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:03:06.451 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:03:06.452 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:03:06.453 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ? 
2025-06-30 21:03:06.453 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:06.453 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 21:03:06.454 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 21:03:06.455 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 21:03:08.433 [http-nio-8080-exec-7] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:03:08.433 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 21:03:08.433 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 21:03:08.433 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:08.433 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:03:08.433 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 21:03:08.433 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:08.433 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:08.433 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:03:08.433 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:03:08.433 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 21:03:08.433 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:08.433 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:03:08.433 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:03:08.433 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:08.433 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:03:08.433 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:03:08.433 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:03:08.433 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 21:03:08.433 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:08.433 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:03:08.433 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:03:08.433 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:03:08.433 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:03:08.434 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:03:08.434 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:03:08.434 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:03:08.434 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:03:08.435 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 21:03:08.435 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:03:08.435 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:08.435 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:03:08.435 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:08.435 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:03:08.435 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:03:08.435 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:03:08.436 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:03:08.436 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:03:08.436 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:08.436 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:03:08.436 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:03:08.436 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:03:08.437 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:03:08.437 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:03:08.438 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:03:08.438 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:03:08.438 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:08.438 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:03:08.438 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:03:08.438 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:03:08.439 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:03:08.439 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:08.439 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:03:08.440 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:03:08.441 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:03:08.441 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:03:08.442 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:03:08.442 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:08.442 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:03:08.443 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:03:08.443 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:03:08.443 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:08.443 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:03:08.444 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:03:08.444 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:03:08.444 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:03:08.444 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:08.444 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:03:08.444 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:03:08.444 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:03:08.445 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:03:08.445 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:08.445 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:03:08.445 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:03:08.445 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:03:08.445 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:03:08.446 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:03:08.446 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:08.446 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:03:08.446 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:03:08.446 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:08.446 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:03:08.446 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:03:08.446 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:03:08.447 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:03:08.447 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:03:08.447 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:03:08.447 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:08.447 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:03:08.447 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:03:08.449 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:03:08.450 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:03:08.450 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:03:08.450 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:03:08.450 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:03:08.451 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:07:12.880 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:07:12.880 [Thread-7] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 21:07:12.883 [Thread-7] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-06-30 21:07:12.896 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-288323394] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 21:07:12.896 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-288323394] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 21:07:12.897 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1291053252] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 21:07:12.897 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1291053252] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 21:07:12.898 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 21:07:12.899 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 21:07:12.921 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-06-30 21:07:12.924 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-06-30 21:07:13.022 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 9840 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:07:13.023 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:07:13.023 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:07:13.302 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:07:13.302 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:07:13.305 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
2025-06-30 21:07:13.509 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:07:13.510 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:07:13.510 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:07:13.510 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:07:13.511 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:07:13.511 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:07:13.511 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:07:13.511 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:07:13.543 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:07:13.544 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 514 ms
2025-06-30 21:07:13.568 [restartedMain] ERROR org.apache.catalina.session.StandardManager - Exception loading sessions from persistent storage
java.lang.ClassNotFoundException: com.huang.store.entity.user.SecurityUser
	at org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader.loadClass(TomcatEmbeddedWebappClassLoader.java:72)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1141)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:467)
	at org.apache.catalina.util.CustomObjectInputStream.resolveClass(CustomObjectInputStream.java:158)
	at java.base/java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:2045)
	at java.base/java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1909)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2235)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:514)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:472)
	at org.apache.catalina.session.StandardSession.doReadObject(StandardSession.java:1530)
	at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:1000)
	at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:210)
	at org.apache.catalina.session.StandardManager.load(StandardManager.java:156)
	at org.apache.catalina.session.StandardManager.startInternal(StandardManager.java:346)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4931)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:794)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:248)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:489)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:481)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:211)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:184)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:585)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2025-06-30 21:07:13.671 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:07:13.744 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} inited
2025-06-30 21:07:13.763 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} inited
2025-06-30 21:07:13.824 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
2025-06-30 21:07:13.825 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closed
2025-06-30 21:07:13.826 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closed
2025-06-30 21:07:13.827 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 21:07:13.834 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-30 21:07:13.868 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 24 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:595)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:475)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:615)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:180)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$fbe4a231.CGLIB$sqlSessionFactory$1(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$fbe4a231$$FastClassBySpringCGLIB$$2228dce8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$fbe4a231.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:122)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:593)
	... 38 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElement(XMLMapperBuilder.java:262)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElement(XMLMapperBuilder.java:253)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElements(XMLMapperBuilder.java:245)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:118)
	... 40 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.dto.OrderDto'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:120)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 44 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.dto.OrderDto
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:200)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	... 46 common frames omitted
2025-06-30 21:07:15.393 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 9840 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:07:15.393 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:07:15.393 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:07:15.665 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:07:15.666 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:07:15.681 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-06-30 21:07:15.771 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$18f93d2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:07:15.778 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:07:15.878 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:07:15.878 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:07:15.878 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:07:15.878 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:07:15.879 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:07:15.879 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:07:15.880 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:07:15.880 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:07:15.903 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-1].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:07:15.903 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 506 ms
2025-06-30 21:07:15.906 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 21:07:15.928 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 21:07:15.946 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 17280 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:07:15.947 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:07:15.948 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:07:16.023 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} inited
2025-06-30 21:07:16.042 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} inited
2025-06-30 21:07:16.063 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 21:07:16.063 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 21:07:16.218 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 21:07:16.218 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 21:07:16.451 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:07:16.506 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:07:16.508 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:07:16.532 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 12 ms. Found 0 Redis repository interfaces.
2025-06-30 21:07:16.607 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@18e4cf72, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@74fe9ee7, org.springframework.security.web.context.SecurityContextPersistenceFilter@3e6df062, org.springframework.security.web.header.HeaderWriterFilter@3836cf21, org.springframework.web.filter.CorsFilter@2c88327e, org.springframework.security.web.authentication.logout.LogoutFilter@54f341f2, com.huang.store.security.JwtAuthenticationTokenFilter@5b2e1a7b, com.huang.store.security.CustomAuthenticationFilter@5f4d2594, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@68806e9a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@b3b7ea1, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5fae720, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@43e165db, org.springframework.security.web.session.SessionManagementFilter@6c0dec8, org.springframework.security.web.access.ExceptionTranslationFilter@17b45af4, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6ec4d02]
2025-06-30 21:07:16.750 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$2288c15c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:07:16.767 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:07:16.868 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 21:07:16.894 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 21:07:16.900 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 21:07:16.906 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 1.566 seconds (JVM running for 283.742)
2025-06-30 21:07:17.148 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:07:17.149 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:07:17.150 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:07:17.150 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:07:17.154 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:07:17.161 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:07:17.165 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:07:17.165 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:07:17.219 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:07:17.220 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1157 ms
2025-06-30 21:07:17.224 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 21:07:17.796 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 21:07:17.828 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 21:07:18.179 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 21:07:18.180 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 21:07:18.530 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:07:18.656 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@77c86399, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2242ee83, org.springframework.security.web.context.SecurityContextPersistenceFilter@213df0a1, org.springframework.security.web.header.HeaderWriterFilter@4be9cd19, org.springframework.web.filter.CorsFilter@5e479e73, org.springframework.security.web.authentication.logout.LogoutFilter@2940f07, com.huang.store.security.JwtAuthenticationTokenFilter@6502bda7, com.huang.store.security.CustomAuthenticationFilter@13a04407, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@d8a4540, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2dfae706, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@af79d26, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6a36a31a, org.springframework.security.web.session.SessionManagementFilter@626245c2, org.springframework.security.web.access.ExceptionTranslationFilter@79fe973d, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6214119f]
2025-06-30 21:07:18.863 [restartedMain] WARN  o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2025-06-30 21:07:18.877 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 21:07:18.881 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'; nested exception is org.springframework.boot.web.server.PortInUseException: Port 8080 is already in use
2025-06-30 21:07:18.896 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-06-30 21:07:18.898 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-06-30 21:07:18.901 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:07:18.901 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 21:07:18.909 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 21:07:18.910 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 21:07:18.916 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-30 21:07:18.925 [restartedMain] ERROR o.s.b.diagnostics.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

2025-06-30 21:07:47.079 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closed
2025-06-30 21:07:47.079 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closed
2025-06-30 21:07:51.174 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 21:07:51.188 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 19036 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:07:51.188 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:07:51.188 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:07:51.294 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 21:07:51.294 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 21:07:51.743 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:07:51.744 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:07:51.761 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 10 ms. Found 0 Redis repository interfaces.
2025-06-30 21:07:51.925 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$a5f3c13] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:07:51.936 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:07:52.253 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:07:52.255 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:07:52.255 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:07:52.255 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:07:52.258 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:07:52.262 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:07:52.262 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:07:52.263 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:07:52.305 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:07:52.305 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1011 ms
2025-06-30 21:07:52.309 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 21:07:52.742 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 21:07:52.767 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 21:07:53.012 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 21:07:53.012 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 21:07:53.346 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:07:53.459 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@2606aa47, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@61a47534, org.springframework.security.web.context.SecurityContextPersistenceFilter@39e5f3b8, org.springframework.security.web.header.HeaderWriterFilter@103fd99c, org.springframework.web.filter.CorsFilter@61b3ecd5, org.springframework.security.web.authentication.logout.LogoutFilter@cae13de, com.huang.store.security.JwtAuthenticationTokenFilter@75aef457, com.huang.store.security.CustomAuthenticationFilter@23255de2, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@3caec1a8, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@21f09156, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1d91579c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2b3b3f16, org.springframework.security.web.session.SessionManagementFilter@62569f62, org.springframework.security.web.access.ExceptionTranslationFilter@5cda83ee, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1afc6a26]
2025-06-30 21:07:53.709 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 21:07:53.726 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 21:07:53.741 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 21:07:53.749 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 2.876 seconds (JVM running for 3.351)
2025-06-30 21:08:44.809 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 21:08:44.810 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 21:08:44.813 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-06-30 21:08:44.997 [http-nio-8080-exec-1] WARN  org.apache.catalina.util.SessionIdGeneratorBase - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [131] milliseconds.
2025-06-30 21:13:26.396 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 21:13:26.396 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 21:13:26.396 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 21:13:26.396 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 21:13:26.396 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 21:13:26.396 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 21:13:26.416 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.416 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.416 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.417 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:13:26.418 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:13:26.416 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.416 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.418 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:13:26.416 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.418 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:13:26.418 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:13:26.417 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:13:26.579 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:13:26.579 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:13:26.579 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:13:26.579 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:13:26.579 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:13:26.579 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:13:26.608 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:13:26.609 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:13:26.608 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:13:26.609 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:13:26.609 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:13:26.610 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:13:26.624 [http-nio-8080-exec-5] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 21:13:26.625 [http-nio-8080-exec-8] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 21:13:26.625 [http-nio-8080-exec-3] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 21:13:26.625 [http-nio-8080-exec-6] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 21:13:26.625 [http-nio-8080-exec-4] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 21:13:26.625 [http-nio-8080-exec-7] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 21:13:26.645 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 21:13:26.645 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.645 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:13:26.648 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:13:26.650 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:13:26.651 [http-nio-8080-exec-7] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:13:26.651 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:13:26.651 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.651 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:13:26.651 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 21:13:26.651 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.651 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:13:26.652 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 21:13:26.652 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.652 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:13:26.652 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:13:26.654 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:13:26.655 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 21:13:26.655 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.655 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:13:26.655 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:13:26.655 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.655 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:13:26.656 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:13:26.655 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:13:26.656 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.656 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:13:26.656 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 21:13:26.656 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.656 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:13:26.657 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:13:26.657 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:13:26.658 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:13:26.658 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.658 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:13:26.658 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:13:26.659 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:13:26.659 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:13:26.660 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:13:26.660 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.660 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:13:26.660 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:13:26.660 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:13:26.661 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:13:26.662 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:13:26.663 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 21:13:26.663 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:13:26.664 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.664 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:13:26.665 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:13:26.667 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:13:26.667 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:13:26.667 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:13:26.667 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.667 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:13:26.668 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:13:26.671 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:13:26.673 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:13:26.677 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:13:26.677 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:13:26.678 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.678 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:13:26.678 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:13:26.679 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:13:26.680 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:13:26.684 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:13:26.685 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:13:26.685 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.686 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:13:26.686 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:13:26.688 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:13:26.689 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:13:26.689 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.689 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:13:26.690 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:13:26.693 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:13:26.693 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:13:26.693 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.693 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:13:26.694 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:13:26.695 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:13:26.695 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:13:26.695 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.695 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:13:26.696 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:13:26.697 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:13:26.697 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:13:26.697 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.698 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:13:26.698 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:13:26.698 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:13:26.698 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:13:26.699 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:26.699 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:13:26.699 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:13:26.700 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:13:27.094 [http-nio-8080-exec-6] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC 
2025-06-30 21:13:27.094 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:27.094 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 21:13:27.095 [http-nio-8080-exec-6] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 21:13:36.081 [http-nio-8080-exec-4] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC 
2025-06-30 21:13:36.081 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:13:36.081 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 21:13:36.081 [http-nio-8080-exec-4] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 21:14:51.276 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDcyNzU3NjAsImV4cCI6MTc1MTIwOTA3NX0.YhE5fPEGOCFsou48q_l4uc7HmelJmUjZJpeBD6vpXwAio6W71HLxmudqNz-eSR0eNYEATA0ZgRvyvySiqv4g8g
2025-06-30 21:14:51.278 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 21:14:51.278 [http-nio-8080-exec-1] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDcyNzU3NjAsImV4cCI6MTc1MTIwOTA3NX0.YhE5fPEGOCFsou48q_l4uc7HmelJmUjZJpeBD6vpXwAio6W71HLxmudqNz-eSR0eNYEATA0ZgRvyvySiqv4g8g
2025-06-30 21:14:51.278 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:14:51.279 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:14:51.278 [http-nio-8080-exec-8] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDcyNzU3NjAsImV4cCI6MTc1MTIwOTA3NX0.YhE5fPEGOCFsou48q_l4uc7HmelJmUjZJpeBD6vpXwAio6W71HLxmudqNz-eSR0eNYEATA0ZgRvyvySiqv4g8g
2025-06-30 21:14:51.283 [http-nio-8080-exec-10] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDcyNzU3NjAsImV4cCI6MTc1MTIwOTA3NX0.YhE5fPEGOCFsou48q_l4uc7HmelJmUjZJpeBD6vpXwAio6W71HLxmudqNz-eSR0eNYEATA0ZgRvyvySiqv4g8g
2025-06-30 21:14:51.284 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:14:51.284 [http-nio-8080-exec-5] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDcyNzU3NjAsImV4cCI6MTc1MTIwOTA3NX0.YhE5fPEGOCFsou48q_l4uc7HmelJmUjZJpeBD6vpXwAio6W71HLxmudqNz-eSR0eNYEATA0ZgRvyvySiqv4g8g
2025-06-30 21:14:51.284 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:14:51.284 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:14:51.284 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 21:14:51.282 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 21:14:51.285 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:14:51.285 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:14:51.285 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:14:51.285 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:14:51.288 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:14:51.289 [http-nio-8080-exec-7] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDcyNzU3NjAsImV4cCI6MTc1MTIwOTA3NX0.YhE5fPEGOCFsou48q_l4uc7HmelJmUjZJpeBD6vpXwAio6W71HLxmudqNz-eSR0eNYEATA0ZgRvyvySiqv4g8g
2025-06-30 21:14:51.290 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:14:51.285 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:14:51.291 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:14:51.291 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:14:51.291 [http-nio-8080-exec-7] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:14:51.291 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:14:51.291 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 21:14:51.291 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:14:51.291 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:14:51.291 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:14:51.293 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:14:51.293 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:14:51.285 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 21:14:51.294 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:14:51.294 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:14:51.294 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:14:51.294 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:14:51.294 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:14:51.290 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:14:51.289 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:14:51.296 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:14:51.296 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:14:51.297 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:14:51.297 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:14:51.297 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:14:51.297 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:14:51.298 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:14:51.298 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:14:51.298 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:14:51.298 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:14:51.298 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:14:51.299 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:14:51.299 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 21:14:51.299 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:14:51.299 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:14:51.299 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:14:51.300 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:14:51.300 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:14:51.300 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:14:51.300 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:14:51.300 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:14:51.300 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:14:51.300 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:14:51.302 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:14:51.302 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:14:51.300 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:14:51.301 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:14:51.301 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:14:51.304 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:14:51.305 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:14:51.306 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:14:51.307 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:14:51.307 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:14:51.307 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:14:51.307 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:14:51.307 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:14:51.308 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:14:51.309 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:14:51.309 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:14:51.309 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:14:51.309 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:14:51.312 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:14:51.312 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:14:51.313 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:14:51.313 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:14:51.312 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:14:51.314 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:14:51.316 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:14:51.317 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:14:51.317 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:14:51.317 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:14:51.317 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:14:51.319 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:14:51.320 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:14:51.320 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:14:51.320 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:14:51.320 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:14:51.322 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:14:51.322 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:14:51.322 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:14:51.322 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:14:51.323 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:14:51.324 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:15:09.791 [http-nio-8080-exec-9] INFO  com.huang.store.util.JwtTokenUtil - JWT格式验证失败:eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNTQ1MDU5NjM0QHFxLmNvbSIsImNyZWF0ZWQiOjE3NTEyMDcyNzU3NjAsImV4cCI6MTc1MTIwOTA3NX0.YhE5fPEGOCFsou48q_l4uc7HmelJmUjZJpeBD6vpXwAio6W71HLxmudqNz-eSR0eNYEATA0ZgRvyvySiqv4g8g
2025-06-30 21:15:09.995 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 21:15:09.995 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:15:09.995 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:15:09.995 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:15:09.996 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:15:09.997 [http-nio-8080-exec-9] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 21:15:10.139 [http-nio-8080-exec-9] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=56464ff@456.com, password=$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy, enabled=true, roles=[ROLE_USER]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=62BAD11510C9A7EED772BEE83FDF7648], Granted Authorities=[ROLE_USER]]
2025-06-30 21:15:10.168 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 21:15:10.168 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:15:10.168 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:15:10.168 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:15:10.172 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:15:11.334 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 21:15:11.334 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:15:11.334 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:15:11.335 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:15:11.339 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:15:11.340 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 21:15:11.340 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:15:11.340 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:15:11.341 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:15:11.342 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:15:11.351 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 21:15:11.351 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:15:11.351 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:15:11.353 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:15:11.353 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:15:11.353 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:15:11.354 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:15:11.354 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:15:11.355 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:15:11.355 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:15:11.356 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:15:11.355 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 21:15:11.356 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:15:11.356 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:15:11.356 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:15:11.356 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:15:11.356 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:15:11.356 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:15:11.357 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:15:11.357 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:15:11.357 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:15:11.357 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:15:11.358 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:15:11.362 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:15:11.364 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:15:11.365 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 21:15:11.365 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:15:11.365 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:15:11.366 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:15:11.369 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:15:11.369 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:15:11.369 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:15:11.371 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:15:11.371 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:15:11.371 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 21:15:11.371 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:15:11.371 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:15:11.372 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:15:11.372 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:15:11.373 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:15:11.373 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:15:11.373 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:15:11.373 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:15:11.374 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:15:11.374 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:15:11.374 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:15:11.374 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:15:11.375 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:15:11.375 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:15:11.375 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:15:11.378 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:15:11.378 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:15:11.378 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:15:11.378 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:15:11.378 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:15:11.378 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:15:11.378 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:15:11.379 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:15:11.379 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:15:11.380 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:15:11.380 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:15:11.380 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:15:11.380 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:15:11.380 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:15:11.380 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:15:11.380 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:15:11.380 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:15:11.380 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:15:11.381 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:15:11.381 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:15:11.382 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:15:11.382 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:15:11.382 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:15:11.382 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:15:11.382 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:15:11.382 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:15:11.382 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:15:11.382 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:15:11.382 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:15:11.383 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:15:11.383 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:15:11.384 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:15:11.386 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:15:11.386 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:15:11.387 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:15:11.388 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:15:15.218 [http-nio-8080-exec-3] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC 
2025-06-30 21:15:15.218 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:15:15.218 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 21:15:15.218 [http-nio-8080-exec-3] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 21:16:36.877 [http-nio-8080-exec-9] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:16:36.877 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 21:16:36.877 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 21:16:36.877 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:36.877 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:16:36.877 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:36.877 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:16:36.878 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 21:16:36.878 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:36.878 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:16:36.879 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 21:16:36.879 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:36.879 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:16:36.880 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 21:16:36.880 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:36.880 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:16:36.880 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:16:36.880 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:36.880 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:16:36.881 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:16:36.882 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:16:36.882 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:16:36.884 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:16:36.884 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:16:36.885 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:16:36.885 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:36.885 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:16:36.885 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:16:36.885 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:16:36.886 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:16:36.886 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 21:16:36.886 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:36.886 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:16:36.886 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:16:36.887 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:16:36.887 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:16:36.887 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:36.887 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:16:36.887 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:16:36.888 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:16:36.888 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:16:36.889 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:16:36.889 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:16:36.889 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:16:36.889 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:36.889 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:16:36.890 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:16:36.890 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:16:36.890 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:16:36.890 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:16:36.890 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:16:36.890 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:16:36.890 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:36.890 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:36.890 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:16:36.890 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:16:36.890 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:16:36.891 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:16:36.891 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:16:36.892 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:16:36.892 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:16:36.892 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:36.892 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:16:36.892 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:16:36.891 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:16:36.893 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:16:36.893 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:36.893 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:16:36.894 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:16:36.894 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:16:36.894 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:16:36.894 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:36.894 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:16:36.895 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:16:36.895 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:16:36.895 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:16:36.896 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:36.896 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:16:36.896 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:16:36.896 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:16:36.896 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:16:36.897 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:16:36.897 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:36.897 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:16:36.897 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:16:36.899 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:16:36.900 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:16:36.900 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:36.900 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:16:36.901 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:16:36.903 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:16:36.903 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:16:36.903 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:36.903 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:16:36.904 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:16:36.905 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:16:54.245 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 21:16:54.245 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:54.245 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:16:54.246 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:16:54.249 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:16:54.249 [http-nio-8080-exec-8] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 21:16:54.409 [http-nio-8080-exec-8] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=56464ff@456.com, password=$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy, enabled=true, roles=[ROLE_USER]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=62BAD11510C9A7EED772BEE83FDF7648], Granted Authorities=[ROLE_USER]]
2025-06-30 21:16:54.411 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 21:16:54.411 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:54.411 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:16:54.411 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:16:54.413 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:16:55.469 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t ) 
2025-06-30 21:16:55.469 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:55.469 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:16:55.470 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:16:55.471 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,? 
2025-06-30 21:16:55.471 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:16:55.471 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:55.471 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:16:55.471 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:16:55.472 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:16:55.472 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:55.472 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,? 
2025-06-30 21:16:55.472 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:16:55.472 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:55.472 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:16:55.472 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:16:55.472 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:16:55.473 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:16:55.473 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic 
2025-06-30 21:16:55.473 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:16:55.474 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:55.474 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:16:55.474 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:16:55.475 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:16:55.476 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:16:55.476 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:55.476 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:16:55.476 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:16:55.476 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:16:55.478 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:16:55.478 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:16:55.478 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:55.478 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:16:55.478 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:16:55.479 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:16:55.480 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:16:55.480 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一" 
2025-06-30 21:16:55.480 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:55.480 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:55.480 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:16:55.480 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:16:55.480 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:16:55.480 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:16:55.481 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:16:55.482 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:16:55.482 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:55.482 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:16:55.483 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:16:55.484 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:16:55.485 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:16:55.485 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:55.485 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:16:55.485 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:16:55.486 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:16:55.486 [http-nio-8080-exec-4] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:16:55.486 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:16:55.487 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=? 
2025-06-30 21:16:55.487 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:55.487 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:16:55.487 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1 
2025-06-30 21:16:55.487 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:16:55.487 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:55.487 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:55.487 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:16:55.487 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:16:55.488 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:16:55.489 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:16:55.489 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:55.489 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:16:55.489 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:16:55.490 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:16:55.490 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:16:55.490 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:16:55.491 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:16:55.492 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:16:55.492 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t ) 
2025-06-30 21:16:55.492 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:55.492 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:16:55.492 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:16:55.492 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:16:55.493 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:16:55.493 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:55.493 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:16:55.493 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:16:55.494 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:16:55.495 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:16:55.496 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:16:55.496 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:55.496 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:16:55.496 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:16:55.498 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:16:55.499 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=? 
2025-06-30 21:16:55.499 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:55.499 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:16:55.499 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:16:55.501 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:16:58.876 [http-nio-8080-exec-9] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC 
2025-06-30 21:16:58.876 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:16:58.876 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 21:16:58.877 [http-nio-8080-exec-9] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 21:20:20.806 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:20:20.806 [Thread-7] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 21:20:20.808 [Thread-7] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-06-30 21:20:20.817 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1903231064] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 21:20:20.817 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1903231064] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 21:20:20.817 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1132301668] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 21:20:20.817 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1132301668] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 21:20:20.818 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 21:20:20.819 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 21:20:20.834 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-06-30 21:20:20.835 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-06-30 21:20:20.900 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 19036 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:20:20.900 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:20:20.900 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:20:21.135 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:20:21.135 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:20:21.186 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 50 ms. Found 0 Redis repository interfaces.
2025-06-30 21:20:21.318 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$a5f3c13] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:20:21.327 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:20:21.467 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:20:21.467 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:20:21.467 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:20:21.467 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:20:21.468 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:20:21.468 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:20:21.468 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:20:21.468 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:20:21.496 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:20:21.496 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 592 ms
2025-06-30 21:20:21.499 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 21:20:21.634 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} inited
2025-06-30 21:20:21.658 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} inited
2025-06-30 21:20:21.745 [restartedMain] ERROR o.s.boot.web.embedded.tomcat.TomcatStarter - Error starting Tomcat context. Exception: org.springframework.beans.factory.UnsatisfiedDependencyException. Message: Error creating bean with name 'securityConfig': Unsatisfied dependency expressed through field 'myUserDetailService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'myUserDetailService': Unsatisfied dependency expressed through field 'userService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'firstUser': Unsatisfied dependency expressed through field 'userMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\UserMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\SpikeActivityMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\SpikeActivityMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.spike.SpikeActivity'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.spike.SpikeActivity
2025-06-30 21:20:21.750 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 21:20:21.753 [restartedMain] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-676181810] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 21:20:21.754 [restartedMain] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-676181810] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 21:20:21.754 [restartedMain] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-995987682] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 21:20:21.754 [restartedMain] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-995987682] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 21:20:21.755 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat
2025-06-30 21:20:21.756 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closed
2025-06-30 21:20:21.757 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closed
2025-06-30 21:20:21.762 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-30 21:20:21.795 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:165)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:585)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:142)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:481)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:211)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:184)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	... 13 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'securityConfig': Unsatisfied dependency expressed through field 'myUserDetailService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'myUserDetailService': Unsatisfied dependency expressed through field 'userService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'firstUser': Unsatisfied dependency expressed through field 'userMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\UserMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\SpikeActivityMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\SpikeActivityMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.spike.SpikeActivity'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.spike.SpikeActivity
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:405)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:213)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:213)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:176)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:171)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:156)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:87)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:262)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:236)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:53)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4904)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:794)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:248)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:489)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	... 18 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'myUserDetailService': Unsatisfied dependency expressed through field 'userService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'firstUser': Unsatisfied dependency expressed through field 'userMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\UserMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\SpikeActivityMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\SpikeActivityMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.spike.SpikeActivity'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.spike.SpikeActivity
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1391)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 69 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'firstUser': Unsatisfied dependency expressed through field 'userMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\UserMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\SpikeActivityMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\SpikeActivityMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.spike.SpikeActivity'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.spike.SpikeActivity
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1391)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 83 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userMapper' defined in file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\com\huang\store\mapper\UserMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\SpikeActivityMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\SpikeActivityMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.spike.SpikeActivity'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.spike.SpikeActivity
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1534)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1417)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1391)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 97 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\SpikeActivityMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\SpikeActivityMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.spike.SpikeActivity'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.spike.SpikeActivity
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1391)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1519)
	... 108 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\SpikeActivityMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\SpikeActivityMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.spike.SpikeActivity'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.spike.SpikeActivity
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 121 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\SpikeActivityMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\SpikeActivityMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.spike.SpikeActivity'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.spike.SpikeActivity
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:595)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:475)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:615)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:180)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$4b44a72.CGLIB$sqlSessionFactory$2(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$4b44a72$$FastClassBySpringCGLIB$$35d31ea0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$4b44a72.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 122 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\SpikeActivityMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.spike.SpikeActivity'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.spike.SpikeActivity
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:122)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:593)
	... 135 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.spike.SpikeActivity'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.spike.SpikeActivity
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElement(XMLMapperBuilder.java:262)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElement(XMLMapperBuilder.java:253)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElements(XMLMapperBuilder.java:245)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:118)
	... 137 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.spike.SpikeActivity'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.spike.SpikeActivity
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:120)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 141 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.spike.SpikeActivity
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:200)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	... 143 common frames omitted
2025-06-30 21:23:37.419 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 19036 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:23:37.420 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:23:37.420 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:23:37.536 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:23:37.536 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:23:37.542 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-06-30 21:23:37.575 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$a5f3c13] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:23:37.578 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:23:37.614 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:23:37.614 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:23:37.614 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:23:37.614 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:23:37.614 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:23:37.615 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:23:37.615 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:23:37.615 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:23:37.626 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-1].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:23:37.627 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 205 ms
2025-06-30 21:23:37.628 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 21:23:37.682 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} inited
2025-06-30 21:23:37.695 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} inited
2025-06-30 21:23:37.779 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 21:23:37.779 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 21:23:37.876 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:23:37.938 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@3fe1637d, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@540938de, org.springframework.security.web.context.SecurityContextPersistenceFilter@2e8280b3, org.springframework.security.web.header.HeaderWriterFilter@25b1ad0e, org.springframework.web.filter.CorsFilter@4c89ed05, org.springframework.security.web.authentication.logout.LogoutFilter@33d9b719, com.huang.store.security.JwtAuthenticationTokenFilter@78372c64, com.huang.store.security.CustomAuthenticationFilter@33759483, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@34a6941b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6e76e702, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4607ee1f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@176bd051, org.springframework.security.web.session.SessionManagementFilter@60b5e332, org.springframework.security.web.access.ExceptionTranslationFilter@4bc16eb7, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@377741a3]
2025-06-30 21:23:38.044 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 21:23:38.052 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 21:23:38.055 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 21:23:38.058 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.664 seconds (JVM running for 947.66)
2025-06-30 21:23:51.662 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:23:51.662 [Thread-9] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 21:23:51.665 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-2100894172] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 21:23:51.665 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-2100894172] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 21:23:51.665 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1153929291] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 21:23:51.665 [Thread-9] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1153929291] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 21:23:51.666 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 21:23:51.667 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 21:23:51.674 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closed
2025-06-30 21:23:51.674 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closed
2025-06-30 21:23:51.743 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 19036 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:23:51.743 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:23:51.743 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:23:51.862 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:23:51.862 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:23:51.865 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
2025-06-30 21:23:51.909 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.huang.store.mapper]' package. Please check your configuration.
2025-06-30 21:23:51.973 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:23:51.973 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:23:51.973 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:23:51.973 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:23:51.974 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:23:51.975 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:23:51.975 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:23:51.975 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:23:51.989 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-1].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:23:51.990 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 245 ms
2025-06-30 21:23:51.998 [restartedMain] ERROR org.apache.catalina.session.StandardManager - Exception loading sessions from persistent storage
java.lang.ClassNotFoundException: com.huang.store.entity.user.SecurityUser
	at org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader.loadClass(TomcatEmbeddedWebappClassLoader.java:72)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1141)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:467)
	at org.apache.catalina.util.CustomObjectInputStream.resolveClass(CustomObjectInputStream.java:158)
	at java.base/java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:2045)
	at java.base/java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1909)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2235)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:514)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:472)
	at org.apache.catalina.session.StandardSession.doReadObject(StandardSession.java:1530)
	at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:1000)
	at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:210)
	at org.apache.catalina.session.StandardManager.load(StandardManager.java:156)
	at org.apache.catalina.session.StandardManager.startInternal(StandardManager.java:346)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4931)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:794)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:248)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:489)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:481)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:211)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:184)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:585)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2025-06-30 21:23:52.044 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:23:52.098 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-7} inited
2025-06-30 21:23:52.115 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-8} inited
2025-06-30 21:23:52.135 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
2025-06-30 21:23:52.136 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-7} closed
2025-06-30 21:23:52.136 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-8} closed
2025-06-30 21:23:52.137 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 21:23:52.142 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-30 21:23:52.144 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 24 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:595)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:475)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:615)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:180)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$4b44a72.CGLIB$sqlSessionFactory$2(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$4b44a72$$FastClassBySpringCGLIB$$35d31ea0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$4b44a72.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:122)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:593)
	... 38 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:76)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:137)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:130)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:120)
	... 40 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:120)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 44 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:200)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	... 46 common frames omitted
2025-06-30 21:23:54.636 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 19036 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:23:54.636 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:23:54.636 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:23:54.743 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:23:54.743 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:23:54.750 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-06-30 21:23:54.782 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$a5f3c13] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:23:54.786 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:23:54.831 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:23:54.831 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:23:54.831 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:23:54.831 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:23:54.832 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:23:54.832 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:23:54.832 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:23:54.832 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:23:54.844 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-2].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:23:54.844 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 207 ms
2025-06-30 21:23:54.846 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 21:23:54.898 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-9} inited
2025-06-30 21:23:54.912 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-10} inited
2025-06-30 21:23:54.991 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 21:23:54.991 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 21:23:55.101 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:23:55.160 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@25c70edd, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@201a5066, org.springframework.security.web.context.SecurityContextPersistenceFilter@4b2873a3, org.springframework.security.web.header.HeaderWriterFilter@2a0f9498, org.springframework.web.filter.CorsFilter@512feff, org.springframework.security.web.authentication.logout.LogoutFilter@6b77f2e3, com.huang.store.security.JwtAuthenticationTokenFilter@32451bf9, com.huang.store.security.CustomAuthenticationFilter@457122a9, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@1d97035d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5bb133bf, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@dccd705, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@551f7a9e, org.springframework.security.web.session.SessionManagementFilter@169f0ee0, org.springframework.security.web.access.ExceptionTranslationFilter@54488839, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@50d99bab]
2025-06-30 21:23:55.252 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 21:23:55.261 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 21:23:55.263 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 21:23:55.266 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 0.656 seconds (JVM running for 964.869)
2025-06-30 21:24:05.132 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat-2].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 21:24:05.132 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 21:24:05.133 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-30 21:24:05.136 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 21:24:05.136 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:24:05.136 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:24:05.137 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:24:05.139 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:24:05.143 [http-nio-8080-exec-1] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 21:24:05.150 [http-nio-8080-exec-1] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC 
2025-06-30 21:24:05.150 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:24:05.150 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 21:24:05.151 [http-nio-8080-exec-1] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 21:24:09.460 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-9} closed
2025-06-30 21:24:09.462 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-10} closed
2025-06-30 21:24:12.429 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 21:24:12.440 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 2560 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:24:12.440 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:24:12.440 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:24:12.546 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 21:24:12.546 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 21:24:12.967 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:24:12.969 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:24:12.988 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 10 ms. Found 0 Redis repository interfaces.
2025-06-30 21:24:13.156 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$a425ac9b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:24:13.167 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:24:13.501 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:24:13.502 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:24:13.502 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:24:13.502 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:24:13.505 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:24:13.511 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:24:13.512 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:24:13.512 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:24:13.559 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:24:13.559 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1013 ms
2025-06-30 21:24:13.562 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 21:24:14.085 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 21:24:14.107 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 21:24:14.375 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 21:24:14.375 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 21:24:14.731 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:24:14.848 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@268e2cba, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@56e42873, org.springframework.security.web.context.SecurityContextPersistenceFilter@5f280545, org.springframework.security.web.header.HeaderWriterFilter@60ef431d, org.springframework.web.filter.CorsFilter@fd1dc11, org.springframework.security.web.authentication.logout.LogoutFilter@269713c3, com.huang.store.security.JwtAuthenticationTokenFilter@7881f3fb, com.huang.store.security.CustomAuthenticationFilter@26526f7d, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@dce98e6, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@65dc106e, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@26344ae4, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6d1f6bdb, org.springframework.security.web.session.SessionManagementFilter@a972ce, org.springframework.security.web.access.ExceptionTranslationFilter@21b960de, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@2f93ed5e]
2025-06-30 21:24:15.071 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 21:24:15.085 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 21:24:15.100 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 21:24:15.106 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 2.977 seconds (JVM running for 3.469)
2025-06-30 21:24:19.738 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 21:24:19.738 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 21:24:19.740 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-30 21:24:19.849 [http-nio-8080-exec-1] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC 
2025-06-30 21:24:19.861 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:24:19.864 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 21:24:19.956 [http-nio-8080-exec-1] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 21:27:13.095 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:27:13.095 [Thread-7] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 21:27:13.096 [Thread-7] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-06-30 21:27:13.108 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-435474917] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 21:27:13.109 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-435474917] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 21:27:13.109 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1020813733] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 21:27:13.110 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1020813733] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 21:27:13.110 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 21:27:13.112 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 21:27:13.154 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-06-30 21:27:13.156 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-06-30 21:27:13.423 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 2560 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:27:13.424 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:27:13.425 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:27:13.653 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:27:13.653 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:27:13.654 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 0 ms. Found 0 Redis repository interfaces.
2025-06-30 21:27:13.705 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.huang.store.mapper]' package. Please check your configuration.
2025-06-30 21:27:13.798 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:27:13.798 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:27:13.798 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:27:13.798 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:27:13.799 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:27:13.800 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:27:13.800 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:27:13.800 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:27:13.820 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:27:13.820 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 392 ms
2025-06-30 21:27:13.837 [restartedMain] ERROR org.apache.catalina.session.StandardManager - Exception loading sessions from persistent storage
java.lang.ClassNotFoundException: com.huang.store.entity.user.SecurityUser
	at org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader.loadClass(TomcatEmbeddedWebappClassLoader.java:72)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1141)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:467)
	at org.apache.catalina.util.CustomObjectInputStream.resolveClass(CustomObjectInputStream.java:158)
	at java.base/java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:2045)
	at java.base/java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1909)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2235)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:514)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:472)
	at org.apache.catalina.session.StandardSession.doReadObject(StandardSession.java:1530)
	at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:1000)
	at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:210)
	at org.apache.catalina.session.StandardManager.load(StandardManager.java:156)
	at org.apache.catalina.session.StandardManager.startInternal(StandardManager.java:346)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4931)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:794)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:248)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:489)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:481)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:211)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:184)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:585)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2025-06-30 21:27:13.916 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:27:13.994 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} inited
2025-06-30 21:27:14.017 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} inited
2025-06-30 21:27:14.052 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
2025-06-30 21:27:14.053 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closed
2025-06-30 21:27:14.054 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closed
2025-06-30 21:27:14.055 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 21:27:14.063 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-30 21:27:14.086 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 24 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:595)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:475)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:615)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:180)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9e7abafa.CGLIB$sqlSessionFactory$1(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9e7abafa$$FastClassBySpringCGLIB$$32430bbe.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9e7abafa.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:122)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:593)
	... 38 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:76)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:137)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:130)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:120)
	... 40 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:120)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 44 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:200)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	... 46 common frames omitted
2025-06-30 21:27:16.050 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 2560 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:27:16.050 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:27:16.050 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:27:16.309 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:27:16.309 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:27:16.324 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 0 Redis repository interfaces.
2025-06-30 21:27:16.392 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$a425ac9b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:27:16.399 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:27:16.485 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:27:16.485 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:27:16.485 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:27:16.485 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:27:16.486 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:27:16.486 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:27:16.487 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:27:16.487 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:27:16.520 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-1].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:27:16.521 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 469 ms
2025-06-30 21:27:16.524 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 21:27:16.684 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} inited
2025-06-30 21:27:16.708 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} inited
2025-06-30 21:27:16.932 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 21:27:16.932 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 21:27:17.230 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:27:17.407 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@7f4ac271, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@11a854e7, org.springframework.security.web.context.SecurityContextPersistenceFilter@7c3f59f1, org.springframework.security.web.header.HeaderWriterFilter@4fc3f4f4, org.springframework.web.filter.CorsFilter@3dba5512, org.springframework.security.web.authentication.logout.LogoutFilter@162916c, com.huang.store.security.JwtAuthenticationTokenFilter@645aebaa, com.huang.store.security.CustomAuthenticationFilter@2a46f126, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@33d840cf, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@538e267, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@558cd260, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@44fa7094, org.springframework.security.web.session.SessionManagementFilter@10184a4d, org.springframework.security.web.access.ExceptionTranslationFilter@19ec024b, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6e55da12]
2025-06-30 21:27:17.721 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 21:27:17.748 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 21:27:17.752 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 21:27:17.762 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 1.776 seconds (JVM running for 186.125)
2025-06-30 21:27:38.602 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat-1].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 21:27:38.602 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 21:27:38.603 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-30 21:27:38.612 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ? 
2025-06-30 21:27:38.612 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:27:38.612 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:27:38.655 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:27:38.659 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:27:38.672 [http-nio-8080-exec-1] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 21:27:38.802 [http-nio-8080-exec-1] WARN  org.apache.catalina.util.SessionIdGeneratorBase - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [116] milliseconds.
2025-06-30 21:27:38.815 [http-nio-8080-exec-1] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC 
2025-06-30 21:27:38.816 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:27:38.816 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 21:27:38.819 [http-nio-8080-exec-1] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 21:27:44.483 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closed
2025-06-30 21:27:44.484 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closed
2025-06-30 21:28:33.504 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 21:28:33.519 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 20648 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:28:33.519 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:28:33.520 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:28:33.628 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 21:28:33.628 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 21:28:34.036 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:28:34.039 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:28:34.070 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 0 Redis repository interfaces.
2025-06-30 21:28:34.245 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$4b6b5c83] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:28:34.259 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:28:34.608 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:28:34.608 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:28:34.609 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:28:34.609 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:28:34.612 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:28:34.618 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:28:34.620 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:28:34.620 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:28:34.668 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:28:34.668 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1040 ms
2025-06-30 21:28:34.672 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 21:28:35.150 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 21:28:35.174 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 21:28:35.408 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 21:28:35.408 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 21:28:35.772 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:28:35.888 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@61e36acf, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@97e3112, org.springframework.security.web.context.SecurityContextPersistenceFilter@31be7dba, org.springframework.security.web.header.HeaderWriterFilter@6655036e, org.springframework.web.filter.CorsFilter@79922b2e, org.springframework.security.web.authentication.logout.LogoutFilter@74cc29d4, com.huang.store.security.JwtAuthenticationTokenFilter@1b5afa82, com.huang.store.security.CustomAuthenticationFilter@104f916b, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@ba568c9, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2940f07, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2e1466f5, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@a870d28, org.springframework.security.web.session.SessionManagementFilter@8b6fd, org.springframework.security.web.access.ExceptionTranslationFilter@5c41f96a, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@48318cd0]
2025-06-30 21:28:36.103 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 21:28:36.118 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 21:28:36.134 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 21:28:36.143 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 2.92 seconds (JVM running for 3.179)
2025-06-30 21:29:53.989 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 21:29:54.006 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 6280 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:29:54.007 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:29:54.008 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:29:54.142 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 21:29:54.143 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 21:29:54.614 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:29:54.616 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:29:54.644 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-06-30 21:29:54.832 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$5a5baeff] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:29:54.846 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:29:55.280 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:29:55.281 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:29:55.281 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:29:55.281 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:29:55.285 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:29:55.291 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:29:55.294 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:29:55.294 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:29:55.346 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:29:55.347 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1204 ms
2025-06-30 21:29:55.352 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 21:29:55.903 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 21:29:55.927 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 21:29:56.179 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 21:29:56.179 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 21:29:56.549 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:29:56.700 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@f00d9f4, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2633c2ee, org.springframework.security.web.context.SecurityContextPersistenceFilter@79d23c16, org.springframework.security.web.header.HeaderWriterFilter@6e4ae488, org.springframework.web.filter.CorsFilter@7a9bc254, org.springframework.security.web.authentication.logout.LogoutFilter@becbcda, com.huang.store.security.JwtAuthenticationTokenFilter@1741dc49, com.huang.store.security.CustomAuthenticationFilter@5dd7317c, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@6e79b485, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@bd912ea, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1f0a5072, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@41d5b69a, org.springframework.security.web.session.SessionManagementFilter@74448a2e, org.springframework.security.web.access.ExceptionTranslationFilter@8b6fd, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4f362261]
2025-06-30 21:29:56.941 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 21:29:56.954 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 21:29:56.969 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 21:29:56.977 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.344 seconds (JVM running for 3.639)
2025-06-30 21:34:55.912 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 21:34:55.922 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 28132 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:34:55.923 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:34:55.923 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:34:56.028 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 21:34:56.028 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 21:34:56.459 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:34:56.460 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:34:56.480 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-30 21:34:56.658 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$84fda742] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:34:56.673 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:34:57.017 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:34:57.018 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:34:57.018 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:34:57.018 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:34:57.021 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:34:57.025 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:34:57.026 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:34:57.026 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:34:57.070 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:34:57.070 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1042 ms
2025-06-30 21:34:57.073 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 21:34:57.549 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 21:34:57.572 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 21:34:57.836 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 21:34:57.836 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 21:34:58.192 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:34:58.309 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@81acd6, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@691c8241, org.springframework.security.web.context.SecurityContextPersistenceFilter@5a706925, org.springframework.security.web.header.HeaderWriterFilter@5dc3bbc3, org.springframework.web.filter.CorsFilter@606f1678, org.springframework.security.web.authentication.logout.LogoutFilter@1a78d488, com.huang.store.security.JwtAuthenticationTokenFilter@59221701, com.huang.store.security.CustomAuthenticationFilter@599ef43d, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@20fbead1, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@78a2d921, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@408cf8f8, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5e2425e2, org.springframework.security.web.session.SessionManagementFilter@31413df8, org.springframework.security.web.access.ExceptionTranslationFilter@6d6f584c, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@adc7604]
2025-06-30 21:34:58.529 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 21:34:58.544 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 21:34:58.556 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 21:34:58.563 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 2.93 seconds (JVM running for 3.374)
2025-06-30 21:35:01.878 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 21:35:01.878 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 21:35:01.879 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-30 21:35:01.979 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-06-30 21:35:01.994 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:35:01.995 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:35:02.111 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:35:02.138 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:35:02.150 [http-nio-8080-exec-1] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 21:35:02.257 [http-nio-8080-exec-1] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 21:35:02.257 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:35:02.257 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 21:35:02.258 [http-nio-8080-exec-1] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 21:36:59.022 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:36:59.022 [Thread-7] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 21:36:59.024 [Thread-7] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-06-30 21:36:59.043 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-911739684] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 21:36:59.043 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-911739684] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 21:36:59.044 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1610743979] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2443)
2025-06-30 21:36:59.044 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1610743979] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:2540)
2025-06-30 21:36:59.045 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 21:36:59.050 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 21:36:59.082 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-06-30 21:36:59.083 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-06-30 21:36:59.219 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 28132 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:36:59.219 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:36:59.219 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:36:59.732 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:36:59.732 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:36:59.733 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 0 ms. Found 0 Redis repository interfaces.
2025-06-30 21:36:59.842 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.huang.store.mapper]' package. Please check your configuration.
2025-06-30 21:37:00.264 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:37:00.265 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:37:00.265 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:37:00.265 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:37:00.266 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:37:00.267 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:37:00.267 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:37:00.268 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:37:00.315 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:37:00.316 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1092 ms
2025-06-30 21:37:00.757 [restartedMain] ERROR org.apache.catalina.session.StandardManager - Exception loading sessions from persistent storage
java.lang.ClassNotFoundException: com.huang.store.entity.user.SecurityUser
	at org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader.loadClass(TomcatEmbeddedWebappClassLoader.java:72)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1141)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:467)
	at org.apache.catalina.util.CustomObjectInputStream.resolveClass(CustomObjectInputStream.java:158)
	at java.base/java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:2045)
	at java.base/java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1909)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2235)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:514)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:472)
	at org.apache.catalina.session.StandardSession.doReadObject(StandardSession.java:1530)
	at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:1000)
	at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:210)
	at org.apache.catalina.session.StandardManager.load(StandardManager.java:156)
	at org.apache.catalina.session.StandardManager.startInternal(StandardManager.java:346)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4931)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:794)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:248)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:489)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:481)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:211)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:184)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:585)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2025-06-30 21:37:01.065 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:37:01.241 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} inited
2025-06-30 21:37:01.274 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} inited
2025-06-30 21:37:01.657 [restartedMain] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: c7d90adc-b087-49cb-818c-9da46e03a17b

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-06-30 21:37:01.719 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@b190b02, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6c504ee8, org.springframework.security.web.context.SecurityContextPersistenceFilter@5489d2ee, org.springframework.security.web.header.HeaderWriterFilter@e7ddf04, org.springframework.security.web.csrf.CsrfFilter@37450d65, org.springframework.security.web.authentication.logout.LogoutFilter@2846f594, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@49a7b142, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@3f2c7eca, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@53d121, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@30ec0be9, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@52fabe6c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@321fdec8, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@50303181, org.springframework.security.web.session.SessionManagementFilter@4b38c0c9, org.springframework.security.web.access.ExceptionTranslationFilter@4a699380, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5665c23e]
2025-06-30 21:37:01.781 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 21:37:01.793 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 21:37:01.800 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 21:37:01.805 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 2.662 seconds (JVM running for 126.616)
2025-06-30 21:37:12.135 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:37:12.135 [Thread-9] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 21:37:12.138 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 21:37:12.139 [Thread-9] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 21:37:12.142 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closed
2025-06-30 21:37:12.143 [Thread-9] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closed
2025-06-30 21:37:12.235 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 28132 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:37:12.235 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:37:12.235 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:37:12.427 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:37:12.428 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:37:12.429 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 0 ms. Found 0 Redis repository interfaces.
2025-06-30 21:37:12.477 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.huang.store.mapper]' package. Please check your configuration.
2025-06-30 21:37:12.541 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:37:12.541 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:37:12.541 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:37:12.542 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:37:12.542 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:37:12.543 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:37:12.543 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:37:12.543 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:37:12.569 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:37:12.569 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 332 ms
2025-06-30 21:37:12.646 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:37:12.723 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} inited
2025-06-30 21:37:12.748 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} inited
2025-06-30 21:37:12.779 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is java.io.IOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'
2025-06-30 21:37:12.780 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closed
2025-06-30 21:37:12.780 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closed
2025-06-30 21:37:12.780 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 21:37:12.787 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-30 21:37:12.818 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is java.io.IOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is java.io.IOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 24 common frames omitted
Caused by: java.io.IOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:700)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:577)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:720)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:187)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$7f52b5a1.CGLIB$sqlSessionFactory$1(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$7f52b5a1$$FastClassBySpringCGLIB$$9166455d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$7f52b5a1.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:128)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:100)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:698)
	... 38 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:78)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:144)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:136)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:126)
	... 40 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:128)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:150)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 44 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:226)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:103)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:322)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:124)
	... 46 common frames omitted
2025-06-30 21:37:18.311 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 21:37:18.322 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 26056 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:37:18.322 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:37:18.322 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:37:18.429 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 21:37:18.429 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 21:37:18.840 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:37:18.842 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:37:18.860 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-30 21:37:19.046 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$3b563cba] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:37:19.062 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:37:19.413 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:37:19.414 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:37:19.414 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:37:19.414 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:37:19.418 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:37:19.425 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:37:19.426 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:37:19.426 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:37:19.472 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:37:19.472 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1043 ms
2025-06-30 21:37:19.475 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 21:37:20.036 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 21:37:20.059 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 21:37:20.287 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 21:37:20.288 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 21:37:20.633 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:37:20.803 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@15b9168b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1a54ca2, org.springframework.security.web.context.SecurityContextPersistenceFilter@75fbb9ce, org.springframework.security.web.header.HeaderWriterFilter@bb7833e, org.springframework.web.filter.CorsFilter@f0ffe1, org.springframework.security.web.authentication.logout.LogoutFilter@24fa4b0b, com.huang.store.security.JwtAuthenticationTokenFilter@2851d724, com.huang.store.security.CustomAuthenticationFilter@45d36fa9, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@4ad63aa, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1820bea2, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@f05f4f0, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3b6dfb4d, org.springframework.security.web.session.SessionManagementFilter@54aae6b6, org.springframework.security.web.access.ExceptionTranslationFilter@70d84d9d, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@34beb572]
2025-06-30 21:37:21.198 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 21:37:21.220 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 21:37:21.240 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 21:37:21.250 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.201 seconds (JVM running for 3.684)
2025-06-30 21:37:22.557 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 21:37:22.557 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 21:37:22.559 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-30 21:37:22.651 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-06-30 21:37:22.667 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:37:22.669 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:37:22.716 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:37:22.732 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:37:22.743 [http-nio-8080-exec-1] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 21:37:22.845 [http-nio-8080-exec-1] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 21:37:22.845 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:37:22.845 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 21:37:22.849 [http-nio-8080-exec-1] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 21:37:22.853 [http-nio-8080-exec-1] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 21:37:22.856 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:37:22.857 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:37:22.857 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:37:22.862 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 21:37:22.871 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 21:37:22.873 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:37:22.873 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:37:22.873 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:37:22.874 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 21:37:22.878 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 21:37:22.879 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:37:22.879 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:37:22.879 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:37:22.879 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 21:37:22.882 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 21:37:59.684 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-06-30 21:37:59.685 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:37:59.685 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:37:59.685 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:37:59.687 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:37:59.689 [http-nio-8080-exec-3] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 21:37:59.761 [http-nio-8080-exec-3] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=56464ff@456.com, password=$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy, enabled=true, roles=[ROLE_USER]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=4199BDC365746E8489B8ACE670135CB3], Granted Authorities=[ROLE_USER]]
2025-06-30 21:37:59.770 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-06-30 21:37:59.770 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:37:59.770 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:37:59.770 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:37:59.772 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:38:00.880 [http-nio-8080-exec-9] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 21:38:00.880 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:00.880 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 21:38:00.880 [http-nio-8080-exec-9] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 21:38:00.883 [http-nio-8080-exec-9] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 21:38:00.883 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:38:00.884 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:00.884 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:38:00.884 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 21:38:00.887 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 21:38:00.888 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:38:00.888 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:00.888 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:38:00.888 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 21:38:00.891 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 21:38:00.891 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:38:00.891 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:00.891 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:38:00.892 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 21:38:00.894 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 21:38:11.063 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-06-30 21:38:11.063 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:11.063 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:38:11.063 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:38:11.065 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:38:11.066 [http-nio-8080-exec-6] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 21:38:11.247 [http-nio-8080-exec-6] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=56464ff@456.com, password=$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy, enabled=true, roles=[ROLE_USER]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=4199BDC365746E8489B8ACE670135CB3], Granted Authorities=[ROLE_USER]]
2025-06-30 21:38:11.252 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-06-30 21:38:11.252 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:11.252 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:38:11.253 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:38:11.257 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:38:12.293 [http-nio-8080-exec-7] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 21:38:12.293 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:12.293 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 21:38:12.294 [http-nio-8080-exec-7] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 21:38:12.296 [http-nio-8080-exec-7] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 21:38:12.297 [http-nio-8080-exec-7] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:38:12.297 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:12.297 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:38:12.297 [http-nio-8080-exec-7] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 21:38:12.307 [http-nio-8080-exec-7] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 21:38:12.308 [http-nio-8080-exec-7] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:38:12.309 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:12.309 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:38:12.309 [http-nio-8080-exec-7] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 21:38:12.315 [http-nio-8080-exec-7] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 21:38:12.317 [http-nio-8080-exec-7] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:38:12.317 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:12.317 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:38:12.318 [http-nio-8080-exec-7] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 21:38:12.321 [http-nio-8080-exec-7] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 21:38:13.838 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-06-30 21:38:13.838 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:13.838 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:38:13.839 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:38:13.839 [http-nio-8080-exec-2] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:38:13.840 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,?
2025-06-30 21:38:13.840 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=?
2025-06-30 21:38:13.840 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:13.840 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:13.840 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:38:13.840 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:38:13.841 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:38:13.842 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:38:13.842 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:13.842 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:38:13.843 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:38:13.844 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:38:13.846 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:38:13.847 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:13.847 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:38:13.846 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-06-30 21:38:13.847 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:13.847 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:38:13.847 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:38:13.851 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:38:13.851 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic
2025-06-30 21:38:13.851 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:13.851 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:38:13.852 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:38:13.853 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:38:13.854 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:38:13.854 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:13.854 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:38:13.857 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:38:13.859 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:38:13.860 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:38:13.860 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:13.860 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:38:13.861 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:38:13.861 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:38:13.863 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:38:13.863 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:38:13.864 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:38:13.864 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:13.864 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:38:13.864 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:38:13.865 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:38:13.867 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:38:13.867 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:38:13.867 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:13.867 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:38:13.868 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:38:13.869 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:38:13.870 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:38:13.870 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:38:13.872 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-06-30 21:38:13.872 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:38:13.872 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:38:13.872 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:13.872 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:38:13.873 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:38:13.872 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:13.873 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:38:13.874 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:38:13.879 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:38:13.882 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:38:13.882 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:38:13.882 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:13.882 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:38:13.883 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:38:13.884 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:38:13.885 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:38:13.885 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:13.885 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:38:13.886 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:38:13.888 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:38:13.888 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:38:13.888 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:13.889 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:38:13.889 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:38:13.890 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:38:13.891 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:38:13.891 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:13.891 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:38:13.891 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:38:13.892 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:38:13.893 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:38:13.893 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:13.893 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:38:13.893 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:38:13.894 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:38:13.894 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:38:13.894 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:13.894 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:38:13.894 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:38:13.897 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:38:16.060 [http-nio-8080-exec-10] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 21:38:16.061 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:16.061 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 21:38:16.062 [http-nio-8080-exec-10] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 21:38:16.066 [http-nio-8080-exec-10] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 21:38:16.067 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:38:16.067 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:16.067 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:38:16.068 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 21:38:16.077 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 21:38:16.079 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:38:16.080 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:16.080 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:38:16.081 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 21:38:16.087 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 21:38:16.087 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:38:16.088 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:16.088 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:38:16.088 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 21:38:16.095 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 21:38:43.494 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:38:43.494 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,?
2025-06-30 21:38:43.494 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:43.494 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:38:43.495 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:43.495 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:38:43.495 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:38:43.494 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-06-30 21:38:43.495 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-06-30 21:38:43.496 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:43.496 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:43.496 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:38:43.496 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:38:43.496 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:38:43.497 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:38:43.500 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:38:43.500 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic
2025-06-30 21:38:43.500 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:43.500 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:38:43.500 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-06-30 21:38:43.501 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:43.501 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:38:43.501 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:38:43.501 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:38:43.501 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=?
2025-06-30 21:38:43.501 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:43.501 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:38:43.502 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:38:43.503 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:38:43.503 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:38:43.504 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:43.504 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:38:43.505 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:38:43.506 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:38:43.506 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:38:43.507 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:38:43.507 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:43.507 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:38:43.507 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:38:43.507 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:38:43.508 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:38:43.508 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:38:43.508 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:38:43.508 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:43.508 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:38:43.509 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:38:43.509 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:43.509 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:38:43.509 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:38:43.510 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:38:43.511 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:38:43.511 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:38:43.512 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:38:43.512 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:38:43.512 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:43.512 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:38:43.512 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:38:43.512 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:38:43.512 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:38:43.512 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:43.512 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:38:43.513 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:38:43.513 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:38:43.513 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:38:43.514 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:38:43.514 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:38:43.515 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:38:43.515 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:43.515 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:38:43.515 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:38:43.515 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:43.515 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:38:43.515 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:38:43.515 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:38:43.516 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:38:43.516 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:38:43.517 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:38:43.517 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:38:43.517 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:43.517 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:43.517 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:38:43.517 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:38:43.518 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:38:43.518 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:38:43.519 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:38:43.519 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:38:43.519 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:38:43.519 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:43.519 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:38:43.519 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:38:43.520 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:38:43.521 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:38:43.521 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:43.521 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:38:43.521 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:38:43.522 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:38:47.830 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-06-30 21:38:47.830 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:47.830 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:38:47.830 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:38:47.832 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:38:47.833 [http-nio-8080-exec-8] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 21:38:47.901 [http-nio-8080-exec-8] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=56464ff@456.com, password=$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy, enabled=true, roles=[ROLE_USER]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=4199BDC365746E8489B8ACE670135CB3], Granted Authorities=[ROLE_USER]]
2025-06-30 21:38:47.902 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-06-30 21:38:47.902 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:47.902 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:38:47.902 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:38:47.903 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:38:48.945 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-06-30 21:38:48.945 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-06-30 21:38:48.945 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:48.945 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:38:48.945 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:38:48.945 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,?
2025-06-30 21:38:48.945 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:48.945 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:38:48.945 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:48.945 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:38:48.945 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:48.945 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:38:48.945 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:38:48.945 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:38:48.946 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:38:48.946 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:38:48.946 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-06-30 21:38:48.946 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:48.946 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:38:48.946 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:38:48.947 [http-nio-8080-exec-9] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:38:48.947 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:38:48.947 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:48.947 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:38:48.948 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:38:48.948 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:38:48.948 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic
2025-06-30 21:38:48.949 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:48.949 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:38:48.949 [http-nio-8080-exec-3] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:38:48.949 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:38:48.949 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:38:48.949 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=?
2025-06-30 21:38:48.949 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:38:48.949 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:48.949 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:38:48.949 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:38:48.949 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:48.949 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:38:48.949 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:38:48.949 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:48.949 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:38:48.950 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:38:48.950 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:38:48.950 [http-nio-8080-exec-4] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:38:48.951 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:38:48.951 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:38:48.951 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:48.951 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:38:48.952 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:38:48.952 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:38:48.952 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:48.952 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:38:48.953 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:38:48.953 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:38:48.952 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:38:48.954 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:38:48.955 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:38:48.956 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:38:48.956 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:38:48.956 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:38:48.956 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:38:48.956 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:48.956 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:38:48.956 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:38:48.956 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:48.956 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:38:48.956 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:38:48.957 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:38:48.957 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:38:48.958 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:38:48.958 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:48.958 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:38:48.958 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:38:48.958 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:38:48.958 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:38:48.958 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:48.958 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:38:48.959 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:38:48.959 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:38:48.959 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:38:48.960 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:38:48.960 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:38:48.960 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:48.960 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:48.960 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:38:48.960 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:38:48.960 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:38:48.960 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:38:48.961 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:38:48.961 [http-nio-8080-exec-4] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:38:48.962 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:38:48.962 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:48.962 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:38:48.962 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:38:48.964 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:38:51.199 [http-nio-8080-exec-4] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 21:38:51.199 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:51.199 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 21:38:51.200 [http-nio-8080-exec-4] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 21:38:51.202 [http-nio-8080-exec-4] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 21:38:51.203 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:38:51.203 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:51.203 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:38:51.204 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 21:38:51.207 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 21:38:51.208 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:38:51.208 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:51.208 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:38:51.208 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 21:38:51.211 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 21:38:51.212 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:38:51.212 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:38:51.212 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:38:51.213 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 21:38:51.215 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 21:43:43.705 [http-nio-8080-exec-7] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:43:43.705 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-06-30 21:43:43.705 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,?
2025-06-30 21:43:43.705 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-06-30 21:43:43.705 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:43.705 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:43.705 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=?
2025-06-30 21:43:43.705 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:43:43.705 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:43:43.705 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:43.705 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:43:43.705 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:43:43.705 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-06-30 21:43:43.705 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:43.705 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:43.705 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:43:43.705 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:43:43.706 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:43.706 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:43:43.726 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:43:43.727 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:43:43.729 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:43:43.729 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:43:43.729 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:43:43.729 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:43:43.729 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:43.729 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:43:43.729 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:43:43.731 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:43:43.732 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:43:43.733 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:43:43.733 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:43:43.733 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:43:43.733 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:43.733 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:43.733 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:43:43.733 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:43:43.733 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:43:43.733 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:43:43.734 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:43:43.734 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:43:43.735 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:43:43.735 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:43.735 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:43:43.735 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:43:43.735 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:43:43.735 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic
2025-06-30 21:43:43.735 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:43:43.735 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:43.735 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:43:43.736 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:43:43.736 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:43:43.736 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:43:43.736 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:43.736 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:43:43.736 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:43:43.736 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:43:43.737 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:43:43.737 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:43:43.737 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:43:43.738 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:43:43.738 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:43.738 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:43:43.738 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:43:43.740 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:43:43.740 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:43:43.740 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:43:43.740 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:43.740 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:43:43.741 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:43:43.741 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:43:43.741 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:43.741 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:43:43.741 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:43:43.742 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:43:43.742 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:43:43.743 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:43:43.743 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:43.743 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:43:43.743 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:43:43.743 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:43.743 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:43:43.743 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:43:43.743 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:43:43.745 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:43:43.745 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:43:43.745 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:43:43.746 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:43.746 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:43:43.746 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:43:43.747 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:43:43.748 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:43:43.748 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:43.748 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:43:43.748 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:43:43.749 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:43:46.797 [http-nio-8080-exec-10] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 21:43:46.797 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:46.797 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 21:43:46.797 [http-nio-8080-exec-10] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 21:43:46.804 [http-nio-8080-exec-10] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 21:43:46.805 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:43:46.805 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:46.805 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:43:46.806 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 21:43:46.809 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 21:43:46.809 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:43:46.809 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:46.809 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:43:46.809 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 21:43:46.812 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 21:43:46.812 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:43:46.812 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:43:46.812 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:43:46.813 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 21:43:46.815 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 21:49:25.098 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:49:25.099 [Thread-7] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 21:49:25.100 [Thread-7] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-06-30 21:49:25.117 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-672113949] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-06-30 21:49:25.117 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-672113949] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-06-30 21:49:25.118 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-286683645] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-06-30 21:49:25.119 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-286683645] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-06-30 21:49:25.119 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 21:49:25.122 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 21:49:25.141 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closing ...
2025-06-30 21:49:25.143 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-06-30 21:49:25.143 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closing ...
2025-06-30 21:49:25.145 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-06-30 21:49:25.262 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 26056 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:49:25.262 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:49:25.262 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:49:25.506 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:49:25.506 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:49:25.510 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2025-06-30 21:49:25.565 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.huang.store.mapper]' package. Please check your configuration.
2025-06-30 21:49:25.652 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:49:25.652 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:49:25.652 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:49:25.652 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:49:25.653 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:49:25.654 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:49:25.654 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:49:25.654 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:49:25.680 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:49:25.680 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 410 ms
2025-06-30 21:49:25.700 [restartedMain] ERROR org.apache.catalina.session.StandardManager - Exception loading sessions from persistent storage
java.lang.ClassNotFoundException: com.huang.store.entity.user.SecurityUser
	at org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader.loadClass(TomcatEmbeddedWebappClassLoader.java:72)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1141)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:467)
	at org.apache.catalina.util.CustomObjectInputStream.resolveClass(CustomObjectInputStream.java:158)
	at java.base/java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:2045)
	at java.base/java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1909)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2235)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:514)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:472)
	at org.apache.catalina.session.StandardSession.doReadObject(StandardSession.java:1530)
	at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:1000)
	at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:210)
	at org.apache.catalina.session.StandardManager.load(StandardManager.java:156)
	at org.apache.catalina.session.StandardManager.startInternal(StandardManager.java:346)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4931)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:794)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:248)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:489)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:481)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:211)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:184)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:585)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2025-06-30 21:49:25.802 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:49:25.901 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} inited
2025-06-30 21:49:25.922 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} inited
2025-06-30 21:49:25.964 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is java.io.IOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'
2025-06-30 21:49:25.964 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closing ...
2025-06-30 21:49:25.965 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closed
2025-06-30 21:49:25.965 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closing ...
2025-06-30 21:49:25.966 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closed
2025-06-30 21:49:25.967 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 21:49:25.974 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-30 21:49:26.000 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is java.io.IOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is java.io.IOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 24 common frames omitted
Caused by: java.io.IOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:700)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:577)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:720)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:187)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$35ab4b19.CGLIB$sqlSessionFactory$2(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$35ab4b19$$FastClassBySpringCGLIB$$1f759807.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$35ab4b19.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:128)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:100)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:698)
	... 38 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:78)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:144)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:136)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:126)
	... 40 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:128)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:150)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 44 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:226)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:103)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:322)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:124)
	... 46 common frames omitted
2025-06-30 21:49:27.959 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 26056 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:49:27.960 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:49:27.960 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:49:28.326 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:49:28.326 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:49:28.351 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 24 ms. Found 0 Redis repository interfaces.
2025-06-30 21:49:28.472 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$3b563cba] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:49:28.484 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:49:28.608 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:49:28.608 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:49:28.608 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:49:28.608 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:49:28.610 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:49:28.611 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:49:28.612 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:49:28.613 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:49:28.645 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-1].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:49:28.645 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 681 ms
2025-06-30 21:49:28.648 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 21:49:28.824 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} inited
2025-06-30 21:49:28.850 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} inited
2025-06-30 21:49:29.077 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 21:49:29.078 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 21:49:29.377 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:49:29.585 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4e38d10a, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@45a2e9d2, org.springframework.security.web.context.SecurityContextPersistenceFilter@5af76e73, org.springframework.security.web.header.HeaderWriterFilter@706b7838, org.springframework.web.filter.CorsFilter@6c0e4e26, org.springframework.security.web.authentication.logout.LogoutFilter@809f6f2, com.huang.store.security.JwtAuthenticationTokenFilter@1bbe04cc, com.huang.store.security.CustomAuthenticationFilter@f0ba497, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@36ee907a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5dacc47e, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@76addd4b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5941ca64, org.springframework.security.web.session.SessionManagementFilter@7bfc8440, org.springframework.security.web.access.ExceptionTranslationFilter@b318dae, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@3ec03ed2]
2025-06-30 21:49:29.887 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 21:49:29.915 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 21:49:29.919 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 21:49:29.927 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 2.034 seconds (JVM running for 732.362)
2025-06-30 21:49:45.271 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closing ...
2025-06-30 21:49:45.272 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closed
2025-06-30 21:49:45.272 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closing ...
2025-06-30 21:49:45.273 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closed
2025-06-30 21:49:49.246 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 21:49:49.259 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 7148 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:49:49.259 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:49:49.260 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:49:49.382 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 21:49:49.382 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 21:49:49.844 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:49:49.846 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:49:49.869 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.
2025-06-30 21:49:50.062 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$b6e5b690] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:49:50.076 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:49:50.394 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:49:50.394 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:49:50.394 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:49:50.394 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:49:50.397 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:49:50.402 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:49:50.403 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:49:50.403 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:49:50.449 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:49:50.449 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1067 ms
2025-06-30 21:49:50.453 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 21:49:50.991 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 21:49:51.012 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 21:49:51.330 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 21:49:51.330 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 21:49:51.846 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:49:51.992 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4d2d6df6, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@60d21507, org.springframework.security.web.context.SecurityContextPersistenceFilter@5308d6ee, org.springframework.security.web.header.HeaderWriterFilter@330e56f2, org.springframework.web.filter.CorsFilter@73ac0177, org.springframework.security.web.authentication.logout.LogoutFilter@427c187f, com.huang.store.security.JwtAuthenticationTokenFilter@3048bbf8, com.huang.store.security.CustomAuthenticationFilter@330ed723, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@279c2d14, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@64f21ef7, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@40e68ca3, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@217c02cf, org.springframework.security.web.session.SessionManagementFilter@41604d62, org.springframework.security.web.access.ExceptionTranslationFilter@5e0dca4, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@7ac87808]
2025-06-30 21:49:52.370 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 21:49:52.397 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 21:49:52.429 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 21:49:52.442 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.483 seconds (JVM running for 3.927)
2025-06-30 21:49:56.162 [http-nio-8080-exec-3] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 21:49:56.162 [http-nio-8080-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 21:49:56.162 [http-nio-8080-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-06-30 21:49:56.207 [http-nio-8080-exec-2] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:49:56.229 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-06-30 21:49:56.229 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-06-30 21:49:56.229 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,?
2025-06-30 21:49:56.229 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=?
2025-06-30 21:49:56.229 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-06-30 21:49:56.229 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:49:56.245 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:49:56.245 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:49:56.245 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:49:56.245 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:49:56.245 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:49:56.245 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:49:56.245 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:49:56.245 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:49:56.245 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:49:56.245 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:49:56.245 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:49:56.245 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:49:56.275 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:49:56.275 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:49:56.288 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:49:56.290 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:49:56.293 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:49:56.293 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:49:56.295 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:49:56.295 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:49:56.295 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:49:56.295 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:49:56.295 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:49:56.295 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:49:56.295 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:49:56.295 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:49:56.295 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:49:56.295 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:49:56.295 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:49:56.297 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:49:56.298 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:49:56.299 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:49:56.301 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:49:56.304 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:49:56.305 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:49:56.305 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:49:56.305 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic
2025-06-30 21:49:56.305 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:49:56.305 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:49:56.305 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:49:56.306 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:49:56.306 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:49:56.306 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:49:56.307 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:49:56.308 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:49:56.308 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:49:56.308 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:49:56.308 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:49:56.308 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:49:56.308 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:49:56.308 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:49:56.309 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:49:56.309 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:49:56.310 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:49:56.310 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:49:56.310 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:49:56.310 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:49:56.310 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:49:56.310 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:49:56.310 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:49:56.310 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:49:56.311 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:49:56.311 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:49:56.312 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:49:56.312 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:49:56.312 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:49:56.312 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:49:56.312 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:49:56.313 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:49:56.313 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:49:56.313 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:49:56.313 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:49:56.314 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:49:56.315 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:49:56.315 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:49:56.315 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:49:56.315 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:49:56.315 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:49:56.316 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:49:56.316 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:49:56.316 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:49:56.316 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:49:56.317 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:49:56.317 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:49:56.318 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:49:56.318 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:49:56.318 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:49:56.318 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:49:56.319 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:50:20.171 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-06-30 21:50:20.171 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:50:20.171 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:50:20.172 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:50:20.173 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:50:20.178 [http-nio-8080-exec-1] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 21:50:20.249 [http-nio-8080-exec-1] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=56464ff@456.com, password=$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy, enabled=true, roles=[ROLE_USER]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=70580FC8A9AA078516E3ABAADC954AEB], Granted Authorities=[ROLE_USER]]
2025-06-30 21:50:20.264 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-06-30 21:50:20.264 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:50:20.264 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:50:20.265 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:50:20.266 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:50:21.344 [http-nio-8080-exec-6] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 21:50:21.344 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:50:21.344 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 21:50:21.345 [http-nio-8080-exec-6] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 21:50:21.348 [http-nio-8080-exec-6] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 21:50:21.351 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:50:21.352 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:50:21.352 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:50:21.359 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 21:50:21.365 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 21:50:21.368 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:50:21.368 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:50:21.368 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:50:21.368 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 21:50:21.371 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 21:50:21.372 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:50:21.372 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:50:21.372 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:50:21.373 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 21:50:21.376 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 21:50:25.198 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByBookId - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.bookId = ? AND sg.status = 1 ORDER BY sg.createTime DESC
2025-06-30 21:50:25.198 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:50:25.198 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.bookId = ?
        AND sg.status = 1
        ORDER BY sg.createTime DESC ::: DataSources: slave
2025-06-30 21:50:25.205 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByBookId - ==> Parameters: 3(Integer)
2025-06-30 21:50:25.213 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByBookId - <==      Total: 1
2025-06-30 21:50:25.216 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.SpikeActivityMapper.getActivityById - ==>  Preparing: SELECT * FROM spikeActivity WHERE id = ?
2025-06-30 21:50:25.217 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:50:25.217 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity WHERE id = ? ::: DataSources: slave
2025-06-30 21:50:25.220 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.SpikeActivityMapper.getActivityById - ==> Parameters: 1(Long)
2025-06-30 21:50:25.223 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.SpikeActivityMapper.getActivityById - <==      Total: 1
2025-06-30 21:50:25.225 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.SpikeRecordMapper.insertSpikeRecord - ==>  Preparing: INSERT INTO spikeRecord ( spikeGoodsId, userAccount, spikeTime, result, failReason, ipAddress, userAgent ) VALUES ( ?, ?, ?, ?, ?, ?, ? )
2025-06-30 21:50:25.228 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:50:25.228 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: INSERT INTO spikeRecord (
            spikeGoodsId, userAccount, spikeTime, result, 
            failReason, ipAddress, userAgent
        ) VALUES (
            ?, ?, ?, ?,
            ?, ?, ?
        ) ::: DataSources: master
2025-06-30 21:50:25.502 [http-nio-8080-exec-5] DEBUG c.h.s.mapper.SpikeRecordMapper.insertSpikeRecord - ==> Parameters: null, 56464ff@456.com(String), 2025-06-30T21:50:25.224604700(LocalDateTime), 0(Integer), 该图书的秒杀活动未开始或已结束(String), 0:0:0:0:0:0:0:1(String), Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0(String)
2025-06-30 21:50:25.547 [http-nio-8080-exec-5] ERROR druid.sql.Statement - {conn-10001, pstmt-20001} execute error. INSERT INTO spikeRecord (
            spikeGoodsId, userAccount, spikeTime, result, 
            failReason, ipAddress, userAgent
        ) VALUES (
            ?, ?, ?, ?,
            ?, ?, ?
        )
java.sql.SQLIntegrityConstraintViolationException: Column 'spikeGoodsId' cannot be null
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:118)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor16.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy122.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:48)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:75)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy82.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:272)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy107.insertSpikeRecord(Unknown Source)
	at com.huang.store.service.SpikeService.recordSpikeResult(SpikeService.java:281)
	at com.huang.store.service.SpikeService.spikeBookById(SpikeService.java:115)
	at com.huang.store.service.SpikeService$$FastClassBySpringCGLIB$$6c437123.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at com.huang.store.service.SpikeService$$EnhancerBySpringCGLIB$$5ae9ff80.spikeBookById(<generated>)
	at com.huang.store.controller.SpikeController.spikeBook(SpikeController.java:146)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-30 21:50:40.730 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByBookId - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.bookId = ? AND sg.status = 1 ORDER BY sg.createTime DESC
2025-06-30 21:50:40.730 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:50:40.730 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.bookId = ?
        AND sg.status = 1
        ORDER BY sg.createTime DESC ::: DataSources: slave
2025-06-30 21:50:40.731 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByBookId - ==> Parameters: 3(Integer)
2025-06-30 21:50:40.737 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByBookId - <==      Total: 1
2025-06-30 21:50:40.738 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.SpikeActivityMapper.getActivityById - ==>  Preparing: SELECT * FROM spikeActivity WHERE id = ?
2025-06-30 21:50:40.738 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:50:40.738 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity WHERE id = ? ::: DataSources: slave
2025-06-30 21:50:40.738 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.SpikeActivityMapper.getActivityById - ==> Parameters: 1(Long)
2025-06-30 21:50:40.739 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.SpikeActivityMapper.getActivityById - <==      Total: 1
2025-06-30 21:50:40.740 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.SpikeRecordMapper.insertSpikeRecord - ==>  Preparing: INSERT INTO spikeRecord ( spikeGoodsId, userAccount, spikeTime, result, failReason, ipAddress, userAgent ) VALUES ( ?, ?, ?, ?, ?, ?, ? )
2025-06-30 21:50:40.740 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:50:40.740 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: INSERT INTO spikeRecord (
            spikeGoodsId, userAccount, spikeTime, result, 
            failReason, ipAddress, userAgent
        ) VALUES (
            ?, ?, ?, ?,
            ?, ?, ?
        ) ::: DataSources: master
2025-06-30 21:50:40.743 [http-nio-8080-exec-4] DEBUG c.h.s.mapper.SpikeRecordMapper.insertSpikeRecord - ==> Parameters: null, 56464ff@456.com(String), 2025-06-30T21:50:40.740021200(LocalDateTime), 0(Integer), 该图书的秒杀活动未开始或已结束(String), 0:0:0:0:0:0:0:1(String), Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0(String)
2025-06-30 21:50:40.746 [http-nio-8080-exec-4] ERROR druid.sql.Statement - {conn-10001, pstmt-20002} execute error. INSERT INTO spikeRecord (
            spikeGoodsId, userAccount, spikeTime, result, 
            failReason, ipAddress, userAgent
        ) VALUES (
            ?, ?, ?, ?,
            ?, ?, ?
        )
java.sql.SQLIntegrityConstraintViolationException: Column 'spikeGoodsId' cannot be null
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:118)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3446)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:639)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:434)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3444)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:158)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:483)
	at org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.MasterSlavePreparedStatement.execute(MasterSlavePreparedStatement.java:118)
	at jdk.internal.reflect.GeneratedMethodAccessor16.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58)
	at jdk.proxy4/jdk.proxy4.$Proxy122.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:48)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:75)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy82.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:272)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:142)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy107.insertSpikeRecord(Unknown Source)
	at com.huang.store.service.SpikeService.recordSpikeResult(SpikeService.java:281)
	at com.huang.store.service.SpikeService.spikeBookById(SpikeService.java:115)
	at com.huang.store.service.SpikeService$$FastClassBySpringCGLIB$$6c437123.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at com.huang.store.service.SpikeService$$EnhancerBySpringCGLIB$$5ae9ff80.spikeBookById(<generated>)
	at com.huang.store.controller.SpikeController.spikeBook(SpikeController.java:146)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:111)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:223)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at com.huang.store.security.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-30 21:56:22.912 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:56:22.913 [Thread-7] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 21:56:22.914 [Thread-7] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-06-30 21:56:22.932 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-321959209] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-06-30 21:56:22.932 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-321959209] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-06-30 21:56:22.933 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-382778048] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-06-30 21:56:22.933 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-382778048] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-06-30 21:56:22.934 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 21:56:22.935 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 21:56:22.957 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closing ...
2025-06-30 21:56:22.958 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-06-30 21:56:22.958 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closing ...
2025-06-30 21:56:22.961 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-06-30 21:56:23.084 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 7148 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:56:23.084 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:56:23.084 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:56:23.323 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:56:23.323 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:56:23.327 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2025-06-30 21:56:23.393 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.huang.store.mapper]' package. Please check your configuration.
2025-06-30 21:56:23.480 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:56:23.480 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:56:23.480 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:56:23.480 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:56:23.481 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:56:23.482 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:56:23.482 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:56:23.483 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:56:23.510 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:56:23.511 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 418 ms
2025-06-30 21:56:23.528 [restartedMain] ERROR org.apache.catalina.session.StandardManager - Exception loading sessions from persistent storage
java.lang.ClassNotFoundException: com.huang.store.entity.user.SecurityUser
	at org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader.loadClass(TomcatEmbeddedWebappClassLoader.java:72)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1141)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:467)
	at org.apache.catalina.util.CustomObjectInputStream.resolveClass(CustomObjectInputStream.java:158)
	at java.base/java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:2045)
	at java.base/java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1909)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2235)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:514)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:472)
	at org.apache.catalina.session.StandardSession.doReadObject(StandardSession.java:1530)
	at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:1000)
	at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:210)
	at org.apache.catalina.session.StandardManager.load(StandardManager.java:156)
	at org.apache.catalina.session.StandardManager.startInternal(StandardManager.java:346)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4931)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:794)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:248)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:489)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:481)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:211)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:184)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:585)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2025-06-30 21:56:23.609 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:56:23.710 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} inited
2025-06-30 21:56:23.731 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} inited
2025-06-30 21:56:23.783 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is java.io.IOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'
2025-06-30 21:56:23.783 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closing ...
2025-06-30 21:56:23.784 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closed
2025-06-30 21:56:23.784 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closing ...
2025-06-30 21:56:23.785 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closed
2025-06-30 21:56:23.786 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 21:56:23.794 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-30 21:56:23.818 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is java.io.IOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is java.io.IOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 24 common frames omitted
Caused by: java.io.IOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:700)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:577)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:720)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:187)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$b13ac4ef.CGLIB$sqlSessionFactory$1(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$b13ac4ef$$FastClassBySpringCGLIB$$fbb9b1d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$b13ac4ef.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:128)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:100)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:698)
	... 38 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:78)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:144)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:136)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:126)
	... 40 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.user.Address'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:128)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:150)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 44 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.user.Address
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:226)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:103)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:322)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:124)
	... 46 common frames omitted
2025-06-30 21:56:25.777 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 7148 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:56:25.777 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:56:25.777 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:56:26.024 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:56:26.024 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:56:26.038 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.
2025-06-30 21:56:26.094 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$b6e5b690] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:56:26.100 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:56:26.170 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:56:26.171 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:56:26.171 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:56:26.171 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:56:26.171 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:56:26.172 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:56:26.172 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:56:26.172 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:56:26.196 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-1].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:56:26.196 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 417 ms
2025-06-30 21:56:26.199 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 21:56:26.337 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} inited
2025-06-30 21:56:26.357 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} inited
2025-06-30 21:56:26.519 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 21:56:26.520 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 21:56:26.812 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:56:27.003 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@712c880e, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@609f2769, org.springframework.security.web.context.SecurityContextPersistenceFilter@7fa927d8, org.springframework.security.web.header.HeaderWriterFilter@29bc363a, org.springframework.web.filter.CorsFilter@1c949a6, org.springframework.security.web.authentication.logout.LogoutFilter@18c88fd8, com.huang.store.security.JwtAuthenticationTokenFilter@525ba472, com.huang.store.security.CustomAuthenticationFilter@3820c39e, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@34a60f31, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@281d6383, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@60588d5c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@79b8c084, org.springframework.security.web.session.SessionManagementFilter@629dec60, org.springframework.security.web.access.ExceptionTranslationFilter@6b278896, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4202d671]
2025-06-30 21:56:27.319 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 21:56:27.348 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 21:56:27.351 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 21:56:27.356 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 1.637 seconds (JVM running for 398.841)
2025-06-30 21:56:31.613 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closing ...
2025-06-30 21:56:31.614 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closed
2025-06-30 21:56:31.614 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closing ...
2025-06-30 21:56:31.616 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closed
2025-06-30 21:56:36.841 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 21:56:36.852 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 21208 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 21:56:36.852 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 21:56:36.852 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 21:56:36.955 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 21:56:36.955 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 21:56:37.365 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 21:56:37.366 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 21:56:37.385 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 10 ms. Found 0 Redis repository interfaces.
2025-06-30 21:56:37.534 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$98fb5e98] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:56:37.546 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 21:56:37.862 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 21:56:37.862 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 21:56:37.862 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 21:56:37.862 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 21:56:37.865 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 21:56:37.871 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 21:56:37.872 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 21:56:37.872 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 21:56:37.916 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 21:56:37.916 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 961 ms
2025-06-30 21:56:37.919 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 21:56:38.480 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 21:56:38.501 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 21:56:38.754 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 21:56:38.754 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 21:56:39.118 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 21:56:39.268 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@18f34dbb, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6c686325, org.springframework.security.web.context.SecurityContextPersistenceFilter@1e55875, org.springframework.security.web.header.HeaderWriterFilter@55d0d87a, org.springframework.web.filter.CorsFilter@11f68f35, org.springframework.security.web.authentication.logout.LogoutFilter@69086efe, com.huang.store.security.JwtAuthenticationTokenFilter@340e2a36, com.huang.store.security.CustomAuthenticationFilter@7af117, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@66a68ca0, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@427c187f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@51cb35f3, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@259afff8, org.springframework.security.web.session.SessionManagementFilter@2deae519, org.springframework.security.web.access.ExceptionTranslationFilter@5b4addca, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4f309ddc]
2025-06-30 21:56:39.662 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 21:56:39.685 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 21:56:39.704 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 21:56:39.714 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.146 seconds (JVM running for 3.573)
2025-06-30 21:56:43.822 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 21:56:43.822 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 21:56:43.823 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-30 21:56:43.913 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-06-30 21:56:43.926 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:43.928 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:56:43.971 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:56:43.985 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:56:43.993 [http-nio-8080-exec-1] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 21:56:44.091 [http-nio-8080-exec-1] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 21:56:44.091 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:44.091 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 21:56:44.096 [http-nio-8080-exec-1] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 21:56:44.099 [http-nio-8080-exec-1] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 21:56:44.102 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:56:44.103 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:44.103 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:56:44.111 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 21:56:44.134 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 21:56:44.139 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:56:44.140 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:44.140 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:56:44.140 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 21:56:44.146 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 21:56:44.147 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:56:44.147 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:44.147 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:56:44.147 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 21:56:44.158 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 21:56:50.131 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-06-30 21:56:50.132 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:50.132 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:56:50.133 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:56:50.136 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:56:50.137 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:56:50.137 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:50.137 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:56:50.138 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:56:50.140 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:56:50.140 [http-nio-8080-exec-6] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:56:50.140 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=?
2025-06-30 21:56:50.140 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:56:50.140 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:50.140 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:50.140 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:56:50.140 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:56:50.140 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,?
2025-06-30 21:56:50.141 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:50.141 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:56:50.141 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:56:50.143 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:56:50.144 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:56:50.146 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:56:50.147 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:56:50.147 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:50.147 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:56:50.150 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:56:50.151 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-06-30 21:56:50.151 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:50.151 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:56:50.151 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:50.151 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:56:50.152 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-06-30 21:56:50.152 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:50.152 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:56:50.156 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:56:50.160 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:56:50.160 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic
2025-06-30 21:56:50.160 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:56:50.160 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:50.160 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:56:50.162 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:56:50.162 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:56:50.164 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:50.164 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:56:50.168 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:56:50.173 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:56:50.174 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:56:50.174 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:50.174 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:56:50.179 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:56:50.180 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:56:50.182 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:56:50.182 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:56:50.182 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:50.182 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:56:50.186 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:56:50.186 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:56:50.187 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:56:50.187 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:50.187 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:56:50.187 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:56:50.189 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:56:50.190 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:56:50.193 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:56:50.193 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:56:50.195 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:56:50.195 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:56:50.195 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:50.195 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:56:50.195 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:56:50.197 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:56:50.202 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:56:50.207 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:56:50.209 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:56:50.209 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:56:50.210 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:50.210 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:56:50.210 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:56:50.211 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:56:50.212 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:56:50.212 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:50.212 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:56:50.213 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:56:50.214 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:56:50.215 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:56:50.215 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:50.215 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:56:50.215 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:56:50.216 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:56:50.216 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:56:50.216 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:50.216 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:56:50.217 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:56:50.218 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:56:51.794 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-06-30 21:56:51.794 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:51.794 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:56:51.795 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:56:51.799 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:56:54.158 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-06-30 21:56:54.159 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:54.159 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 21:56:54.166 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 21:56:54.174 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 21:56:54.175 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-06-30 21:56:54.175 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:54.175 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 21:56:54.176 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 21:56:54.181 [http-nio-8080-exec-3] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 21:56:54.208 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:56:54.208 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:54.208 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:56:54.208 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:56:54.210 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:56:54.211 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-06-30 21:56:54.211 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:54.211 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 21:56:54.213 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 21:56:54.214 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 21:56:56.017 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,?
2025-06-30 21:56:56.017 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:56.017 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:56:56.019 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-06-30 21:56:56.019 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:56.019 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:56:56.019 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-06-30 21:56:56.019 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:56.020 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:56:56.020 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:56:56.020 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:56:56.019 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:56:56.020 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:56.021 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:56:56.021 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:56:56.022 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:56:56.023 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic
2025-06-30 21:56:56.024 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:56.024 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:56:56.026 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:56:56.028 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:56:56.028 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:56:56.029 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:56.029 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:56:56.031 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:56:56.031 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:56:56.033 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:56:56.033 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:56:56.033 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:56:56.034 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:56.034 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:56:56.034 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:56:56.036 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:56:56.037 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:56:56.037 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:56:56.036 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:56:56.037 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:56.037 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:56:56.037 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:56:56.037 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:56.037 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:56:56.038 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:56:56.038 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:56:56.039 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:56:56.039 [http-nio-8080-exec-9] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:56:56.040 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:56:56.040 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:56.040 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:56:56.041 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:56:56.043 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:56:56.043 [http-nio-8080-exec-6] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:56:56.043 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=?
2025-06-30 21:56:56.043 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:56.044 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:56:56.044 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:56:56.044 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:56.044 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:56:56.044 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:56:56.044 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:56:56.045 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:56:56.046 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:56:56.046 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:56:56.053 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:56.053 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:56:56.053 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:56:56.056 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:56:56.056 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-06-30 21:56:56.057 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:56:56.057 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:56.057 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:56:56.057 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:56.057 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:56:56.057 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:56:56.058 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:56:56.063 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:56:56.064 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:56:56.064 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:56:56.065 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:56.065 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:56:56.066 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:56:56.067 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:56:56.068 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:56:56.068 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:56.068 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:56:56.068 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:56:56.069 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:56:56.070 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:56:56.070 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:56.070 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:56:56.070 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:56:56.072 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:56:56.073 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:56:56.073 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:56:56.073 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:56:56.073 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:56:56.074 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:57:05.672 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-06-30 21:57:05.672 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:05.672 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:57:05.673 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:57:05.675 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:57:05.676 [http-nio-8080-exec-8] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 21:57:05.825 [http-nio-8080-exec-8] DEBUG c.huang.store.security.CustomAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=SecurityUser(id=null, username=56464ff@456.com, password=$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy, enabled=true, roles=[ROLE_USER]), Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=8ADC7EA2F78114BF4EF0579B2352FF3F], Granted Authorities=[ROLE_USER]]
2025-06-30 21:57:05.845 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-06-30 21:57:05.846 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:05.846 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 21:57:05.846 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 21:57:05.850 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 21:57:07.060 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-06-30 21:57:07.061 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:07.061 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:57:07.061 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:57:07.063 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-06-30 21:57:07.063 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:07.063 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 21:57:07.064 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 21:57:07.064 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 21:57:07.065 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:57:07.065 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:07.065 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:57:07.064 [http-nio-8080-exec-1] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 21:57:07.065 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:57:07.065 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=?
2025-06-30 21:57:07.065 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:07.065 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 21:57:07.066 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 21:57:07.067 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:57:07.067 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 21:57:07.072 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 21:57:07.072 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:57:07.072 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:07.072 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:57:07.074 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:57:07.077 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:57:07.077 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:57:07.078 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:07.078 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:57:07.079 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 21:57:07.079 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-06-30 21:57:07.079 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:07.079 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 21:57:07.079 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 21:57:07.081 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:57:07.081 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 21:57:07.081 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:57:07.081 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:07.081 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:57:07.082 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 21:57:07.082 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:57:07.082 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:07.082 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:57:07.082 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 21:57:07.084 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:57:07.084 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:57:07.084 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 21:57:07.084 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:07.084 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:57:07.085 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 21:57:07.085 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:57:07.085 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:07.085 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:57:07.085 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 21:57:07.085 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,?
2025-06-30 21:57:07.085 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:07.085 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 21:57:07.086 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:57:07.086 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:57:07.087 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:57:07.087 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:07.087 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 21:57:07.087 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:57:07.087 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:57:07.088 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 21:57:07.088 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:07.089 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:57:07.089 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 21:57:07.091 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 21:57:07.092 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic
2025-06-30 21:57:07.092 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:57:07.092 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:07.092 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 21:57:07.093 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:57:07.093 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 21:57:07.093 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 21:57:07.093 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:07.093 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 21:57:07.093 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 21:57:07.093 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:07.093 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 21:57:07.093 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 21:57:07.093 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 21:57:07.094 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 21:57:07.095 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 21:57:07.095 [http-nio-8080-exec-7] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 21:57:07.099 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:57:07.099 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:07.099 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:57:07.100 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:57:07.102 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:57:07.103 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 21:57:07.103 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:07.103 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 21:57:07.103 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 21:57:07.105 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 21:57:08.812 [http-nio-8080-exec-2] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 21:57:08.812 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:08.812 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 21:57:08.813 [http-nio-8080-exec-2] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 21:57:08.817 [http-nio-8080-exec-2] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 21:57:08.818 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:57:08.818 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:08.818 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:57:08.818 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 21:57:08.826 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 21:57:08.826 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:57:08.826 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:08.826 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:57:08.826 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 21:57:08.830 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 21:57:08.830 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 21:57:08.831 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 21:57:08.831 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 21:57:08.831 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 21:57:08.836 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:03:29.597 [http-nio-8080-exec-5] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 22:03:29.597 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:03:29.597 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 22:03:29.605 [http-nio-8080-exec-5] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 22:03:29.606 [http-nio-8080-exec-5] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 22:03:29.607 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:03:29.607 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:03:29.607 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:03:29.607 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 22:03:29.613 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 22:03:29.614 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:03:29.614 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:03:29.614 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:03:29.614 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 22:03:29.616 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:03:29.617 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:03:29.617 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:03:29.617 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:03:29.617 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 22:03:29.620 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:04:02.175 [http-nio-8080-exec-8] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 22:04:02.175 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:04:02.175 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 22:04:02.176 [http-nio-8080-exec-8] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 22:04:02.178 [http-nio-8080-exec-8] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 22:04:02.179 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:04:02.179 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:04:02.179 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:04:02.180 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 22:04:02.186 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 22:04:02.187 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:04:02.187 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:04:02.187 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:04:02.188 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 22:04:02.192 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:04:02.193 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:04:02.193 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:04:02.193 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:04:02.193 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 22:04:02.197 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:04:41.163 [http-nio-8080-exec-6] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 22:04:41.163 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:04:41.163 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 22:04:41.164 [http-nio-8080-exec-6] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 22:04:41.166 [http-nio-8080-exec-6] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 22:04:41.166 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:04:41.166 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:04:41.166 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:04:41.167 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 22:04:41.170 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 22:04:41.170 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:04:41.170 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:04:41.171 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:04:41.171 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 22:04:41.173 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:04:41.173 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:04:41.173 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:04:41.173 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:04:41.173 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 22:04:41.176 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:05:00.050 [http-nio-8080-exec-4] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 22:05:00.051 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:05:00.051 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 22:05:00.051 [http-nio-8080-exec-4] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 22:05:00.056 [http-nio-8080-exec-4] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 22:05:00.056 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:05:00.056 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:05:00.056 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:05:00.057 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 22:05:00.059 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 22:05:00.060 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:05:00.060 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:05:00.060 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:05:00.060 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 22:05:00.062 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:05:00.062 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:05:00.062 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:05:00.062 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:05:00.062 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 22:05:00.065 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:05:23.756 [http-nio-8080-exec-10] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 22:05:23.757 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:05:23.757 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 22:05:23.757 [http-nio-8080-exec-10] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 22:05:23.761 [http-nio-8080-exec-10] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 22:05:23.761 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:05:23.762 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:05:23.762 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:05:23.762 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 22:05:23.763 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 22:05:23.765 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:05:23.765 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:05:23.765 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:05:23.765 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 22:05:23.770 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:05:23.771 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:05:23.771 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:05:23.771 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:05:23.772 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 22:05:23.776 [http-nio-8080-exec-10] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:06:57.731 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByBookId - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.bookId = ? AND sg.status = 1 ORDER BY sg.createTime DESC
2025-06-30 22:06:57.732 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:06:57.732 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.bookId = ?
        AND sg.status = 1
        ORDER BY sg.createTime DESC ::: DataSources: slave
2025-06-30 22:06:57.739 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByBookId - ==> Parameters: 3(Integer)
2025-06-30 22:06:57.745 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByBookId - <==      Total: 1
2025-06-30 22:06:57.748 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeActivityMapper.getActivityById - ==>  Preparing: SELECT * FROM spikeActivity WHERE id = ?
2025-06-30 22:06:57.748 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:06:57.748 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity WHERE id = ? ::: DataSources: slave
2025-06-30 22:06:57.753 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeActivityMapper.getActivityById - ==> Parameters: 1(Long)
2025-06-30 22:06:57.756 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeActivityMapper.getActivityById - <==      Total: 1
2025-06-30 22:06:57.759 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeGoodsMapper.getSpikeGoodsDetail - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.id = ?
2025-06-30 22:06:57.759 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:06:57.759 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.id = ? ::: DataSources: slave
2025-06-30 22:06:57.761 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeGoodsMapper.getSpikeGoodsDetail - ==> Parameters: 3(Long)
2025-06-30 22:06:57.766 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeGoodsMapper.getSpikeGoodsDetail - <==      Total: 1
2025-06-30 22:06:57.767 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeOrderMapper.getUserPurchaseCount - ==>  Preparing: SELECT COALESCE(SUM(quantity), 0) FROM spikeOrder WHERE userAccount = ? AND spikeGoodsId = ? AND status IN (0, 1)
2025-06-30 22:06:57.768 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:06:57.768 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT COALESCE(SUM(quantity), 0)
        FROM spikeOrder 
        WHERE userAccount = ? 
        AND spikeGoodsId = ?
        AND status IN (0, 1) ::: DataSources: slave
2025-06-30 22:06:57.778 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeOrderMapper.getUserPurchaseCount - ==> Parameters: 56464ff@456.com(String), 3(Long)
2025-06-30 22:06:57.799 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeOrderMapper.getUserPurchaseCount - <==      Total: 1
2025-06-30 22:06:58.678 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SpikeGoodsMapper.reduceStock - ==>  Preparing: UPDATE spikeGoods SET spikeStock = spikeStock - ?, updateTime = NOW() WHERE id = ? AND spikeStock >= ?
2025-06-30 22:06:58.679 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:06:58.679 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: UPDATE spikeGoods 
        SET spikeStock = spikeStock - ?,
            updateTime = NOW()
        WHERE id = ? 
        AND spikeStock >= ? ::: DataSources: master
2025-06-30 22:06:58.689 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SpikeGoodsMapper.reduceStock - ==> Parameters: 1(Integer), 3(Long), 1(Integer)
2025-06-30 22:06:58.694 [http-nio-8080-exec-1] DEBUG c.huang.store.mapper.SpikeGoodsMapper.reduceStock - <==    Updates: 1
2025-06-30 22:06:58.694 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.SpikeGoodsMapper.updateSoldCount - ==>  Preparing: UPDATE spikeGoods SET soldCount = soldCount + ?, updateTime = NOW() WHERE id = ?
2025-06-30 22:06:58.695 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:06:58.695 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: UPDATE spikeGoods 
        SET soldCount = soldCount + ?,
            updateTime = NOW()
        WHERE id = ? ::: DataSources: master
2025-06-30 22:06:58.697 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.SpikeGoodsMapper.updateSoldCount - ==> Parameters: 1(Integer), 3(Long)
2025-06-30 22:06:58.700 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.SpikeGoodsMapper.updateSoldCount - <==    Updates: 1
2025-06-30 22:06:58.704 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.SpikeOrderMapper.insertSpikeOrder - ==>  Preparing: INSERT INTO spikeOrder ( orderId, spikeGoodsId, userAccount, quantity, spikePrice, totalAmount, status, payTime, cancelTime, expireTime, createTime, updateTime ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )
2025-06-30 22:06:58.706 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:06:58.706 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: INSERT INTO spikeOrder (
            orderId, spikeGoodsId, userAccount, quantity, spikePrice,
            totalAmount, status, payTime, cancelTime, expireTime,
            createTime, updateTime
        ) VALUES (
            ?, ?, ?, ?, ?,
            ?, ?, ?, ?, ?,
            ?, ?
        ) ::: DataSources: master
2025-06-30 22:06:58.866 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.SpikeOrderMapper.insertSpikeOrder - ==> Parameters: SPIKE175129241870071(String), 3(Long), 56464ff@456.com(String), 1(Integer), 69.90(BigDecimal), 69.90(BigDecimal), 0(Integer), null, null, 2025-06-30T22:36:58.704940200(LocalDateTime), 2025-06-30T22:06:58.704940200(LocalDateTime), 2025-06-30T22:06:58.704940200(LocalDateTime)
2025-06-30 22:06:58.870 [http-nio-8080-exec-1] DEBUG c.h.store.mapper.SpikeOrderMapper.insertSpikeOrder - <==    Updates: 1
2025-06-30 22:06:58.881 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeRecordMapper.insertSpikeRecord - ==>  Preparing: INSERT INTO spikeRecord ( spikeGoodsId, userAccount, spikeTime, result, failReason, ipAddress, userAgent ) VALUES ( ?, ?, ?, ?, ?, ?, ? )
2025-06-30 22:06:58.881 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:06:58.881 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: INSERT INTO spikeRecord (
            spikeGoodsId, userAccount, spikeTime, result, 
            failReason, ipAddress, userAgent
        ) VALUES (
            ?, ?, ?, ?,
            ?, ?, ?
        ) ::: DataSources: master
2025-06-30 22:06:58.884 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeRecordMapper.insertSpikeRecord - ==> Parameters: 3(Long), 56464ff@456.com(String), 2025-06-30T22:06:58.880742100(LocalDateTime), 1(Integer), null, 0:0:0:0:0:0:0:1(String), Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0(String)
2025-06-30 22:06:58.887 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeRecordMapper.insertSpikeRecord - <==    Updates: 1
2025-06-30 22:06:59.010 [http-nio-8080-exec-9] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 22:06:59.011 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:06:59.011 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 22:06:59.011 [http-nio-8080-exec-9] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 22:06:59.014 [http-nio-8080-exec-9] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 22:06:59.014 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:06:59.015 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:06:59.015 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:06:59.015 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 22:06:59.018 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 22:06:59.018 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:06:59.018 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:06:59.019 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:06:59.019 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 22:06:59.023 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:06:59.024 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:06:59.024 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:06:59.024 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:06:59.025 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 22:06:59.029 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:07:19.695 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-06-30 22:07:19.695 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:19.695 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 22:07:19.696 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 22:07:19.699 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 22:07:21.761 [http-nio-8080-exec-7] INFO  com.huang.store.controller.UserController - 获取用户地址列表: 56464ff@456.com
2025-06-30 22:07:21.761 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==>  Preparing: select * from address where account=? and off=false
2025-06-30 22:07:21.761 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:21.761 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from address where account=? and off=false ::: DataSources: slave
2025-06-30 22:07:21.763 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.AddressMapper.addressList - ==> Parameters: 56464ff@456.com(String)
2025-06-30 22:07:21.765 [http-nio-8080-exec-7] DEBUG com.huang.store.mapper.AddressMapper.addressList - <==      Total: 2
2025-06-30 22:07:21.766 [http-nio-8080-exec-7] DEBUG com.huang.store.controller.UserController - 找到2个地址
2025-06-30 22:07:23.951 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==>  Preparing: select book.id,author,bookName,isbn,publish, birthday,marketPrice,price,stock,description,put,num,addTime,account from book join cart on book.id = cart.id where account=? limit ?,?
2025-06-30 22:07:23.951 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:23.951 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select book.id,author,bookName,isbn,publish,
                birthday,marketPrice,price,stock,description,put,num,addTime,account
         from book join cart on book.id = cart.id
         where account=? limit ?,? ::: DataSources: slave
2025-06-30 22:07:23.954 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - ==> Parameters: 56464ff@456.com(String), 0(Integer), 10(Integer)
2025-06-30 22:07:23.957 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.CartMapper.getCartsByPage - <==      Total: 0
2025-06-30 22:07:25.582 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,?
2025-06-30 22:07:25.582 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:25.582 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 22:07:25.583 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 22:07:25.587 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 22:07:25.588 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic
2025-06-30 22:07:25.588 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:25.588 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 22:07:25.588 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 22:07:25.588 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-06-30 22:07:25.589 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:25.589 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 22:07:25.590 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 22:07:25.594 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 22:07:25.594 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:25.594 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 22:07:25.596 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 22:07:25.597 [http-nio-8080-exec-5] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 22:07:25.597 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=?
2025-06-30 22:07:25.597 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:25.597 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 22:07:25.599 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 22:07:25.599 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 22:07:25.599 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:25.599 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 22:07:25.600 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 22:07:25.600 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 22:07:25.588 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-06-30 22:07:25.601 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:25.601 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 22:07:25.601 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-06-30 22:07:25.601 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:25.601 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 22:07:25.594 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 22:07:25.601 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 22:07:25.601 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 22:07:25.602 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 22:07:25.603 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 22:07:25.604 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 22:07:25.604 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:25.604 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 22:07:25.604 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 22:07:25.606 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 22:07:25.605 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 22:07:25.607 [http-nio-8080-exec-8] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 22:07:25.608 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 22:07:25.608 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:25.608 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 22:07:25.608 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 22:07:25.609 [http-nio-8080-exec-10] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 22:07:25.609 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 22:07:25.609 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:25.609 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 22:07:25.610 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 22:07:25.611 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 22:07:25.611 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 22:07:25.611 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:25.611 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 22:07:25.611 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 22:07:25.612 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 22:07:25.612 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 22:07:25.612 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 22:07:25.613 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:25.613 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 22:07:25.613 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 22:07:25.613 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 22:07:25.613 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:25.613 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 22:07:25.613 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 22:07:25.614 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 22:07:25.614 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 22:07:25.614 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 22:07:25.614 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 22:07:25.614 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:25.615 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:25.615 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 22:07:25.615 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 22:07:25.615 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 22:07:25.615 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 22:07:25.616 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 22:07:25.616 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 22:07:25.616 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 22:07:25.616 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:25.616 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 22:07:25.617 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 22:07:25.617 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 22:07:25.617 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:25.617 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 22:07:25.617 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 22:07:25.618 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 22:07:25.619 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 22:07:25.619 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:25.619 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 22:07:25.619 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 22:07:25.619 [http-nio-8080-exec-10] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 22:07:25.621 [http-nio-8080-exec-8] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 22:07:50.039 [http-nio-8080-exec-8] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 22:07:50.039 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:50.039 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 22:07:50.040 [http-nio-8080-exec-8] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 22:07:50.042 [http-nio-8080-exec-8] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 22:07:50.042 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:07:50.043 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:50.043 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:07:50.044 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 22:07:50.049 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 22:07:50.050 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:07:50.050 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:50.050 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:07:50.050 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 22:07:50.052 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:07:50.053 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:07:50.053 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:07:50.053 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:07:50.053 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 22:07:50.055 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:14:20.513 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8080"]
2025-06-30 22:14:20.513 [Thread-7] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 22:14:20.514 [Thread-7] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2025-06-30 22:14:20.528 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1062883680] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-06-30 22:14:20.528 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1062883680] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-06-30 22:14:20.529 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Create-1970303440] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 app//com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2921)
2025-06-30 22:14:20.529 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Druid-ConnectionPool-Destroy-1970303440] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/java.lang.Thread.sleep(Native Method)
 app//com.alibaba.druid.pool.DruidDataSource$DestroyConnectionThread.run(DruidDataSource.java:3020)
2025-06-30 22:14:20.530 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-nioEventLoop-4-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/sun.nio.ch.WEPoll.wait(Native Method)
 java.base@17.0.8/sun.nio.ch.WEPollSelectorImpl.doSelect(WEPollSelectorImpl.java:111)
 java.base@17.0.8/sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:129)
 java.base@17.0.8/sun.nio.ch.SelectorImpl.select(SelectorImpl.java:146)
 app//io.netty.channel.nio.SelectedSelectionKeySetSelector.select(SelectedSelectionKeySetSelector.java:68)
 app//io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:879)
 app//io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:526)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 22:14:20.530 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 22:14:20.530 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-2] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 22:14:20.531 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-3] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 22:14:20.531 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-4] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 22:14:20.531 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-5] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 22:14:20.531 [Thread-7] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [lettuce-eventExecutorLoop-1-6] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.8/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.8/java.util.concurrent.locks.LockSupport.park(LockSupport.java:341)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:506)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3465)
 java.base@17.0.8/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3436)
 java.base@17.0.8/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1623)
 java.base@17.0.8/java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:435)
 app//io.netty.util.concurrent.SingleThreadEventExecutor.takeTask(SingleThreadEventExecutor.java:244)
 app//io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:64)
 app//io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
 app//io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
 app//io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 java.base@17.0.8/java.lang.Thread.run(Thread.java:833)
2025-06-30 22:14:20.531 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-30 22:14:20.533 [Thread-7] INFO  org.apache.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8080"]
2025-06-30 22:14:20.654 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closing ...
2025-06-30 22:14:20.656 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-06-30 22:14:20.656 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closing ...
2025-06-30 22:14:20.658 [Thread-7] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-06-30 22:14:20.768 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 21208 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 22:14:20.769 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 22:14:20.769 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 22:14:21.180 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 22:14:21.180 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 22:14:21.192 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-30 22:14:21.360 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 22:14:21.360 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 22:14:21.363 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 22:14:21.363 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 22:14:21.364 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 22:14:21.366 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 22:14:21.366 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 22:14:21.366 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 22:14:21.392 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 22:14:21.392 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 612 ms
2025-06-30 22:14:21.412 [restartedMain] ERROR org.apache.catalina.session.StandardManager - Exception loading sessions from persistent storage
java.lang.ClassNotFoundException: com.huang.store.entity.user.SecurityUser
	at org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader.loadClass(TomcatEmbeddedWebappClassLoader.java:72)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1141)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:467)
	at org.apache.catalina.util.CustomObjectInputStream.resolveClass(CustomObjectInputStream.java:158)
	at java.base/java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:2045)
	at java.base/java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1909)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2235)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream$FieldValues.<init>(ObjectInputStream.java:2617)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2468)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2268)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1744)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:514)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:472)
	at org.apache.catalina.session.StandardSession.doReadObject(StandardSession.java:1530)
	at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:1000)
	at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:210)
	at org.apache.catalina.session.StandardManager.load(StandardManager.java:156)
	at org.apache.catalina.session.StandardManager.startInternal(StandardManager.java:346)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4931)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:794)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:248)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:921)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:489)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:481)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:211)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:184)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:585)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2025-06-30 22:14:21.511 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 22:14:21.604 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} inited
2025-06-30 22:14:21.631 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} inited
2025-06-30 22:14:21.729 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is java.io.IOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'
2025-06-30 22:14:21.730 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closing ...
2025-06-30 22:14:21.731 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-3} closed
2025-06-30 22:14:21.731 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closing ...
2025-06-30 22:14:21.732 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-4} closed
2025-06-30 22:14:21.733 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-30 22:14:21.740 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2025-06-30 22:14:21.772 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is java.io.IOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:929)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:409)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1289)
	at com.huang.store.StoreApplication.main(StoreApplication.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is java.io.IOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	... 24 common frames omitted
Caused by: java.io.IOException: Failed to parse mapping resource: 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:700)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:577)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:720)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:187)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$93506cf7.CGLIB$sqlSessionFactory$1(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$93506cf7$$FastClassBySpringCGLIB$$d71b4f21.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$93506cf7.sqlSessionFactory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes\mapping\OrderMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.order.Order'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.order.Order
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:128)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:100)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:698)
	... 38 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.order.Order'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.order.Order
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:78)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:144)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:136)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:126)
	... 40 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'com.huang.store.entity.order.Order'.  Cause: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.order.Order
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:128)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:150)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 44 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: com.huang.store.entity.order.Order
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:226)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:103)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:322)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:124)
	... 46 common frames omitted
2025-06-30 22:14:23.328 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 21208 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 22:14:23.328 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 22:14:23.328 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 22:14:23.624 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 22:14:23.624 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 22:14:23.642 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17 ms. Found 0 Redis repository interfaces.
2025-06-30 22:14:23.742 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$98fb5e98] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 22:14:23.752 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 22:14:23.841 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 22:14:23.841 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 22:14:23.841 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 22:14:23.841 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 22:14:23.842 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 22:14:23.842 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 22:14:23.842 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 22:14:23.842 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 22:14:23.864 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat-1].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 22:14:23.864 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 534 ms
2025-06-30 22:14:23.870 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 22:14:23.972 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} inited
2025-06-30 22:14:23.994 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} inited
2025-06-30 22:14:24.227 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 22:14:24.227 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 22:14:24.482 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 22:14:24.638 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@194faa2c, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7d92c2f4, org.springframework.security.web.context.SecurityContextPersistenceFilter@3bec510c, org.springframework.security.web.header.HeaderWriterFilter@63a8ee81, org.springframework.web.filter.CorsFilter@193af1f1, org.springframework.security.web.authentication.logout.LogoutFilter@41453dc9, com.huang.store.security.JwtAuthenticationTokenFilter@5ca4d880, com.huang.store.security.CustomAuthenticationFilter@7a087066, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@3ef433ce, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@570d5043, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7757ab39, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2af3a564, org.springframework.security.web.session.SessionManagementFilter@541f14cd, org.springframework.security.web.access.ExceptionTranslationFilter@2246b8a1, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@35497b36]
2025-06-30 22:14:24.862 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 22:14:24.884 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 22:14:24.892 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 22:14:24.900 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 1.636 seconds (JVM running for 1068.759)
2025-06-30 22:14:29.028 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closing ...
2025-06-30 22:14:29.029 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-5} closed
2025-06-30 22:14:29.029 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closing ...
2025-06-30 22:14:29.029 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-6} closed
2025-06-30 22:14:33.799 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 22:14:33.813 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 17156 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 22:14:33.813 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 22:14:33.813 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 22:14:33.933 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 22:14:33.934 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 22:14:34.373 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 22:14:34.375 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 22:14:34.399 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 0 Redis repository interfaces.
2025-06-30 22:14:34.594 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$e75d315] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 22:14:34.607 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 22:14:34.919 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 22:14:34.920 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 22:14:34.920 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 22:14:34.920 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 22:14:34.923 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 22:14:34.928 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 22:14:34.929 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 22:14:34.929 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 22:14:34.973 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 22:14:34.973 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1039 ms
2025-06-30 22:14:34.979 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 22:14:35.537 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 22:14:35.560 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 22:14:35.824 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 22:14:35.824 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 22:14:36.364 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 22:14:36.500 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@3e60d732, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@f7337b4, org.springframework.security.web.context.SecurityContextPersistenceFilter@4f22c332, org.springframework.security.web.header.HeaderWriterFilter@67b9289a, org.springframework.web.filter.CorsFilter@1f40b789, org.springframework.security.web.authentication.logout.LogoutFilter@4939ca48, com.huang.store.security.JwtAuthenticationTokenFilter@d7470c7, com.huang.store.security.CustomAuthenticationFilter@5a0adac0, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@4bdf8809, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6c633343, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4aafd858, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6c03ecd8, org.springframework.security.web.session.SessionManagementFilter@39154ecf, org.springframework.security.web.access.ExceptionTranslationFilter@5e73227a, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@76b922a2]
2025-06-30 22:14:36.910 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 22:14:36.955 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 22:14:36.998 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 22:14:37.015 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.503 seconds (JVM running for 3.954)
2025-06-30 22:14:40.592 [http-nio-8080-exec-3] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 22:14:40.592 [http-nio-8080-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 22:14:40.593 [http-nio-8080-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-30 22:14:40.668 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==>  Preparing: select * from user where account = ?
2025-06-30 22:14:40.681 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:40.682 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from user where account = ? ::: DataSources: slave
2025-06-30 22:14:40.728 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - ==> Parameters: 56464ff@456.com(String)
2025-06-30 22:14:40.742 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.UserMapper.getUser - <==      Total: 1
2025-06-30 22:14:40.755 [http-nio-8080-exec-3] INFO  com.huang.store.security.MyUserDetailService - 登录用户名:56464ff@456.com    数据库密码:$2a$10$7OBMT05X3FsorQiaTl2aQuxGJpdi4w1dVWZdG8Oy9K7E61SWT9WAy
2025-06-30 22:14:40.846 [http-nio-8080-exec-3] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 22:14:40.846 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:40.846 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 22:14:40.849 [http-nio-8080-exec-3] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 22:14:40.854 [http-nio-8080-exec-3] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 22:14:40.855 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:14:40.855 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:40.855 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:14:40.862 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 22:14:40.868 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 22:14:40.871 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:14:40.872 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:40.872 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:14:40.873 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 22:14:40.876 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:14:40.877 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:14:40.878 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:40.878 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:14:40.878 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 22:14:40.882 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:14:43.107 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-06-30 22:14:43.107 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:43.107 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 22:14:43.110 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 22:14:43.114 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 22:14:43.115 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 22:14:43.115 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:43.116 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 22:14:43.117 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 22:14:43.121 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 22:14:43.121 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,?
2025-06-30 22:14:43.122 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:43.122 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 22:14:43.122 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 22:14:43.122 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:43.122 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 22:14:43.122 [http-nio-8080-exec-1] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 22:14:43.123 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=?
2025-06-30 22:14:43.123 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:43.124 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 22:14:43.126 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 22:14:43.127 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-06-30 22:14:43.127 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:43.127 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 22:14:43.127 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-06-30 22:14:43.127 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:43.127 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 22:14:43.128 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 22:14:43.128 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 22:14:43.128 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:43.128 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 22:14:43.129 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic
2025-06-30 22:14:43.129 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 22:14:43.129 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:43.129 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 22:14:43.130 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 22:14:43.131 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 22:14:43.131 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:43.131 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 22:14:43.131 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 22:14:43.133 [http-nio-8080-exec-1] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 22:14:43.135 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 22:14:43.141 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 22:14:43.142 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 22:14:43.142 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:43.142 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 22:14:43.149 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 22:14:43.151 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 22:14:43.151 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 22:14:43.151 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:43.151 [http-nio-8080-exec-7] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 22:14:43.153 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 22:14:43.154 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 22:14:43.155 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 22:14:43.156 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 22:14:43.156 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 22:14:43.156 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:43.156 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 22:14:43.156 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 22:14:43.157 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 22:14:43.158 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 22:14:43.158 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 22:14:43.158 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:43.158 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 22:14:43.159 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 22:14:43.159 [http-nio-8080-exec-5] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 22:14:43.161 [http-nio-8080-exec-7] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 22:14:43.161 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 22:14:43.161 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:43.161 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 22:14:43.161 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 22:14:43.161 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 22:14:43.163 [http-nio-8080-exec-4] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 22:14:43.163 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 22:14:43.166 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 22:14:43.168 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 22:14:43.168 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 22:14:43.168 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:43.168 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 22:14:43.169 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 22:14:43.170 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 22:14:43.171 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 22:14:43.171 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:43.171 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 22:14:43.171 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 22:14:43.172 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 22:14:43.172 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 22:14:43.172 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:43.172 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 22:14:43.173 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 22:14:43.174 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 22:14:43.174 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 22:14:43.174 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:43.174 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 22:14:43.175 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 22:14:43.177 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 22:14:44.465 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==>  Preparing: select o.id, o.orderId, o.account, o.orderTime, o.shipTime, o.getTime, o.evaluateTime, o.closeTime, o.orderStatus, o.logisticsNum, o.confirmTime, e.`productTotalMoney` AS productTotalMoney, e.`freight` AS freight, e.`coupon` AS coupon, e.`activityDiscount` AS activityDiscount, e.`allPrice` AS allPrice, e.`finallyPrice` AS finallyPrice, a.`name` AS name, a.`phone` AS phone, a.`addr` AS addr, a.`label` AS label FROM bookorder AS o LEFT JOIN expense AS e ON o.orderId = e.orderId LEFT JOIN address AS a ON a.id = o.addressId WHERE o.account = ? AND o.beUserDelete = ? order by o.orderTime DESC limit ?,?
2025-06-30 22:14:44.465 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:44.465 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.id,
          o.orderId,
          o.account,
          o.orderTime,
          o.shipTime,
          o.getTime,
          o.evaluateTime,
          o.closeTime,
          o.orderStatus,
          o.logisticsNum,
          o.confirmTime,
          e.`productTotalMoney` AS productTotalMoney,
          e.`freight` AS freight,
          e.`coupon` AS coupon,
          e.`activityDiscount` AS activityDiscount,
          e.`allPrice` AS allPrice,
          e.`finallyPrice` AS finallyPrice,
          a.`name` AS name,
          a.`phone` AS phone,
          a.`addr` AS addr,
          a.`label` AS label
     
        FROM
        bookorder AS o
        LEFT JOIN expense AS e ON o.orderId = e.orderId
        LEFT JOIN address AS a ON a.id = o.addressId
         WHERE  o.account = ?
            
            
                AND o.beUserDelete = ? 
        order by o.orderTime DESC
        limit ?,? ::: DataSources: slave
2025-06-30 22:14:44.471 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - ==> Parameters: 56464ff@456.com(String), false(Boolean), 0(Integer), 5(Integer)
2025-06-30 22:14:44.479 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.orderDtoList - <==      Total: 1
2025-06-30 22:14:44.479 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==>  Preparing: select o.orderid, o.num, o.price, b.bookName, b.id, b.author, b.isbn, b.publish, b.birthday, b.marketPrice, b.price AS bookPrice, b.stock, b.description FROM orderdetail AS o LEFT JOIN book AS b ON o.bookId = b.id where o.orderId = ?
2025-06-30 22:14:44.479 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:44.480 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select
         
          o.orderid,
          o.num,
          o.price,
          b.bookName,
          b.id,
          b.author,
          b.isbn,
          b.publish,
          b.birthday,
          b.marketPrice,
          b.price AS bookPrice,
          b.stock,
          b.description
     
        FROM
        orderdetail AS o
        LEFT JOIN book AS b ON o.bookId = b.id
        where o.orderId = ? ::: DataSources: slave
2025-06-30 22:14:44.483 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - ==> Parameters: 20250630185416346684(String)
2025-06-30 22:14:44.488 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.OrderMapper.findOrderDetailDtoList - <==      Total: 1
2025-06-30 22:14:44.518 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 22:14:44.518 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:44.518 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 22:14:44.518 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 22:14:44.521 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 22:14:44.522 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==>  Preparing: select count(*) from bookorder WHERE bookorder.account = ? AND beUserDelete = ?
2025-06-30 22:14:44.522 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:44.523 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: select count(*) from bookorder
         WHERE  bookorder.account = ?
            
            
                AND beUserDelete = ? ::: DataSources: slave
2025-06-30 22:14:44.525 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - ==> Parameters: 56464ff@456.com(String), false(Boolean)
2025-06-30 22:14:44.526 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.OrderMapper.count - <==      Total: 1
2025-06-30 22:14:46.134 [http-nio-8080-exec-9] INFO  com.huang.store.controller.BookController - 获取分类图书列表: sortId=117
2025-06-30 22:14:46.135 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==>  Preparing: select * from booksort where id=?
2025-06-30 22:14:46.135 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:46.135 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: select * from booksort where id=? ::: DataSources: slave
2025-06-30 22:14:46.135 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - ==> Parameters: 117(Integer)
2025-06-30 22:14:46.137 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from recommend limit ?,?)as t )
2025-06-30 22:14:46.137 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:46.137 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from recommend limit ?,?)as t ) ::: DataSources: slave
2025-06-30 22:14:46.136 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==>  Preparing: select * from booktopic limit ?,?
2025-06-30 22:14:46.137 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:46.137 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select * from booktopic limit ?,? ::: DataSources: slave
2025-06-30 22:14:46.138 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - ==> Parameters: 0(Integer), 5(Integer)
2025-06-30 22:14:46.138 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 22:14:46.138 [http-nio-8080-exec-9] DEBUG com.huang.store.mapper.SortMapper.getBookSortById - <==      Total: 0
2025-06-30 22:14:46.139 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getRecommendsByPage - <==      Total: 0
2025-06-30 22:14:46.139 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 22:14:46.139 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:46.139 [http-nio-8080-exec-10] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 22:14:46.140 [http-nio-8080-exec-5] DEBUG c.huang.store.mapper.TopicMapper.getBookTopicList - <==      Total: 2
2025-06-30 22:14:46.140 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 22:14:46.140 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==>  Preparing: select count(*) from booktopic
2025-06-30 22:14:46.140 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:46.140 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: select count(*) from booktopic ::: DataSources: slave
2025-06-30 22:14:46.141 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - ==> Parameters: 
2025-06-30 22:14:46.142 [http-nio-8080-exec-5] DEBUG com.huang.store.mapper.TopicMapper.getTopicCount - <==      Total: 1
2025-06-30 22:14:46.142 [http-nio-8080-exec-10] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 22:14:46.134 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 22:14:46.144 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:46.144 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 22:14:46.145 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 22:14:46.137 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==>  Preparing: select * from booksort where level="级别一"
2025-06-30 22:14:46.146 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:46.146 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where level="级别一" ::: DataSources: slave
2025-06-30 22:14:46.147 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 22:14:46.147 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 22:14:46.147 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:46.147 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 22:14:46.147 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 22:14:46.148 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - ==> Parameters: 
2025-06-30 22:14:46.149 [http-nio-8080-exec-8] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 22:14:46.153 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==>  Preparing: select * from book order by birthday desc limit ?,?
2025-06-30 22:14:46.153 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:46.153 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.SortMapper.getAllFirSorts - <==      Total: 4
2025-06-30 22:14:46.153 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book order by birthday desc limit ?,? ::: DataSources: slave
2025-06-30 22:14:46.154 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - ==> Parameters: 0(Integer), 10(Integer)
2025-06-30 22:14:46.155 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 22:14:46.155 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:46.155 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 22:14:46.156 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 文学(String)
2025-06-30 22:14:46.158 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 3
2025-06-30 22:14:46.158 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 22:14:46.158 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:46.158 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 22:14:46.159 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 科技(String)
2025-06-30 22:14:46.160 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 22:14:46.162 [http-nio-8080-exec-3] DEBUG c.huang.store.mapper.BookMapper.getNewPutBookList - <==      Total: 5
2025-06-30 22:14:46.162 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 22:14:46.162 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:46.162 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 22:14:46.163 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 教育(String)
2025-06-30 22:14:46.163 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==>  Preparing: select * from book where id in (select t.bookId from (select * from newproduct limit ?,?)as t )
2025-06-30 22:14:46.163 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:46.163 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select * from book where id in
         (select t.bookId from (select * from newproduct limit ?,?)as t ) ::: DataSources: slave
2025-06-30 22:14:46.163 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - ==> Parameters: 1(Integer), 14(Integer)
2025-06-30 22:14:46.164 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 22:14:46.165 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==>  Preparing: select * from booksort where upperName=?
2025-06-30 22:14:46.165 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:46.165 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: select * from booksort where upperName=? ::: DataSources: slave
2025-06-30 22:14:46.165 [http-nio-8080-exec-3] DEBUG c.h.store.mapper.BookMapper.getNewProductsByPage - <==      Total: 0
2025-06-30 22:14:46.165 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - ==> Parameters: 生活(String)
2025-06-30 22:14:46.166 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 22:14:46.166 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:46.166 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 22:14:46.167 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787121291005(String)
2025-06-30 22:14:46.167 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SortMapper.getSecondSortList - <==      Total: 2
2025-06-30 22:14:46.168 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 22:14:46.169 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 22:14:46.169 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:46.169 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 22:14:46.170 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111213826(String)
2025-06-30 22:14:46.171 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 22:14:46.172 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 22:14:46.172 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:46.172 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 22:14:46.172 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787111407010(String)
2025-06-30 22:14:46.173 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 22:14:46.174 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 22:14:46.174 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:46.174 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 22:14:46.174 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002214(String)
2025-06-30 22:14:46.176 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 22:14:46.176 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==>  Preparing: select imgSrc from bookimg where isbn=? limit 1
2025-06-30 22:14:46.176 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:46.176 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: select imgSrc from bookimg where isbn=? limit 1 ::: DataSources: slave
2025-06-30 22:14:46.177 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - ==> Parameters: 9787020002207(String)
2025-06-30 22:14:46.178 [http-nio-8080-exec-3] DEBUG com.huang.store.mapper.BookMapper.getBookCover - <==      Total: 1
2025-06-30 22:14:49.384 [http-nio-8080-exec-8] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 22:14:49.384 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:49.384 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 22:14:49.385 [http-nio-8080-exec-8] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 22:14:49.386 [http-nio-8080-exec-8] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 22:14:49.387 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:14:49.387 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:49.387 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:14:49.387 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 22:14:49.391 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 22:14:49.392 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:14:49.392 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:49.392 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:14:49.392 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 22:14:49.396 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:14:49.396 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:14:49.396 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:49.397 [http-nio-8080-exec-8] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:14:49.397 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 22:14:49.400 [http-nio-8080-exec-8] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:14:54.369 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByBookId - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.bookId = ? AND sg.status = 1 ORDER BY sg.createTime DESC
2025-06-30 22:14:54.370 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:54.370 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.bookId = ?
        AND sg.status = 1
        ORDER BY sg.createTime DESC ::: DataSources: slave
2025-06-30 22:14:54.374 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByBookId - ==> Parameters: 2(Integer)
2025-06-30 22:14:54.383 [http-nio-8080-exec-6] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByBookId - <==      Total: 2
2025-06-30 22:14:54.384 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.SpikeActivityMapper.getActivityById - ==>  Preparing: SELECT * FROM spikeActivity WHERE id = ?
2025-06-30 22:14:54.384 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:54.384 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity WHERE id = ? ::: DataSources: slave
2025-06-30 22:14:54.387 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.SpikeActivityMapper.getActivityById - ==> Parameters: 1(Long)
2025-06-30 22:14:54.389 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.SpikeActivityMapper.getActivityById - <==      Total: 1
2025-06-30 22:14:54.390 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.SpikeGoodsMapper.getSpikeGoodsDetail - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.id = ?
2025-06-30 22:14:54.390 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:54.390 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.id = ? ::: DataSources: slave
2025-06-30 22:14:54.391 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.SpikeGoodsMapper.getSpikeGoodsDetail - ==> Parameters: 2(Long)
2025-06-30 22:14:54.395 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.SpikeGoodsMapper.getSpikeGoodsDetail - <==      Total: 1
2025-06-30 22:14:54.396 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.SpikeOrderMapper.getUserPurchaseCount - ==>  Preparing: SELECT COALESCE(SUM(quantity), 0) FROM spikeOrder WHERE userAccount = ? AND spikeGoodsId = ? AND status IN (0, 1)
2025-06-30 22:14:54.396 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:54.396 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: SELECT COALESCE(SUM(quantity), 0)
        FROM spikeOrder 
        WHERE userAccount = ? 
        AND spikeGoodsId = ?
        AND status IN (0, 1) ::: DataSources: slave
2025-06-30 22:14:54.399 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.SpikeOrderMapper.getUserPurchaseCount - ==> Parameters: 56464ff@456.com(String), 2(Long)
2025-06-30 22:14:54.401 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.SpikeOrderMapper.getUserPurchaseCount - <==      Total: 1
2025-06-30 22:14:55.120 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SpikeGoodsMapper.reduceStock - ==>  Preparing: UPDATE spikeGoods SET spikeStock = spikeStock - ?, updateTime = NOW() WHERE id = ? AND spikeStock >= ?
2025-06-30 22:14:55.121 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:55.121 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: UPDATE spikeGoods 
        SET spikeStock = spikeStock - ?,
            updateTime = NOW()
        WHERE id = ? 
        AND spikeStock >= ? ::: DataSources: master
2025-06-30 22:14:55.126 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SpikeGoodsMapper.reduceStock - ==> Parameters: 1(Integer), 2(Long), 1(Integer)
2025-06-30 22:14:55.129 [http-nio-8080-exec-6] DEBUG c.huang.store.mapper.SpikeGoodsMapper.reduceStock - <==    Updates: 1
2025-06-30 22:14:55.129 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.modifyBookStock - ==>  Preparing: update book set stock=stock-? where id=? and stock>=?
2025-06-30 22:14:55.129 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:55.129 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: update book
            set stock=stock-?
                where id=? and stock>=? ::: DataSources: master
2025-06-30 22:14:55.129 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.modifyBookStock - ==> Parameters: 1(Integer), 2(Integer), 1(Integer)
2025-06-30 22:14:55.130 [http-nio-8080-exec-6] DEBUG com.huang.store.mapper.BookMapper.modifyBookStock - <==    Updates: 1
2025-06-30 22:14:55.131 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.SpikeGoodsMapper.updateSoldCount - ==>  Preparing: UPDATE spikeGoods SET soldCount = soldCount + ?, updateTime = NOW() WHERE id = ?
2025-06-30 22:14:55.131 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:55.131 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: UPDATE spikeGoods 
        SET soldCount = soldCount + ?,
            updateTime = NOW()
        WHERE id = ? ::: DataSources: master
2025-06-30 22:14:55.131 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.SpikeGoodsMapper.updateSoldCount - ==> Parameters: 1(Integer), 2(Long)
2025-06-30 22:14:55.132 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.SpikeGoodsMapper.updateSoldCount - <==    Updates: 1
2025-06-30 22:14:55.134 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.SpikeOrderMapper.insertSpikeOrder - ==>  Preparing: INSERT INTO spikeOrder ( orderId, spikeGoodsId, userAccount, quantity, spikePrice, totalAmount, status, payTime, cancelTime, expireTime, createTime, updateTime ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )
2025-06-30 22:14:55.135 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:55.135 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: INSERT INTO spikeOrder (
            orderId, spikeGoodsId, userAccount, quantity, spikePrice,
            totalAmount, status, payTime, cancelTime, expireTime,
            createTime, updateTime
        ) VALUES (
            ?, ?, ?, ?, ?,
            ?, ?, ?, ?, ?,
            ?, ?
        ) ::: DataSources: master
2025-06-30 22:14:55.312 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.SpikeOrderMapper.insertSpikeOrder - ==> Parameters: SPIKE1751292895132446(String), 2(Long), 56464ff@456.com(String), 1(Integer), 49.90(BigDecimal), 49.90(BigDecimal), 0(Integer), null, null, 2025-06-30T22:44:55.134837700(LocalDateTime), 2025-06-30T22:14:55.134837700(LocalDateTime), 2025-06-30T22:14:55.134837700(LocalDateTime)
2025-06-30 22:14:55.317 [http-nio-8080-exec-6] DEBUG c.h.store.mapper.SpikeOrderMapper.insertSpikeOrder - <==    Updates: 1
2025-06-30 22:14:55.330 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.SpikeRecordMapper.insertSpikeRecord - ==>  Preparing: INSERT INTO spikeRecord ( spikeGoodsId, userAccount, spikeTime, result, failReason, ipAddress, userAgent ) VALUES ( ?, ?, ?, ?, ?, ?, ? )
2025-06-30 22:14:55.330 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:55.330 [http-nio-8080-exec-6] INFO  ShardingSphere-SQL - SQL: INSERT INTO spikeRecord (
            spikeGoodsId, userAccount, spikeTime, result, 
            failReason, ipAddress, userAgent
        ) VALUES (
            ?, ?, ?, ?,
            ?, ?, ?
        ) ::: DataSources: master
2025-06-30 22:14:55.334 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.SpikeRecordMapper.insertSpikeRecord - ==> Parameters: 2(Long), 56464ff@456.com(String), 2025-06-30T22:14:55.330254600(LocalDateTime), 1(Integer), null, 0:0:0:0:0:0:0:1(String), Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0(String)
2025-06-30 22:14:55.338 [http-nio-8080-exec-6] DEBUG c.h.s.mapper.SpikeRecordMapper.insertSpikeRecord - <==    Updates: 1
2025-06-30 22:14:55.409 [http-nio-8080-exec-3] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 22:14:55.409 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:55.409 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 22:14:55.409 [http-nio-8080-exec-3] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 22:14:55.411 [http-nio-8080-exec-3] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 22:14:55.412 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:14:55.412 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:55.412 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:14:55.412 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 22:14:55.414 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 22:14:55.414 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:14:55.415 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:55.415 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:14:55.415 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 22:14:55.417 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:14:55.418 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:14:55.418 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:14:55.418 [http-nio-8080-exec-3] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:14:55.419 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 22:14:55.421 [http-nio-8080-exec-3] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:15:01.017 [http-nio-8080-exec-4] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 22:15:01.017 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:01.017 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 22:15:01.018 [http-nio-8080-exec-4] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 22:15:01.020 [http-nio-8080-exec-4] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 22:15:01.021 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:15:01.021 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:01.021 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:15:01.021 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 22:15:01.026 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 22:15:01.027 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:15:01.027 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:01.027 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:15:01.028 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 22:15:01.031 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:15:01.032 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:15:01.032 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:01.032 [http-nio-8080-exec-4] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:15:01.032 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 22:15:01.036 [http-nio-8080-exec-4] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:15:35.682 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByBookId - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.bookId = ? AND sg.status = 1 ORDER BY sg.createTime DESC
2025-06-30 22:15:35.682 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:35.682 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.bookId = ?
        AND sg.status = 1
        ORDER BY sg.createTime DESC ::: DataSources: slave
2025-06-30 22:15:35.682 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByBookId - ==> Parameters: 2(Integer)
2025-06-30 22:15:35.684 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByBookId - <==      Total: 2
2025-06-30 22:15:35.685 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeActivityMapper.getActivityById - ==>  Preparing: SELECT * FROM spikeActivity WHERE id = ?
2025-06-30 22:15:35.685 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:35.685 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity WHERE id = ? ::: DataSources: slave
2025-06-30 22:15:35.686 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeActivityMapper.getActivityById - ==> Parameters: 1(Long)
2025-06-30 22:15:35.688 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeActivityMapper.getActivityById - <==      Total: 1
2025-06-30 22:15:35.689 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeGoodsMapper.getSpikeGoodsDetail - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.id = ?
2025-06-30 22:15:35.689 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:35.689 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.id = ? ::: DataSources: slave
2025-06-30 22:15:35.689 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeGoodsMapper.getSpikeGoodsDetail - ==> Parameters: 2(Long)
2025-06-30 22:15:35.691 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeGoodsMapper.getSpikeGoodsDetail - <==      Total: 1
2025-06-30 22:15:35.691 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeOrderMapper.getUserPurchaseCount - ==>  Preparing: SELECT COALESCE(SUM(quantity), 0) FROM spikeOrder WHERE userAccount = ? AND spikeGoodsId = ? AND status IN (0, 1)
2025-06-30 22:15:35.691 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:35.691 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT COALESCE(SUM(quantity), 0)
        FROM spikeOrder 
        WHERE userAccount = ? 
        AND spikeGoodsId = ?
        AND status IN (0, 1) ::: DataSources: slave
2025-06-30 22:15:35.691 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeOrderMapper.getUserPurchaseCount - ==> Parameters: 56464ff@456.com(String), 2(Long)
2025-06-30 22:15:35.693 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeOrderMapper.getUserPurchaseCount - <==      Total: 1
2025-06-30 22:15:35.700 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeRecordMapper.insertSpikeRecord - ==>  Preparing: INSERT INTO spikeRecord ( spikeGoodsId, userAccount, spikeTime, result, failReason, ipAddress, userAgent ) VALUES ( ?, ?, ?, ?, ?, ?, ? )
2025-06-30 22:15:35.701 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:35.701 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: INSERT INTO spikeRecord (
            spikeGoodsId, userAccount, spikeTime, result, 
            failReason, ipAddress, userAgent
        ) VALUES (
            ?, ?, ?, ?,
            ?, ?, ?
        ) ::: DataSources: master
2025-06-30 22:15:35.702 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeRecordMapper.insertSpikeRecord - ==> Parameters: 2(Long), 56464ff@456.com(String), 2025-06-30T22:15:35.700118600(LocalDateTime), 0(Integer), 超出购买限制(String), 0:0:0:0:0:0:0:1(String), Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0(String)
2025-06-30 22:15:35.704 [http-nio-8080-exec-1] DEBUG c.h.s.mapper.SpikeRecordMapper.insertSpikeRecord - <==    Updates: 1
2025-06-30 22:15:51.779 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByBookId - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.bookId = ? AND sg.status = 1 ORDER BY sg.createTime DESC
2025-06-30 22:15:51.779 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:51.779 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.bookId = ?
        AND sg.status = 1
        ORDER BY sg.createTime DESC ::: DataSources: slave
2025-06-30 22:15:51.781 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByBookId - ==> Parameters: 1(Integer)
2025-06-30 22:15:51.783 [http-nio-8080-exec-2] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByBookId - <==      Total: 2
2025-06-30 22:15:51.783 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.SpikeActivityMapper.getActivityById - ==>  Preparing: SELECT * FROM spikeActivity WHERE id = ?
2025-06-30 22:15:51.783 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:51.783 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity WHERE id = ? ::: DataSources: slave
2025-06-30 22:15:51.783 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.SpikeActivityMapper.getActivityById - ==> Parameters: 1(Long)
2025-06-30 22:15:51.784 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.SpikeActivityMapper.getActivityById - <==      Total: 1
2025-06-30 22:15:51.784 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.SpikeGoodsMapper.getSpikeGoodsDetail - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.id = ?
2025-06-30 22:15:51.784 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:51.784 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.id = ? ::: DataSources: slave
2025-06-30 22:15:51.784 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.SpikeGoodsMapper.getSpikeGoodsDetail - ==> Parameters: 1(Long)
2025-06-30 22:15:51.786 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.SpikeGoodsMapper.getSpikeGoodsDetail - <==      Total: 1
2025-06-30 22:15:51.786 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.SpikeOrderMapper.getUserPurchaseCount - ==>  Preparing: SELECT COALESCE(SUM(quantity), 0) FROM spikeOrder WHERE userAccount = ? AND spikeGoodsId = ? AND status IN (0, 1)
2025-06-30 22:15:51.787 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:51.787 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: SELECT COALESCE(SUM(quantity), 0)
        FROM spikeOrder 
        WHERE userAccount = ? 
        AND spikeGoodsId = ?
        AND status IN (0, 1) ::: DataSources: slave
2025-06-30 22:15:51.787 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.SpikeOrderMapper.getUserPurchaseCount - ==> Parameters: 56464ff@456.com(String), 1(Long)
2025-06-30 22:15:51.789 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.SpikeOrderMapper.getUserPurchaseCount - <==      Total: 1
2025-06-30 22:15:51.792 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SpikeGoodsMapper.reduceStock - ==>  Preparing: UPDATE spikeGoods SET spikeStock = spikeStock - ?, updateTime = NOW() WHERE id = ? AND spikeStock >= ?
2025-06-30 22:15:51.793 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:51.793 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: UPDATE spikeGoods 
        SET spikeStock = spikeStock - ?,
            updateTime = NOW()
        WHERE id = ? 
        AND spikeStock >= ? ::: DataSources: master
2025-06-30 22:15:51.794 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SpikeGoodsMapper.reduceStock - ==> Parameters: 1(Integer), 1(Long), 1(Integer)
2025-06-30 22:15:51.796 [http-nio-8080-exec-2] DEBUG c.huang.store.mapper.SpikeGoodsMapper.reduceStock - <==    Updates: 1
2025-06-30 22:15:51.796 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.modifyBookStock - ==>  Preparing: update book set stock=stock-? where id=? and stock>=?
2025-06-30 22:15:51.796 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:51.796 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: update book
            set stock=stock-?
                where id=? and stock>=? ::: DataSources: master
2025-06-30 22:15:51.796 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.modifyBookStock - ==> Parameters: 1(Integer), 1(Integer), 1(Integer)
2025-06-30 22:15:51.797 [http-nio-8080-exec-2] DEBUG com.huang.store.mapper.BookMapper.modifyBookStock - <==    Updates: 1
2025-06-30 22:15:51.797 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.SpikeGoodsMapper.updateSoldCount - ==>  Preparing: UPDATE spikeGoods SET soldCount = soldCount + ?, updateTime = NOW() WHERE id = ?
2025-06-30 22:15:51.797 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:51.797 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: UPDATE spikeGoods 
        SET soldCount = soldCount + ?,
            updateTime = NOW()
        WHERE id = ? ::: DataSources: master
2025-06-30 22:15:51.797 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.SpikeGoodsMapper.updateSoldCount - ==> Parameters: 1(Integer), 1(Long)
2025-06-30 22:15:51.798 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.SpikeGoodsMapper.updateSoldCount - <==    Updates: 1
2025-06-30 22:15:51.798 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.SpikeOrderMapper.insertSpikeOrder - ==>  Preparing: INSERT INTO spikeOrder ( orderId, spikeGoodsId, userAccount, quantity, spikePrice, totalAmount, status, payTime, cancelTime, expireTime, createTime, updateTime ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )
2025-06-30 22:15:51.798 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:51.798 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: INSERT INTO spikeOrder (
            orderId, spikeGoodsId, userAccount, quantity, spikePrice,
            totalAmount, status, payTime, cancelTime, expireTime,
            createTime, updateTime
        ) VALUES (
            ?, ?, ?, ?, ?,
            ?, ?, ?, ?, ?,
            ?, ?
        ) ::: DataSources: master
2025-06-30 22:15:51.799 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.SpikeOrderMapper.insertSpikeOrder - ==> Parameters: SPIKE1751292951798400(String), 1(Long), 56464ff@456.com(String), 1(Integer), 19.90(BigDecimal), 19.90(BigDecimal), 0(Integer), null, null, 2025-06-30T22:45:51.798304600(LocalDateTime), 2025-06-30T22:15:51.798304600(LocalDateTime), 2025-06-30T22:15:51.798304600(LocalDateTime)
2025-06-30 22:15:51.802 [http-nio-8080-exec-2] DEBUG c.h.store.mapper.SpikeOrderMapper.insertSpikeOrder - <==    Updates: 1
2025-06-30 22:15:51.805 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.SpikeRecordMapper.insertSpikeRecord - ==>  Preparing: INSERT INTO spikeRecord ( spikeGoodsId, userAccount, spikeTime, result, failReason, ipAddress, userAgent ) VALUES ( ?, ?, ?, ?, ?, ?, ? )
2025-06-30 22:15:51.805 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:51.805 [http-nio-8080-exec-2] INFO  ShardingSphere-SQL - SQL: INSERT INTO spikeRecord (
            spikeGoodsId, userAccount, spikeTime, result, 
            failReason, ipAddress, userAgent
        ) VALUES (
            ?, ?, ?, ?,
            ?, ?, ?
        ) ::: DataSources: master
2025-06-30 22:15:51.806 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.SpikeRecordMapper.insertSpikeRecord - ==> Parameters: 1(Long), 56464ff@456.com(String), 2025-06-30T22:15:51.805118200(LocalDateTime), 1(Integer), null, 0:0:0:0:0:0:0:1(String), Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0(String)
2025-06-30 22:15:51.809 [http-nio-8080-exec-2] DEBUG c.h.s.mapper.SpikeRecordMapper.insertSpikeRecord - <==    Updates: 1
2025-06-30 22:15:51.833 [http-nio-8080-exec-9] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 22:15:51.833 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:51.833 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 22:15:51.833 [http-nio-8080-exec-9] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 22:15:51.837 [http-nio-8080-exec-9] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 22:15:51.838 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:15:51.838 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:51.838 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:15:51.838 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 22:15:51.839 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 22:15:51.840 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:15:51.840 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:51.840 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:15:51.840 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 22:15:51.842 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:15:51.843 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:15:51.843 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:51.843 [http-nio-8080-exec-9] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:15:51.843 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 22:15:51.845 [http-nio-8080-exec-9] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:15:55.324 [http-nio-8080-exec-5] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 22:15:55.324 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:55.324 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 22:15:55.324 [http-nio-8080-exec-5] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 22:15:55.327 [http-nio-8080-exec-5] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 22:15:55.328 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:15:55.328 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:55.328 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:15:55.328 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 22:15:55.332 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 22:15:55.333 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:15:55.333 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:55.333 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:15:55.333 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 22:15:55.338 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:15:55.339 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:15:55.339 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:15:55.339 [http-nio-8080-exec-5] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:15:55.340 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 22:15:55.342 [http-nio-8080-exec-5] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:18:46.358 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closing ...
2025-06-30 22:18:46.371 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-06-30 22:18:46.372 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closing ...
2025-06-30 22:18:46.374 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
2025-06-30 22:18:49.833 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-06-30 22:18:49.845 [restartedMain] INFO  com.huang.store.StoreApplication - Starting StoreApplication using Java 17.0.8 on djj with PID 26288 (D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server\target\classes started by 86131 in D:\project_home\software-project\bookStore-Springboot-Vue\bookstore_server)
2025-06-30 22:18:49.845 [restartedMain] DEBUG com.huang.store.StoreApplication - Running with Spring Boot v2.7.18, Spring v5.3.31
2025-06-30 22:18:49.846 [restartedMain] INFO  com.huang.store.StoreApplication - The following 1 profile is active: "dev"
2025-06-30 22:18:49.957 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 22:18:49.957 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 22:18:50.379 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 22:18:50.380 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 22:18:50.400 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-30 22:18:50.570 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validationConfig' of type [com.huang.store.config.ValidationConfig$$EnhancerBySpringCGLIB$$f87192e6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 22:18:50.581 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'validator' of type [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-06-30 22:18:50.883 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-06-30 22:18:50.884 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [2.0.7] using APR version [1.7.4].
2025-06-30 22:18:50.884 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2025-06-30 22:18:50.884 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2025-06-30 22:18:50.887 [restartedMain] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 3.0.13 30 Jan 2024]
2025-06-30 22:18:50.892 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 22:18:50.893 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 22:18:50.893 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-06-30 22:18:50.937 [restartedMain] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 22:18:50.937 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 980 ms
2025-06-30 22:18:50.940 [restartedMain] INFO  com.huang.store.configure.DruidConfiguration - init Druid Servlet Configuration 
2025-06-30 22:18:51.563 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2025-06-30 22:18:51.590 [restartedMain] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} inited
2025-06-30 22:18:51.914 [restartedMain] DEBUG c.h.store.security.JwtAuthenticationTokenFilter - Filter 'jwtAuthenticationTokenFilter' configured for use
2025-06-30 22:18:51.914 [restartedMain] DEBUG c.huang.store.security.CustomAuthenticationFilter - Filter 'CAFilter' configured for use
2025-06-30 22:18:52.324 [restartedMain] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-30 22:18:52.433 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@79fe815c, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@253b52b1, org.springframework.security.web.context.SecurityContextPersistenceFilter@1226a371, org.springframework.security.web.header.HeaderWriterFilter@6502289f, org.springframework.web.filter.CorsFilter@450d1bf7, org.springframework.security.web.authentication.logout.LogoutFilter@15842360, com.huang.store.security.JwtAuthenticationTokenFilter@63bafedc, com.huang.store.security.CustomAuthenticationFilter@290df954, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@370f41bd, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@130d2736, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5b4addca, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3f058d1f, org.springframework.security.web.session.SessionManagementFilter@5308d6ee, org.springframework.security.web.access.ExceptionTranslationFilter@4266bc76, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@279c2d14]
2025-06-30 22:18:52.659 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35730
2025-06-30 22:18:52.673 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 22:18:52.686 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
2025-06-30 22:18:52.693 [restartedMain] INFO  com.huang.store.StoreApplication - Started StoreApplication in 3.169 seconds (JVM running for 3.642)
2025-06-30 22:18:53.745 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 22:18:53.745 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 22:18:53.748 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-06-30 22:18:53.852 [http-nio-8080-exec-1] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==>  Preparing: SELECT * FROM spikeActivity ORDER BY startTime ASC
2025-06-30 22:18:53.865 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:18:53.866 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT * FROM spikeActivity 
        ORDER BY startTime ASC ::: DataSources: slave
2025-06-30 22:18:53.887 [http-nio-8080-exec-1] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - ==> Parameters: 
2025-06-30 22:18:53.903 [http-nio-8080-exec-1] DEBUG c.h.s.m.S.getAllActivitiesOrderByTime - <==      Total: 3
2025-06-30 22:18:53.906 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:18:53.907 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:18:53.907 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:18:53.934 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 1(Long)
2025-06-30 22:18:53.939 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 3
2025-06-30 22:18:53.941 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:18:53.941 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:18:53.941 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:18:53.942 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 2(Long)
2025-06-30 22:18:53.947 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:18:53.948 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==>  Preparing: SELECT sg.*, b.id as book_id, b.bookName, b.author, b.publish, b.isbn, b.price, b.marketPrice, b.description, b.stock FROM spikeGoods sg LEFT JOIN book b ON sg.bookId = b.id WHERE sg.activityId = ? AND sg.status = 1 ORDER BY sg.sortOrder ASC
2025-06-30 22:18:53.948 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - Rule Type: master-slave
2025-06-30 22:18:53.948 [http-nio-8080-exec-1] INFO  ShardingSphere-SQL - SQL: SELECT 
            sg.*,
            b.id as book_id,
            b.bookName,
            b.author,
            b.publish,
            b.isbn,
            b.price,
            b.marketPrice,
            b.description,
            b.stock
        FROM spikeGoods sg
        LEFT JOIN book b ON sg.bookId = b.id
        WHERE sg.activityId = ?
        AND sg.status = 1
        ORDER BY sg.sortOrder ASC ::: DataSources: slave
2025-06-30 22:18:53.949 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - ==> Parameters: 3(Long)
2025-06-30 22:18:53.952 [http-nio-8080-exec-1] DEBUG c.h.s.m.SpikeGoodsMapper.getSpikeGoodsByActivity - <==      Total: 2
2025-06-30 22:19:17.871 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closing ...
2025-06-30 22:19:17.873 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2025-06-30 22:19:17.873 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closing ...
2025-06-30 22:19:17.874 [SpringApplicationShutdownHook] INFO  com.alibaba.druid.pool.DruidDataSource - {dataSource-2} closed
